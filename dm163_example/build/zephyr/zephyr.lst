
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 3e 00 20 d9 b9 00 08 b1 61 01 08 ad b9 00 08     .>. .....a......
 8000010:	ad b9 00 08 ad b9 00 08 ad b9 00 08 00 00 00 00     ................
	...
 800002c:	4d b1 00 08 ad b9 00 08 00 00 00 00 b9 b0 00 08     M...............
 800003c:	f9 e5 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000050:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000060:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000070:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000080:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000090:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 80000a0:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 80000b0:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 80000c0:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 80000d0:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 80000e0:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 80000f0:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000100:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000110:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000120:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000130:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000140:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000150:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000160:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000170:	d9 b2 00 08 d9 b2 00 08 d9 b2 00 08 d9 b2 00 08     ................
 8000180:	d9 b2 00 08 d9 b2 00 08                             ........

Disassembly of section text:

080001c0 <strlen>:
 80001c0:	f890 f000 	pld	[r0]
 80001c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80001c8:	f020 0107 	bic.w	r1, r0, #7
 80001cc:	f06f 0c00 	mvn.w	ip, #0
 80001d0:	f010 0407 	ands.w	r4, r0, #7
 80001d4:	f891 f020 	pld	[r1, #32]
 80001d8:	f040 8049 	bne.w	800026e <strlen+0xae>
 80001dc:	f04f 0400 	mov.w	r4, #0
 80001e0:	f06f 0007 	mvn.w	r0, #7
 80001e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80001e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80001ec:	f100 0008 	add.w	r0, r0, #8
 80001f0:	fa82 f24c 	uadd8	r2, r2, ip
 80001f4:	faa4 f28c 	sel	r2, r4, ip
 80001f8:	fa83 f34c 	uadd8	r3, r3, ip
 80001fc:	faa2 f38c 	sel	r3, r2, ip
 8000200:	bb4b      	cbnz	r3, 8000256 <strlen+0x96>
 8000202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000206:	fa82 f24c 	uadd8	r2, r2, ip
 800020a:	f100 0008 	add.w	r0, r0, #8
 800020e:	faa4 f28c 	sel	r2, r4, ip
 8000212:	fa83 f34c 	uadd8	r3, r3, ip
 8000216:	faa2 f38c 	sel	r3, r2, ip
 800021a:	b9e3      	cbnz	r3, 8000256 <strlen+0x96>
 800021c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000220:	fa82 f24c 	uadd8	r2, r2, ip
 8000224:	f100 0008 	add.w	r0, r0, #8
 8000228:	faa4 f28c 	sel	r2, r4, ip
 800022c:	fa83 f34c 	uadd8	r3, r3, ip
 8000230:	faa2 f38c 	sel	r3, r2, ip
 8000234:	b97b      	cbnz	r3, 8000256 <strlen+0x96>
 8000236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800023a:	f101 0120 	add.w	r1, r1, #32
 800023e:	fa82 f24c 	uadd8	r2, r2, ip
 8000242:	f100 0008 	add.w	r0, r0, #8
 8000246:	faa4 f28c 	sel	r2, r4, ip
 800024a:	fa83 f34c 	uadd8	r3, r3, ip
 800024e:	faa2 f38c 	sel	r3, r2, ip
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0c6      	beq.n	80001e4 <strlen+0x24>
 8000256:	2a00      	cmp	r2, #0
 8000258:	bf04      	itt	eq
 800025a:	3004      	addeq	r0, #4
 800025c:	461a      	moveq	r2, r3
 800025e:	ba12      	rev	r2, r2
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800026c:	4770      	bx	lr
 800026e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000272:	f004 0503 	and.w	r5, r4, #3
 8000276:	f1c4 0000 	rsb	r0, r4, #0
 800027a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800027e:	f014 0f04 	tst.w	r4, #4
 8000282:	f891 f040 	pld	[r1, #64]	; 0x40
 8000286:	fa0c f505 	lsl.w	r5, ip, r5
 800028a:	ea62 0205 	orn	r2, r2, r5
 800028e:	bf1c      	itt	ne
 8000290:	ea63 0305 	ornne	r3, r3, r5
 8000294:	4662      	movne	r2, ip
 8000296:	f04f 0400 	mov.w	r4, #0
 800029a:	e7a9      	b.n	80001f0 <strlen+0x30>
 800029c:	0000      	movs	r0, r0
 800029e:	0000      	movs	r0, r0
 80002a0:	eba2 0003 	sub.w	r0, r2, r3
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop

080002a8 <strcmp>:
 80002a8:	7802      	ldrb	r2, [r0, #0]
 80002aa:	780b      	ldrb	r3, [r1, #0]
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d1f5      	bne.n	80002a0 <strlen+0xe0>
 80002b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80002b8:	ea40 0401 	orr.w	r4, r0, r1
 80002bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80002c0:	f06f 0c00 	mvn.w	ip, #0
 80002c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80002c8:	b312      	cbz	r2, 8000310 <strcmp+0x68>
 80002ca:	ea80 0401 	eor.w	r4, r0, r1
 80002ce:	f014 0f07 	tst.w	r4, #7
 80002d2:	d16a      	bne.n	80003aa <strcmp+0x102>
 80002d4:	f000 0407 	and.w	r4, r0, #7
 80002d8:	f020 0007 	bic.w	r0, r0, #7
 80002dc:	f004 0503 	and.w	r5, r4, #3
 80002e0:	f021 0107 	bic.w	r1, r1, #7
 80002e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80002e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80002ec:	f014 0f04 	tst.w	r4, #4
 80002f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80002f4:	fa0c f405 	lsl.w	r4, ip, r5
 80002f8:	ea62 0204 	orn	r2, r2, r4
 80002fc:	ea66 0604 	orn	r6, r6, r4
 8000300:	d00a      	beq.n	8000318 <strcmp+0x70>
 8000302:	ea63 0304 	orn	r3, r3, r4
 8000306:	4662      	mov	r2, ip
 8000308:	ea67 0704 	orn	r7, r7, r4
 800030c:	4666      	mov	r6, ip
 800030e:	e003      	b.n	8000318 <strcmp+0x70>
 8000310:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000314:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000318:	fa82 f54c 	uadd8	r5, r2, ip
 800031c:	ea82 0406 	eor.w	r4, r2, r6
 8000320:	faa4 f48c 	sel	r4, r4, ip
 8000324:	bb6c      	cbnz	r4, 8000382 <strcmp+0xda>
 8000326:	fa83 f54c 	uadd8	r5, r3, ip
 800032a:	ea83 0507 	eor.w	r5, r3, r7
 800032e:	faa5 f58c 	sel	r5, r5, ip
 8000332:	b995      	cbnz	r5, 800035a <strcmp+0xb2>
 8000334:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000338:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800033c:	fa82 f54c 	uadd8	r5, r2, ip
 8000340:	ea82 0406 	eor.w	r4, r2, r6
 8000344:	faa4 f48c 	sel	r4, r4, ip
 8000348:	fa83 f54c 	uadd8	r5, r3, ip
 800034c:	ea83 0507 	eor.w	r5, r3, r7
 8000350:	faa5 f58c 	sel	r5, r5, ip
 8000354:	4325      	orrs	r5, r4
 8000356:	d0db      	beq.n	8000310 <strcmp+0x68>
 8000358:	b99c      	cbnz	r4, 8000382 <strcmp+0xda>
 800035a:	ba2d      	rev	r5, r5
 800035c:	fab5 f485 	clz	r4, r5
 8000360:	f024 0407 	bic.w	r4, r4, #7
 8000364:	fa27 f104 	lsr.w	r1, r7, r4
 8000368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800036c:	fa23 f304 	lsr.w	r3, r3, r4
 8000370:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000374:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000378:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800037c:	eba0 0001 	sub.w	r0, r0, r1
 8000380:	4770      	bx	lr
 8000382:	ba24      	rev	r4, r4
 8000384:	fab4 f484 	clz	r4, r4
 8000388:	f024 0407 	bic.w	r4, r4, #7
 800038c:	fa26 f104 	lsr.w	r1, r6, r4
 8000390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000394:	fa22 f204 	lsr.w	r2, r2, r4
 8000398:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800039c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80003a4:	eba0 0001 	sub.w	r0, r0, r1
 80003a8:	4770      	bx	lr
 80003aa:	f014 0f03 	tst.w	r4, #3
 80003ae:	d13c      	bne.n	800042a <strcmp+0x182>
 80003b0:	f010 0403 	ands.w	r4, r0, #3
 80003b4:	d128      	bne.n	8000408 <strcmp+0x160>
 80003b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80003ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80003be:	fa82 f54c 	uadd8	r5, r2, ip
 80003c2:	ea82 0503 	eor.w	r5, r2, r3
 80003c6:	faa5 f58c 	sel	r5, r5, ip
 80003ca:	b95d      	cbnz	r5, 80003e4 <strcmp+0x13c>
 80003cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80003d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80003d4:	fa82 f54c 	uadd8	r5, r2, ip
 80003d8:	ea82 0503 	eor.w	r5, r2, r3
 80003dc:	faa5 f58c 	sel	r5, r5, ip
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	d0e8      	beq.n	80003b6 <strcmp+0x10e>
 80003e4:	ba2d      	rev	r5, r5
 80003e6:	fab5 f485 	clz	r4, r5
 80003ea:	f024 0407 	bic.w	r4, r4, #7
 80003ee:	fa23 f104 	lsr.w	r1, r3, r4
 80003f2:	fa22 f204 	lsr.w	r2, r2, r4
 80003f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80003fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000402:	eba0 0001 	sub.w	r0, r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800040c:	f020 0003 	bic.w	r0, r0, #3
 8000410:	f850 2b08 	ldr.w	r2, [r0], #8
 8000414:	f021 0103 	bic.w	r1, r1, #3
 8000418:	f851 3b08 	ldr.w	r3, [r1], #8
 800041c:	fa0c f404 	lsl.w	r4, ip, r4
 8000420:	ea62 0204 	orn	r2, r2, r4
 8000424:	ea63 0304 	orn	r3, r3, r4
 8000428:	e7c9      	b.n	80003be <strcmp+0x116>
 800042a:	f010 0403 	ands.w	r4, r0, #3
 800042e:	d01a      	beq.n	8000466 <strcmp+0x1be>
 8000430:	eba1 0104 	sub.w	r1, r1, r4
 8000434:	f020 0003 	bic.w	r0, r0, #3
 8000438:	07e4      	lsls	r4, r4, #31
 800043a:	f850 2b04 	ldr.w	r2, [r0], #4
 800043e:	d006      	beq.n	800044e <strcmp+0x1a6>
 8000440:	d20f      	bcs.n	8000462 <strcmp+0x1ba>
 8000442:	788b      	ldrb	r3, [r1, #2]
 8000444:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	d106      	bne.n	800045a <strcmp+0x1b2>
 800044c:	b12b      	cbz	r3, 800045a <strcmp+0x1b2>
 800044e:	78cb      	ldrb	r3, [r1, #3]
 8000450:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	d100      	bne.n	800045a <strcmp+0x1b2>
 8000458:	b91b      	cbnz	r3, 8000462 <strcmp+0x1ba>
 800045a:	4620      	mov	r0, r4
 800045c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000460:	4770      	bx	lr
 8000462:	f101 0104 	add.w	r1, r1, #4
 8000466:	f850 2b04 	ldr.w	r2, [r0], #4
 800046a:	07cc      	lsls	r4, r1, #31
 800046c:	f021 0103 	bic.w	r1, r1, #3
 8000470:	f851 3b04 	ldr.w	r3, [r1], #4
 8000474:	d848      	bhi.n	8000508 <strcmp+0x260>
 8000476:	d224      	bcs.n	80004c2 <strcmp+0x21a>
 8000478:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800047c:	fa82 f54c 	uadd8	r5, r2, ip
 8000480:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000484:	faa5 f58c 	sel	r5, r5, ip
 8000488:	d10a      	bne.n	80004a0 <strcmp+0x1f8>
 800048a:	b965      	cbnz	r5, 80004a6 <strcmp+0x1fe>
 800048c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000490:	ea84 0402 	eor.w	r4, r4, r2
 8000494:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000498:	d10e      	bne.n	80004b8 <strcmp+0x210>
 800049a:	f850 2b04 	ldr.w	r2, [r0], #4
 800049e:	e7eb      	b.n	8000478 <strcmp+0x1d0>
 80004a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80004a4:	e055      	b.n	8000552 <strcmp+0x2aa>
 80004a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80004aa:	d14d      	bne.n	8000548 <strcmp+0x2a0>
 80004ac:	7808      	ldrb	r0, [r1, #0]
 80004ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004b2:	f1c0 0000 	rsb	r0, r0, #0
 80004b6:	4770      	bx	lr
 80004b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80004c0:	e047      	b.n	8000552 <strcmp+0x2aa>
 80004c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80004c6:	fa82 f54c 	uadd8	r5, r2, ip
 80004ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	d10a      	bne.n	80004ea <strcmp+0x242>
 80004d4:	b965      	cbnz	r5, 80004f0 <strcmp+0x248>
 80004d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80004da:	ea84 0402 	eor.w	r4, r4, r2
 80004de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80004e2:	d10c      	bne.n	80004fe <strcmp+0x256>
 80004e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80004e8:	e7eb      	b.n	80004c2 <strcmp+0x21a>
 80004ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80004ee:	e030      	b.n	8000552 <strcmp+0x2aa>
 80004f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80004f4:	d128      	bne.n	8000548 <strcmp+0x2a0>
 80004f6:	880b      	ldrh	r3, [r1, #0]
 80004f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80004fc:	e029      	b.n	8000552 <strcmp+0x2aa>
 80004fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000502:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000506:	e024      	b.n	8000552 <strcmp+0x2aa>
 8000508:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800050c:	fa82 f54c 	uadd8	r5, r2, ip
 8000510:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000514:	faa5 f58c 	sel	r5, r5, ip
 8000518:	d10a      	bne.n	8000530 <strcmp+0x288>
 800051a:	b965      	cbnz	r5, 8000536 <strcmp+0x28e>
 800051c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000520:	ea84 0402 	eor.w	r4, r4, r2
 8000524:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000528:	d109      	bne.n	800053e <strcmp+0x296>
 800052a:	f850 2b04 	ldr.w	r2, [r0], #4
 800052e:	e7eb      	b.n	8000508 <strcmp+0x260>
 8000530:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000534:	e00d      	b.n	8000552 <strcmp+0x2aa>
 8000536:	f015 0fff 	tst.w	r5, #255	; 0xff
 800053a:	d105      	bne.n	8000548 <strcmp+0x2a0>
 800053c:	680b      	ldr	r3, [r1, #0]
 800053e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000546:	e004      	b.n	8000552 <strcmp+0x2aa>
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000550:	4770      	bx	lr
 8000552:	ba12      	rev	r2, r2
 8000554:	ba1b      	rev	r3, r3
 8000556:	fa82 f44c 	uadd8	r4, r2, ip
 800055a:	ea82 0403 	eor.w	r4, r2, r3
 800055e:	faa4 f58c 	sel	r5, r4, ip
 8000562:	fab5 f485 	clz	r4, r5
 8000566:	fa02 f204 	lsl.w	r2, r2, r4
 800056a:	fa03 f304 	lsl.w	r3, r3, r4
 800056e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000572:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000576:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800057a:	4770      	bx	lr
 800057c:	0000      	movs	r0, r0
	...

08000580 <memchr>:
 8000580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000584:	2a10      	cmp	r2, #16
 8000586:	db2b      	blt.n	80005e0 <memchr+0x60>
 8000588:	f010 0f07 	tst.w	r0, #7
 800058c:	d008      	beq.n	80005a0 <memchr+0x20>
 800058e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000592:	3a01      	subs	r2, #1
 8000594:	428b      	cmp	r3, r1
 8000596:	d02d      	beq.n	80005f4 <memchr+0x74>
 8000598:	f010 0f07 	tst.w	r0, #7
 800059c:	b342      	cbz	r2, 80005f0 <memchr+0x70>
 800059e:	d1f6      	bne.n	800058e <memchr+0xe>
 80005a0:	b4f0      	push	{r4, r5, r6, r7}
 80005a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80005a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80005aa:	f022 0407 	bic.w	r4, r2, #7
 80005ae:	f07f 0700 	mvns.w	r7, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80005b8:	3c08      	subs	r4, #8
 80005ba:	ea85 0501 	eor.w	r5, r5, r1
 80005be:	ea86 0601 	eor.w	r6, r6, r1
 80005c2:	fa85 f547 	uadd8	r5, r5, r7
 80005c6:	faa3 f587 	sel	r5, r3, r7
 80005ca:	fa86 f647 	uadd8	r6, r6, r7
 80005ce:	faa5 f687 	sel	r6, r5, r7
 80005d2:	b98e      	cbnz	r6, 80005f8 <memchr+0x78>
 80005d4:	d1ee      	bne.n	80005b4 <memchr+0x34>
 80005d6:	bcf0      	pop	{r4, r5, r6, r7}
 80005d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80005dc:	f002 0207 	and.w	r2, r2, #7
 80005e0:	b132      	cbz	r2, 80005f0 <memchr+0x70>
 80005e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005e6:	3a01      	subs	r2, #1
 80005e8:	ea83 0301 	eor.w	r3, r3, r1
 80005ec:	b113      	cbz	r3, 80005f4 <memchr+0x74>
 80005ee:	d1f8      	bne.n	80005e2 <memchr+0x62>
 80005f0:	2000      	movs	r0, #0
 80005f2:	4770      	bx	lr
 80005f4:	3801      	subs	r0, #1
 80005f6:	4770      	bx	lr
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	bf06      	itte	eq
 80005fc:	4635      	moveq	r5, r6
 80005fe:	3803      	subeq	r0, #3
 8000600:	3807      	subne	r0, #7
 8000602:	f015 0f01 	tst.w	r5, #1
 8000606:	d107      	bne.n	8000618 <memchr+0x98>
 8000608:	3001      	adds	r0, #1
 800060a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800060e:	bf02      	ittt	eq
 8000610:	3001      	addeq	r0, #1
 8000612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000616:	3001      	addeq	r0, #1
 8000618:	bcf0      	pop	{r4, r5, r6, r7}
 800061a:	3801      	subs	r0, #1
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_drsub>:
 8000620:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000624:	e002      	b.n	800062c <__adddf3>
 8000626:	bf00      	nop

08000628 <__aeabi_dsub>:
 8000628:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800062c <__adddf3>:
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000632:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000636:	ea94 0f05 	teq	r4, r5
 800063a:	bf08      	it	eq
 800063c:	ea90 0f02 	teqeq	r0, r2
 8000640:	bf1f      	itttt	ne
 8000642:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000646:	ea55 0c02 	orrsne.w	ip, r5, r2
 800064a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800064e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000652:	f000 80e2 	beq.w	800081a <__adddf3+0x1ee>
 8000656:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800065a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800065e:	bfb8      	it	lt
 8000660:	426d      	neglt	r5, r5
 8000662:	dd0c      	ble.n	800067e <__adddf3+0x52>
 8000664:	442c      	add	r4, r5
 8000666:	ea80 0202 	eor.w	r2, r0, r2
 800066a:	ea81 0303 	eor.w	r3, r1, r3
 800066e:	ea82 0000 	eor.w	r0, r2, r0
 8000672:	ea83 0101 	eor.w	r1, r3, r1
 8000676:	ea80 0202 	eor.w	r2, r0, r2
 800067a:	ea81 0303 	eor.w	r3, r1, r3
 800067e:	2d36      	cmp	r5, #54	; 0x36
 8000680:	bf88      	it	hi
 8000682:	bd30      	pophi	{r4, r5, pc}
 8000684:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000688:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800068c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000690:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000694:	d002      	beq.n	800069c <__adddf3+0x70>
 8000696:	4240      	negs	r0, r0
 8000698:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80006a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80006a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80006a8:	d002      	beq.n	80006b0 <__adddf3+0x84>
 80006aa:	4252      	negs	r2, r2
 80006ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006b0:	ea94 0f05 	teq	r4, r5
 80006b4:	f000 80a7 	beq.w	8000806 <__adddf3+0x1da>
 80006b8:	f1a4 0401 	sub.w	r4, r4, #1
 80006bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80006c0:	db0d      	blt.n	80006de <__adddf3+0xb2>
 80006c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80006c6:	fa22 f205 	lsr.w	r2, r2, r5
 80006ca:	1880      	adds	r0, r0, r2
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80006d4:	1880      	adds	r0, r0, r2
 80006d6:	fa43 f305 	asr.w	r3, r3, r5
 80006da:	4159      	adcs	r1, r3
 80006dc:	e00e      	b.n	80006fc <__adddf3+0xd0>
 80006de:	f1a5 0520 	sub.w	r5, r5, #32
 80006e2:	f10e 0e20 	add.w	lr, lr, #32
 80006e6:	2a01      	cmp	r2, #1
 80006e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006ec:	bf28      	it	cs
 80006ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006f2:	fa43 f305 	asr.w	r3, r3, r5
 80006f6:	18c0      	adds	r0, r0, r3
 80006f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000700:	d507      	bpl.n	8000712 <__adddf3+0xe6>
 8000702:	f04f 0e00 	mov.w	lr, #0
 8000706:	f1dc 0c00 	rsbs	ip, ip, #0
 800070a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800070e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000712:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000716:	d31b      	bcc.n	8000750 <__adddf3+0x124>
 8000718:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800071c:	d30c      	bcc.n	8000738 <__adddf3+0x10c>
 800071e:	0849      	lsrs	r1, r1, #1
 8000720:	ea5f 0030 	movs.w	r0, r0, rrx
 8000724:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000728:	f104 0401 	add.w	r4, r4, #1
 800072c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000730:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000734:	f080 809a 	bcs.w	800086c <__adddf3+0x240>
 8000738:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	ea41 0105 	orr.w	r1, r1, r5
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000754:	4140      	adcs	r0, r0
 8000756:	eb41 0101 	adc.w	r1, r1, r1
 800075a:	3c01      	subs	r4, #1
 800075c:	bf28      	it	cs
 800075e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000762:	d2e9      	bcs.n	8000738 <__adddf3+0x10c>
 8000764:	f091 0f00 	teq	r1, #0
 8000768:	bf04      	itt	eq
 800076a:	4601      	moveq	r1, r0
 800076c:	2000      	moveq	r0, #0
 800076e:	fab1 f381 	clz	r3, r1
 8000772:	bf08      	it	eq
 8000774:	3320      	addeq	r3, #32
 8000776:	f1a3 030b 	sub.w	r3, r3, #11
 800077a:	f1b3 0220 	subs.w	r2, r3, #32
 800077e:	da0c      	bge.n	800079a <__adddf3+0x16e>
 8000780:	320c      	adds	r2, #12
 8000782:	dd08      	ble.n	8000796 <__adddf3+0x16a>
 8000784:	f102 0c14 	add.w	ip, r2, #20
 8000788:	f1c2 020c 	rsb	r2, r2, #12
 800078c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000790:	fa21 f102 	lsr.w	r1, r1, r2
 8000794:	e00c      	b.n	80007b0 <__adddf3+0x184>
 8000796:	f102 0214 	add.w	r2, r2, #20
 800079a:	bfd8      	it	le
 800079c:	f1c2 0c20 	rsble	ip, r2, #32
 80007a0:	fa01 f102 	lsl.w	r1, r1, r2
 80007a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007a8:	bfdc      	itt	le
 80007aa:	ea41 010c 	orrle.w	r1, r1, ip
 80007ae:	4090      	lslle	r0, r2
 80007b0:	1ae4      	subs	r4, r4, r3
 80007b2:	bfa2      	ittt	ge
 80007b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80007b8:	4329      	orrge	r1, r5
 80007ba:	bd30      	popge	{r4, r5, pc}
 80007bc:	ea6f 0404 	mvn.w	r4, r4
 80007c0:	3c1f      	subs	r4, #31
 80007c2:	da1c      	bge.n	80007fe <__adddf3+0x1d2>
 80007c4:	340c      	adds	r4, #12
 80007c6:	dc0e      	bgt.n	80007e6 <__adddf3+0x1ba>
 80007c8:	f104 0414 	add.w	r4, r4, #20
 80007cc:	f1c4 0220 	rsb	r2, r4, #32
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f302 	lsl.w	r3, r1, r2
 80007d8:	ea40 0003 	orr.w	r0, r0, r3
 80007dc:	fa21 f304 	lsr.w	r3, r1, r4
 80007e0:	ea45 0103 	orr.w	r1, r5, r3
 80007e4:	bd30      	pop	{r4, r5, pc}
 80007e6:	f1c4 040c 	rsb	r4, r4, #12
 80007ea:	f1c4 0220 	rsb	r2, r4, #32
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 f304 	lsl.w	r3, r1, r4
 80007f6:	ea40 0003 	orr.w	r0, r0, r3
 80007fa:	4629      	mov	r1, r5
 80007fc:	bd30      	pop	{r4, r5, pc}
 80007fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000802:	4629      	mov	r1, r5
 8000804:	bd30      	pop	{r4, r5, pc}
 8000806:	f094 0f00 	teq	r4, #0
 800080a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800080e:	bf06      	itte	eq
 8000810:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000814:	3401      	addeq	r4, #1
 8000816:	3d01      	subne	r5, #1
 8000818:	e74e      	b.n	80006b8 <__adddf3+0x8c>
 800081a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800081e:	bf18      	it	ne
 8000820:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000824:	d029      	beq.n	800087a <__adddf3+0x24e>
 8000826:	ea94 0f05 	teq	r4, r5
 800082a:	bf08      	it	eq
 800082c:	ea90 0f02 	teqeq	r0, r2
 8000830:	d005      	beq.n	800083e <__adddf3+0x212>
 8000832:	ea54 0c00 	orrs.w	ip, r4, r0
 8000836:	bf04      	itt	eq
 8000838:	4619      	moveq	r1, r3
 800083a:	4610      	moveq	r0, r2
 800083c:	bd30      	pop	{r4, r5, pc}
 800083e:	ea91 0f03 	teq	r1, r3
 8000842:	bf1e      	ittt	ne
 8000844:	2100      	movne	r1, #0
 8000846:	2000      	movne	r0, #0
 8000848:	bd30      	popne	{r4, r5, pc}
 800084a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800084e:	d105      	bne.n	800085c <__adddf3+0x230>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	4149      	adcs	r1, r1
 8000854:	bf28      	it	cs
 8000856:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800085a:	bd30      	pop	{r4, r5, pc}
 800085c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000860:	bf3c      	itt	cc
 8000862:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000866:	bd30      	popcc	{r4, r5, pc}
 8000868:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800086c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd30      	pop	{r4, r5, pc}
 800087a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800087e:	bf1a      	itte	ne
 8000880:	4619      	movne	r1, r3
 8000882:	4610      	movne	r0, r2
 8000884:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000888:	bf1c      	itt	ne
 800088a:	460b      	movne	r3, r1
 800088c:	4602      	movne	r2, r0
 800088e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000892:	bf06      	itte	eq
 8000894:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000898:	ea91 0f03 	teqeq	r1, r3
 800089c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80008a0:	bd30      	pop	{r4, r5, pc}
 80008a2:	bf00      	nop

080008a4 <__aeabi_ui2d>:
 80008a4:	f090 0f00 	teq	r0, #0
 80008a8:	bf04      	itt	eq
 80008aa:	2100      	moveq	r1, #0
 80008ac:	4770      	bxeq	lr
 80008ae:	b530      	push	{r4, r5, lr}
 80008b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008b8:	f04f 0500 	mov.w	r5, #0
 80008bc:	f04f 0100 	mov.w	r1, #0
 80008c0:	e750      	b.n	8000764 <__adddf3+0x138>
 80008c2:	bf00      	nop

080008c4 <__aeabi_i2d>:
 80008c4:	f090 0f00 	teq	r0, #0
 80008c8:	bf04      	itt	eq
 80008ca:	2100      	moveq	r1, #0
 80008cc:	4770      	bxeq	lr
 80008ce:	b530      	push	{r4, r5, lr}
 80008d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80008dc:	bf48      	it	mi
 80008de:	4240      	negmi	r0, r0
 80008e0:	f04f 0100 	mov.w	r1, #0
 80008e4:	e73e      	b.n	8000764 <__adddf3+0x138>
 80008e6:	bf00      	nop

080008e8 <__aeabi_f2d>:
 80008e8:	0042      	lsls	r2, r0, #1
 80008ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80008f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008f6:	bf1f      	itttt	ne
 80008f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000900:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000904:	4770      	bxne	lr
 8000906:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800090a:	bf08      	it	eq
 800090c:	4770      	bxeq	lr
 800090e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000912:	bf04      	itt	eq
 8000914:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000918:	4770      	bxeq	lr
 800091a:	b530      	push	{r4, r5, lr}
 800091c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000924:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000928:	e71c      	b.n	8000764 <__adddf3+0x138>
 800092a:	bf00      	nop

0800092c <__aeabi_ul2d>:
 800092c:	ea50 0201 	orrs.w	r2, r0, r1
 8000930:	bf08      	it	eq
 8000932:	4770      	bxeq	lr
 8000934:	b530      	push	{r4, r5, lr}
 8000936:	f04f 0500 	mov.w	r5, #0
 800093a:	e00a      	b.n	8000952 <__aeabi_l2d+0x16>

0800093c <__aeabi_l2d>:
 800093c:	ea50 0201 	orrs.w	r2, r0, r1
 8000940:	bf08      	it	eq
 8000942:	4770      	bxeq	lr
 8000944:	b530      	push	{r4, r5, lr}
 8000946:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800094a:	d502      	bpl.n	8000952 <__aeabi_l2d+0x16>
 800094c:	4240      	negs	r0, r0
 800094e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000952:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000956:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800095a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800095e:	f43f aed8 	beq.w	8000712 <__adddf3+0xe6>
 8000962:	f04f 0203 	mov.w	r2, #3
 8000966:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800096a:	bf18      	it	ne
 800096c:	3203      	addne	r2, #3
 800096e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000972:	bf18      	it	ne
 8000974:	3203      	addne	r2, #3
 8000976:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800097a:	f1c2 0320 	rsb	r3, r2, #32
 800097e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	fa01 fe03 	lsl.w	lr, r1, r3
 800098a:	ea40 000e 	orr.w	r0, r0, lr
 800098e:	fa21 f102 	lsr.w	r1, r1, r2
 8000992:	4414      	add	r4, r2
 8000994:	e6bd      	b.n	8000712 <__adddf3+0xe6>
 8000996:	bf00      	nop

08000998 <__aeabi_dmul>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800099e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009a6:	bf1d      	ittte	ne
 80009a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009ac:	ea94 0f0c 	teqne	r4, ip
 80009b0:	ea95 0f0c 	teqne	r5, ip
 80009b4:	f000 f8de 	bleq	8000b74 <__aeabi_dmul+0x1dc>
 80009b8:	442c      	add	r4, r5
 80009ba:	ea81 0603 	eor.w	r6, r1, r3
 80009be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80009c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80009c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80009ca:	bf18      	it	ne
 80009cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009d8:	d038      	beq.n	8000a4c <__aeabi_dmul+0xb4>
 80009da:	fba0 ce02 	umull	ip, lr, r0, r2
 80009de:	f04f 0500 	mov.w	r5, #0
 80009e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80009e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80009ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80009ee:	f04f 0600 	mov.w	r6, #0
 80009f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009f6:	f09c 0f00 	teq	ip, #0
 80009fa:	bf18      	it	ne
 80009fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000a04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000a08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000a0c:	d204      	bcs.n	8000a18 <__aeabi_dmul+0x80>
 8000a0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a12:	416d      	adcs	r5, r5
 8000a14:	eb46 0606 	adc.w	r6, r6, r6
 8000a18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000a1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000a20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000a24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000a28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000a2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a30:	bf88      	it	hi
 8000a32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a36:	d81e      	bhi.n	8000a76 <__aeabi_dmul+0xde>
 8000a38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000a42:	f150 0000 	adcs.w	r0, r0, #0
 8000a46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a50:	ea46 0101 	orr.w	r1, r6, r1
 8000a54:	ea40 0002 	orr.w	r0, r0, r2
 8000a58:	ea81 0103 	eor.w	r1, r1, r3
 8000a5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a60:	bfc2      	ittt	gt
 8000a62:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a6a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a70:	f04f 0e00 	mov.w	lr, #0
 8000a74:	3c01      	subs	r4, #1
 8000a76:	f300 80ab 	bgt.w	8000bd0 <__aeabi_dmul+0x238>
 8000a7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a7e:	bfde      	ittt	le
 8000a80:	2000      	movle	r0, #0
 8000a82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a86:	bd70      	pople	{r4, r5, r6, pc}
 8000a88:	f1c4 0400 	rsb	r4, r4, #0
 8000a8c:	3c20      	subs	r4, #32
 8000a8e:	da35      	bge.n	8000afc <__aeabi_dmul+0x164>
 8000a90:	340c      	adds	r4, #12
 8000a92:	dc1b      	bgt.n	8000acc <__aeabi_dmul+0x134>
 8000a94:	f104 0414 	add.w	r4, r4, #20
 8000a98:	f1c4 0520 	rsb	r5, r4, #32
 8000a9c:	fa00 f305 	lsl.w	r3, r0, r5
 8000aa0:	fa20 f004 	lsr.w	r0, r0, r4
 8000aa4:	fa01 f205 	lsl.w	r2, r1, r5
 8000aa8:	ea40 0002 	orr.w	r0, r0, r2
 8000aac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000ab0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ab4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ab8:	fa21 f604 	lsr.w	r6, r1, r4
 8000abc:	eb42 0106 	adc.w	r1, r2, r6
 8000ac0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ac4:	bf08      	it	eq
 8000ac6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f1c4 040c 	rsb	r4, r4, #12
 8000ad0:	f1c4 0520 	rsb	r5, r4, #32
 8000ad4:	fa00 f304 	lsl.w	r3, r0, r4
 8000ad8:	fa20 f005 	lsr.w	r0, r0, r5
 8000adc:	fa01 f204 	lsl.w	r2, r1, r4
 8000ae0:	ea40 0002 	orr.w	r0, r0, r2
 8000ae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ae8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000aec:	f141 0100 	adc.w	r1, r1, #0
 8000af0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000af4:	bf08      	it	eq
 8000af6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	f1c4 0520 	rsb	r5, r4, #32
 8000b00:	fa00 f205 	lsl.w	r2, r0, r5
 8000b04:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b08:	fa20 f304 	lsr.w	r3, r0, r4
 8000b0c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b10:	ea43 0302 	orr.w	r3, r3, r2
 8000b14:	fa21 f004 	lsr.w	r0, r1, r4
 8000b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b1c:	fa21 f204 	lsr.w	r2, r1, r4
 8000b20:	ea20 0002 	bic.w	r0, r0, r2
 8000b24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000b28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b2c:	bf08      	it	eq
 8000b2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	f094 0f00 	teq	r4, #0
 8000b38:	d10f      	bne.n	8000b5a <__aeabi_dmul+0x1c2>
 8000b3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000b3e:	0040      	lsls	r0, r0, #1
 8000b40:	eb41 0101 	adc.w	r1, r1, r1
 8000b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b48:	bf08      	it	eq
 8000b4a:	3c01      	subeq	r4, #1
 8000b4c:	d0f7      	beq.n	8000b3e <__aeabi_dmul+0x1a6>
 8000b4e:	ea41 0106 	orr.w	r1, r1, r6
 8000b52:	f095 0f00 	teq	r5, #0
 8000b56:	bf18      	it	ne
 8000b58:	4770      	bxne	lr
 8000b5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b5e:	0052      	lsls	r2, r2, #1
 8000b60:	eb43 0303 	adc.w	r3, r3, r3
 8000b64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b68:	bf08      	it	eq
 8000b6a:	3d01      	subeq	r5, #1
 8000b6c:	d0f7      	beq.n	8000b5e <__aeabi_dmul+0x1c6>
 8000b6e:	ea43 0306 	orr.w	r3, r3, r6
 8000b72:	4770      	bx	lr
 8000b74:	ea94 0f0c 	teq	r4, ip
 8000b78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b7c:	bf18      	it	ne
 8000b7e:	ea95 0f0c 	teqne	r5, ip
 8000b82:	d00c      	beq.n	8000b9e <__aeabi_dmul+0x206>
 8000b84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b88:	bf18      	it	ne
 8000b8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b8e:	d1d1      	bne.n	8000b34 <__aeabi_dmul+0x19c>
 8000b90:	ea81 0103 	eor.w	r1, r1, r3
 8000b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ba2:	bf06      	itte	eq
 8000ba4:	4610      	moveq	r0, r2
 8000ba6:	4619      	moveq	r1, r3
 8000ba8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000bac:	d019      	beq.n	8000be2 <__aeabi_dmul+0x24a>
 8000bae:	ea94 0f0c 	teq	r4, ip
 8000bb2:	d102      	bne.n	8000bba <__aeabi_dmul+0x222>
 8000bb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000bb8:	d113      	bne.n	8000be2 <__aeabi_dmul+0x24a>
 8000bba:	ea95 0f0c 	teq	r5, ip
 8000bbe:	d105      	bne.n	8000bcc <__aeabi_dmul+0x234>
 8000bc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000bc4:	bf1c      	itt	ne
 8000bc6:	4610      	movne	r0, r2
 8000bc8:	4619      	movne	r1, r3
 8000bca:	d10a      	bne.n	8000be2 <__aeabi_dmul+0x24a>
 8000bcc:	ea81 0103 	eor.w	r1, r1, r3
 8000bd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000bd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000bd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	bd70      	pop	{r4, r5, r6, pc}
 8000be2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000be6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000bea:	bd70      	pop	{r4, r5, r6, pc}

08000bec <__aeabi_ddiv>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000bf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000bfa:	bf1d      	ittte	ne
 8000bfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c00:	ea94 0f0c 	teqne	r4, ip
 8000c04:	ea95 0f0c 	teqne	r5, ip
 8000c08:	f000 f8a7 	bleq	8000d5a <__aeabi_ddiv+0x16e>
 8000c0c:	eba4 0405 	sub.w	r4, r4, r5
 8000c10:	ea81 0e03 	eor.w	lr, r1, r3
 8000c14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c1c:	f000 8088 	beq.w	8000d30 <__aeabi_ddiv+0x144>
 8000c20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000c24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000c28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000c2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000c30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000c34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000c38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000c3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000c40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000c44:	429d      	cmp	r5, r3
 8000c46:	bf08      	it	eq
 8000c48:	4296      	cmpeq	r6, r2
 8000c4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000c4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000c52:	d202      	bcs.n	8000c5a <__aeabi_ddiv+0x6e>
 8000c54:	085b      	lsrs	r3, r3, #1
 8000c56:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c5a:	1ab6      	subs	r6, r6, r2
 8000c5c:	eb65 0503 	sbc.w	r5, r5, r3
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c76:	bf22      	ittt	cs
 8000c78:	1ab6      	subcs	r6, r6, r2
 8000c7a:	4675      	movcs	r5, lr
 8000c7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c86:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c8e:	bf22      	ittt	cs
 8000c90:	1ab6      	subcs	r6, r6, r2
 8000c92:	4675      	movcs	r5, lr
 8000c94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c98:	085b      	lsrs	r3, r3, #1
 8000c9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ca6:	bf22      	ittt	cs
 8000ca8:	1ab6      	subcs	r6, r6, r2
 8000caa:	4675      	movcs	r5, lr
 8000cac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cb0:	085b      	lsrs	r3, r3, #1
 8000cb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cbe:	bf22      	ittt	cs
 8000cc0:	1ab6      	subcs	r6, r6, r2
 8000cc2:	4675      	movcs	r5, lr
 8000cc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cc8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ccc:	d018      	beq.n	8000d00 <__aeabi_ddiv+0x114>
 8000cce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000cd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000cd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000cda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000cde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ce2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ce6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000cea:	d1c0      	bne.n	8000c6e <__aeabi_ddiv+0x82>
 8000cec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cf0:	d10b      	bne.n	8000d0a <__aeabi_ddiv+0x11e>
 8000cf2:	ea41 0100 	orr.w	r1, r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000cfe:	e7b6      	b.n	8000c6e <__aeabi_ddiv+0x82>
 8000d00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d04:	bf04      	itt	eq
 8000d06:	4301      	orreq	r1, r0
 8000d08:	2000      	moveq	r0, #0
 8000d0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d0e:	bf88      	it	hi
 8000d10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d14:	f63f aeaf 	bhi.w	8000a76 <__aeabi_dmul+0xde>
 8000d18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000d1c:	bf04      	itt	eq
 8000d1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000d22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d26:	f150 0000 	adcs.w	r0, r0, #0
 8000d2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000d34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000d38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000d3c:	bfc2      	ittt	gt
 8000d3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d46:	bd70      	popgt	{r4, r5, r6, pc}
 8000d48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4c:	f04f 0e00 	mov.w	lr, #0
 8000d50:	3c01      	subs	r4, #1
 8000d52:	e690      	b.n	8000a76 <__aeabi_dmul+0xde>
 8000d54:	ea45 0e06 	orr.w	lr, r5, r6
 8000d58:	e68d      	b.n	8000a76 <__aeabi_dmul+0xde>
 8000d5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d5e:	ea94 0f0c 	teq	r4, ip
 8000d62:	bf08      	it	eq
 8000d64:	ea95 0f0c 	teqeq	r5, ip
 8000d68:	f43f af3b 	beq.w	8000be2 <__aeabi_dmul+0x24a>
 8000d6c:	ea94 0f0c 	teq	r4, ip
 8000d70:	d10a      	bne.n	8000d88 <__aeabi_ddiv+0x19c>
 8000d72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d76:	f47f af34 	bne.w	8000be2 <__aeabi_dmul+0x24a>
 8000d7a:	ea95 0f0c 	teq	r5, ip
 8000d7e:	f47f af25 	bne.w	8000bcc <__aeabi_dmul+0x234>
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	e72c      	b.n	8000be2 <__aeabi_dmul+0x24a>
 8000d88:	ea95 0f0c 	teq	r5, ip
 8000d8c:	d106      	bne.n	8000d9c <__aeabi_ddiv+0x1b0>
 8000d8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d92:	f43f aefd 	beq.w	8000b90 <__aeabi_dmul+0x1f8>
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	e722      	b.n	8000be2 <__aeabi_dmul+0x24a>
 8000d9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000da0:	bf18      	it	ne
 8000da2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000da6:	f47f aec5 	bne.w	8000b34 <__aeabi_dmul+0x19c>
 8000daa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000dae:	f47f af0d 	bne.w	8000bcc <__aeabi_dmul+0x234>
 8000db2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000db6:	f47f aeeb 	bne.w	8000b90 <__aeabi_dmul+0x1f8>
 8000dba:	e712      	b.n	8000be2 <__aeabi_dmul+0x24a>

08000dbc <__aeabi_d2iz>:
 8000dbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dc4:	d215      	bcs.n	8000df2 <__aeabi_d2iz+0x36>
 8000dc6:	d511      	bpl.n	8000dec <__aeabi_d2iz+0x30>
 8000dc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000dcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dd0:	d912      	bls.n	8000df8 <__aeabi_d2iz+0x3c>
 8000dd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000de2:	fa23 f002 	lsr.w	r0, r3, r2
 8000de6:	bf18      	it	ne
 8000de8:	4240      	negne	r0, r0
 8000dea:	4770      	bx	lr
 8000dec:	f04f 0000 	mov.w	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000df6:	d105      	bne.n	8000e04 <__aeabi_d2iz+0x48>
 8000df8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e02:	4770      	bx	lr
 8000e04:	f04f 0000 	mov.w	r0, #0
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <__aeabi_d2f>:
 8000e0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000e14:	bf24      	itt	cs
 8000e16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000e1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_d2f+0x30>
 8000e20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000e30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e40:	d121      	bne.n	8000e86 <__aeabi_d2f+0x7a>
 8000e42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000e46:	bfbc      	itt	lt
 8000e48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000e4c:	4770      	bxlt	lr
 8000e4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e56:	f1c2 0218 	rsb	r2, r2, #24
 8000e5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e62:	fa20 f002 	lsr.w	r0, r0, r2
 8000e66:	bf18      	it	ne
 8000e68:	f040 0001 	orrne.w	r0, r0, #1
 8000e6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000e74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000e78:	ea40 000c 	orr.w	r0, r0, ip
 8000e7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000e80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e84:	e7cc      	b.n	8000e20 <__aeabi_d2f+0x14>
 8000e86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000e8a:	d107      	bne.n	8000e9c <__aeabi_d2f+0x90>
 8000e8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000e90:	bf1e      	ittt	ne
 8000e92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bxne	lr
 8000e9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <__aeabi_ldivmod>:
 8000eac:	b97b      	cbnz	r3, 8000ece <__aeabi_ldivmod+0x22>
 8000eae:	b972      	cbnz	r2, 8000ece <__aeabi_ldivmod+0x22>
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	bfbe      	ittt	lt
 8000eb4:	2000      	movlt	r0, #0
 8000eb6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000eba:	e006      	blt.n	8000eca <__aeabi_ldivmod+0x1e>
 8000ebc:	bf08      	it	eq
 8000ebe:	2800      	cmpeq	r0, #0
 8000ec0:	bf1c      	itt	ne
 8000ec2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ec6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000eca:	f000 b857 	b.w	8000f7c <__aeabi_idiv0>
 8000ece:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	db09      	blt.n	8000eee <__aeabi_ldivmod+0x42>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db1a      	blt.n	8000f14 <__aeabi_ldivmod+0x68>
 8000ede:	f000 f987 	bl	80011f0 <__udivmoddi4>
 8000ee2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eea:	b004      	add	sp, #16
 8000eec:	4770      	bx	lr
 8000eee:	4240      	negs	r0, r0
 8000ef0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db1b      	blt.n	8000f30 <__aeabi_ldivmod+0x84>
 8000ef8:	f000 f97a 	bl	80011f0 <__udivmoddi4>
 8000efc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f04:	b004      	add	sp, #16
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	4770      	bx	lr
 8000f14:	4252      	negs	r2, r2
 8000f16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f1a:	f000 f969 	bl	80011f0 <__udivmoddi4>
 8000f1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f26:	b004      	add	sp, #16
 8000f28:	4240      	negs	r0, r0
 8000f2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2e:	4770      	bx	lr
 8000f30:	4252      	negs	r2, r2
 8000f32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f36:	f000 f95b 	bl	80011f0 <__udivmoddi4>
 8000f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f42:	b004      	add	sp, #16
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr

08000f4c <__aeabi_uldivmod>:
 8000f4c:	b953      	cbnz	r3, 8000f64 <__aeabi_uldivmod+0x18>
 8000f4e:	b94a      	cbnz	r2, 8000f64 <__aeabi_uldivmod+0x18>
 8000f50:	2900      	cmp	r1, #0
 8000f52:	bf08      	it	eq
 8000f54:	2800      	cmpeq	r0, #0
 8000f56:	bf1c      	itt	ne
 8000f58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 b80c 	b.w	8000f7c <__aeabi_idiv0>
 8000f64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f6c:	f000 f940 	bl	80011f0 <__udivmoddi4>
 8000f70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f78:	b004      	add	sp, #16
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__gedf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f84:	e006      	b.n	8000f94 <__cmpdf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__ledf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpdf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpdf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000faa:	d01b      	beq.n	8000fe4 <__cmpdf2+0x54>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000fb2:	bf0c      	ite	eq
 8000fb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000fb8:	ea91 0f03 	teqne	r1, r3
 8000fbc:	bf02      	ittt	eq
 8000fbe:	ea90 0f02 	teqeq	r0, r2
 8000fc2:	2000      	moveq	r0, #0
 8000fc4:	4770      	bxeq	lr
 8000fc6:	f110 0f00 	cmn.w	r0, #0
 8000fca:	ea91 0f03 	teq	r1, r3
 8000fce:	bf58      	it	pl
 8000fd0:	4299      	cmppl	r1, r3
 8000fd2:	bf08      	it	eq
 8000fd4:	4290      	cmpeq	r0, r2
 8000fd6:	bf2c      	ite	cs
 8000fd8:	17d8      	asrcs	r0, r3, #31
 8000fda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000fde:	f040 0001 	orr.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fec:	d102      	bne.n	8000ff4 <__cmpdf2+0x64>
 8000fee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ff2:	d107      	bne.n	8001004 <__cmpdf2+0x74>
 8000ff4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ffc:	d1d6      	bne.n	8000fac <__cmpdf2+0x1c>
 8000ffe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001002:	d0d3      	beq.n	8000fac <__cmpdf2+0x1c>
 8001004:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <__aeabi_cdrcmple>:
 800100c:	4684      	mov	ip, r0
 800100e:	4610      	mov	r0, r2
 8001010:	4662      	mov	r2, ip
 8001012:	468c      	mov	ip, r1
 8001014:	4619      	mov	r1, r3
 8001016:	4663      	mov	r3, ip
 8001018:	e000      	b.n	800101c <__aeabi_cdcmpeq>
 800101a:	bf00      	nop

0800101c <__aeabi_cdcmpeq>:
 800101c:	b501      	push	{r0, lr}
 800101e:	f7ff ffb7 	bl	8000f90 <__cmpdf2>
 8001022:	2800      	cmp	r0, #0
 8001024:	bf48      	it	mi
 8001026:	f110 0f00 	cmnmi.w	r0, #0
 800102a:	bd01      	pop	{r0, pc}

0800102c <__aeabi_dcmpeq>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff fff4 	bl	800101c <__aeabi_cdcmpeq>
 8001034:	bf0c      	ite	eq
 8001036:	2001      	moveq	r0, #1
 8001038:	2000      	movne	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_dcmplt>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffea 	bl	800101c <__aeabi_cdcmpeq>
 8001048:	bf34      	ite	cc
 800104a:	2001      	movcc	r0, #1
 800104c:	2000      	movcs	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_dcmple>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffe0 	bl	800101c <__aeabi_cdcmpeq>
 800105c:	bf94      	ite	ls
 800105e:	2001      	movls	r0, #1
 8001060:	2000      	movhi	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_dcmpge>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffce 	bl	800100c <__aeabi_cdrcmple>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_dcmpgt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffc4 	bl	800100c <__aeabi_cdrcmple>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <memcpy>:
 8001090:	4684      	mov	ip, r0
 8001092:	ea41 0300 	orr.w	r3, r1, r0
 8001096:	f013 0303 	ands.w	r3, r3, #3
 800109a:	d16d      	bne.n	8001178 <memcpy+0xe8>
 800109c:	3a40      	subs	r2, #64	; 0x40
 800109e:	d341      	bcc.n	8001124 <memcpy+0x94>
 80010a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80010a4:	f840 3b04 	str.w	r3, [r0], #4
 80010a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80010ac:	f840 3b04 	str.w	r3, [r0], #4
 80010b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80010b4:	f840 3b04 	str.w	r3, [r0], #4
 80010b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80010bc:	f840 3b04 	str.w	r3, [r0], #4
 80010c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80010c4:	f840 3b04 	str.w	r3, [r0], #4
 80010c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80010cc:	f840 3b04 	str.w	r3, [r0], #4
 80010d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80010d4:	f840 3b04 	str.w	r3, [r0], #4
 80010d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80010dc:	f840 3b04 	str.w	r3, [r0], #4
 80010e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80010e4:	f840 3b04 	str.w	r3, [r0], #4
 80010e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80010ec:	f840 3b04 	str.w	r3, [r0], #4
 80010f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80010f4:	f840 3b04 	str.w	r3, [r0], #4
 80010f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80010fc:	f840 3b04 	str.w	r3, [r0], #4
 8001100:	f851 3b04 	ldr.w	r3, [r1], #4
 8001104:	f840 3b04 	str.w	r3, [r0], #4
 8001108:	f851 3b04 	ldr.w	r3, [r1], #4
 800110c:	f840 3b04 	str.w	r3, [r0], #4
 8001110:	f851 3b04 	ldr.w	r3, [r1], #4
 8001114:	f840 3b04 	str.w	r3, [r0], #4
 8001118:	f851 3b04 	ldr.w	r3, [r1], #4
 800111c:	f840 3b04 	str.w	r3, [r0], #4
 8001120:	3a40      	subs	r2, #64	; 0x40
 8001122:	d2bd      	bcs.n	80010a0 <memcpy+0x10>
 8001124:	3230      	adds	r2, #48	; 0x30
 8001126:	d311      	bcc.n	800114c <memcpy+0xbc>
 8001128:	f851 3b04 	ldr.w	r3, [r1], #4
 800112c:	f840 3b04 	str.w	r3, [r0], #4
 8001130:	f851 3b04 	ldr.w	r3, [r1], #4
 8001134:	f840 3b04 	str.w	r3, [r0], #4
 8001138:	f851 3b04 	ldr.w	r3, [r1], #4
 800113c:	f840 3b04 	str.w	r3, [r0], #4
 8001140:	f851 3b04 	ldr.w	r3, [r1], #4
 8001144:	f840 3b04 	str.w	r3, [r0], #4
 8001148:	3a10      	subs	r2, #16
 800114a:	d2ed      	bcs.n	8001128 <memcpy+0x98>
 800114c:	320c      	adds	r2, #12
 800114e:	d305      	bcc.n	800115c <memcpy+0xcc>
 8001150:	f851 3b04 	ldr.w	r3, [r1], #4
 8001154:	f840 3b04 	str.w	r3, [r0], #4
 8001158:	3a04      	subs	r2, #4
 800115a:	d2f9      	bcs.n	8001150 <memcpy+0xc0>
 800115c:	3204      	adds	r2, #4
 800115e:	d008      	beq.n	8001172 <memcpy+0xe2>
 8001160:	07d2      	lsls	r2, r2, #31
 8001162:	bf1c      	itt	ne
 8001164:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001168:	f800 3b01 	strbne.w	r3, [r0], #1
 800116c:	d301      	bcc.n	8001172 <memcpy+0xe2>
 800116e:	880b      	ldrh	r3, [r1, #0]
 8001170:	8003      	strh	r3, [r0, #0]
 8001172:	4660      	mov	r0, ip
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2a08      	cmp	r2, #8
 800117a:	d313      	bcc.n	80011a4 <memcpy+0x114>
 800117c:	078b      	lsls	r3, r1, #30
 800117e:	d08d      	beq.n	800109c <memcpy+0xc>
 8001180:	f010 0303 	ands.w	r3, r0, #3
 8001184:	d08a      	beq.n	800109c <memcpy+0xc>
 8001186:	f1c3 0304 	rsb	r3, r3, #4
 800118a:	1ad2      	subs	r2, r2, r3
 800118c:	07db      	lsls	r3, r3, #31
 800118e:	bf1c      	itt	ne
 8001190:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001194:	f800 3b01 	strbne.w	r3, [r0], #1
 8001198:	d380      	bcc.n	800109c <memcpy+0xc>
 800119a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800119e:	f820 3b02 	strh.w	r3, [r0], #2
 80011a2:	e77b      	b.n	800109c <memcpy+0xc>
 80011a4:	3a04      	subs	r2, #4
 80011a6:	d3d9      	bcc.n	800115c <memcpy+0xcc>
 80011a8:	3a01      	subs	r2, #1
 80011aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011ae:	f800 3b01 	strb.w	r3, [r0], #1
 80011b2:	d2f9      	bcs.n	80011a8 <memcpy+0x118>
 80011b4:	780b      	ldrb	r3, [r1, #0]
 80011b6:	7003      	strb	r3, [r0, #0]
 80011b8:	784b      	ldrb	r3, [r1, #1]
 80011ba:	7043      	strb	r3, [r0, #1]
 80011bc:	788b      	ldrb	r3, [r1, #2]
 80011be:	7083      	strb	r3, [r0, #2]
 80011c0:	4660      	mov	r0, ip
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_dcmpun>:
 80011c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80011c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011cc:	d102      	bne.n	80011d4 <__aeabi_dcmpun+0x10>
 80011ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80011d2:	d10a      	bne.n	80011ea <__aeabi_dcmpun+0x26>
 80011d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80011d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011dc:	d102      	bne.n	80011e4 <__aeabi_dcmpun+0x20>
 80011de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80011e2:	d102      	bne.n	80011ea <__aeabi_dcmpun+0x26>
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4770      	bx	lr
 80011ea:	f04f 0001 	mov.w	r0, #1
 80011ee:	4770      	bx	lr

080011f0 <__udivmoddi4>:
 80011f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f4:	4686      	mov	lr, r0
 80011f6:	468c      	mov	ip, r1
 80011f8:	4608      	mov	r0, r1
 80011fa:	9e08      	ldr	r6, [sp, #32]
 80011fc:	4615      	mov	r5, r2
 80011fe:	4674      	mov	r4, lr
 8001200:	4619      	mov	r1, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 80c2 	bne.w	800138c <__udivmoddi4+0x19c>
 8001208:	4285      	cmp	r5, r0
 800120a:	fab2 f282 	clz	r2, r2
 800120e:	d945      	bls.n	800129c <__udivmoddi4+0xac>
 8001210:	b14a      	cbz	r2, 8001226 <__udivmoddi4+0x36>
 8001212:	f1c2 0320 	rsb	r3, r2, #32
 8001216:	fa00 fc02 	lsl.w	ip, r0, r2
 800121a:	fa2e f303 	lsr.w	r3, lr, r3
 800121e:	4095      	lsls	r5, r2
 8001220:	ea43 0c0c 	orr.w	ip, r3, ip
 8001224:	4094      	lsls	r4, r2
 8001226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800122a:	b2a8      	uxth	r0, r5
 800122c:	fbbc f8fe 	udiv	r8, ip, lr
 8001230:	0c23      	lsrs	r3, r4, #16
 8001232:	fb0e cc18 	mls	ip, lr, r8, ip
 8001236:	fb08 f900 	mul.w	r9, r8, r0
 800123a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800123e:	4599      	cmp	r9, r3
 8001240:	d928      	bls.n	8001294 <__udivmoddi4+0xa4>
 8001242:	18eb      	adds	r3, r5, r3
 8001244:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8001248:	d204      	bcs.n	8001254 <__udivmoddi4+0x64>
 800124a:	4599      	cmp	r9, r3
 800124c:	d902      	bls.n	8001254 <__udivmoddi4+0x64>
 800124e:	f1a8 0702 	sub.w	r7, r8, #2
 8001252:	442b      	add	r3, r5
 8001254:	eba3 0309 	sub.w	r3, r3, r9
 8001258:	b2a4      	uxth	r4, r4
 800125a:	fbb3 fcfe 	udiv	ip, r3, lr
 800125e:	fb0e 331c 	mls	r3, lr, ip, r3
 8001262:	fb0c f000 	mul.w	r0, ip, r0
 8001266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800126a:	42a0      	cmp	r0, r4
 800126c:	d914      	bls.n	8001298 <__udivmoddi4+0xa8>
 800126e:	192c      	adds	r4, r5, r4
 8001270:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8001274:	d204      	bcs.n	8001280 <__udivmoddi4+0x90>
 8001276:	42a0      	cmp	r0, r4
 8001278:	d902      	bls.n	8001280 <__udivmoddi4+0x90>
 800127a:	f1ac 0302 	sub.w	r3, ip, #2
 800127e:	442c      	add	r4, r5
 8001280:	1a24      	subs	r4, r4, r0
 8001282:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8001286:	b11e      	cbz	r6, 8001290 <__udivmoddi4+0xa0>
 8001288:	40d4      	lsrs	r4, r2
 800128a:	2300      	movs	r3, #0
 800128c:	6034      	str	r4, [r6, #0]
 800128e:	6073      	str	r3, [r6, #4]
 8001290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001294:	4647      	mov	r7, r8
 8001296:	e7dd      	b.n	8001254 <__udivmoddi4+0x64>
 8001298:	4663      	mov	r3, ip
 800129a:	e7f1      	b.n	8001280 <__udivmoddi4+0x90>
 800129c:	bb92      	cbnz	r2, 8001304 <__udivmoddi4+0x114>
 800129e:	1b43      	subs	r3, r0, r5
 80012a0:	2101      	movs	r1, #1
 80012a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80012a6:	b2af      	uxth	r7, r5
 80012a8:	fbb3 fcfe 	udiv	ip, r3, lr
 80012ac:	0c20      	lsrs	r0, r4, #16
 80012ae:	fb0e 331c 	mls	r3, lr, ip, r3
 80012b2:	fb0c f807 	mul.w	r8, ip, r7
 80012b6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012ba:	4598      	cmp	r8, r3
 80012bc:	d962      	bls.n	8001384 <__udivmoddi4+0x194>
 80012be:	18eb      	adds	r3, r5, r3
 80012c0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80012c4:	d204      	bcs.n	80012d0 <__udivmoddi4+0xe0>
 80012c6:	4598      	cmp	r8, r3
 80012c8:	d902      	bls.n	80012d0 <__udivmoddi4+0xe0>
 80012ca:	f1ac 0002 	sub.w	r0, ip, #2
 80012ce:	442b      	add	r3, r5
 80012d0:	eba3 0308 	sub.w	r3, r3, r8
 80012d4:	b2a4      	uxth	r4, r4
 80012d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80012da:	fb0e 331c 	mls	r3, lr, ip, r3
 80012de:	fb0c f707 	mul.w	r7, ip, r7
 80012e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012e6:	42a7      	cmp	r7, r4
 80012e8:	d94e      	bls.n	8001388 <__udivmoddi4+0x198>
 80012ea:	192c      	adds	r4, r5, r4
 80012ec:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80012f0:	d204      	bcs.n	80012fc <__udivmoddi4+0x10c>
 80012f2:	42a7      	cmp	r7, r4
 80012f4:	d902      	bls.n	80012fc <__udivmoddi4+0x10c>
 80012f6:	f1ac 0302 	sub.w	r3, ip, #2
 80012fa:	442c      	add	r4, r5
 80012fc:	1be4      	subs	r4, r4, r7
 80012fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001302:	e7c0      	b.n	8001286 <__udivmoddi4+0x96>
 8001304:	f1c2 0320 	rsb	r3, r2, #32
 8001308:	fa20 f103 	lsr.w	r1, r0, r3
 800130c:	4095      	lsls	r5, r2
 800130e:	4090      	lsls	r0, r2
 8001310:	fa2e f303 	lsr.w	r3, lr, r3
 8001314:	4303      	orrs	r3, r0
 8001316:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800131a:	b2af      	uxth	r7, r5
 800131c:	fbb1 fcfe 	udiv	ip, r1, lr
 8001320:	fb0e 101c 	mls	r0, lr, ip, r1
 8001324:	0c19      	lsrs	r1, r3, #16
 8001326:	fb0c f807 	mul.w	r8, ip, r7
 800132a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800132e:	4588      	cmp	r8, r1
 8001330:	fa04 f402 	lsl.w	r4, r4, r2
 8001334:	d922      	bls.n	800137c <__udivmoddi4+0x18c>
 8001336:	1869      	adds	r1, r5, r1
 8001338:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800133c:	d204      	bcs.n	8001348 <__udivmoddi4+0x158>
 800133e:	4588      	cmp	r8, r1
 8001340:	d902      	bls.n	8001348 <__udivmoddi4+0x158>
 8001342:	f1ac 0002 	sub.w	r0, ip, #2
 8001346:	4429      	add	r1, r5
 8001348:	eba1 0108 	sub.w	r1, r1, r8
 800134c:	b29b      	uxth	r3, r3
 800134e:	fbb1 fcfe 	udiv	ip, r1, lr
 8001352:	fb0e 111c 	mls	r1, lr, ip, r1
 8001356:	fb0c f707 	mul.w	r7, ip, r7
 800135a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800135e:	429f      	cmp	r7, r3
 8001360:	d90e      	bls.n	8001380 <__udivmoddi4+0x190>
 8001362:	18eb      	adds	r3, r5, r3
 8001364:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001368:	d204      	bcs.n	8001374 <__udivmoddi4+0x184>
 800136a:	429f      	cmp	r7, r3
 800136c:	d902      	bls.n	8001374 <__udivmoddi4+0x184>
 800136e:	f1ac 0102 	sub.w	r1, ip, #2
 8001372:	442b      	add	r3, r5
 8001374:	1bdb      	subs	r3, r3, r7
 8001376:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800137a:	e792      	b.n	80012a2 <__udivmoddi4+0xb2>
 800137c:	4660      	mov	r0, ip
 800137e:	e7e3      	b.n	8001348 <__udivmoddi4+0x158>
 8001380:	4661      	mov	r1, ip
 8001382:	e7f7      	b.n	8001374 <__udivmoddi4+0x184>
 8001384:	4660      	mov	r0, ip
 8001386:	e7a3      	b.n	80012d0 <__udivmoddi4+0xe0>
 8001388:	4663      	mov	r3, ip
 800138a:	e7b7      	b.n	80012fc <__udivmoddi4+0x10c>
 800138c:	4283      	cmp	r3, r0
 800138e:	d906      	bls.n	800139e <__udivmoddi4+0x1ae>
 8001390:	b916      	cbnz	r6, 8001398 <__udivmoddi4+0x1a8>
 8001392:	2100      	movs	r1, #0
 8001394:	4608      	mov	r0, r1
 8001396:	e77b      	b.n	8001290 <__udivmoddi4+0xa0>
 8001398:	e9c6 e000 	strd	lr, r0, [r6]
 800139c:	e7f9      	b.n	8001392 <__udivmoddi4+0x1a2>
 800139e:	fab3 f783 	clz	r7, r3
 80013a2:	b98f      	cbnz	r7, 80013c8 <__udivmoddi4+0x1d8>
 80013a4:	4283      	cmp	r3, r0
 80013a6:	d301      	bcc.n	80013ac <__udivmoddi4+0x1bc>
 80013a8:	4572      	cmp	r2, lr
 80013aa:	d808      	bhi.n	80013be <__udivmoddi4+0x1ce>
 80013ac:	ebbe 0402 	subs.w	r4, lr, r2
 80013b0:	eb60 0303 	sbc.w	r3, r0, r3
 80013b4:	2001      	movs	r0, #1
 80013b6:	469c      	mov	ip, r3
 80013b8:	b91e      	cbnz	r6, 80013c2 <__udivmoddi4+0x1d2>
 80013ba:	2100      	movs	r1, #0
 80013bc:	e768      	b.n	8001290 <__udivmoddi4+0xa0>
 80013be:	4638      	mov	r0, r7
 80013c0:	e7fa      	b.n	80013b8 <__udivmoddi4+0x1c8>
 80013c2:	e9c6 4c00 	strd	r4, ip, [r6]
 80013c6:	e7f8      	b.n	80013ba <__udivmoddi4+0x1ca>
 80013c8:	f1c7 0c20 	rsb	ip, r7, #32
 80013cc:	40bb      	lsls	r3, r7
 80013ce:	fa22 f40c 	lsr.w	r4, r2, ip
 80013d2:	431c      	orrs	r4, r3
 80013d4:	fa2e f10c 	lsr.w	r1, lr, ip
 80013d8:	fa20 f30c 	lsr.w	r3, r0, ip
 80013dc:	40b8      	lsls	r0, r7
 80013de:	4301      	orrs	r1, r0
 80013e0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80013e4:	fa0e f507 	lsl.w	r5, lr, r7
 80013e8:	fbb3 f8f9 	udiv	r8, r3, r9
 80013ec:	fa1f fe84 	uxth.w	lr, r4
 80013f0:	fb09 3018 	mls	r0, r9, r8, r3
 80013f4:	0c0b      	lsrs	r3, r1, #16
 80013f6:	fb08 fa0e 	mul.w	sl, r8, lr
 80013fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013fe:	459a      	cmp	sl, r3
 8001400:	fa02 f207 	lsl.w	r2, r2, r7
 8001404:	d940      	bls.n	8001488 <__udivmoddi4+0x298>
 8001406:	18e3      	adds	r3, r4, r3
 8001408:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800140c:	d204      	bcs.n	8001418 <__udivmoddi4+0x228>
 800140e:	459a      	cmp	sl, r3
 8001410:	d902      	bls.n	8001418 <__udivmoddi4+0x228>
 8001412:	f1a8 0002 	sub.w	r0, r8, #2
 8001416:	4423      	add	r3, r4
 8001418:	eba3 030a 	sub.w	r3, r3, sl
 800141c:	b289      	uxth	r1, r1
 800141e:	fbb3 f8f9 	udiv	r8, r3, r9
 8001422:	fb09 3318 	mls	r3, r9, r8, r3
 8001426:	fb08 fe0e 	mul.w	lr, r8, lr
 800142a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800142e:	458e      	cmp	lr, r1
 8001430:	d92c      	bls.n	800148c <__udivmoddi4+0x29c>
 8001432:	1861      	adds	r1, r4, r1
 8001434:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8001438:	d204      	bcs.n	8001444 <__udivmoddi4+0x254>
 800143a:	458e      	cmp	lr, r1
 800143c:	d902      	bls.n	8001444 <__udivmoddi4+0x254>
 800143e:	f1a8 0302 	sub.w	r3, r8, #2
 8001442:	4421      	add	r1, r4
 8001444:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001448:	fba0 9802 	umull	r9, r8, r0, r2
 800144c:	eba1 010e 	sub.w	r1, r1, lr
 8001450:	4541      	cmp	r1, r8
 8001452:	46ce      	mov	lr, r9
 8001454:	4643      	mov	r3, r8
 8001456:	d302      	bcc.n	800145e <__udivmoddi4+0x26e>
 8001458:	d106      	bne.n	8001468 <__udivmoddi4+0x278>
 800145a:	454d      	cmp	r5, r9
 800145c:	d204      	bcs.n	8001468 <__udivmoddi4+0x278>
 800145e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001462:	eb68 0304 	sbc.w	r3, r8, r4
 8001466:	3801      	subs	r0, #1
 8001468:	2e00      	cmp	r6, #0
 800146a:	d0a6      	beq.n	80013ba <__udivmoddi4+0x1ca>
 800146c:	ebb5 020e 	subs.w	r2, r5, lr
 8001470:	eb61 0103 	sbc.w	r1, r1, r3
 8001474:	fa01 fc0c 	lsl.w	ip, r1, ip
 8001478:	fa22 f307 	lsr.w	r3, r2, r7
 800147c:	ea4c 0303 	orr.w	r3, ip, r3
 8001480:	40f9      	lsrs	r1, r7
 8001482:	e9c6 3100 	strd	r3, r1, [r6]
 8001486:	e798      	b.n	80013ba <__udivmoddi4+0x1ca>
 8001488:	4640      	mov	r0, r8
 800148a:	e7c5      	b.n	8001418 <__udivmoddi4+0x228>
 800148c:	4643      	mov	r3, r8
 800148e:	e7d9      	b.n	8001444 <__udivmoddi4+0x254>

08001490 <phi_and_rho_funct>:
double calcul_axe_gyro(int8_t a, int8_t b){
	return (double) (a<<8 | b);
}
//These functions allow me to conpute tilt axes

double phi_and_rho_funct(double ax,double ay,double az){
 8001490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001494:	ec53 2b11 	vmov	r2, r3, d1
	return (atan(ax/sqrt(ay*ay + az*az))*180)/PI;
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
double phi_and_rho_funct(double ax,double ay,double az){
 800149c:	ec59 8b12 	vmov	r8, r9, d2
 80014a0:	ec55 4b10 	vmov	r4, r5, d0
	return (atan(ax/sqrt(ay*ay + az*az))*180)/PI;
 80014a4:	f7ff fa78 	bl	8000998 <__aeabi_dmul>
 80014a8:	4642      	mov	r2, r8
 80014aa:	4606      	mov	r6, r0
 80014ac:	460f      	mov	r7, r1
 80014ae:	464b      	mov	r3, r9
 80014b0:	4640      	mov	r0, r8
 80014b2:	4649      	mov	r1, r9
 80014b4:	f7ff fa70 	bl	8000998 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4630      	mov	r0, r6
 80014be:	4639      	mov	r1, r7
 80014c0:	f7ff f8b4 	bl	800062c <__adddf3>
 80014c4:	ec41 0b10 	vmov	d0, r0, r1
 80014c8:	f00f fa60 	bl	801098c <sqrt>
 80014cc:	4620      	mov	r0, r4
 80014ce:	ec53 2b10 	vmov	r2, r3, d0
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7ff fb8a 	bl	8000bec <__aeabi_ddiv>
 80014d8:	ec41 0b10 	vmov	d0, r0, r1
 80014dc:	f001 fbe0 	bl	8002ca0 <atan>
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <phi_and_rho_funct+0x78>)
 80014e2:	ec51 0b10 	vmov	r0, r1, d0
 80014e6:	2200      	movs	r2, #0
 80014e8:	f7ff fa56 	bl	8000998 <__aeabi_dmul>
 80014ec:	a304      	add	r3, pc, #16	; (adr r3, 8001500 <phi_and_rho_funct+0x70>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff fb7b 	bl	8000bec <__aeabi_ddiv>
}
 80014f6:	ec41 0b10 	vmov	d0, r0, r1
 80014fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014fe:	bf00      	nop
 8001500:	54524550 	.word	0x54524550
 8001504:	400921fb 	.word	0x400921fb
 8001508:	40668000 	.word	0x40668000
 800150c:	00000000 	.word	0x00000000

08001510 <tetha_funct>:

double tetha_funct(double ax,double ay,double az){
 8001510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001514:	ec53 2b10 	vmov	r2, r3, d0
	return (atan(sqrt(ax*ax + ay*ay)/az)*180)/PI;
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
double tetha_funct(double ax,double ay,double az){
 800151c:	ec59 8b11 	vmov	r8, r9, d1
 8001520:	ec55 4b12 	vmov	r4, r5, d2
	return (atan(sqrt(ax*ax + ay*ay)/az)*180)/PI;
 8001524:	f7ff fa38 	bl	8000998 <__aeabi_dmul>
 8001528:	4642      	mov	r2, r8
 800152a:	4606      	mov	r6, r0
 800152c:	460f      	mov	r7, r1
 800152e:	464b      	mov	r3, r9
 8001530:	4640      	mov	r0, r8
 8001532:	4649      	mov	r1, r9
 8001534:	f7ff fa30 	bl	8000998 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4630      	mov	r0, r6
 800153e:	4639      	mov	r1, r7
 8001540:	f7ff f874 	bl	800062c <__adddf3>
 8001544:	ec41 0b10 	vmov	d0, r0, r1
 8001548:	f00f fa20 	bl	801098c <sqrt>
 800154c:	4622      	mov	r2, r4
 800154e:	462b      	mov	r3, r5
 8001550:	ec51 0b10 	vmov	r0, r1, d0
 8001554:	f7ff fb4a 	bl	8000bec <__aeabi_ddiv>
 8001558:	ec41 0b10 	vmov	d0, r0, r1
 800155c:	f001 fba0 	bl	8002ca0 <atan>
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <tetha_funct+0x78>)
 8001562:	ec51 0b10 	vmov	r0, r1, d0
 8001566:	2200      	movs	r2, #0
 8001568:	f7ff fa16 	bl	8000998 <__aeabi_dmul>
 800156c:	a304      	add	r3, pc, #16	; (adr r3, 8001580 <tetha_funct+0x70>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff fb3b 	bl	8000bec <__aeabi_ddiv>
}
 8001576:	ec41 0b10 	vmov	d0, r0, r1
 800157a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800157e:	bf00      	nop
 8001580:	54524550 	.word	0x54524550
 8001584:	400921fb 	.word	0x400921fb
 8001588:	40668000 	.word	0x40668000
 800158c:	00000000 	.word	0x00000000

08001590 <work_handler>:
}

//The old time
uint32_t t_old=0;
static void work_handler(struct k_work *work)
{
 8001590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001594:	ed2d 8b04 	vpush	{d8-d9}
 8001598:	b08d      	sub	sp, #52	; 0x34
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
 800159a:	48af      	ldr	r0, [pc, #700]	; (8001858 <work_handler+0x2c8>)
 800159c:	f018 f899 	bl	80196d2 <z_impl_k_mutex_init>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
 80015a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a4:	2300      	movs	r3, #0
 80015a6:	48ac      	ldr	r0, [pc, #688]	; (8001858 <work_handler+0x2c8>)
				 uint16_t dev_addr,
				 uint8_t start_addr,
				 uint8_t *buf,
				 uint32_t num_bytes)
{
	return i2c_write_read(dev, dev_addr,
 80015a8:	4cac      	ldr	r4, [pc, #688]	; (800185c <work_handler+0x2cc>)
	uint32_t delta=0;
	k_mutex_init(&my_mutex);
  	k_mutex_lock(&my_mutex,K_MSEC(100));
	//Reading the accelerometer output registers
		i2c_burst_read_dt(&lsm6dsl,adresses,buffer,6);
		ax=  calcul_axe(buffer[1],buffer[0])*FULL_SCALE;
 80015aa:	4fad      	ldr	r7, [pc, #692]	; (8001860 <work_handler+0x2d0>)
		ay=  calcul_axe(buffer[3],buffer[2])*FULL_SCALE;
 80015ac:	f8df 9300 	ldr.w	r9, [pc, #768]	; 80018b0 <work_handler+0x320>
		az=  calcul_axe(buffer[5],buffer[4])*FULL_SCALE;
		rho=phi_and_rho_funct(ax,ay,az);
 80015b0:	4dac      	ldr	r5, [pc, #688]	; (8001864 <work_handler+0x2d4>)
		phi=phi_and_rho_funct(ay,ax,az);
 80015b2:	f8df 8300 	ldr.w	r8, [pc, #768]	; 80018b4 <work_handler+0x324>
 80015b6:	f00e fa27 	bl	800fa08 <z_impl_k_mutex_lock>
		i2c_burst_read_dt(&lsm6dsl,adresses,buffer,6);
 80015ba:	4bab      	ldr	r3, [pc, #684]	; (8001868 <work_handler+0x2d8>)
 80015bc:	48ab      	ldr	r0, [pc, #684]	; (800186c <work_handler+0x2dc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80015c4:	2606      	movs	r6, #6
 80015c6:	4623      	mov	r3, r4
 80015c8:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 80015cc:	216a      	movs	r1, #106	; 0x6a
 80015ce:	9600      	str	r6, [sp, #0]
 80015d0:	f013 f898 	bl	8014704 <i2c_write_read.constprop.0.isra.0>
	return (double) (a<<8 | b);
 80015d4:	f994 3000 	ldrsb.w	r3, [r4]
 80015d8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80015dc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80015e0:	f7ff f970 	bl	80008c4 <__aeabi_i2d>
		ax=  calcul_axe(buffer[1],buffer[0])*FULL_SCALE;
 80015e4:	4ba2      	ldr	r3, [pc, #648]	; (8001870 <work_handler+0x2e0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	f7ff f9d6 	bl	8000998 <__aeabi_dmul>
 80015ec:	a398      	add	r3, pc, #608	; (adr r3, 8001850 <work_handler+0x2c0>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff fafb 	bl	8000bec <__aeabi_ddiv>
	return (double) (a<<8 | b);
 80015f6:	f994 3002 	ldrsb.w	r3, [r4, #2]
		ax=  calcul_axe(buffer[1],buffer[0])*FULL_SCALE;
 80015fa:	ec41 0b18 	vmov	d8, r0, r1
 80015fe:	e9c7 0100 	strd	r0, r1, [r7]
	return (double) (a<<8 | b);
 8001602:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8001606:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800160a:	f7ff f95b 	bl	80008c4 <__aeabi_i2d>
		ay=  calcul_axe(buffer[3],buffer[2])*FULL_SCALE;
 800160e:	4b98      	ldr	r3, [pc, #608]	; (8001870 <work_handler+0x2e0>)
 8001610:	2200      	movs	r2, #0
 8001612:	f7ff f9c1 	bl	8000998 <__aeabi_dmul>
 8001616:	a38e      	add	r3, pc, #568	; (adr r3, 8001850 <work_handler+0x2c0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff fae6 	bl	8000bec <__aeabi_ddiv>
	return (double) (a<<8 | b);
 8001620:	f994 3004 	ldrsb.w	r3, [r4, #4]
		ay=  calcul_axe(buffer[3],buffer[2])*FULL_SCALE;
 8001624:	e9c9 0100 	strd	r0, r1, [r9]
 8001628:	ec41 0b19 	vmov	d9, r0, r1
	return (double) (a<<8 | b);
 800162c:	f994 0005 	ldrsb.w	r0, [r4, #5]
		az=  calcul_axe(buffer[5],buffer[4])*FULL_SCALE;
 8001630:	4c90      	ldr	r4, [pc, #576]	; (8001874 <work_handler+0x2e4>)
	return (double) (a<<8 | b);
 8001632:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001636:	f7ff f945 	bl	80008c4 <__aeabi_i2d>
		az=  calcul_axe(buffer[5],buffer[4])*FULL_SCALE;
 800163a:	4b8d      	ldr	r3, [pc, #564]	; (8001870 <work_handler+0x2e0>)
 800163c:	2200      	movs	r2, #0
 800163e:	f7ff f9ab 	bl	8000998 <__aeabi_dmul>
 8001642:	a383      	add	r3, pc, #524	; (adr r3, 8001850 <work_handler+0x2c0>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff fad0 	bl	8000bec <__aeabi_ddiv>
		rho=phi_and_rho_funct(ax,ay,az);
 800164c:	eeb0 1a49 	vmov.f32	s2, s18
 8001650:	eef0 1a69 	vmov.f32	s3, s19
 8001654:	eeb0 0a48 	vmov.f32	s0, s16
 8001658:	eef0 0a68 	vmov.f32	s1, s17
		az=  calcul_axe(buffer[5],buffer[4])*FULL_SCALE;
 800165c:	ec41 0b12 	vmov	d2, r0, r1
 8001660:	e9c4 0100 	strd	r0, r1, [r4]
		rho=phi_and_rho_funct(ax,ay,az);
 8001664:	f7ff ff14 	bl	8001490 <phi_and_rho_funct>
		phi=phi_and_rho_funct(ay,ax,az);
 8001668:	ed94 2b00 	vldr	d2, [r4]
		rho=phi_and_rho_funct(ax,ay,az);
 800166c:	ed85 0b00 	vstr	d0, [r5]
		phi=phi_and_rho_funct(ay,ax,az);
 8001670:	ed97 1b00 	vldr	d1, [r7]
 8001674:	ed99 0b00 	vldr	d0, [r9]
 8001678:	f7ff ff0a 	bl	8001490 <phi_and_rho_funct>
		teta=tetha_funct(ax,ay,az);
 800167c:	ed94 2b00 	vldr	d2, [r4]
 8001680:	ed99 1b00 	vldr	d1, [r9]
		phi=phi_and_rho_funct(ay,ax,az);
 8001684:	ed88 0b00 	vstr	d0, [r8]
		teta=tetha_funct(ax,ay,az);
 8001688:	ed97 0b00 	vldr	d0, [r7]
 800168c:	f7ff ff40 	bl	8001510 <tetha_funct>
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
 8001690:	4c79      	ldr	r4, [pc, #484]	; (8001878 <work_handler+0x2e8>)
 8001692:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80018b8 <work_handler+0x328>
 8001696:	4875      	ldr	r0, [pc, #468]	; (800186c <work_handler+0x2dc>)
 8001698:	231e      	movs	r3, #30
 800169a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800169e:	2301      	movs	r3, #1
 80016a0:	ed89 0b00 	vstr	d0, [r9]
 80016a4:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	216a      	movs	r1, #106	; 0x6a
 80016ac:	4623      	mov	r3, r4
 80016ae:	f013 f829 	bl	8014704 <i2c_write_read.constprop.0.isra.0>
		
		//Compute old angular rates of the gyroscope
		//Reading relevant data for the gyroscope
		i2c_reg_read_byte_dt(&lsm6dsl, 0x1E, &STATUS_REG);
		if(STATUS_REG==7 || STATUS_REG==6 || STATUS_REG==3 || STATUS_REG==2){
 80016b2:	7823      	ldrb	r3, [r4, #0]
 80016b4:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d148      	bne.n	800174e <work_handler+0x1be>
			i2c_burst_read_dt(&lsm6dsl,g_adresses,g_buffer,6);
 80016bc:	4b6f      	ldr	r3, [pc, #444]	; (800187c <work_handler+0x2ec>)
	return i2c_write_read(dev, dev_addr,
 80016be:	4c70      	ldr	r4, [pc, #448]	; (8001880 <work_handler+0x2f0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	486a      	ldr	r0, [pc, #424]	; (800186c <work_handler+0x2dc>)
 80016c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80016c8:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 80016cc:	4623      	mov	r3, r4
 80016ce:	216a      	movs	r1, #106	; 0x6a
 80016d0:	9600      	str	r6, [sp, #0]
 80016d2:	f013 f817 	bl	8014704 <i2c_write_read.constprop.0.isra.0>
	return (double) (a<<8 | b);
 80016d6:	f994 3000 	ldrsb.w	r3, [r4]
 80016da:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80016de:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80016e2:	f7ff f8ef 	bl	80008c4 <__aeabi_i2d>
			axg_o=  calcul_axe_gyro(g_buffer[1],g_buffer[0])*FULL_SCALE;
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <work_handler+0x2e0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f7ff f955 	bl	8000998 <__aeabi_dmul>
 80016ee:	a358      	add	r3, pc, #352	; (adr r3, 8001850 <work_handler+0x2c0>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7ff fa7a 	bl	8000bec <__aeabi_ddiv>
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <work_handler+0x2f4>)
 80016fa:	e9c3 0100 	strd	r0, r1, [r3]
	return (double) (a<<8 | b);
 80016fe:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8001702:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8001706:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800170a:	f7ff f8db 	bl	80008c4 <__aeabi_i2d>
			ayg_o=  calcul_axe_gyro(g_buffer[3],g_buffer[2])*FULL_SCALE;
 800170e:	4b58      	ldr	r3, [pc, #352]	; (8001870 <work_handler+0x2e0>)
 8001710:	2200      	movs	r2, #0
 8001712:	f7ff f941 	bl	8000998 <__aeabi_dmul>
 8001716:	a34e      	add	r3, pc, #312	; (adr r3, 8001850 <work_handler+0x2c0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7ff fa66 	bl	8000bec <__aeabi_ddiv>
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <work_handler+0x2f8>)
 8001722:	e9c3 0100 	strd	r0, r1, [r3]
	return (double) (a<<8 | b);
 8001726:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800172a:	f994 0005 	ldrsb.w	r0, [r4, #5]
 800172e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001732:	f7ff f8c7 	bl	80008c4 <__aeabi_i2d>
			azg_o=  calcul_axe_gyro(g_buffer[5],g_buffer[4])*FULL_SCALE;
 8001736:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <work_handler+0x2e0>)
 8001738:	2200      	movs	r2, #0
 800173a:	f7ff f92d 	bl	8000998 <__aeabi_dmul>
 800173e:	a344      	add	r3, pc, #272	; (adr r3, 8001850 <work_handler+0x2c0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff fa52 	bl	8000bec <__aeabi_ddiv>
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <work_handler+0x2fc>)
 800174a:	e9c3 0100 	strd	r0, r1, [r3]
	return z_impl_k_uptime_ticks();
 800174e:	f018 f965 	bl	8019a1c <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8001752:	220a      	movs	r2, #10
 8001754:	2300      	movs	r3, #0
 8001756:	f7ff fbf9 	bl	8000f4c <__aeabi_uldivmod>
		}
		//Get the current time then the difference with the old one
		t_new= k_uptime_get_32();
		delta= t_new - t_old;
 800175a:	f8df a160 	ldr.w	sl, [pc, #352]	; 80018bc <work_handler+0x32c>
		tilt_y_delta=ayg_o*delta;
		tilt_z_delta=azg_o*delta;
		//Compute the angles
		tilt_x= (tilt_x + tilt_x_delta)/10;
		tilt_y= (tilt_y + tilt_y_delta)/10;
		tilt_z= (tilt_z + tilt_z_delta)/10;
 800175e:	f8df b160 	ldr.w	fp, [pc, #352]	; 80018c0 <work_handler+0x330>
 8001762:	4604      	mov	r4, r0
		delta= t_new - t_old;
 8001764:	f8da 0000 	ldr.w	r0, [sl]
		tilt_x_delta=axg_o*delta;
 8001768:	1a20      	subs	r0, r4, r0
 800176a:	f7ff f89b 	bl	80008a4 <__aeabi_ui2d>
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <work_handler+0x2f4>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	4606      	mov	r6, r0
 8001776:	460f      	mov	r7, r1
 8001778:	f7ff f90e 	bl	8000998 <__aeabi_dmul>
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <work_handler+0x300>)
 800177e:	e9c3 0100 	strd	r0, r1, [r3]
		tilt_y_delta=ayg_o*delta;
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <work_handler+0x2f8>)
		tilt_x_delta=axg_o*delta;
 8001784:	e9cd 0104 	strd	r0, r1, [sp, #16]
		tilt_y_delta=ayg_o*delta;
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	4630      	mov	r0, r6
 800178e:	4639      	mov	r1, r7
 8001790:	f7ff f902 	bl	8000998 <__aeabi_dmul>
 8001794:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <work_handler+0x304>)
 8001796:	e9c3 0100 	strd	r0, r1, [r3]
		tilt_z_delta=azg_o*delta;
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <work_handler+0x2fc>)
		tilt_y_delta=ayg_o*delta;
 800179c:	e9cd 0106 	strd	r0, r1, [sp, #24]
		tilt_z_delta=azg_o*delta;
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	4630      	mov	r0, r6
 80017a6:	4639      	mov	r1, r7
 80017a8:	f7ff f8f6 	bl	8000998 <__aeabi_dmul>
		tilt_x= (tilt_x + tilt_x_delta)/10;
 80017ac:	4e3a      	ldr	r6, [pc, #232]	; (8001898 <work_handler+0x308>)
		tilt_z_delta=azg_o*delta;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <work_handler+0x30c>)
		tilt_y= (tilt_y + tilt_y_delta)/10;
 80017b0:	4f3b      	ldr	r7, [pc, #236]	; (80018a0 <work_handler+0x310>)
		tilt_z_delta=azg_o*delta;
 80017b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80017b6:	e9c3 0100 	strd	r0, r1, [r3]
		tilt_x= (tilt_x + tilt_x_delta)/10;
 80017ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80017be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80017c2:	f7fe ff33 	bl	800062c <__adddf3>
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <work_handler+0x314>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f7ff fa0f 	bl	8000bec <__aeabi_ddiv>
		tilt_y= (tilt_y + tilt_y_delta)/10;
 80017ce:	e9d7 2300 	ldrd	r2, r3, [r7]
		tilt_x= (tilt_x + tilt_x_delta)/10;
 80017d2:	e9c6 0100 	strd	r0, r1, [r6]
		tilt_y= (tilt_y + tilt_y_delta)/10;
 80017d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80017da:	f7fe ff27 	bl	800062c <__adddf3>
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <work_handler+0x314>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f7ff fa03 	bl	8000bec <__aeabi_ddiv>
		tilt_z= (tilt_z + tilt_z_delta)/10;
 80017e6:	e9db 2300 	ldrd	r2, r3, [fp]
		tilt_y= (tilt_y + tilt_y_delta)/10;
 80017ea:	e9c7 0100 	strd	r0, r1, [r7]
		tilt_z= (tilt_z + tilt_z_delta)/10;
 80017ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80017f2:	f7fe ff1b 	bl	800062c <__adddf3>
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <work_handler+0x314>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	f7ff f9f7 	bl	8000bec <__aeabi_ddiv>

		t_old=t_new;
 80017fe:	f8ca 4000 	str.w	r4, [sl]
		tilt_z= (tilt_z + tilt_z_delta)/10;
 8001802:	e9cb 0100 	strd	r0, r1, [fp]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <work_handler+0x2c8>)
 8001808:	f00e f978 	bl	800fafc <z_impl_k_mutex_unlock>

		k_mutex_unlock(&my_mutex);

		printk("Rho = %.3f, Phi = %.3f, Tetha = %.3f\n", rho, phi,teta);
 800180c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8001810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001814:	e9d8 2300 	ldrd	r2, r3, [r8]
 8001818:	e9cd 2300 	strd	r2, r3, [sp]
 800181c:	4822      	ldr	r0, [pc, #136]	; (80018a8 <work_handler+0x318>)
 800181e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001822:	f013 f804 	bl	801482e <printk>
		printk("tilt x  = %.3f, tilt y  = %.3f, tilt z = %.3f\n", tilt_x,tilt_y,tilt_z);
 8001826:	e9db 2300 	ldrd	r2, r3, [fp]
 800182a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800182e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001832:	e9cd 2300 	strd	r2, r3, [sp]
 8001836:	481d      	ldr	r0, [pc, #116]	; (80018ac <work_handler+0x31c>)
 8001838:	e9d6 2300 	ldrd	r2, r3, [r6]
 800183c:	f012 fff7 	bl	801482e <printk>
}  
 8001840:	b00d      	add	sp, #52	; 0x34
 8001842:	ecbd 8b04 	vpop	{d8-d9}
 8001846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	00000000 	.word	0x00000000
 8001854:	40dfffc0 	.word	0x40dfffc0
 8001858:	200019fc 	.word	0x200019fc
 800185c:	200022a1 	.word	0x200022a1
 8001860:	20000e78 	.word	0x20000e78
 8001864:	20000e90 	.word	0x20000e90
 8001868:	20000a05 	.word	0x20000a05
 800186c:	08019f58 	.word	0x08019f58
 8001870:	406f4000 	.word	0x406f4000
 8001874:	20000e68 	.word	0x20000e68
 8001878:	2000229a 	.word	0x2000229a
 800187c:	20000a04 	.word	0x20000a04
 8001880:	2000229b 	.word	0x2000229b
 8001884:	20000e60 	.word	0x20000e60
 8001888:	20000e58 	.word	0x20000e58
 800188c:	20000e50 	.word	0x20000e50
 8001890:	20000e48 	.word	0x20000e48
 8001894:	20000e40 	.word	0x20000e40
 8001898:	20000e30 	.word	0x20000e30
 800189c:	20000e38 	.word	0x20000e38
 80018a0:	20000e28 	.word	0x20000e28
 80018a4:	40240000 	.word	0x40240000
 80018a8:	0801b5fe 	.word	0x0801b5fe
 80018ac:	0801b624 	.word	0x0801b624
 80018b0:	20000e70 	.word	0x20000e70
 80018b4:	20000e88 	.word	0x20000e88
 80018b8:	20000e80 	.word	0x20000e80
 80018bc:	200019d8 	.word	0x200019d8
 80018c0:	20000e20 	.word	0x20000e20
 80018c4:	00000000 	.word	0x00000000

080018c8 <thread1>:

static void thread1(struct k_work *my_work){
 80018c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret=0;
	//Apply filter
	filter_rho   = 0.95*rho  + 0.05*tilt_x;
 80018cc:	4962      	ldr	r1, [pc, #392]	; (8001a58 <thread1+0x190>)
 80018ce:	4c63      	ldr	r4, [pc, #396]	; (8001a5c <thread1+0x194>)
	filter_phi   = 0.95*phi  + 0.05*tilt_y;
 80018d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a94 <thread1+0x1cc>
	filter_rho   = 0.95*rho  + 0.05*tilt_x;
 80018d4:	a35c      	add	r3, pc, #368	; (adr r3, 8001a48 <thread1+0x180>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018de:	f7ff f85b 	bl	8000998 <__aeabi_dmul>
 80018e2:	460f      	mov	r7, r1
 80018e4:	495e      	ldr	r1, [pc, #376]	; (8001a60 <thread1+0x198>)
 80018e6:	a35a      	add	r3, pc, #360	; (adr r3, 8001a50 <thread1+0x188>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	4606      	mov	r6, r0
 80018ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018f2:	f7ff f851 	bl	8000998 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4630      	mov	r0, r6
 80018fc:	4639      	mov	r1, r7
 80018fe:	f7fe fe95 	bl	800062c <__adddf3>
 8001902:	e9c4 0100 	strd	r0, r1, [r4]
	filter_phi   = 0.95*phi  + 0.05*tilt_y;
 8001906:	4957      	ldr	r1, [pc, #348]	; (8001a64 <thread1+0x19c>)
 8001908:	a34f      	add	r3, pc, #316	; (adr r3, 8001a48 <thread1+0x180>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001912:	f7ff f841 	bl	8000998 <__aeabi_dmul>
 8001916:	460f      	mov	r7, r1
 8001918:	4953      	ldr	r1, [pc, #332]	; (8001a68 <thread1+0x1a0>)
 800191a:	a34d      	add	r3, pc, #308	; (adr r3, 8001a50 <thread1+0x188>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	4606      	mov	r6, r0
 8001922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001926:	f7ff f837 	bl	8000998 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4630      	mov	r0, r6
 8001930:	4639      	mov	r1, r7
 8001932:	f7fe fe7b 	bl	800062c <__adddf3>
 8001936:	e9c8 0100 	strd	r0, r1, [r8]
	filter_tetha = 0.95*teta + 0.05*tilt_z;
 800193a:	494c      	ldr	r1, [pc, #304]	; (8001a6c <thread1+0x1a4>)
 800193c:	4f4c      	ldr	r7, [pc, #304]	; (8001a70 <thread1+0x1a8>)
	
	if (led.port && !device_is_ready(led.port)) {
 800193e:	4e4d      	ldr	r6, [pc, #308]	; (8001a74 <thread1+0x1ac>)
	filter_tetha = 0.95*teta + 0.05*tilt_z;
 8001940:	a341      	add	r3, pc, #260	; (adr r3, 8001a48 <thread1+0x180>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800194a:	f7ff f825 	bl	8000998 <__aeabi_dmul>
 800194e:	468b      	mov	fp, r1
 8001950:	4949      	ldr	r1, [pc, #292]	; (8001a78 <thread1+0x1b0>)
 8001952:	a33f      	add	r3, pc, #252	; (adr r3, 8001a50 <thread1+0x188>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	4682      	mov	sl, r0
 800195a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800195e:	f7ff f81b 	bl	8000998 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4650      	mov	r0, sl
 8001968:	4659      	mov	r1, fp
 800196a:	f7fe fe5f 	bl	800062c <__adddf3>
 800196e:	e9c7 0100 	strd	r0, r1, [r7]
	if (led.port && !device_is_ready(led.port)) {
 8001972:	6830      	ldr	r0, [r6, #0]
 8001974:	b150      	cbz	r0, 800198c <thread1+0xc4>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8001976:	f017 fe4d 	bl	8019614 <z_device_is_ready>
 800197a:	4605      	mov	r5, r0
 800197c:	b930      	cbnz	r0, 800198c <thread1+0xc4>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
		       ret, led.port->name);
 800197e:	6833      	ldr	r3, [r6, #0]
		printk("Error %d: LED device %s is not ready; ignoring it\n",
 8001980:	4601      	mov	r1, r0
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	483d      	ldr	r0, [pc, #244]	; (8001a7c <thread1+0x1b4>)
 8001986:	f012 ff52 	bl	801482e <printk>
		led.port = NULL;
 800198a:	6035      	str	r5, [r6, #0]
	}
	gpio_pin_set_dt(&led,filter_tetha);
 800198c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001990:	f7ff fa14 	bl	8000dbc <__aeabi_d2iz>
 8001994:	4601      	mov	r1, r0
 8001996:	4837      	ldr	r0, [pc, #220]	; (8001a74 <thread1+0x1ac>)
 8001998:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8001a98 <thread1+0x1d0>
 800199c:	f012 fec8 	bl	8014730 <gpio_pin_set_dt.isra.0>
 80019a0:	2600      	movs	r6, #0
	
	/* refresh and display */
	for(int i=0;i<8;i++){
    for(int j=0;j<8;j++){
 80019a2:	eb06 050a 	add.w	r5, r6, sl
 80019a6:	f04f 0900 	mov.w	r9, #0
      image.channels[3*8*i + 3*j+0]=abs((int8_t) filter_rho);    //R
 80019aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80019ae:	f7ff fa05 	bl	8000dbc <__aeabi_d2iz>
 80019b2:	b240      	sxtb	r0, r0
 80019b4:	f00f f8f0 	bl	8010b98 <abs>
 80019b8:	7028      	strb	r0, [r5, #0]
      image.channels[3*8*i + 3*j+1]=abs((int8_t) filter_rho);    //G
 80019ba:	e9d4 0100 	ldrd	r0, r1, [r4]
 80019be:	f7ff f9fd 	bl	8000dbc <__aeabi_d2iz>
 80019c2:	b240      	sxtb	r0, r0
 80019c4:	f00f f8e8 	bl	8010b98 <abs>
 80019c8:	7068      	strb	r0, [r5, #1]
      image.channels[3*8*i + 3*j+2]=abs((int8_t) filter_rho);    //B
 80019ca:	e9d4 0100 	ldrd	r0, r1, [r4]
 80019ce:	f7ff f9f5 	bl	8000dbc <__aeabi_d2iz>
 80019d2:	b240      	sxtb	r0, r0
 80019d4:	f00f f8e0 	bl	8010b98 <abs>
    for(int j=0;j<8;j++){
 80019d8:	f109 0901 	add.w	r9, r9, #1
 80019dc:	f1b9 0f08 	cmp.w	r9, #8
      image.channels[3*8*i + 3*j+2]=abs((int8_t) filter_rho);    //B
 80019e0:	70a8      	strb	r0, [r5, #2]
    for(int j=0;j<8;j++){
 80019e2:	f105 0503 	add.w	r5, r5, #3
 80019e6:	d1e0      	bne.n	80019aa <thread1+0xe2>
	for(int i=0;i<8;i++){
 80019e8:	3618      	adds	r6, #24
 80019ea:	2ec0      	cmp	r6, #192	; 0xc0
 80019ec:	d1d9      	bne.n	80019a2 <thread1+0xda>
    }
  }
	display();
 80019ee:	f005 fccb 	bl	8007388 <display>
    
    for (int row = 0; row < 8; row++) {
 80019f2:	4e23      	ldr	r6, [pc, #140]	; (8001a80 <thread1+0x1b8>)
 80019f4:	2500      	movs	r5, #0
      gpio_pin_set_dt(&rows[row], 1);
 80019f6:	4630      	mov	r0, r6
 80019f8:	2101      	movs	r1, #1
    for (int row = 0; row < 8; row++) {
 80019fa:	3501      	adds	r5, #1
      gpio_pin_set_dt(&rows[row], 1);
 80019fc:	f012 fe98 	bl	8014730 <gpio_pin_set_dt.isra.0>
    for (int row = 0; row < 8; row++) {
 8001a00:	2d08      	cmp	r5, #8
 8001a02:	f106 0608 	add.w	r6, r6, #8
 8001a06:	d1f6      	bne.n	80019f6 <thread1+0x12e>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a10:	481c      	ldr	r0, [pc, #112]	; (8001a84 <thread1+0x1bc>)
 8001a12:	f00e f8d7 	bl	800fbc4 <z_impl_k_sem_take>
    }
    k_sem_take(&my_sem, K_FOREVER);


	printf("Filter rho = %.3f\n", filter_rho);
 8001a16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <thread1+0x1c0>)
 8001a1c:	f00f fca2 	bl	8011364 <printf>
	printf("Filter phi = %.3f\n", filter_phi);
 8001a20:	e9d8 2300 	ldrd	r2, r3, [r8]
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <thread1+0x1c4>)
 8001a26:	f00f fc9d 	bl	8011364 <printf>
	printf("Filter tetha = %.3f\n", filter_tetha);
 8001a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a2e:	4818      	ldr	r0, [pc, #96]	; (8001a90 <thread1+0x1c8>)
 8001a30:	f00f fc98 	bl	8011364 <printf>
	return z_impl_k_sleep(timeout);
 8001a34:	f242 7010 	movw	r0, #10000	; 0x2710
	k_sleep(K_MSEC(1000));
	
}
 8001a38:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	f00e bc3d 	b.w	80102bc <z_impl_k_sleep>
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	3fee6666 	.word	0x3fee6666
 8001a50:	9999999a 	.word	0x9999999a
 8001a54:	3fa99999 	.word	0x3fa99999
 8001a58:	20000e90 	.word	0x20000e90
 8001a5c:	20000e18 	.word	0x20000e18
 8001a60:	20000e30 	.word	0x20000e30
 8001a64:	20000e88 	.word	0x20000e88
 8001a68:	20000e28 	.word	0x20000e28
 8001a6c:	20000e80 	.word	0x20000e80
 8001a70:	20000e08 	.word	0x20000e08
 8001a74:	20000698 	.word	0x20000698
 8001a78:	20000e20 	.word	0x20000e20
 8001a7c:	0801b653 	.word	0x0801b653
 8001a80:	0801a668 	.word	0x0801a668
 8001a84:	20000df0 	.word	0x20000df0
 8001a88:	0801b686 	.word	0x0801b686
 8001a8c:	0801b699 	.word	0x0801b699
 8001a90:	0801b6ac 	.word	0x0801b6ac
 8001a94:	20000e10 	.word	0x20000e10
 8001a98:	200022a7 	.word	0x200022a7
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8001aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa4:	b09f      	sub	sp, #124	; 0x7c
 8001aa6:	4682      	mov	sl, r0
 8001aa8:	9103      	str	r1, [sp, #12]
 8001aaa:	4616      	mov	r6, r2
 8001aac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8001aae:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8001ab0:	7830      	ldrb	r0, [r6, #0]
 8001ab2:	b910      	cbnz	r0, 8001aba <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f000 bd85 	b.w	80025c4 <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
 8001aba:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
 8001abc:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8001abe:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
 8001ac0:	d006      	beq.n	8001ad0 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
 8001ac2:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
 8001ac4:	47d0      	blx	sl
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	f2c0 857c 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 8001acc:	3501      	adds	r5, #1
		if (bps == NULL) {
 8001ace:	e21b      	b.n	8001f08 <z_cbvprintf_impl+0x468>
		} state = {
 8001ad0:	2218      	movs	r2, #24
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	a810      	add	r0, sp, #64	; 0x40
 8001ad6:	f00f fbdf 	bl	8011298 <memset>
	if (*sp == '%') {
 8001ada:	7873      	ldrb	r3, [r6, #1]
 8001adc:	2b25      	cmp	r3, #37	; 0x25
 8001ade:	f000 80ba 	beq.w	8001c56 <z_cbvprintf_impl+0x1b6>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	1c71      	adds	r1, r6, #1
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	469e      	mov	lr, r3
 8001aea:	469c      	mov	ip, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	460f      	mov	r7, r1
		switch (*sp) {
 8001af0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001af4:	2a2b      	cmp	r2, #43	; 0x2b
 8001af6:	f000 80dd 	beq.w	8001cb4 <z_cbvprintf_impl+0x214>
 8001afa:	f200 80d4 	bhi.w	8001ca6 <z_cbvprintf_impl+0x206>
 8001afe:	2a20      	cmp	r2, #32
 8001b00:	f000 80db 	beq.w	8001cba <z_cbvprintf_impl+0x21a>
 8001b04:	2a23      	cmp	r2, #35	; 0x23
 8001b06:	f000 80db 	beq.w	8001cc0 <z_cbvprintf_impl+0x220>
 8001b0a:	b12b      	cbz	r3, 8001b18 <z_cbvprintf_impl+0x78>
 8001b0c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b14:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001b18:	f1b8 0f00 	cmp.w	r8, #0
 8001b1c:	d005      	beq.n	8001b2a <z_cbvprintf_impl+0x8a>
 8001b1e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001b22:	f043 0320 	orr.w	r3, r3, #32
 8001b26:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001b2a:	f1be 0f00 	cmp.w	lr, #0
 8001b2e:	d005      	beq.n	8001b3c <z_cbvprintf_impl+0x9c>
 8001b30:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001b3c:	f1bc 0f00 	cmp.w	ip, #0
 8001b40:	d005      	beq.n	8001b4e <z_cbvprintf_impl+0xae>
 8001b42:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001b4e:	b128      	cbz	r0, 8001b5c <z_cbvprintf_impl+0xbc>
 8001b50:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
 8001b5c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001b60:	f003 0144 	and.w	r1, r3, #68	; 0x44
 8001b64:	2944      	cmp	r1, #68	; 0x44
 8001b66:	d103      	bne.n	8001b70 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
 8001b68:	f36f 1386 	bfc	r3, #6, #1
 8001b6c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
 8001b70:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001b74:	970e      	str	r7, [sp, #56]	; 0x38
 8001b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
 8001b7a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8001b7c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 8001b80:	f040 80a3 	bne.w	8001cca <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
 8001b84:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
 8001b90:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	2a2e      	cmp	r2, #46	; 0x2e
 8001b96:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2101      	moveq	r1, #1
 8001b9e:	2100      	movne	r1, #0
 8001ba0:	f361 0241 	bfi	r2, r1, #1, #1
 8001ba4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
 8001ba8:	d10c      	bne.n	8001bc4 <z_cbvprintf_impl+0x124>
	++sp;
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
 8001bae:	785a      	ldrb	r2, [r3, #1]
 8001bb0:	2a2a      	cmp	r2, #42	; 0x2a
 8001bb2:	f040 809a 	bne.w	8001cea <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
 8001bb6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001bba:	f042 0204 	orr.w	r2, r2, #4
 8001bbe:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
 8001bc2:	3302      	adds	r3, #2
	switch (*sp) {
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	2a6c      	cmp	r2, #108	; 0x6c
 8001bc8:	f000 80bb 	beq.w	8001d42 <z_cbvprintf_impl+0x2a2>
 8001bcc:	f200 809d 	bhi.w	8001d0a <z_cbvprintf_impl+0x26a>
 8001bd0:	2a68      	cmp	r2, #104	; 0x68
 8001bd2:	f000 80a3 	beq.w	8001d1c <z_cbvprintf_impl+0x27c>
 8001bd6:	2a6a      	cmp	r2, #106	; 0x6a
 8001bd8:	f000 80bc 	beq.w	8001d54 <z_cbvprintf_impl+0x2b4>
 8001bdc:	2a4c      	cmp	r2, #76	; 0x4c
 8001bde:	f000 80c1 	beq.w	8001d64 <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
 8001be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001be6:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
 8001be8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8001bea:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
 8001bee:	f200 8101 	bhi.w	8001df4 <z_cbvprintf_impl+0x354>
 8001bf2:	2a6d      	cmp	r2, #109	; 0x6d
 8001bf4:	f200 80c3 	bhi.w	8001d7e <z_cbvprintf_impl+0x2de>
 8001bf8:	2a69      	cmp	r2, #105	; 0x69
 8001bfa:	f200 80fb 	bhi.w	8001df4 <z_cbvprintf_impl+0x354>
 8001bfe:	2a57      	cmp	r2, #87	; 0x57
 8001c00:	f200 80da 	bhi.w	8001db8 <z_cbvprintf_impl+0x318>
 8001c04:	2a41      	cmp	r2, #65	; 0x41
 8001c06:	d004      	beq.n	8001c12 <z_cbvprintf_impl+0x172>
 8001c08:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	f200 80f1 	bhi.w	8001df4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
 8001c12:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 8001c16:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 8001c1a:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 8001c1c:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 8001c20:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 8001c24:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
 8001c26:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
 8001c2a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 8001c2e:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
 8001c30:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 8001c34:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 8001c36:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
 8001c3a:	b2cb      	uxtb	r3, r1
 8001c3c:	f100 8119 	bmi.w	8001e72 <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
 8001c40:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8001c44:	2a18      	cmp	r2, #24
 8001c46:	f040 8103 	bne.w	8001e50 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
 8001c4a:	f36f 03c6 	bfc	r3, #3, #4
 8001c4e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e0f2      	b.n	8001e3c <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
 8001c56:	1cb2      	adds	r2, r6, #2
 8001c58:	9206      	str	r2, [sp, #24]
 8001c5a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
 8001c5e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001c62:	07d9      	lsls	r1, r3, #31
 8001c64:	f140 8107 	bpl.w	8001e76 <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
 8001c68:	f854 2b04 	ldr.w	r2, [r4], #4
 8001c6c:	9204      	str	r2, [sp, #16]
			if (width < 0) {
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	da08      	bge.n	8001c84 <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
 8001c72:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001c76:	f042 0204 	orr.w	r2, r2, #4
 8001c7a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
 8001c7e:	9a04      	ldr	r2, [sp, #16]
 8001c80:	4252      	negs	r2, r2
		int width = -1;
 8001c82:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
 8001c84:	075a      	lsls	r2, r3, #29
 8001c86:	f140 80fe 	bpl.w	8001e86 <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
 8001c8a:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	f280 80fd 	bge.w	8001e8e <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
 8001c94:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001c98:	f36f 0341 	bfc	r3, #1, #1
 8001c9c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
 8001ca0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ca4:	e0f3      	b.n	8001e8e <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
 8001ca6:	2a2d      	cmp	r2, #45	; 0x2d
 8001ca8:	d00d      	beq.n	8001cc6 <z_cbvprintf_impl+0x226>
 8001caa:	2a30      	cmp	r2, #48	; 0x30
 8001cac:	f47f af2d 	bne.w	8001b0a <z_cbvprintf_impl+0x6a>
 8001cb0:	2301      	movs	r3, #1
	} while (loop);
 8001cb2:	e71c      	b.n	8001aee <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 8001cb4:	f04f 0c01 	mov.w	ip, #1
 8001cb8:	e719      	b.n	8001aee <z_cbvprintf_impl+0x4e>
 8001cba:	f04f 0e01 	mov.w	lr, #1
 8001cbe:	e716      	b.n	8001aee <z_cbvprintf_impl+0x4e>
 8001cc0:	f04f 0801 	mov.w	r8, #1
 8001cc4:	e713      	b.n	8001aee <z_cbvprintf_impl+0x4e>
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	e711      	b.n	8001aee <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
 8001cca:	a80e      	add	r0, sp, #56	; 0x38
 8001ccc:	f005 fe1a 	bl	8007904 <extract_decimal>
	if (sp != wp) {
 8001cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001cd2:	42bb      	cmp	r3, r7
 8001cd4:	f43f af5d 	beq.w	8001b92 <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
 8001cd8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
 8001cdc:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
 8001cde:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
 8001ce0:	f360 0241 	bfi	r2, r0, #1, #1
 8001ce4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8001ce8:	e753      	b.n	8001b92 <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
 8001cea:	a80e      	add	r0, sp, #56	; 0x38
 8001cec:	f005 fe0a 	bl	8007904 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8001cf0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
 8001cf4:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
 8001cf6:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8001cfa:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8001cfe:	f362 0341 	bfi	r3, r2, #1, #1
 8001d02:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
 8001d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d08:	e75c      	b.n	8001bc4 <z_cbvprintf_impl+0x124>
	switch (*sp) {
 8001d0a:	2a74      	cmp	r2, #116	; 0x74
 8001d0c:	d026      	beq.n	8001d5c <z_cbvprintf_impl+0x2bc>
 8001d0e:	2a7a      	cmp	r2, #122	; 0x7a
 8001d10:	f47f af67 	bne.w	8001be2 <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
 8001d14:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001d18:	2106      	movs	r1, #6
 8001d1a:	e00c      	b.n	8001d36 <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
 8001d1c:	785a      	ldrb	r2, [r3, #1]
 8001d1e:	2a68      	cmp	r2, #104	; 0x68
 8001d20:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001d24:	d106      	bne.n	8001d34 <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
 8001d26:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8001d28:	f361 02c6 	bfi	r2, r1, #3, #4
 8001d2c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
 8001d30:	3302      	adds	r3, #2
 8001d32:	e756      	b.n	8001be2 <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
 8001d34:	2102      	movs	r1, #2
 8001d36:	f361 02c6 	bfi	r2, r1, #3, #4
 8001d3a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
 8001d3e:	3301      	adds	r3, #1
 8001d40:	e74f      	b.n	8001be2 <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
 8001d42:	785a      	ldrb	r2, [r3, #1]
 8001d44:	2a6c      	cmp	r2, #108	; 0x6c
 8001d46:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001d4a:	d101      	bne.n	8001d50 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	e7eb      	b.n	8001d28 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
 8001d50:	2103      	movs	r1, #3
 8001d52:	e7f0      	b.n	8001d36 <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
 8001d54:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001d58:	2105      	movs	r1, #5
 8001d5a:	e7ec      	b.n	8001d36 <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
 8001d5c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001d60:	2107      	movs	r1, #7
 8001d62:	e7e8      	b.n	8001d36 <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
 8001d64:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8001d68:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001d6c:	f022 0202 	bic.w	r2, r2, #2
 8001d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d74:	f042 0202 	orr.w	r2, r2, #2
 8001d78:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
 8001d7c:	e7df      	b.n	8001d3e <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
 8001d7e:	3a6e      	subs	r2, #110	; 0x6e
 8001d80:	b2d3      	uxtb	r3, r2
 8001d82:	2201      	movs	r2, #1
 8001d84:	409a      	lsls	r2, r3
 8001d86:	f240 4382 	movw	r3, #1154	; 0x482
 8001d8a:	421a      	tst	r2, r3
 8001d8c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001d90:	d137      	bne.n	8001e02 <z_cbvprintf_impl+0x362>
 8001d92:	f012 0f24 	tst.w	r2, #36	; 0x24
 8001d96:	d15f      	bne.n	8001e58 <z_cbvprintf_impl+0x3b8>
 8001d98:	07d1      	lsls	r1, r2, #31
 8001d9a:	d52b      	bpl.n	8001df4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
 8001d9c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001da0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001da4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8001da8:	2103      	movs	r1, #3
 8001daa:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001dae:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8001db0:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001db4:	4143      	adcs	r3, r0
 8001db6:	e041      	b.n	8001e3c <z_cbvprintf_impl+0x39c>
	switch (conv->specifier) {
 8001db8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8001dbc:	b2c9      	uxtb	r1, r1
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	fa00 f101 	lsl.w	r1, r0, r1
 8001dc4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8001dc8:	f47f af23 	bne.w	8001c12 <z_cbvprintf_impl+0x172>
 8001dcc:	f640 0301 	movw	r3, #2049	; 0x801
 8001dd0:	4219      	tst	r1, r3
 8001dd2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001dd6:	d11a      	bne.n	8001e0e <z_cbvprintf_impl+0x36e>
 8001dd8:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8001ddc:	d00a      	beq.n	8001df4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
 8001dde:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8001de2:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001de6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001dea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8001dec:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001df0:	f47f af2f 	bne.w	8001c52 <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
 8001df4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
 8001e00:	e727      	b.n	8001c52 <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
 8001e02:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8001e06:	2102      	movs	r1, #2
 8001e08:	f361 0202 	bfi	r2, r1, #0, #3
 8001e0c:	e7eb      	b.n	8001de6 <z_cbvprintf_impl+0x346>
 8001e0e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8001e12:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001e14:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8001e18:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8001e1e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
 8001e22:	bf02      	ittt	eq
 8001e24:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
 8001e28:	f041 0101 	orreq.w	r1, r1, #1
 8001e2c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
 8001e30:	2a63      	cmp	r2, #99	; 0x63
 8001e32:	f47f af0e 	bne.w	8001c52 <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001e36:	3b00      	subs	r3, #0
 8001e38:	bf18      	it	ne
 8001e3a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8001e3c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001e40:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001e44:	430b      	orrs	r3, r1
 8001e46:	f363 0241 	bfi	r2, r3, #1, #1
 8001e4a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 8001e4e:	e706      	b.n	8001c5e <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
 8001e50:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001e54:	d1ce      	bne.n	8001df4 <z_cbvprintf_impl+0x354>
 8001e56:	e6fc      	b.n	8001c52 <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
 8001e58:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8001e5c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8001e5e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8001e62:	f361 0202 	bfi	r2, r1, #0, #3
 8001e66:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	e7e4      	b.n	8001e3c <z_cbvprintf_impl+0x39c>
			unsupported = true;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e7e2      	b.n	8001e3c <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
 8001e76:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
 8001e7a:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8001e7c:	bfb4      	ite	lt
 8001e7e:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
 8001e80:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
 8001e84:	e6fd      	b.n	8001c82 <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
 8001e86:	079f      	lsls	r7, r3, #30
 8001e88:	f57f af0a 	bpl.w	8001ca0 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
 8001e8c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
 8001e8e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8001e90:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8001e94:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8001e98:	f003 0207 	and.w	r2, r3, #7
 8001e9c:	2a04      	cmp	r2, #4
 8001e9e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001ea2:	d107      	bne.n	8001eb4 <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
 8001ea4:	0790      	lsls	r0, r2, #30
 8001ea6:	d405      	bmi.n	8001eb4 <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
 8001ea8:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
 8001eac:	2900      	cmp	r1, #0
 8001eae:	bfac      	ite	ge
 8001eb0:	2706      	movge	r7, #6
 8001eb2:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
 8001eb4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8001eb8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8001eba:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8001ebe:	d133      	bne.n	8001f28 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
 8001ec0:	1ed3      	subs	r3, r2, #3
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d804      	bhi.n	8001ed0 <z_cbvprintf_impl+0x430>
 8001ec6:	e8df f003 	tbb	[pc, r3]
 8001eca:	4621      	.short	0x4621
 8001ecc:	2146      	.short	0x2146
 8001ece:	21          	.byte	0x21
 8001ecf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8001ed0:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8001ed2:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
 8001ed4:	ea4f 71e3 	mov.w	r1, r3, asr #31
 8001ed8:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 8001edc:	d11c      	bne.n	8001f18 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
 8001ede:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
 8001ee2:	17d9      	asrs	r1, r3, #31
 8001ee4:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
 8001ee8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8001eea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001eee:	9307      	str	r3, [sp, #28]
 8001ef0:	0799      	lsls	r1, r3, #30
 8001ef2:	d050      	beq.n	8001f96 <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
 8001ef4:	9b06      	ldr	r3, [sp, #24]
 8001ef6:	9903      	ldr	r1, [sp, #12]
 8001ef8:	4632      	mov	r2, r6
 8001efa:	4650      	mov	r0, sl
 8001efc:	f012 fcea 	bl	80148d4 <outs>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	f2c0 835f 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 8001f06:	4405      	add	r5, r0
			continue;
 8001f08:	9e06      	ldr	r6, [sp, #24]
 8001f0a:	e5d1      	b.n	8001ab0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001f0c:	f854 3b04 	ldr.w	r3, [r4], #4
 8001f10:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
 8001f12:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
 8001f16:	e7e8      	b.n	8001eea <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
 8001f18:	2a02      	cmp	r2, #2
 8001f1a:	d1e5      	bne.n	8001ee8 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
 8001f1c:	b219      	sxth	r1, r3
 8001f1e:	f343 33c0 	sbfx	r3, r3, #15, #1
 8001f22:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
 8001f26:	e7df      	b.n	8001ee8 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d124      	bne.n	8001f76 <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
 8001f2c:	1ed3      	subs	r3, r2, #3
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d804      	bhi.n	8001f3c <z_cbvprintf_impl+0x49c>
 8001f32:	e8df f003 	tbb	[pc, r3]
 8001f36:	1018      	.short	0x1018
 8001f38:	1810      	.short	0x1810
 8001f3a:	18          	.byte	0x18
 8001f3b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8001f3c:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
 8001f3e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	d014      	beq.n	8001f72 <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
 8001f48:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
 8001f4a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
 8001f4e:	d1cc      	bne.n	8001eea <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
 8001f50:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8001f52:	9310      	str	r3, [sp, #64]	; 0x40
 8001f54:	e7c9      	b.n	8001eea <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
 8001f56:	3407      	adds	r4, #7
 8001f58:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8001f5c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8001f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 8001f64:	e7c1      	b.n	8001eea <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
 8001f66:	f854 3b04 	ldr.w	r3, [r4], #4
 8001f6a:	9310      	str	r3, [sp, #64]	; 0x40
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
 8001f70:	e7bb      	b.n	8001eea <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e7cd      	b.n	8001f12 <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d108      	bne.n	8001f8c <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
 8001f7a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8001f7c:	f024 0407 	bic.w	r4, r4, #7
 8001f80:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001f84:	3408      	adds	r4, #8
 8001f86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001f8a:	e7ae      	b.n	8001eea <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d1ac      	bne.n	8001eea <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
 8001f90:	f854 3b04 	ldr.w	r3, [r4], #4
 8001f94:	e7dd      	b.n	8001f52 <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
 8001f96:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
 8001f9a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
 8001f9e:	d8b3      	bhi.n	8001f08 <z_cbvprintf_impl+0x468>
 8001fa0:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
 8001fa4:	d849      	bhi.n	800203a <z_cbvprintf_impl+0x59a>
 8001fa6:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8001faa:	f000 8091 	beq.w	80020d0 <z_cbvprintf_impl+0x630>
 8001fae:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
 8001fb2:	d9a9      	bls.n	8001f08 <z_cbvprintf_impl+0x468>
 8001fb4:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
 8001fb8:	d003      	beq.n	8001fc2 <z_cbvprintf_impl+0x522>
 8001fba:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
 8001fbe:	2a02      	cmp	r2, #2
 8001fc0:	d8a2      	bhi.n	8001f08 <z_cbvprintf_impl+0x468>
	} u = {
 8001fc2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	f2c0 8136 	blt.w	8002238 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
 8001fcc:	9b07      	ldr	r3, [sp, #28]
 8001fce:	071e      	lsls	r6, r3, #28
 8001fd0:	f100 8135 	bmi.w	800223e <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
 8001fd4:	f3c3 1900 	ubfx	r9, r3, #4, #1
 8001fd8:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8001fdc:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8001fe0:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	f040 812d 	bne.w	8002244 <z_cbvprintf_impl+0x7a4>
 8001fea:	ea51 0602 	orrs.w	r6, r1, r2
 8001fee:	bf14      	ite	ne
 8001ff0:	2601      	movne	r6, #1
 8001ff2:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
 8001ff4:	02d2      	lsls	r2, r2, #11
 8001ff6:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
 8001ffa:	02c9      	lsls	r1, r1, #11
		c = 'f';
 8001ffc:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
 8002000:	ea40 0e01 	orr.w	lr, r0, r1
 8002004:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
 8002008:	bf08      	it	eq
 800200a:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
 800200e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8002012:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
 8002016:	f000 819c 	beq.w	8002352 <z_cbvprintf_impl+0x8b2>
		if (is_subnormal) {
 800201a:	2e00      	cmp	r6, #0
 800201c:	f040 8149 	bne.w	80022b2 <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
 8002020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002022:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8002026:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
 800202a:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 800202c:	2000      	movs	r0, #0
 800202e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8002032:	4606      	mov	r6, r0
		fract *= 5U;
 8002034:	f04f 0c05 	mov.w	ip, #5
 8002038:	e155      	b.n	80022e6 <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
 800203a:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
 800203e:	2920      	cmp	r1, #32
 8002040:	f63f af62 	bhi.w	8001f08 <z_cbvprintf_impl+0x468>
 8002044:	a001      	add	r0, pc, #4	; (adr r0, 800204c <z_cbvprintf_impl+0x5ac>)
 8002046:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800204a:	bf00      	nop
 800204c:	080021d7 	.word	0x080021d7
 8002050:	08001f09 	.word	0x08001f09
 8002054:	08001f09 	.word	0x08001f09
 8002058:	08001f09 	.word	0x08001f09
 800205c:	08001f09 	.word	0x08001f09
 8002060:	08001f09 	.word	0x08001f09
 8002064:	08001f09 	.word	0x08001f09
 8002068:	08001f09 	.word	0x08001f09
 800206c:	08001f09 	.word	0x08001f09
 8002070:	08001fc3 	.word	0x08001fc3
 8002074:	08001f09 	.word	0x08001f09
 8002078:	0800215b 	.word	0x0800215b
 800207c:	0800216f 	.word	0x0800216f
 8002080:	08001fc3 	.word	0x08001fc3
 8002084:	08001fc3 	.word	0x08001fc3
 8002088:	08001fc3 	.word	0x08001fc3
 800208c:	08001f09 	.word	0x08001f09
 8002090:	0800216f 	.word	0x0800216f
 8002094:	08001f09 	.word	0x08001f09
 8002098:	08001f09 	.word	0x08001f09
 800209c:	08001f09 	.word	0x08001f09
 80020a0:	08001f09 	.word	0x08001f09
 80020a4:	08002211 	.word	0x08002211
 80020a8:	080021d7 	.word	0x080021d7
 80020ac:	080021dd 	.word	0x080021dd
 80020b0:	08001f09 	.word	0x08001f09
 80020b4:	08001f09 	.word	0x08001f09
 80020b8:	080020d7 	.word	0x080020d7
 80020bc:	08001f09 	.word	0x08001f09
 80020c0:	080021d7 	.word	0x080021d7
 80020c4:	08001f09 	.word	0x08001f09
 80020c8:	08001f09 	.word	0x08001f09
 80020cc:	080021d7 	.word	0x080021d7
			OUTC('%');
 80020d0:	9903      	ldr	r1, [sp, #12]
 80020d2:	4658      	mov	r0, fp
 80020d4:	e4f6      	b.n	8001ac4 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
 80020d6:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 80020d8:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
 80020da:	db3a      	blt.n	8002152 <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
 80020dc:	4639      	mov	r1, r7
 80020de:	4630      	mov	r0, r6
 80020e0:	f00f fae6 	bl	80116b0 <strnlen>
			bpe = bps + len;
 80020e4:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
 80020e6:	2e00      	cmp	r6, #0
 80020e8:	f43f af0e 	beq.w	8001f08 <z_cbvprintf_impl+0x468>
		char sign = 0;
 80020ec:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
 80020f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80020f4:	f013 0210 	ands.w	r2, r3, #16
 80020f8:	9205      	str	r2, [sp, #20]
 80020fa:	f000 8258 	beq.w	80025ae <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
 80020fe:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8002100:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
 8002104:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
 8002108:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
 800210a:	bf18      	it	ne
 800210c:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
 800210e:	f8cd 801c 	str.w	r8, [sp, #28]
 8002112:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
 8002114:	bf18      	it	ne
 8002116:	18c0      	addne	r0, r0, r3
		if (width > 0) {
 8002118:	9b04      	ldr	r3, [sp, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f340 8262 	ble.w	80025e4 <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
 8002120:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
 8002124:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
 8002126:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
 8002128:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
 800212a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 800212e:	f100 8259 	bmi.w	80025e4 <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
 8002132:	0651      	lsls	r1, r2, #25
 8002134:	f140 8249 	bpl.w	80025ca <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
 8002138:	f1b9 0f00 	cmp.w	r9, #0
 800213c:	d007      	beq.n	800214e <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
 800213e:	9903      	ldr	r1, [sp, #12]
 8002140:	4648      	mov	r0, r9
 8002142:	47d0      	blx	sl
 8002144:	2800      	cmp	r0, #0
 8002146:	f2c0 823d 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 800214a:	3501      	adds	r5, #1
						sign = 0;
 800214c:	46d9      	mov	r9, fp
					pad = '0';
 800214e:	2230      	movs	r2, #48	; 0x30
 8002150:	e23c      	b.n	80025cc <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
 8002152:	4630      	mov	r0, r6
 8002154:	f7fe f834 	bl	80001c0 <strlen>
 8002158:	e7c4      	b.n	80020e4 <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 800215a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800215c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
 8002160:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
 8002164:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
 8002168:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 800216a:	2001      	movs	r0, #1
 800216c:	e7c0      	b.n	80020f0 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
 800216e:	9b07      	ldr	r3, [sp, #28]
 8002170:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
 8002172:	bf58      	it	pl
 8002174:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
 8002178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
 800217c:	bf54      	ite	pl
 800217e:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
 8002182:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
 8002186:	2b00      	cmp	r3, #0
 8002188:	da06      	bge.n	8002198 <z_cbvprintf_impl+0x6f8>
				value->uint = (uint_value_type)-sint;
 800218a:	4252      	negs	r2, r2
 800218c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002190:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
 8002194:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002198:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80021a2:	ab17      	add	r3, sp, #92	; 0x5c
 80021a4:	aa12      	add	r2, sp, #72	; 0x48
 80021a6:	f005 fbc3 	bl	8007930 <encode_uint>
 80021aa:	4606      	mov	r6, r0
			if (precision >= 0) {
 80021ac:	2f00      	cmp	r7, #0
 80021ae:	db0c      	blt.n	80021ca <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
 80021b0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
 80021b4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 80021b8:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
 80021ba:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 80021be:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 80021c0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
 80021c4:	d901      	bls.n	80021ca <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
 80021c6:	1afb      	subs	r3, r7, r3
 80021c8:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
 80021ca:	2e00      	cmp	r6, #0
 80021cc:	f43f ae9c 	beq.w	8001f08 <z_cbvprintf_impl+0x468>
 80021d0:	f10d 0775 	add.w	r7, sp, #117	; 0x75
 80021d4:	e05b      	b.n	800228e <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
 80021d6:	f04f 0900 	mov.w	r9, #0
 80021da:	e7dd      	b.n	8002198 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
 80021dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80021de:	2800      	cmp	r0, #0
 80021e0:	f000 81e0 	beq.w	80025a4 <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80021e4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	aa12      	add	r2, sp, #72	; 0x48
 80021ec:	ab17      	add	r3, sp, #92	; 0x5c
 80021ee:	2100      	movs	r1, #0
 80021f0:	f005 fb9e 	bl	8007930 <encode_uint>
				conv->altform_0c = true;
 80021f4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 80021f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80021fc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002200:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002204:	4606      	mov	r6, r0
				conv->altform_0c = true;
 8002206:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
 800220a:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
 800220e:	e7cd      	b.n	80021ac <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
 8002210:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
 8002212:	2a07      	cmp	r2, #7
 8002214:	f63f ae78 	bhi.w	8001f08 <z_cbvprintf_impl+0x468>
 8002218:	e8df f002 	tbb	[pc, r2]
 800221c:	0c06040c 	.word	0x0c06040c
 8002220:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8002224:	701d      	strb	r5, [r3, #0]
		break;
 8002226:	e66f      	b.n	8001f08 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
 8002228:	801d      	strh	r5, [r3, #0]
		break;
 800222a:	e66d      	b.n	8001f08 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
 800222c:	17ea      	asrs	r2, r5, #31
 800222e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8002232:	e669      	b.n	8001f08 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002234:	601d      	str	r5, [r3, #0]
		break;
 8002236:	e667      	b.n	8001f08 <z_cbvprintf_impl+0x468>
		*sign = '-';
 8002238:	f04f 092d 	mov.w	r9, #45	; 0x2d
 800223c:	e6ce      	b.n	8001fdc <z_cbvprintf_impl+0x53c>
		*sign = '+';
 800223e:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8002242:	e6cb      	b.n	8001fdc <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8002244:	f240 76ff 	movw	r6, #2047	; 0x7ff
 8002248:	42b0      	cmp	r0, r6
 800224a:	d12f      	bne.n	80022ac <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
 800224c:	f10b 0301 	add.w	r3, fp, #1
 8002250:	489f      	ldr	r0, [pc, #636]	; (80024d0 <z_cbvprintf_impl+0xa30>)
 8002252:	b2db      	uxtb	r3, r3
		if (fract == 0) {
 8002254:	430a      	orrs	r2, r1
 8002256:	5cc3      	ldrb	r3, [r0, r3]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	d11e      	bne.n	800229c <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
 800225e:	2b01      	cmp	r3, #1
 8002260:	bf0b      	itete	eq
 8002262:	2349      	moveq	r3, #73	; 0x49
 8002264:	2369      	movne	r3, #105	; 0x69
 8002266:	214e      	moveq	r1, #78	; 0x4e
 8002268:	216e      	movne	r1, #110	; 0x6e
 800226a:	bf0c      	ite	eq
 800226c:	2246      	moveq	r2, #70	; 0x46
 800226e:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
 8002270:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
 8002274:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
 8002278:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
 800227c:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
 8002280:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
 8002284:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
 8002288:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
 800228c:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 800228e:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
 8002290:	f1b9 0f00 	cmp.w	r9, #0
 8002294:	f43f af2c 	beq.w	80020f0 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
 8002298:	3001      	adds	r0, #1
 800229a:	e729      	b.n	80020f0 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
 800229c:	2b01      	cmp	r3, #1
 800229e:	bf15      	itete	ne
 80022a0:	236e      	movne	r3, #110	; 0x6e
 80022a2:	234e      	moveq	r3, #78	; 0x4e
 80022a4:	2161      	movne	r1, #97	; 0x61
 80022a6:	2141      	moveq	r1, #65	; 0x41
 80022a8:	461a      	mov	r2, r3
 80022aa:	e7e1      	b.n	8002270 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
 80022ac:	2600      	movs	r6, #0
 80022ae:	e6a1      	b.n	8001ff4 <z_cbvprintf_impl+0x554>
				expo--;
 80022b0:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 80022b2:	1849      	adds	r1, r1, r1
 80022b4:	4152      	adcs	r2, r2
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	dafa      	bge.n	80022b0 <z_cbvprintf_impl+0x810>
 80022ba:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80022be:	e6af      	b.n	8002020 <z_cbvprintf_impl+0x580>
			fract >>= 1;
 80022c0:	0849      	lsrs	r1, r1, #1
 80022c2:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 80022c6:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 80022c8:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
 80022cc:	4640      	mov	r0, r8
			expo++;
 80022ce:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 80022d2:	d2f5      	bcs.n	80022c0 <z_cbvprintf_impl+0x820>
		fract *= 5U;
 80022d4:	fb0c fe02 	mul.w	lr, ip, r2
 80022d8:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
 80022dc:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
 80022e0:	4472      	add	r2, lr
		decexp--;
 80022e2:	3e01      	subs	r6, #1
 80022e4:	2001      	movs	r0, #1
	while (expo < -2) {
 80022e6:	f118 0f02 	cmn.w	r8, #2
 80022ea:	dbe9      	blt.n	80022c0 <z_cbvprintf_impl+0x820>
 80022ec:	b108      	cbz	r0, 80022f2 <z_cbvprintf_impl+0x852>
 80022ee:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
 80022f2:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
 80022f6:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
 80022fa:	dc2d      	bgt.n	8002358 <z_cbvprintf_impl+0x8b8>
	fract >>= (4 - expo);
 80022fc:	f1c8 0004 	rsb	r0, r8, #4
 8002300:	f1a0 0c20 	sub.w	ip, r0, #32
 8002304:	f108 081c 	add.w	r8, r8, #28
 8002308:	40c2      	lsrs	r2, r0
 800230a:	fa01 f808 	lsl.w	r8, r1, r8
 800230e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8002312:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
 8002314:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
 8002318:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
 800231c:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
 800231e:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
 8002322:	d13a      	bne.n	800239a <z_cbvprintf_impl+0x8fa>
		if (decexp < (-4 + 1) || decexp > precision) {
 8002324:	1cf0      	adds	r0, r6, #3
 8002326:	db01      	blt.n	800232c <z_cbvprintf_impl+0x88c>
 8002328:	42b7      	cmp	r7, r6
 800232a:	da2b      	bge.n	8002384 <z_cbvprintf_impl+0x8e4>
			c += 'e' - 'g';  /* e or E */
 800232c:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
 8002330:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
 8002332:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
 8002336:	dd7d      	ble.n	8002434 <z_cbvprintf_impl+0x994>
		if (!conv->flag_hash && (precision > 0)) {
 8002338:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800233c:	0683      	lsls	r3, r0, #26
				precision--;
 800233e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 8002342:	d477      	bmi.n	8002434 <z_cbvprintf_impl+0x994>
 8002344:	1e3b      	subs	r3, r7, #0
 8002346:	bf18      	it	ne
 8002348:	2301      	movne	r3, #1
	bool prune_zero = false;
 800234a:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
 800234c:	f107 0801 	add.w	r8, r7, #1
 8002350:	e02d      	b.n	80023ae <z_cbvprintf_impl+0x90e>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8002352:	f04f 0800 	mov.w	r8, #0
 8002356:	e669      	b.n	800202c <z_cbvprintf_impl+0x58c>
		fract += 2;
 8002358:	3202      	adds	r2, #2
 800235a:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
 800235e:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
 8002360:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
 8002364:	f012 fa87 	bl	8014876 <_ldiv5>
		expo--;
 8002368:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 800236c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
 8002370:	3601      	adds	r6, #1
			fract <<= 1;
 8002372:	1892      	adds	r2, r2, r2
 8002374:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
 8002376:	2900      	cmp	r1, #0
			expo--;
 8002378:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 800237c:	daf9      	bge.n	8002372 <z_cbvprintf_impl+0x8d2>
 800237e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 8002382:	e7b6      	b.n	80022f2 <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
 8002384:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002388:	0698      	lsls	r0, r3, #26
			precision -= decexp;
 800238a:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
 800238e:	d44f      	bmi.n	8002430 <z_cbvprintf_impl+0x990>
 8002390:	1e3b      	subs	r3, r7, #0
 8002392:	bf18      	it	ne
 8002394:	2301      	movne	r3, #1
	bool prune_zero = false;
 8002396:	9305      	str	r3, [sp, #20]
 8002398:	e004      	b.n	80023a4 <z_cbvprintf_impl+0x904>
 800239a:	2300      	movs	r3, #0
	if (c == 'f') {
 800239c:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
 80023a0:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
 80023a2:	d1d3      	bne.n	800234c <z_cbvprintf_impl+0x8ac>
		if (decimals < 0) {
 80023a4:	eb17 0806 	adds.w	r8, r7, r6
 80023a8:	f04f 0b66 	mov.w	fp, #102	; 0x66
 80023ac:	d444      	bmi.n	8002438 <z_cbvprintf_impl+0x998>
	if (decimals > 16) {
 80023ae:	f1b8 0f10 	cmp.w	r8, #16
 80023b2:	bfa8      	it	ge
 80023b4:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
 80023b8:	ed9f 7b43 	vldr	d7, [pc, #268]	; 80024c8 <z_cbvprintf_impl+0xa28>
 80023bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80023c0:	2010      	movs	r0, #16
 80023c2:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
 80023c4:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
 80023c8:	f1b8 0f00 	cmp.w	r8, #0
 80023cc:	d137      	bne.n	800243e <z_cbvprintf_impl+0x99e>
	fract += round;
 80023ce:	1812      	adds	r2, r2, r0
 80023d0:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
 80023d4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80023d8:	d241      	bcs.n	800245e <z_cbvprintf_impl+0x9be>
	fract += round;
 80023da:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
 80023de:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
 80023e0:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
 80023e4:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
 80023e8:	f040 80bb 	bne.w	8002562 <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
 80023ec:	2e00      	cmp	r6, #0
 80023ee:	dc41      	bgt.n	8002474 <z_cbvprintf_impl+0x9d4>
			*buf++ = '0';
 80023f0:	2130      	movs	r1, #48	; 0x30
 80023f2:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
 80023f6:	2a00      	cmp	r2, #0
 80023f8:	d16c      	bne.n	80024d4 <z_cbvprintf_impl+0xa34>
 80023fa:	2f00      	cmp	r7, #0
 80023fc:	f340 81b5 	ble.w	800276a <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
 8002400:	222e      	movs	r2, #46	; 0x2e
 8002402:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 8002406:	b186      	cbz	r6, 800242a <z_cbvprintf_impl+0x98a>
			conv->pad0_value = -decexp;
 8002408:	4272      	negs	r2, r6
 800240a:	42ba      	cmp	r2, r7
 800240c:	bfa8      	it	ge
 800240e:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
 8002410:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8002414:	9213      	str	r2, [sp, #76]	; 0x4c
 8002416:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
 8002418:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
 800241c:	bfd4      	ite	le
 800241e:	2200      	movle	r2, #0
 8002420:	2201      	movgt	r2, #1
 8002422:	f362 1145 	bfi	r1, r2, #5, #1
 8002426:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
 800242a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
 800242e:	e039      	b.n	80024a4 <z_cbvprintf_impl+0xa04>
	bool prune_zero = false;
 8002430:	2300      	movs	r3, #0
 8002432:	e7b0      	b.n	8002396 <z_cbvprintf_impl+0x8f6>
 8002434:	2300      	movs	r3, #0
 8002436:	e788      	b.n	800234a <z_cbvprintf_impl+0x8aa>
			decimals = 0;
 8002438:	f04f 0800 	mov.w	r8, #0
 800243c:	e7bc      	b.n	80023b8 <z_cbvprintf_impl+0x918>
	*v >>= 1;
 800243e:	0840      	lsrs	r0, r0, #1
 8002440:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
 800244a:	a80e      	add	r0, sp, #56	; 0x38
 800244c:	e9cd 2108 	strd	r2, r1, [sp, #32]
 8002450:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002454:	f012 fa0f 	bl	8014876 <_ldiv5>
 8002458:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
 800245c:	e7b2      	b.n	80023c4 <z_cbvprintf_impl+0x924>
	*v >>= 1;
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
 8002464:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
 8002466:	0849      	lsrs	r1, r1, #1
 8002468:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
 800246c:	3601      	adds	r6, #1
	_ldiv5(v);
 800246e:	f012 fa02 	bl	8014876 <_ldiv5>
		decexp++;
 8002472:	e7b4      	b.n	80023de <z_cbvprintf_impl+0x93e>
	char *buf = bps;
 8002474:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
 8002478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800247a:	2900      	cmp	r1, #0
 800247c:	dd09      	ble.n	8002492 <z_cbvprintf_impl+0x9f2>
				*buf++ = _get_digit(&fract, &digit_count);
 800247e:	a90b      	add	r1, sp, #44	; 0x2c
 8002480:	a80c      	add	r0, sp, #48	; 0x30
 8002482:	9207      	str	r2, [sp, #28]
 8002484:	f012 fa0f 	bl	80148a6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8002488:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 800248a:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
 800248e:	9a07      	ldr	r2, [sp, #28]
 8002490:	d1f2      	bne.n	8002478 <z_cbvprintf_impl+0x9d8>
			conv->pad0_value = decexp;
 8002492:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
 8002494:	b99a      	cbnz	r2, 80024be <z_cbvprintf_impl+0xa1e>
 8002496:	2f00      	cmp	r7, #0
 8002498:	f340 8165 	ble.w	8002766 <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
 800249c:	212e      	movs	r1, #46	; 0x2e
 800249e:	f808 1b01 	strb.w	r1, [r8], #1
 80024a2:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	dd1e      	ble.n	80024e6 <z_cbvprintf_impl+0xa46>
 80024a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	dd1b      	ble.n	80024e6 <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
 80024ae:	a90b      	add	r1, sp, #44	; 0x2c
 80024b0:	a80c      	add	r0, sp, #48	; 0x30
 80024b2:	f012 f9f8 	bl	80148a6 <_get_digit>
		precision--;
 80024b6:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
 80024b8:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
 80024bc:	e7f2      	b.n	80024a4 <z_cbvprintf_impl+0xa04>
			*buf++ = '.';
 80024be:	222e      	movs	r2, #46	; 0x2e
 80024c0:	f808 2b01 	strb.w	r2, [r8], #1
 80024c4:	e7ed      	b.n	80024a2 <z_cbvprintf_impl+0xa02>
 80024c6:	bf00      	nop
 80024c8:	00000000 	.word	0x00000000
 80024cc:	08000000 	.word	0x08000000
 80024d0:	0801b2e8 	.word	0x0801b2e8
 80024d4:	222e      	movs	r2, #46	; 0x2e
 80024d6:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 80024da:	2e00      	cmp	r6, #0
 80024dc:	d0a5      	beq.n	800242a <z_cbvprintf_impl+0x98a>
 80024de:	2f00      	cmp	r7, #0
 80024e0:	dc92      	bgt.n	8002408 <z_cbvprintf_impl+0x968>
			*buf++ = '.';
 80024e2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
 80024e6:	9b05      	ldr	r3, [sp, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d14e      	bne.n	800258a <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
 80024ec:	9714      	str	r7, [sp, #80]	; 0x50
 80024ee:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
 80024f0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80024f4:	2a45      	cmp	r2, #69	; 0x45
 80024f6:	d123      	bne.n	8002540 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
 80024f8:	2e00      	cmp	r6, #0
			decexp = -decexp;
 80024fa:	bfba      	itte	lt
 80024fc:	4276      	neglt	r6, r6
			*buf++ = '-';
 80024fe:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 8002500:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 8002502:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
 8002504:	bfc8      	it	gt
 8002506:	2164      	movgt	r1, #100	; 0x64
 8002508:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
 800250a:	bfd1      	iteee	le
 800250c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
 800250e:	fbb6 f3f1 	udivgt	r3, r6, r1
 8002512:	1cfa      	addgt	r2, r7, #3
 8002514:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
 8002518:	bfc8      	it	gt
 800251a:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 800251e:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
 8002522:	bfc8      	it	gt
 8002524:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
 8002526:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
 800252a:	fbb6 f3f1 	udiv	r3, r6, r1
 800252e:	4617      	mov	r7, r2
 8002530:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8002534:	fb01 6313 	mls	r3, r1, r3, r6
 8002538:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 800253a:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
 800253e:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
 8002540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002542:	2b00      	cmp	r3, #0
 8002544:	dc2c      	bgt.n	80025a0 <z_cbvprintf_impl+0xb00>
 8002546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002548:	2b00      	cmp	r3, #0
 800254a:	bfd4      	ite	le
 800254c:	2300      	movle	r3, #0
 800254e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8002550:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8002554:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8002558:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 800255a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
 800255e:	703b      	strb	r3, [r7, #0]
	return bps;
 8002560:	e694      	b.n	800228c <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
 8002562:	a90b      	add	r1, sp, #44	; 0x2c
 8002564:	a80c      	add	r0, sp, #48	; 0x30
 8002566:	9207      	str	r2, [sp, #28]
 8002568:	f012 f99d 	bl	80148a6 <_get_digit>
		if (*buf++ != '0') {
 800256c:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
 800256e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
 8002572:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8002574:	bf18      	it	ne
 8002576:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 800257a:	b912      	cbnz	r2, 8002582 <z_cbvprintf_impl+0xae2>
 800257c:	2f00      	cmp	r7, #0
 800257e:	f340 80f4 	ble.w	800276a <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
 8002582:	222e      	movs	r2, #46	; 0x2e
 8002584:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8002588:	e74f      	b.n	800242a <z_cbvprintf_impl+0x98a>
		while (*--buf == '0') {
 800258a:	4647      	mov	r7, r8
 800258c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002590:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8002594:	2a30      	cmp	r2, #48	; 0x30
 8002596:	d0f8      	beq.n	800258a <z_cbvprintf_impl+0xaea>
 8002598:	2a2e      	cmp	r2, #46	; 0x2e
 800259a:	bf08      	it	eq
 800259c:	4647      	moveq	r7, r8
 800259e:	e7a7      	b.n	80024f0 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
 80025a0:	2301      	movs	r3, #1
 80025a2:	e7d5      	b.n	8002550 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
 80025a4:	4f72      	ldr	r7, [pc, #456]	; (8002770 <z_cbvprintf_impl+0xcd0>)
		char sign = 0;
 80025a6:	4681      	mov	r9, r0
			bps = "(nil)";
 80025a8:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
 80025aa:	2005      	movs	r0, #5
 80025ac:	e5a0      	b.n	80020f0 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
 80025ae:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 80025b0:	bf48      	it	mi
 80025b2:	3001      	addmi	r0, #1
 80025b4:	e5a4      	b.n	8002100 <z_cbvprintf_impl+0x660>
					OUTC(pad);
 80025b6:	4610      	mov	r0, r2
 80025b8:	9209      	str	r2, [sp, #36]	; 0x24
 80025ba:	9903      	ldr	r1, [sp, #12]
 80025bc:	47d0      	blx	sl
 80025be:	2800      	cmp	r0, #0
 80025c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025c2:	da05      	bge.n	80025d0 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
 80025c4:	b01f      	add	sp, #124	; 0x7c
 80025c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 80025ca:	2220      	movs	r2, #32
					pad = '0';
 80025cc:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
 80025d0:	4659      	mov	r1, fp
 80025d2:	2900      	cmp	r1, #0
 80025d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80025d8:	dced      	bgt.n	80025b6 <z_cbvprintf_impl+0xb16>
 80025da:	9b04      	ldr	r3, [sp, #16]
 80025dc:	f8cd b010 	str.w	fp, [sp, #16]
 80025e0:	442b      	add	r3, r5
 80025e2:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
 80025e4:	f1b9 0f00 	cmp.w	r9, #0
 80025e8:	d005      	beq.n	80025f6 <z_cbvprintf_impl+0xb56>
			OUTC(sign);
 80025ea:	9903      	ldr	r1, [sp, #12]
 80025ec:	4648      	mov	r0, r9
 80025ee:	47d0      	blx	sl
 80025f0:	2800      	cmp	r0, #0
 80025f2:	dbe7      	blt.n	80025c4 <z_cbvprintf_impl+0xb24>
 80025f4:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 80025f6:	9b08      	ldr	r3, [sp, #32]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d079      	beq.n	80026f0 <z_cbvprintf_impl+0xc50>
			if (conv->specifier_a) {
 80025fc:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
 8002600:	2b00      	cmp	r3, #0
 8002602:	db29      	blt.n	8002658 <z_cbvprintf_impl+0xbb8>
				while (isdigit((unsigned char)*cp)) {
 8002604:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8002774 <z_cbvprintf_impl+0xcd4>
			if (conv->specifier_a) {
 8002608:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
 800260a:	7818      	ldrb	r0, [r3, #0]
 800260c:	f819 2000 	ldrb.w	r2, [r9, r0]
 8002610:	0752      	lsls	r2, r2, #29
 8002612:	469b      	mov	fp, r3
 8002614:	f103 0301 	add.w	r3, r3, #1
 8002618:	d43f      	bmi.n	800269a <z_cbvprintf_impl+0xbfa>
				if (!conv->pad_postdp) {
 800261a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800261e:	1bae      	subs	r6, r5, r6
 8002620:	0698      	lsls	r0, r3, #26
 8002622:	445e      	add	r6, fp
 8002624:	d407      	bmi.n	8002636 <z_cbvprintf_impl+0xb96>
					while (pad_len-- > 0) {
 8002626:	4642      	mov	r2, r8
 8002628:	2a00      	cmp	r2, #0
 800262a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800262e:	dc3b      	bgt.n	80026a8 <z_cbvprintf_impl+0xc08>
 8002630:	9b07      	ldr	r3, [sp, #28]
 8002632:	4433      	add	r3, r6
 8002634:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
 8002636:	f89b 0000 	ldrb.w	r0, [fp]
 800263a:	282e      	cmp	r0, #46	; 0x2e
 800263c:	d10a      	bne.n	8002654 <z_cbvprintf_impl+0xbb4>
					OUTC(*cp++);
 800263e:	9903      	ldr	r1, [sp, #12]
 8002640:	47d0      	blx	sl
						OUTC('0');
 8002642:	2800      	cmp	r0, #0
 8002644:	dbbe      	blt.n	80025c4 <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
 8002646:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
 800264a:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
 800264e:	dc31      	bgt.n	80026b4 <z_cbvprintf_impl+0xc14>
					OUTC(*cp++);
 8002650:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
 8002654:	465d      	mov	r5, fp
 8002656:	e038      	b.n	80026ca <z_cbvprintf_impl+0xc2a>
 8002658:	46b1      	mov	r9, r6
				while (*cp != 'p') {
 800265a:	f899 0000 	ldrb.w	r0, [r9]
 800265e:	2870      	cmp	r0, #112	; 0x70
 8002660:	46c8      	mov	r8, r9
 8002662:	f109 0901 	add.w	r9, r9, #1
 8002666:	d113      	bne.n	8002690 <z_cbvprintf_impl+0xbf0>
 8002668:	1bae      	subs	r6, r5, r6
 800266a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800266c:	4446      	add	r6, r8
			while (pad_len-- > 0) {
 800266e:	4435      	add	r5, r6
 8002670:	1bab      	subs	r3, r5, r6
 8002672:	2b00      	cmp	r3, #0
 8002674:	dc34      	bgt.n	80026e0 <z_cbvprintf_impl+0xc40>
			OUTS(cp, bpe);
 8002676:	9903      	ldr	r1, [sp, #12]
 8002678:	463b      	mov	r3, r7
 800267a:	4642      	mov	r2, r8
 800267c:	4650      	mov	r0, sl
 800267e:	f012 f929 	bl	80148d4 <outs>
 8002682:	2800      	cmp	r0, #0
 8002684:	db9e      	blt.n	80025c4 <z_cbvprintf_impl+0xb24>
 8002686:	4430      	add	r0, r6
 8002688:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
 800268a:	4605      	mov	r5, r0
 800268c:	4406      	add	r6, r0
 800268e:	e065      	b.n	800275c <z_cbvprintf_impl+0xcbc>
					OUTC(*cp++);
 8002690:	9903      	ldr	r1, [sp, #12]
 8002692:	47d0      	blx	sl
 8002694:	2800      	cmp	r0, #0
 8002696:	dae0      	bge.n	800265a <z_cbvprintf_impl+0xbba>
 8002698:	e794      	b.n	80025c4 <z_cbvprintf_impl+0xb24>
 800269a:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
 800269c:	9903      	ldr	r1, [sp, #12]
 800269e:	47d0      	blx	sl
 80026a0:	2800      	cmp	r0, #0
 80026a2:	9b05      	ldr	r3, [sp, #20]
 80026a4:	dab1      	bge.n	800260a <z_cbvprintf_impl+0xb6a>
 80026a6:	e78d      	b.n	80025c4 <z_cbvprintf_impl+0xb24>
						OUTC('0');
 80026a8:	9903      	ldr	r1, [sp, #12]
 80026aa:	2030      	movs	r0, #48	; 0x30
 80026ac:	47d0      	blx	sl
 80026ae:	2800      	cmp	r0, #0
 80026b0:	dab9      	bge.n	8002626 <z_cbvprintf_impl+0xb86>
 80026b2:	e787      	b.n	80025c4 <z_cbvprintf_impl+0xb24>
						OUTC('0');
 80026b4:	9903      	ldr	r1, [sp, #12]
 80026b6:	2030      	movs	r0, #48	; 0x30
 80026b8:	47d0      	blx	sl
 80026ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80026be:	e7c0      	b.n	8002642 <z_cbvprintf_impl+0xba2>
					OUTC(*cp++);
 80026c0:	9903      	ldr	r1, [sp, #12]
 80026c2:	47d0      	blx	sl
 80026c4:	2800      	cmp	r0, #0
 80026c6:	f6ff af7d 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
 80026ca:	7828      	ldrb	r0, [r5, #0]
 80026cc:	f819 3000 	ldrb.w	r3, [r9, r0]
 80026d0:	0759      	lsls	r1, r3, #29
 80026d2:	46a8      	mov	r8, r5
 80026d4:	f105 0501 	add.w	r5, r5, #1
 80026d8:	d4f2      	bmi.n	80026c0 <z_cbvprintf_impl+0xc20>
 80026da:	eba6 060b 	sub.w	r6, r6, fp
 80026de:	e7c4      	b.n	800266a <z_cbvprintf_impl+0xbca>
				OUTC('0');
 80026e0:	9903      	ldr	r1, [sp, #12]
 80026e2:	2030      	movs	r0, #48	; 0x30
 80026e4:	47d0      	blx	sl
 80026e6:	2800      	cmp	r0, #0
 80026e8:	f6ff af6c 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 80026ec:	3601      	adds	r6, #1
 80026ee:	e7bf      	b.n	8002670 <z_cbvprintf_impl+0xbd0>
			if (conv->altform_0c | conv->altform_0) {
 80026f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80026f4:	06da      	lsls	r2, r3, #27
 80026f6:	d401      	bmi.n	80026fc <z_cbvprintf_impl+0xc5c>
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	d506      	bpl.n	800270a <z_cbvprintf_impl+0xc6a>
				OUTC('0');
 80026fc:	9903      	ldr	r1, [sp, #12]
 80026fe:	2030      	movs	r0, #48	; 0x30
 8002700:	47d0      	blx	sl
 8002702:	2800      	cmp	r0, #0
 8002704:	f6ff af5e 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 8002708:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 800270a:	9b05      	ldr	r3, [sp, #20]
 800270c:	b13b      	cbz	r3, 800271e <z_cbvprintf_impl+0xc7e>
				OUTC(conv->specifier);
 800270e:	9903      	ldr	r1, [sp, #12]
 8002710:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 8002714:	47d0      	blx	sl
 8002716:	2800      	cmp	r0, #0
 8002718:	f6ff af54 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 800271c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 800271e:	44a8      	add	r8, r5
 8002720:	e006      	b.n	8002730 <z_cbvprintf_impl+0xc90>
				OUTC('0');
 8002722:	9903      	ldr	r1, [sp, #12]
 8002724:	2030      	movs	r0, #48	; 0x30
 8002726:	47d0      	blx	sl
 8002728:	2800      	cmp	r0, #0
 800272a:	f6ff af4b 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 800272e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8002730:	eba8 0305 	sub.w	r3, r8, r5
 8002734:	2b00      	cmp	r3, #0
 8002736:	dcf4      	bgt.n	8002722 <z_cbvprintf_impl+0xc82>
			OUTS(bps, bpe);
 8002738:	9903      	ldr	r1, [sp, #12]
 800273a:	463b      	mov	r3, r7
 800273c:	4632      	mov	r2, r6
 800273e:	4650      	mov	r0, sl
 8002740:	f012 f8c8 	bl	80148d4 <outs>
 8002744:	2800      	cmp	r0, #0
 8002746:	f6ff af3d 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 800274a:	4428      	add	r0, r5
 800274c:	e79c      	b.n	8002688 <z_cbvprintf_impl+0xbe8>
			OUTC(' ');
 800274e:	9903      	ldr	r1, [sp, #12]
 8002750:	2020      	movs	r0, #32
 8002752:	47d0      	blx	sl
 8002754:	2800      	cmp	r0, #0
 8002756:	f6ff af35 	blt.w	80025c4 <z_cbvprintf_impl+0xb24>
 800275a:	3501      	adds	r5, #1
		while (width > 0) {
 800275c:	1b73      	subs	r3, r6, r5
 800275e:	2b00      	cmp	r3, #0
 8002760:	dcf5      	bgt.n	800274e <z_cbvprintf_impl+0xcae>
 8002762:	f7ff bbd1 	b.w	8001f08 <z_cbvprintf_impl+0x468>
			decexp = 0;
 8002766:	4616      	mov	r6, r2
 8002768:	e6bd      	b.n	80024e6 <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
 800276a:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
 800276e:	e6ba      	b.n	80024e6 <z_cbvprintf_impl+0xa46>
 8002770:	0801b7c2 	.word	0x0801b7c2
 8002774:	0801b2e9 	.word	0x0801b2e9

08002778 <lsm6dsl_accel_convert>:
	return 0;
}

static inline void lsm6dsl_accel_convert(struct sensor_value *val, int raw_val,
					 float sensitivity)
{
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	4604      	mov	r4, r0
	double dval;

	/* Sensitivity is exposed in mg/LSB */
	/* Convert to m/s^2 */
	dval = (double)(raw_val) * (double)sensitivity * SENSOR_G_DOUBLE / 1000;
 800277c:	4608      	mov	r0, r1
{
 800277e:	ee10 5a10 	vmov	r5, s0
	dval = (double)(raw_val) * (double)sensitivity * SENSOR_G_DOUBLE / 1000;
 8002782:	f7fe f89f 	bl	80008c4 <__aeabi_i2d>
 8002786:	4606      	mov	r6, r0
 8002788:	4628      	mov	r0, r5
 800278a:	460f      	mov	r7, r1
 800278c:	f7fe f8ac 	bl	80008e8 <__aeabi_f2d>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4630      	mov	r0, r6
 8002796:	4639      	mov	r1, r7
 8002798:	f7fe f8fe 	bl	8000998 <__aeabi_dmul>
 800279c:	a311      	add	r3, pc, #68	; (adr r3, 80027e4 <lsm6dsl_accel_convert+0x6c>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fe f8f9 	bl	8000998 <__aeabi_dmul>
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <lsm6dsl_accel_convert+0x68>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f7fe fa1f 	bl	8000bec <__aeabi_ddiv>
 80027ae:	4606      	mov	r6, r0
 80027b0:	460f      	mov	r7, r1
	val->val1 = (int32_t)dval;
 80027b2:	f7fe fb03 	bl	8000dbc <__aeabi_d2iz>
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <lsm6dsl_accel_convert+0x68>)
	val->val1 = (int32_t)dval;
 80027b8:	6020      	str	r0, [r4, #0]
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 80027ba:	2200      	movs	r2, #0
 80027bc:	4630      	mov	r0, r6
 80027be:	4639      	mov	r1, r7
 80027c0:	f7fe f8ea 	bl	8000998 <__aeabi_dmul>
 80027c4:	f7fe fafa 	bl	8000dbc <__aeabi_d2iz>
 80027c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027cc:	fb90 f3f2 	sdiv	r3, r0, r2
 80027d0:	fb03 0312 	mls	r3, r3, r2, r0
 80027d4:	4353      	muls	r3, r2
 80027d6:	6063      	str	r3, [r4, #4]

}
 80027d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027da:	bf00      	nop
 80027dc:	f3af 8000 	nop.w
 80027e0:	408f4000 	.word	0x408f4000
 80027e4:	3a92a305 	.word	0x3a92a305
 80027e8:	40239d01 	.word	0x40239d01
 80027ec:	00000000 	.word	0x00000000

080027f0 <lsm6dsl_gyro_convert.constprop.0>:
{
	return lsm6dsl_accel_get_channel(chan, val, data,
					data->accel_sensitivity);
}

static inline void lsm6dsl_gyro_convert(struct sensor_value *val, int raw_val,
 80027f0:	b5d0      	push	{r4, r6, r7, lr}
 80027f2:	4604      	mov	r4, r0
{
	double dval;

	/* Sensitivity is exposed in mdps/LSB */
	/* Convert to rad/s */
	dval = (double)(raw_val * (double)sensitivity * SENSOR_DEG2RAD_DOUBLE / 1000);
 80027f4:	4608      	mov	r0, r1
 80027f6:	f7fe f865 	bl	80008c4 <__aeabi_i2d>
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <lsm6dsl_gyro_convert.constprop.0+0x58>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	f7fe f8cb 	bl	8000998 <__aeabi_dmul>
 8002802:	a30f      	add	r3, pc, #60	; (adr r3, 8002840 <lsm6dsl_gyro_convert.constprop.0+0x50>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f7fe f8c6 	bl	8000998 <__aeabi_dmul>
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <lsm6dsl_gyro_convert.constprop.0+0x5c>)
 800280e:	2200      	movs	r2, #0
 8002810:	f7fe f9ec 	bl	8000bec <__aeabi_ddiv>
 8002814:	4606      	mov	r6, r0
 8002816:	460f      	mov	r7, r1
	val->val1 = (int32_t)dval;
 8002818:	f7fe fad0 	bl	8000dbc <__aeabi_d2iz>
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <lsm6dsl_gyro_convert.constprop.0+0x5c>)
	val->val1 = (int32_t)dval;
 800281e:	6020      	str	r0, [r4, #0]
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 8002820:	2200      	movs	r2, #0
 8002822:	4630      	mov	r0, r6
 8002824:	4639      	mov	r1, r7
 8002826:	f7fe f8b7 	bl	8000998 <__aeabi_dmul>
 800282a:	f7fe fac7 	bl	8000dbc <__aeabi_d2iz>
 800282e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002832:	fb90 f3f2 	sdiv	r3, r0, r2
 8002836:	fb03 0312 	mls	r3, r3, r2, r0
 800283a:	4353      	muls	r3, r2
 800283c:	6063      	str	r3, [r4, #4]
}
 800283e:	bdd0      	pop	{r4, r6, r7, pc}
 8002840:	63f11168 	.word	0x63f11168
 8002844:	3f91df46 	.word	0x3f91df46
 8002848:	40118000 	.word	0x40118000
 800284c:	408f4000 	.word	0x408f4000

08002850 <lsm6dsl_attr_set>:
	switch (chan) {
 8002850:	2903      	cmp	r1, #3
{
 8002852:	b570      	push	{r4, r5, r6, lr}
 8002854:	4604      	mov	r4, r0
 8002856:	460d      	mov	r5, r1
	switch (chan) {
 8002858:	d005      	beq.n	8002866 <lsm6dsl_attr_set+0x16>
 800285a:	2907      	cmp	r1, #7
 800285c:	d055      	beq.n	800290a <lsm6dsl_attr_set+0xba>
}
 800285e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002862:	f00a be9f 	b.w	800d5a4 <lsm6dsl_attr_set.part.0>
	switch (attr) {
 8002866:	2a00      	cmp	r2, #0
 8002868:	d03c      	beq.n	80028e4 <lsm6dsl_attr_set+0x94>
 800286a:	2a07      	cmp	r2, #7
 800286c:	f040 80ac 	bne.w	80029c8 <lsm6dsl_attr_set+0x178>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
 8002870:	6858      	ldr	r0, [r3, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <lsm6dsl_attr_set+0x198>)
 8002876:	17c1      	asrs	r1, r0, #31
 8002878:	fbc2 0103 	smlal	r0, r1, r2, r3

	if (micro_ms2 > 0) {
 800287c:	2801      	cmp	r0, #1
 800287e:	f171 0300 	sbcs.w	r3, r1, #0
 8002882:	db3f      	blt.n	8002904 <lsm6dsl_attr_set+0xb4>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <lsm6dsl_attr_set+0x19c>)
 8002886:	18c0      	adds	r0, r0, r3
 8002888:	f141 0100 	adc.w	r1, r1, #0
 800288c:	a350      	add	r3, pc, #320	; (adr r3, 80029d0 <lsm6dsl_attr_set+0x180>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f7fe fb0b 	bl	8000eac <__aeabi_ldivmod>
		if (range == lsm6dsl_accel_fs_map[i]) {
 8002896:	2802      	cmp	r0, #2
	struct lsm6dsl_data *data = dev->data;
 8002898:	6926      	ldr	r6, [r4, #16]
		if (range == lsm6dsl_accel_fs_map[i]) {
 800289a:	d00e      	beq.n	80028ba <lsm6dsl_attr_set+0x6a>
 800289c:	2810      	cmp	r0, #16
 800289e:	d00e      	beq.n	80028be <lsm6dsl_attr_set+0x6e>
 80028a0:	2804      	cmp	r0, #4
 80028a2:	d00e      	beq.n	80028c2 <lsm6dsl_attr_set+0x72>
 80028a4:	2808      	cmp	r0, #8
 80028a6:	d12d      	bne.n	8002904 <lsm6dsl_attr_set+0xb4>
	if (lsm6dsl_accel_set_fs_raw(dev, fs) < 0) {
 80028a8:	4629      	mov	r1, r5
 80028aa:	4620      	mov	r0, r4
 80028ac:	f014 fa0b 	bl	8016cc6 <lsm6dsl_accel_set_fs_raw>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	da08      	bge.n	80028c6 <lsm6dsl_attr_set+0x76>
		return -EIO;
 80028b4:	f06f 0004 	mvn.w	r0, #4
}
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_accel_fs_map); i++) {
 80028ba:	2500      	movs	r5, #0
 80028bc:	e7f4      	b.n	80028a8 <lsm6dsl_attr_set+0x58>
 80028be:	2501      	movs	r5, #1
 80028c0:	e7f2      	b.n	80028a8 <lsm6dsl_attr_set+0x58>
 80028c2:	2502      	movs	r5, #2
 80028c4:	e7f0      	b.n	80028a8 <lsm6dsl_attr_set+0x58>
						    * SENSI_GRAIN_XL);
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <lsm6dsl_attr_set+0x1a0>)
 80028c8:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80028cc:	f7fd fffa 	bl	80008c4 <__aeabi_i2d>
 80028d0:	a341      	add	r3, pc, #260	; (adr r3, 80029d8 <lsm6dsl_attr_set+0x188>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fe f85f 	bl	8000998 <__aeabi_dmul>
	data->accel_sensitivity = (float)(lsm6dsl_accel_fs_sens[fs]
 80028da:	f7fe fa97 	bl	8000e0c <__aeabi_d2f>
 80028de:	60f0      	str	r0, [r6, #12]
	return 0;
 80028e0:	2000      	movs	r0, #0
 80028e2:	e7e9      	b.n	80028b8 <lsm6dsl_attr_set+0x68>
		return lsm6dsl_accel_odr_set(dev, val->val1);
 80028e4:	8819      	ldrh	r1, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 80028e6:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <lsm6dsl_attr_set+0x1a4>)
		if (freq == lsm6dsl_odr_map[i]) {
 80028e8:	f833 0b02 	ldrh.w	r0, [r3], #2
 80028ec:	4281      	cmp	r1, r0
 80028ee:	d106      	bne.n	80028fe <lsm6dsl_attr_set+0xae>
	if (lsm6dsl_accel_set_odr_raw(dev, odr) < 0) {
 80028f0:	b2d1      	uxtb	r1, r2
 80028f2:	4620      	mov	r0, r4
 80028f4:	f00a fe3a 	bl	800d56c <lsm6dsl_accel_set_odr_raw>
	if (lsm6dsl_gyro_set_odr_raw(dev, odr) < 0) {
 80028f8:	2800      	cmp	r0, #0
 80028fa:	daf1      	bge.n	80028e0 <lsm6dsl_attr_set+0x90>
 80028fc:	e7da      	b.n	80028b4 <lsm6dsl_attr_set+0x64>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 80028fe:	3201      	adds	r2, #1
 8002900:	2a0b      	cmp	r2, #11
 8002902:	d1f1      	bne.n	80028e8 <lsm6dsl_attr_set+0x98>
	return -EINVAL;
 8002904:	f06f 0015 	mvn.w	r0, #21
 8002908:	e7d6      	b.n	80028b8 <lsm6dsl_attr_set+0x68>
	switch (attr) {
 800290a:	2a00      	cmp	r2, #0
 800290c:	d04d      	beq.n	80029aa <lsm6dsl_attr_set+0x15a>
 800290e:	2a07      	cmp	r2, #7
 8002910:	d15a      	bne.n	80029c8 <lsm6dsl_attr_set+0x178>
 *
 * @return The converted value, in degrees.
 */
static inline int32_t sensor_rad_to_degrees(const struct sensor_value *rad)
{
	int64_t micro_rad_s = rad->val1 * 1000000LL + rad->val2;
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	681d      	ldr	r5, [r3, #0]
 8002916:	4834      	ldr	r0, [pc, #208]	; (80029e8 <lsm6dsl_attr_set+0x198>)
 8002918:	17d1      	asrs	r1, r2, #31
 800291a:	4613      	mov	r3, r2
 800291c:	460a      	mov	r2, r1
 800291e:	fbc5 3200 	smlal	r3, r2, r5, r0

	if (micro_rad_s > 0) {
		return (micro_rad_s * 180LL + SENSOR_PI / 2) / SENSOR_PI;
 8002922:	25b4      	movs	r5, #180	; 0xb4
 8002924:	fba3 0105 	umull	r0, r1, r3, r5
	if (micro_rad_s > 0) {
 8002928:	2b01      	cmp	r3, #1
		return (micro_rad_s * 180LL + SENSOR_PI / 2) / SENSOR_PI;
 800292a:	fb05 1102 	mla	r1, r5, r2, r1
	if (micro_rad_s > 0) {
 800292e:	f172 0200 	sbcs.w	r2, r2, #0
 8002932:	db2a      	blt.n	800298a <lsm6dsl_attr_set+0x13a>
		return (micro_rad_s * 180LL + SENSOR_PI / 2) / SENSOR_PI;
 8002934:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <lsm6dsl_attr_set+0x1a8>)
 8002936:	18c0      	adds	r0, r0, r3
 8002938:	a329      	add	r3, pc, #164	; (adr r3, 80029e0 <lsm6dsl_attr_set+0x190>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f141 0100 	adc.w	r1, r1, #0
	} else {
		return (micro_rad_s * 180LL - SENSOR_PI / 2) / SENSOR_PI;
 8002942:	f7fe fab3 	bl	8000eac <__aeabi_ldivmod>
		if (range == lsm6dsl_gyro_fs_map[i]) {
 8002946:	28f5      	cmp	r0, #245	; 0xf5
 8002948:	d027      	beq.n	800299a <lsm6dsl_attr_set+0x14a>
 800294a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800294e:	d026      	beq.n	800299e <lsm6dsl_attr_set+0x14e>
 8002950:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002954:	d025      	beq.n	80029a2 <lsm6dsl_attr_set+0x152>
 8002956:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800295a:	d024      	beq.n	80029a6 <lsm6dsl_attr_set+0x156>
 800295c:	287d      	cmp	r0, #125	; 0x7d
 800295e:	d1d1      	bne.n	8002904 <lsm6dsl_attr_set+0xb4>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_gyro_fs_map); i++) {
 8002960:	2504      	movs	r5, #4
	if (lsm6dsl_gyro_set_fs_raw(dev, fs) < 0) {
 8002962:	4629      	mov	r1, r5
 8002964:	4620      	mov	r0, r4
	struct lsm6dsl_data *data = dev->data;
 8002966:	6926      	ldr	r6, [r4, #16]
	if (lsm6dsl_gyro_set_fs_raw(dev, fs) < 0) {
 8002968:	f014 f9c0 	bl	8016cec <lsm6dsl_gyro_set_fs_raw>
 800296c:	2800      	cmp	r0, #0
 800296e:	dba1      	blt.n	80028b4 <lsm6dsl_attr_set+0x64>
						    * SENSI_GRAIN_G);
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <lsm6dsl_attr_set+0x1ac>)
 8002972:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8002976:	f7fd ffa5 	bl	80008c4 <__aeabi_i2d>
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <lsm6dsl_attr_set+0x1b0>)
 800297c:	2200      	movs	r2, #0
 800297e:	f7fe f80b 	bl	8000998 <__aeabi_dmul>
	data->gyro_sensitivity = (float)(lsm6dsl_gyro_fs_sens[fs]
 8002982:	f7fe fa43 	bl	8000e0c <__aeabi_d2f>
 8002986:	61f0      	str	r0, [r6, #28]
	return 0;
 8002988:	e7aa      	b.n	80028e0 <lsm6dsl_attr_set+0x90>
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <lsm6dsl_attr_set+0x1b4>)
 800298c:	18c0      	adds	r0, r0, r3
 800298e:	f161 0100 	sbc.w	r1, r1, #0
 8002992:	a313      	add	r3, pc, #76	; (adr r3, 80029e0 <lsm6dsl_attr_set+0x190>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	e7d3      	b.n	8002942 <lsm6dsl_attr_set+0xf2>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_gyro_fs_map); i++) {
 800299a:	2500      	movs	r5, #0
 800299c:	e7e1      	b.n	8002962 <lsm6dsl_attr_set+0x112>
 800299e:	2501      	movs	r5, #1
 80029a0:	e7df      	b.n	8002962 <lsm6dsl_attr_set+0x112>
 80029a2:	2502      	movs	r5, #2
 80029a4:	e7dd      	b.n	8002962 <lsm6dsl_attr_set+0x112>
 80029a6:	2503      	movs	r5, #3
 80029a8:	e7db      	b.n	8002962 <lsm6dsl_attr_set+0x112>
		return lsm6dsl_gyro_odr_set(dev, val->val1);
 80029aa:	8819      	ldrh	r1, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <lsm6dsl_attr_set+0x1a4>)
		if (freq == lsm6dsl_odr_map[i]) {
 80029ae:	f833 0b02 	ldrh.w	r0, [r3], #2
 80029b2:	4281      	cmp	r1, r0
 80029b4:	d104      	bne.n	80029c0 <lsm6dsl_attr_set+0x170>
	if (lsm6dsl_gyro_set_odr_raw(dev, odr) < 0) {
 80029b6:	b2d1      	uxtb	r1, r2
 80029b8:	4620      	mov	r0, r4
 80029ba:	f014 f9ac 	bl	8016d16 <lsm6dsl_gyro_set_odr_raw>
 80029be:	e79b      	b.n	80028f8 <lsm6dsl_attr_set+0xa8>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 80029c0:	3201      	adds	r2, #1
 80029c2:	2a0b      	cmp	r2, #11
 80029c4:	d1f3      	bne.n	80029ae <lsm6dsl_attr_set+0x15e>
 80029c6:	e79d      	b.n	8002904 <lsm6dsl_attr_set+0xb4>
	switch (attr) {
 80029c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80029cc:	e774      	b.n	80028b8 <lsm6dsl_attr_set+0x68>
 80029ce:	bf00      	nop
 80029d0:	0095a33a 	.word	0x0095a33a
 80029d4:	00000000 	.word	0x00000000
 80029d8:	5a1cac08 	.word	0x5a1cac08
 80029dc:	3faf3b64 	.word	0x3faf3b64
 80029e0:	002fefd8 	.word	0x002fefd8
 80029e4:	00000000 	.word	0x00000000
 80029e8:	000f4240 	.word	0x000f4240
 80029ec:	004ad19d 	.word	0x004ad19d
 80029f0:	0801b5c8 	.word	0x0801b5c8
 80029f4:	0801b5d0 	.word	0x0801b5d0
 80029f8:	0017f7ec 	.word	0x0017f7ec
 80029fc:	0801b5be 	.word	0x0801b5be
 8002a00:	40118000 	.word	0x40118000
 8002a04:	ffe80814 	.word	0xffe80814

08002a08 <handle_channel_by_name>:
};

static int handle_channel_by_name(const struct shell *shell,
					const struct device *dev,
					const char *channel_name)
{
 8002a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0c:	4616      	mov	r6, r2
 8002a0e:	b090      	sub	sp, #64	; 0x40
 8002a10:	4605      	mov	r5, r0
 8002a12:	460f      	mov	r7, r1
	char *endptr;
	int err;
	int i;

	/* Attempt to parse channel name as a number first */
	i = strtoul(channel_name, &endptr, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	a909      	add	r1, sp, #36	; 0x24
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f00f f9a5 	bl	8011d68 <strtoul>

	if (*endptr != '\0') {
 8002a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a20:	781b      	ldrb	r3, [r3, #0]
	i = strtoul(channel_name, &endptr, 0);
 8002a22:	4604      	mov	r4, r0
	if (*endptr != '\0') {
 8002a24:	b1b3      	cbz	r3, 8002a54 <handle_channel_by_name+0x4c>
 8002a26:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8002b50 <handle_channel_by_name+0x148>
		/* Channel name is not a number, look it up */
		for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 8002a2a:	2400      	movs	r4, #0
			if (strcmp(channel_name, sensor_channel_name[i]) == 0) {
 8002a2c:	f858 1b04 	ldr.w	r1, [r8], #4
 8002a30:	4630      	mov	r0, r6
 8002a32:	f7fd fc39 	bl	80002a8 <strcmp>
 8002a36:	b168      	cbz	r0, 8002a54 <handle_channel_by_name+0x4c>
		for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 8002a38:	3401      	adds	r4, #1
 8002a3a:	2c39      	cmp	r4, #57	; 0x39
 8002a3c:	d1f6      	bne.n	8002a2c <handle_channel_by_name+0x24>
				break;
			}
		}

		if (i == ARRAY_SIZE(sensor_channel_name)) {
			shell_error(shell, "Channel not supported (%s)",
 8002a3e:	4628      	mov	r0, r5
 8002a40:	4a41      	ldr	r2, [pc, #260]	; (8002b48 <handle_channel_by_name+0x140>)
 8002a42:	4633      	mov	r3, r6
 8002a44:	2101      	movs	r1, #1
 8002a46:	f012 fda9 	bl	801559c <shell_fprintf>
				    channel_name);
			return -ENOTSUP;
 8002a4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
			sensor_value_to_double(&value[1]),
			sensor_value_to_double(&value[2]));
	}

	return 0;
}
 8002a4e:	b010      	add	sp, #64	; 0x40
 8002a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return api->channel_get(dev, chan, val);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	aa0a      	add	r2, sp, #40	; 0x28
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	b2a1      	uxth	r1, r4
 8002a5c:	4638      	mov	r0, r7
 8002a5e:	4798      	blx	r3
	if (err < 0) {
 8002a60:	2800      	cmp	r0, #0
 8002a62:	dbf4      	blt.n	8002a4e <handle_channel_by_name+0x46>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
 8002a64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002a66:	f7fd ff2d 	bl	80008c4 <__aeabi_i2d>
 8002a6a:	a335      	add	r3, pc, #212	; (adr r3, 8002b40 <handle_channel_by_name+0x138>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fe f8bc 	bl	8000bec <__aeabi_ddiv>
 8002a74:	4606      	mov	r6, r0
 8002a76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a78:	460f      	mov	r7, r1
 8002a7a:	f7fd ff23 	bl	80008c4 <__aeabi_i2d>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4630      	mov	r0, r6
 8002a84:	4639      	mov	r1, r7
 8002a86:	f7fd fdd1 	bl	800062c <__adddf3>
	if (i >= ARRAY_SIZE(sensor_channel_name)) {
 8002a8a:	2c38      	cmp	r4, #56	; 0x38
 8002a8c:	4606      	mov	r6, r0
 8002a8e:	460f      	mov	r7, r1
 8002a90:	d909      	bls.n	8002aa6 <handle_channel_by_name+0x9e>
		shell_print(shell, "channel idx=%d value = %10.6f", i,
 8002a92:	e9cd 6700 	strd	r6, r7, [sp]
 8002a96:	4a2d      	ldr	r2, [pc, #180]	; (8002b4c <handle_channel_by_name+0x144>)
 8002a98:	4623      	mov	r3, r4
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f012 fd7d 	bl	801559c <shell_fprintf>
	return 0;
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	e7d3      	b.n	8002a4e <handle_channel_by_name+0x46>
		shell_print(shell,
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <handle_channel_by_name+0x148>)
 8002aa8:	1ee2      	subs	r2, r4, #3
 8002aaa:	2a08      	cmp	r2, #8
 8002aac:	f853 a024 	ldr.w	sl, [r3, r4, lsl #2]
 8002ab0:	d804      	bhi.n	8002abc <handle_channel_by_name+0xb4>
 8002ab2:	f240 1311 	movw	r3, #273	; 0x111
 8002ab6:	40d3      	lsrs	r3, r2
 8002ab8:	07db      	lsls	r3, r3, #31
 8002aba:	d40a      	bmi.n	8002ad2 <handle_channel_by_name+0xca>
 8002abc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002ac0:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <handle_channel_by_name+0x14c>)
 8002ac2:	f8cd a000 	str.w	sl, [sp]
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	2108      	movs	r1, #8
 8002aca:	4628      	mov	r0, r5
 8002acc:	f012 fd66 	bl	801559c <shell_fprintf>
 8002ad0:	e7e7      	b.n	8002aa2 <handle_channel_by_name+0x9a>
 8002ad2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002ad4:	f7fd fef6 	bl	80008c4 <__aeabi_i2d>
 8002ad8:	a319      	add	r3, pc, #100	; (adr r3, 8002b40 <handle_channel_by_name+0x138>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fe f885 	bl	8000bec <__aeabi_ddiv>
 8002ae2:	4680      	mov	r8, r0
 8002ae4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002ae6:	4689      	mov	r9, r1
 8002ae8:	f7fd feec 	bl	80008c4 <__aeabi_i2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4640      	mov	r0, r8
 8002af2:	4649      	mov	r1, r9
 8002af4:	f7fd fd9a 	bl	800062c <__adddf3>
		shell_print(shell,
 8002af8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002afc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002afe:	f7fd fee1 	bl	80008c4 <__aeabi_i2d>
 8002b02:	a30f      	add	r3, pc, #60	; (adr r3, 8002b40 <handle_channel_by_name+0x138>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fe f870 	bl	8000bec <__aeabi_ddiv>
 8002b0c:	4680      	mov	r8, r0
 8002b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b10:	4689      	mov	r9, r1
 8002b12:	f7fd fed7 	bl	80008c4 <__aeabi_i2d>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4640      	mov	r0, r8
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	f7fd fd85 	bl	800062c <__adddf3>
 8002b22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <handle_channel_by_name+0x150>)
 8002b2c:	f8cd a000 	str.w	sl, [sp]
 8002b30:	4623      	mov	r3, r4
 8002b32:	2108      	movs	r1, #8
 8002b34:	4628      	mov	r0, r5
 8002b36:	f012 fd31 	bl	801559c <shell_fprintf>
 8002b3a:	e7b2      	b.n	8002aa2 <handle_channel_by_name+0x9a>
 8002b3c:	f3af 8000 	nop.w
 8002b40:	00000000 	.word	0x00000000
 8002b44:	412e8480 	.word	0x412e8480
 8002b48:	0801de09 	.word	0x0801de09
 8002b4c:	0801de25 	.word	0x0801de25
 8002b50:	20000764 	.word	0x20000764
 8002b54:	0801de44 	.word	0x0801de44
 8002b58:	0801de60 	.word	0x0801de60
 8002b5c:	00000000 	.word	0x00000000

08002b60 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8002b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b64:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 8002b68:	ed9f 8b49 	vldr	d8, [pc, #292]	; 8002c90 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002b6c:	4e4a      	ldr	r6, [pc, #296]	; (8002c98 <work_queue_main+0x138>)
{
 8002b6e:	b084      	sub	sp, #16
 8002b70:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002b72:	f04f 0310 	mov.w	r3, #16
 8002b76:	f3ef 8711 	mrs	r7, BASEPRI
 8002b7a:	f383 8812 	msr	BASEPRI_MAX, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f8d4 50f8 	ldr.w	r5, [r4, #248]	; 0xf8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 8002b86:	b98d      	cbnz	r5, 8002bac <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 8002b88:	2102      	movs	r1, #2
 8002b8a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002b8e:	f016 fdb7 	bl	8019700 <flag_test_and_clear>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d143      	bne.n	8002c1e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 8002b96:	2300      	movs	r3, #0
 8002b98:	ed8d 8b00 	vstr	d8, [sp]
 8002b9c:	9302      	str	r3, [sp, #8]
 8002b9e:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8002ba2:	4639      	mov	r1, r7
 8002ba4:	483d      	ldr	r0, [pc, #244]	; (8002c9c <work_queue_main+0x13c>)
 8002ba6:	f00d fc0b 	bl	80103c0 <z_sched_wait>
			continue;
 8002baa:	e7e2      	b.n	8002b72 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8002bac:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
 8002bb0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 8002bb2:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8002bb6:	4295      	cmp	r5, r2
	list->tail = node;
 8002bb8:	bf08      	it	eq
 8002bba:	f8c4 30fc 	streq.w	r3, [r4, #252]	; 0xfc
	*flagp |= BIT(bit);
 8002bbe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002bc2:	f043 0302 	orr.w	r3, r3, #2
 8002bc6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	*flagp &= ~BIT(bit);
 8002bca:	68eb      	ldr	r3, [r5, #12]
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 8002bd6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002bd8:	f387 8811 	msr	BASEPRI, r7
 8002bdc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 8002be0:	4628      	mov	r0, r5
 8002be2:	4798      	blx	r3
	__asm__ volatile(
 8002be4:	f04f 0310 	mov.w	r3, #16
 8002be8:	f3ef 8911 	mrs	r9, BASEPRI
 8002bec:	f383 8812 	msr	BASEPRI_MAX, r3
 8002bf0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8002bf4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8002bf6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 8002bf8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8002bfc:	d419      	bmi.n	8002c32 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
 8002bfe:	60ea      	str	r2, [r5, #12]
 8002c00:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002c04:	f023 0302 	bic.w	r3, r3, #2
 8002c08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	__asm__ volatile(
 8002c0c:	f389 8811 	msr	BASEPRI, r9
 8002c10:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 8002c14:	05db      	lsls	r3, r3, #23
 8002c16:	d4ac      	bmi.n	8002b72 <work_queue_main+0x12>
	z_impl_k_yield();
 8002c18:	f00d face 	bl	80101b8 <z_impl_k_yield>
}
 8002c1c:	e7a9      	b.n	8002b72 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8002c1e:	f504 7584 	add.w	r5, r4, #264	; 0x108
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8002c22:	2200      	movs	r2, #0
 8002c24:	2101      	movs	r1, #1
 8002c26:	4628      	mov	r0, r5
 8002c28:	f016 fe9e 	bl	8019968 <z_sched_wake>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d1f8      	bne.n	8002c22 <work_queue_main+0xc2>
 8002c30:	e7b1      	b.n	8002b96 <work_queue_main+0x36>
	return list->head;
 8002c32:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 8002c34:	f023 0303 	bic.w	r3, r3, #3
 8002c38:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d0e0      	beq.n	8002c00 <work_queue_main+0xa0>
	return node->next;
 8002c3e:	2700      	movs	r7, #0
 8002c40:	f8d0 8000 	ldr.w	r8, [r0]
	parent->next = child;
 8002c44:	46ba      	mov	sl, r7
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d0da      	beq.n	8002c00 <work_queue_main+0xa0>
		if (wc->work == work) {
 8002c4a:	6842      	ldr	r2, [r0, #4]
 8002c4c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8002c4e:	4601      	mov	r1, r0
		if (wc->work == work) {
 8002c50:	d10b      	bne.n	8002c6a <work_queue_main+0x10a>
	return node->next;
 8002c52:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8002c54:	b997      	cbnz	r7, 8002c7c <work_queue_main+0x11c>
 8002c56:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 8002c58:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002c5a:	4282      	cmp	r2, r0
 8002c5c:	d100      	bne.n	8002c60 <work_queue_main+0x100>
	list->tail = node;
 8002c5e:	6071      	str	r1, [r6, #4]
	parent->next = child;
 8002c60:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8002c64:	f00c ff88 	bl	800fb78 <z_impl_k_sem_give>
}
 8002c68:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8002c6a:	f1b8 0f00 	cmp.w	r8, #0
 8002c6e:	d00b      	beq.n	8002c88 <work_queue_main+0x128>
	return node->next;
 8002c70:	f8d8 2000 	ldr.w	r2, [r8]
 8002c74:	4640      	mov	r0, r8
 8002c76:	460f      	mov	r7, r1
 8002c78:	4690      	mov	r8, r2
 8002c7a:	e7e4      	b.n	8002c46 <work_queue_main+0xe6>
	parent->next = child;
 8002c7c:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002c7e:	6872      	ldr	r2, [r6, #4]
 8002c80:	4282      	cmp	r2, r0
	list->tail = node;
 8002c82:	bf08      	it	eq
 8002c84:	6077      	streq	r7, [r6, #4]
}
 8002c86:	e7eb      	b.n	8002c60 <work_queue_main+0x100>
 8002c88:	4642      	mov	r2, r8
 8002c8a:	e7f3      	b.n	8002c74 <work_queue_main+0x114>
 8002c8c:	f3af 8000 	nop.w
 8002c90:	ffffffff 	.word	0xffffffff
 8002c94:	ffffffff 	.word	0xffffffff
 8002c98:	20002230 	.word	0x20002230
 8002c9c:	2000238e 	.word	0x2000238e

08002ca0 <atan>:
 8002ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	ec55 4b10 	vmov	r4, r5, d0
 8002ca8:	4bbd      	ldr	r3, [pc, #756]	; (8002fa0 <atan+0x300>)
 8002caa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002cae:	429e      	cmp	r6, r3
 8002cb0:	46aa      	mov	sl, r5
 8002cb2:	d917      	bls.n	8002ce4 <atan+0x44>
 8002cb4:	4bbb      	ldr	r3, [pc, #748]	; (8002fa4 <atan+0x304>)
 8002cb6:	429e      	cmp	r6, r3
 8002cb8:	d80a      	bhi.n	8002cd0 <atan+0x30>
 8002cba:	d007      	beq.n	8002ccc <atan+0x2c>
 8002cbc:	f1ba 0f00 	cmp.w	sl, #0
 8002cc0:	f340 80cb 	ble.w	8002e5a <atan+0x1ba>
 8002cc4:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8002f30 <atan+0x290>
 8002cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ccc:	2c00      	cmp	r4, #0
 8002cce:	d0f5      	beq.n	8002cbc <atan+0x1c>
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f7fd fca8 	bl	800062c <__adddf3>
 8002cdc:	ec41 0b10 	vmov	d0, r0, r1
 8002ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce4:	4bb0      	ldr	r3, [pc, #704]	; (8002fa8 <atan+0x308>)
 8002ce6:	429e      	cmp	r6, r3
 8002ce8:	f200 80bb 	bhi.w	8002e62 <atan+0x1c2>
 8002cec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8002cf0:	429e      	cmp	r6, r3
 8002cf2:	f240 80a1 	bls.w	8002e38 <atan+0x198>
 8002cf6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7fd fe49 	bl	8000998 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4680      	mov	r8, r0
 8002d0c:	4689      	mov	r9, r1
 8002d0e:	f7fd fe43 	bl	8000998 <__aeabi_dmul>
 8002d12:	a389      	add	r3, pc, #548	; (adr r3, 8002f38 <atan+0x298>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	4606      	mov	r6, r0
 8002d1a:	460f      	mov	r7, r1
 8002d1c:	f7fd fe3c 	bl	8000998 <__aeabi_dmul>
 8002d20:	a387      	add	r3, pc, #540	; (adr r3, 8002f40 <atan+0x2a0>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f7fd fc81 	bl	800062c <__adddf3>
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	f7fd fe33 	bl	8000998 <__aeabi_dmul>
 8002d32:	a385      	add	r3, pc, #532	; (adr r3, 8002f48 <atan+0x2a8>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	f7fd fc78 	bl	800062c <__adddf3>
 8002d3c:	4632      	mov	r2, r6
 8002d3e:	463b      	mov	r3, r7
 8002d40:	f7fd fe2a 	bl	8000998 <__aeabi_dmul>
 8002d44:	a382      	add	r3, pc, #520	; (adr r3, 8002f50 <atan+0x2b0>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f7fd fc6f 	bl	800062c <__adddf3>
 8002d4e:	4632      	mov	r2, r6
 8002d50:	463b      	mov	r3, r7
 8002d52:	f7fd fe21 	bl	8000998 <__aeabi_dmul>
 8002d56:	a380      	add	r3, pc, #512	; (adr r3, 8002f58 <atan+0x2b8>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fc66 	bl	800062c <__adddf3>
 8002d60:	4632      	mov	r2, r6
 8002d62:	463b      	mov	r3, r7
 8002d64:	f7fd fe18 	bl	8000998 <__aeabi_dmul>
 8002d68:	a37d      	add	r3, pc, #500	; (adr r3, 8002f60 <atan+0x2c0>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	f7fd fc5d 	bl	800062c <__adddf3>
 8002d72:	4642      	mov	r2, r8
 8002d74:	464b      	mov	r3, r9
 8002d76:	f7fd fe0f 	bl	8000998 <__aeabi_dmul>
 8002d7a:	a37b      	add	r3, pc, #492	; (adr r3, 8002f68 <atan+0x2c8>)
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	4680      	mov	r8, r0
 8002d82:	4689      	mov	r9, r1
 8002d84:	4630      	mov	r0, r6
 8002d86:	4639      	mov	r1, r7
 8002d88:	f7fd fe06 	bl	8000998 <__aeabi_dmul>
 8002d8c:	a378      	add	r3, pc, #480	; (adr r3, 8002f70 <atan+0x2d0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fc49 	bl	8000628 <__aeabi_dsub>
 8002d96:	4632      	mov	r2, r6
 8002d98:	463b      	mov	r3, r7
 8002d9a:	f7fd fdfd 	bl	8000998 <__aeabi_dmul>
 8002d9e:	a376      	add	r3, pc, #472	; (adr r3, 8002f78 <atan+0x2d8>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f7fd fc40 	bl	8000628 <__aeabi_dsub>
 8002da8:	4632      	mov	r2, r6
 8002daa:	463b      	mov	r3, r7
 8002dac:	f7fd fdf4 	bl	8000998 <__aeabi_dmul>
 8002db0:	a373      	add	r3, pc, #460	; (adr r3, 8002f80 <atan+0x2e0>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f7fd fc37 	bl	8000628 <__aeabi_dsub>
 8002dba:	4632      	mov	r2, r6
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	f7fd fdeb 	bl	8000998 <__aeabi_dmul>
 8002dc2:	a371      	add	r3, pc, #452	; (adr r3, 8002f88 <atan+0x2e8>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f7fd fc2e 	bl	8000628 <__aeabi_dsub>
 8002dcc:	4632      	mov	r2, r6
 8002dce:	463b      	mov	r3, r7
 8002dd0:	f7fd fde2 	bl	8000998 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4640      	mov	r0, r8
 8002dda:	4649      	mov	r1, r9
 8002ddc:	f7fd fc26 	bl	800062c <__adddf3>
 8002de0:	4622      	mov	r2, r4
 8002de2:	462b      	mov	r3, r5
 8002de4:	f7fd fdd8 	bl	8000998 <__aeabi_dmul>
 8002de8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	d058      	beq.n	8002ea4 <atan+0x204>
 8002df2:	4b6e      	ldr	r3, [pc, #440]	; (8002fac <atan+0x30c>)
 8002df4:	4e6e      	ldr	r6, [pc, #440]	; (8002fb0 <atan+0x310>)
 8002df6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fc13 	bl	8000628 <__aeabi_dsub>
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f7fd fc0f 	bl	8000628 <__aeabi_dsub>
 8002e0a:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002e16:	f7fd fc07 	bl	8000628 <__aeabi_dsub>
 8002e1a:	f1ba 0f00 	cmp.w	sl, #0
 8002e1e:	ec41 0b10 	vmov	d0, r0, r1
 8002e22:	f6bf af5d 	bge.w	8002ce0 <atan+0x40>
 8002e26:	ee10 1a90 	vmov	r1, s1
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002e30:	ec43 2b10 	vmov	d0, r2, r3
 8002e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e38:	a355      	add	r3, pc, #340	; (adr r3, 8002f90 <atan+0x2f0>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4629      	mov	r1, r5
 8002e42:	f7fd fbf3 	bl	800062c <__adddf3>
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <atan+0x314>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f7fe f917 	bl	800107c <__aeabi_dcmpgt>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	f43f af51 	beq.w	8002cf6 <atan+0x56>
 8002e54:	ec45 4b10 	vmov	d0, r4, r5
 8002e58:	e742      	b.n	8002ce0 <atan+0x40>
 8002e5a:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8002f98 <atan+0x2f8>
 8002e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e62:	f00d fd8b 	bl	801097c <fabs>
 8002e66:	4b54      	ldr	r3, [pc, #336]	; (8002fb8 <atan+0x318>)
 8002e68:	429e      	cmp	r6, r3
 8002e6a:	ec55 4b10 	vmov	r4, r5, d0
 8002e6e:	d821      	bhi.n	8002eb4 <atan+0x214>
 8002e70:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8002e74:	429e      	cmp	r6, r3
 8002e76:	d84a      	bhi.n	8002f0e <atan+0x26e>
 8002e78:	4622      	mov	r2, r4
 8002e7a:	462b      	mov	r3, r5
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7fd fbd4 	bl	800062c <__adddf3>
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <atan+0x314>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	f7fd fbce 	bl	8000628 <__aeabi_dsub>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	f04f 0b00 	mov.w	fp, #0
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ea2:	e01e      	b.n	8002ee2 <atan+0x242>
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	f7fd fbbe 	bl	8000628 <__aeabi_dsub>
 8002eac:	ec41 0b10 	vmov	d0, r0, r1
 8002eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb4:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <atan+0x31c>)
 8002eb6:	429e      	cmp	r6, r3
 8002eb8:	d21e      	bcs.n	8002ef8 <atan+0x258>
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <atan+0x320>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7fd fbb1 	bl	8000628 <__aeabi_dsub>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4614      	mov	r4, r2
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <atan+0x320>)
 8002ed6:	f04f 0b02 	mov.w	fp, #2
 8002eda:	f7fd fd5d 	bl	8000998 <__aeabi_dmul>
 8002ede:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <atan+0x314>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f7fd fba3 	bl	800062c <__adddf3>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4620      	mov	r0, r4
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7fd fe7d 	bl	8000bec <__aeabi_ddiv>
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	e700      	b.n	8002cfa <atan+0x5a>
 8002ef8:	4622      	mov	r2, r4
 8002efa:	462b      	mov	r3, r5
 8002efc:	4931      	ldr	r1, [pc, #196]	; (8002fc4 <atan+0x324>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fe74 	bl	8000bec <__aeabi_ddiv>
 8002f04:	f04f 0b03 	mov.w	fp, #3
 8002f08:	4604      	mov	r4, r0
 8002f0a:	460d      	mov	r5, r1
 8002f0c:	e6f5      	b.n	8002cfa <atan+0x5a>
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <atan+0x314>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f7fd fb87 	bl	8000628 <__aeabi_dsub>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f04f 0b01 	mov.w	fp, #1
 8002f26:	4614      	mov	r4, r2
 8002f28:	461d      	mov	r5, r3
 8002f2a:	e7d8      	b.n	8002ede <atan+0x23e>
 8002f2c:	f3af 8000 	nop.w
 8002f30:	54442d18 	.word	0x54442d18
 8002f34:	3ff921fb 	.word	0x3ff921fb
 8002f38:	e322da11 	.word	0xe322da11
 8002f3c:	3f90ad3a 	.word	0x3f90ad3a
 8002f40:	24760deb 	.word	0x24760deb
 8002f44:	3fa97b4b 	.word	0x3fa97b4b
 8002f48:	a0d03d51 	.word	0xa0d03d51
 8002f4c:	3fb10d66 	.word	0x3fb10d66
 8002f50:	c54c206e 	.word	0xc54c206e
 8002f54:	3fb745cd 	.word	0x3fb745cd
 8002f58:	920083ff 	.word	0x920083ff
 8002f5c:	3fc24924 	.word	0x3fc24924
 8002f60:	5555550d 	.word	0x5555550d
 8002f64:	3fd55555 	.word	0x3fd55555
 8002f68:	2c6a6c2f 	.word	0x2c6a6c2f
 8002f6c:	bfa2b444 	.word	0xbfa2b444
 8002f70:	52defd9a 	.word	0x52defd9a
 8002f74:	3fadde2d 	.word	0x3fadde2d
 8002f78:	af749a6d 	.word	0xaf749a6d
 8002f7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8002f80:	fe231671 	.word	0xfe231671
 8002f84:	3fbc71c6 	.word	0x3fbc71c6
 8002f88:	9998ebc4 	.word	0x9998ebc4
 8002f8c:	3fc99999 	.word	0x3fc99999
 8002f90:	8800759c 	.word	0x8800759c
 8002f94:	7e37e43c 	.word	0x7e37e43c
 8002f98:	54442d18 	.word	0x54442d18
 8002f9c:	bff921fb 	.word	0xbff921fb
 8002fa0:	440fffff 	.word	0x440fffff
 8002fa4:	7ff00000 	.word	0x7ff00000
 8002fa8:	3fdbffff 	.word	0x3fdbffff
 8002fac:	0801a530 	.word	0x0801a530
 8002fb0:	0801a550 	.word	0x0801a550
 8002fb4:	3ff00000 	.word	0x3ff00000
 8002fb8:	3ff2ffff 	.word	0x3ff2ffff
 8002fbc:	40038000 	.word	0x40038000
 8002fc0:	3ff80000 	.word	0x3ff80000
 8002fc4:	bff00000 	.word	0xbff00000

08002fc8 <_svfprintf_r>:
 8002fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fcc:	ed2d 8b02 	vpush	{d8}
 8002fd0:	b0d3      	sub	sp, #332	; 0x14c
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002fd8:	4692      	mov	sl, r2
 8002fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fdc:	f00f fac4 	bl	8012568 <_localeconv_r>
 8002fe0:	6803      	ldr	r3, [r0, #0]
 8002fe2:	9313      	str	r3, [sp, #76]	; 0x4c
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd f8eb 	bl	80001c0 <strlen>
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	9012      	str	r0, [sp, #72]	; 0x48
 8002fee:	061d      	lsls	r5, r3, #24
 8002ff0:	d503      	bpl.n	8002ffa <_svfprintf_r+0x32>
 8002ff2:	6923      	ldr	r3, [r4, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 878a 	beq.w	8003f0e <_svfprintf_r+0xf46>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8cd a010 	str.w	sl, [sp, #16]
 8003000:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8003004:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8003008:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800300c:	930e      	str	r3, [sp, #56]	; 0x38
 800300e:	9314      	str	r3, [sp, #80]	; 0x50
 8003010:	9307      	str	r3, [sp, #28]
 8003012:	9b04      	ldr	r3, [sp, #16]
 8003014:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80032a0 <_svfprintf_r+0x2d8>
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	aa29      	add	r2, sp, #164	; 0xa4
 800301c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003020:	9226      	str	r2, [sp, #152]	; 0x98
 8003022:	4693      	mov	fp, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 81eb 	beq.w	8003400 <_svfprintf_r+0x438>
 800302a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800302e:	e004      	b.n	800303a <_svfprintf_r+0x72>
 8003030:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 811c 	beq.w	8003272 <_svfprintf_r+0x2aa>
 800303a:	2b25      	cmp	r3, #37	; 0x25
 800303c:	d1f8      	bne.n	8003030 <_svfprintf_r+0x68>
 800303e:	9b04      	ldr	r3, [sp, #16]
 8003040:	ebba 0503 	subs.w	r5, sl, r3
 8003044:	f040 811a 	bne.w	800327c <_svfprintf_r+0x2b4>
 8003048:	f89a 3000 	ldrb.w	r3, [sl]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 81d7 	beq.w	8003400 <_svfprintf_r+0x438>
 8003052:	2300      	movs	r3, #0
 8003054:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8003058:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800305c:	9306      	str	r3, [sp, #24]
 800305e:	f10a 0a01 	add.w	sl, sl, #1
 8003062:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003066:	9303      	str	r3, [sp, #12]
 8003068:	f10a 0a01 	add.w	sl, sl, #1
 800306c:	f1a5 0320 	sub.w	r3, r5, #32
 8003070:	2b5a      	cmp	r3, #90	; 0x5a
 8003072:	f200 813b 	bhi.w	80032ec <_svfprintf_r+0x324>
 8003076:	e8df f013 	tbh	[pc, r3, lsl #1]
 800307a:	02a5      	.short	0x02a5
 800307c:	01390139 	.word	0x01390139
 8003080:	0139029e 	.word	0x0139029e
 8003084:	01390139 	.word	0x01390139
 8003088:	0139006a 	.word	0x0139006a
 800308c:	02660139 	.word	0x02660139
 8003090:	01390278 	.word	0x01390278
 8003094:	02850271 	.word	0x02850271
 8003098:	027e0139 	.word	0x027e0139
 800309c:	005b005b 	.word	0x005b005b
 80030a0:	005b005b 	.word	0x005b005b
 80030a4:	005b005b 	.word	0x005b005b
 80030a8:	005b005b 	.word	0x005b005b
 80030ac:	0139005b 	.word	0x0139005b
 80030b0:	01390139 	.word	0x01390139
 80030b4:	01390139 	.word	0x01390139
 80030b8:	01390139 	.word	0x01390139
 80030bc:	013901cf 	.word	0x013901cf
 80030c0:	00870234 	.word	0x00870234
 80030c4:	01cf01cf 	.word	0x01cf01cf
 80030c8:	013901cf 	.word	0x013901cf
 80030cc:	01390139 	.word	0x01390139
 80030d0:	02c20139 	.word	0x02c20139
 80030d4:	01390139 	.word	0x01390139
 80030d8:	013900b5 	.word	0x013900b5
 80030dc:	01390139 	.word	0x01390139
 80030e0:	0139023e 	.word	0x0139023e
 80030e4:	013902b0 	.word	0x013902b0
 80030e8:	07010139 	.word	0x07010139
 80030ec:	01390139 	.word	0x01390139
 80030f0:	01390139 	.word	0x01390139
 80030f4:	01390139 	.word	0x01390139
 80030f8:	01390139 	.word	0x01390139
 80030fc:	013901cf 	.word	0x013901cf
 8003100:	008b0234 	.word	0x008b0234
 8003104:	01cf01cf 	.word	0x01cf01cf
 8003108:	02f201cf 	.word	0x02f201cf
 800310c:	0080008b 	.word	0x0080008b
 8003110:	02e80139 	.word	0x02e80139
 8003114:	02da0139 	.word	0x02da0139
 8003118:	02c900b9 	.word	0x02c900b9
 800311c:	01390080 	.word	0x01390080
 8003120:	007d023e 	.word	0x007d023e
 8003124:	01390725 	.word	0x01390725
 8003128:	07280139 	.word	0x07280139
 800312c:	007d0139 	.word	0x007d0139
 8003130:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003134:	2200      	movs	r2, #0
 8003136:	f81a 5b01 	ldrb.w	r5, [sl], #1
 800313a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800313e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003142:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003146:	2b09      	cmp	r3, #9
 8003148:	d9f5      	bls.n	8003136 <_svfprintf_r+0x16e>
 800314a:	9206      	str	r2, [sp, #24]
 800314c:	e78e      	b.n	800306c <_svfprintf_r+0xa4>
 800314e:	9d08      	ldr	r5, [sp, #32]
 8003150:	4628      	mov	r0, r5
 8003152:	f00f fa09 	bl	8012568 <_localeconv_r>
 8003156:	6843      	ldr	r3, [r0, #4]
 8003158:	9317      	str	r3, [sp, #92]	; 0x5c
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd f830 	bl	80001c0 <strlen>
 8003160:	9018      	str	r0, [sp, #96]	; 0x60
 8003162:	4604      	mov	r4, r0
 8003164:	4628      	mov	r0, r5
 8003166:	f00f f9ff 	bl	8012568 <_localeconv_r>
 800316a:	6883      	ldr	r3, [r0, #8]
 800316c:	9315      	str	r3, [sp, #84]	; 0x54
 800316e:	2c00      	cmp	r4, #0
 8003170:	f040 8670 	bne.w	8003e54 <_svfprintf_r+0xe8c>
 8003174:	f89a 5000 	ldrb.w	r5, [sl]
 8003178:	e776      	b.n	8003068 <_svfprintf_r+0xa0>
 800317a:	9b03      	ldr	r3, [sp, #12]
 800317c:	f89a 5000 	ldrb.w	r5, [sl]
 8003180:	f043 0320 	orr.w	r3, r3, #32
 8003184:	9303      	str	r3, [sp, #12]
 8003186:	e76f      	b.n	8003068 <_svfprintf_r+0xa0>
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	f043 0310 	orr.w	r3, r3, #16
 800318e:	9303      	str	r3, [sp, #12]
 8003190:	9b03      	ldr	r3, [sp, #12]
 8003192:	069c      	lsls	r4, r3, #26
 8003194:	f140 8194 	bpl.w	80034c0 <_svfprintf_r+0x4f8>
 8003198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800319a:	3307      	adds	r3, #7
 800319c:	f023 0307 	bic.w	r3, r3, #7
 80031a0:	461a      	mov	r2, r3
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	f852 3b08 	ldr.w	r3, [r2], #8
 80031a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80031aa:	460a      	mov	r2, r1
 80031ac:	2900      	cmp	r1, #0
 80031ae:	f2c0 85bb 	blt.w	8003d28 <_svfprintf_r+0xd60>
 80031b2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80031b6:	f000 87f5 	beq.w	80041a4 <_svfprintf_r+0x11dc>
 80031ba:	9903      	ldr	r1, [sp, #12]
 80031bc:	f021 0680 	bic.w	r6, r1, #128	; 0x80
 80031c0:	ea53 0102 	orrs.w	r1, r3, r2
 80031c4:	f000 855a 	beq.w	8003c7c <_svfprintf_r+0xcb4>
 80031c8:	2b0a      	cmp	r3, #10
 80031ca:	f172 0100 	sbcs.w	r1, r2, #0
 80031ce:	f080 877c 	bcs.w	80040ca <_svfprintf_r+0x1102>
 80031d2:	3330      	adds	r3, #48	; 0x30
 80031d4:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 80031d8:	f20d 1347 	addw	r3, sp, #327	; 0x147
 80031dc:	9603      	str	r6, [sp, #12]
 80031de:	9304      	str	r3, [sp, #16]
 80031e0:	2601      	movs	r6, #1
 80031e2:	e034      	b.n	800324e <_svfprintf_r+0x286>
 80031e4:	9b03      	ldr	r3, [sp, #12]
 80031e6:	f043 0310 	orr.w	r3, r3, #16
 80031ea:	9303      	str	r3, [sp, #12]
 80031ec:	9b03      	ldr	r3, [sp, #12]
 80031ee:	f013 0220 	ands.w	r2, r3, #32
 80031f2:	f000 8154 	beq.w	800349e <_svfprintf_r+0x4d6>
 80031f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031f8:	3307      	adds	r3, #7
 80031fa:	f023 0307 	bic.w	r3, r3, #7
 80031fe:	4619      	mov	r1, r3
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	f851 3b08 	ldr.w	r3, [r1], #8
 8003206:	910b      	str	r1, [sp, #44]	; 0x2c
 8003208:	9903      	ldr	r1, [sp, #12]
 800320a:	f421 6680 	bic.w	r6, r1, #1024	; 0x400
 800320e:	2100      	movs	r1, #0
 8003210:	2000      	movs	r0, #0
 8003212:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8003216:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800321a:	f000 8293 	beq.w	8003744 <_svfprintf_r+0x77c>
 800321e:	f026 0080 	bic.w	r0, r6, #128	; 0x80
 8003222:	9003      	str	r0, [sp, #12]
 8003224:	ea53 0002 	orrs.w	r0, r3, r2
 8003228:	f040 828b 	bne.w	8003742 <_svfprintf_r+0x77a>
 800322c:	f1b9 0f00 	cmp.w	r9, #0
 8003230:	f040 87c1 	bne.w	80041b6 <_svfprintf_r+0x11ee>
 8003234:	2900      	cmp	r1, #0
 8003236:	f040 8526 	bne.w	8003c86 <_svfprintf_r+0xcbe>
 800323a:	f016 0601 	ands.w	r6, r6, #1
 800323e:	bf1b      	ittet	ne
 8003240:	2330      	movne	r3, #48	; 0x30
 8003242:	f88d 3147 	strbne.w	r3, [sp, #327]	; 0x147
 8003246:	ab52      	addeq	r3, sp, #328	; 0x148
 8003248:	f20d 1347 	addwne	r3, sp, #327	; 0x147
 800324c:	9304      	str	r3, [sp, #16]
 800324e:	2300      	movs	r3, #0
 8003250:	45b1      	cmp	r9, r6
 8003252:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8003256:	4649      	mov	r1, r9
 8003258:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800325c:	930a      	str	r3, [sp, #40]	; 0x28
 800325e:	bfb8      	it	lt
 8003260:	4631      	movlt	r1, r6
 8003262:	9105      	str	r1, [sp, #20]
 8003264:	930f      	str	r3, [sp, #60]	; 0x3c
 8003266:	2a00      	cmp	r2, #0
 8003268:	d052      	beq.n	8003310 <_svfprintf_r+0x348>
 800326a:	9b05      	ldr	r3, [sp, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	9305      	str	r3, [sp, #20]
 8003270:	e04e      	b.n	8003310 <_svfprintf_r+0x348>
 8003272:	9b04      	ldr	r3, [sp, #16]
 8003274:	ebba 0503 	subs.w	r5, sl, r3
 8003278:	f000 80c2 	beq.w	8003400 <_svfprintf_r+0x438>
 800327c:	9b04      	ldr	r3, [sp, #16]
 800327e:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8003280:	e9cb 3500 	strd	r3, r5, [fp]
 8003284:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003286:	3301      	adds	r3, #1
 8003288:	442f      	add	r7, r5
 800328a:	2b07      	cmp	r3, #7
 800328c:	9728      	str	r7, [sp, #160]	; 0xa0
 800328e:	9327      	str	r3, [sp, #156]	; 0x9c
 8003290:	dc0a      	bgt.n	80032a8 <_svfprintf_r+0x2e0>
 8003292:	f10b 0b08 	add.w	fp, fp, #8
 8003296:	9b07      	ldr	r3, [sp, #28]
 8003298:	442b      	add	r3, r5
 800329a:	9307      	str	r3, [sp, #28]
 800329c:	e6d4      	b.n	8003048 <_svfprintf_r+0x80>
 800329e:	bf00      	nop
	...
 80032a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80032ac:	aa26      	add	r2, sp, #152	; 0x98
 80032ae:	f00f fdf9 	bl	8012ea4 <__ssprint_r>
 80032b2:	b980      	cbnz	r0, 80032d6 <_svfprintf_r+0x30e>
 80032b4:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80032b8:	e7ed      	b.n	8003296 <_svfprintf_r+0x2ce>
 80032ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80032be:	aa26      	add	r2, sp, #152	; 0x98
 80032c0:	f00f fdf0 	bl	8012ea4 <__ssprint_r>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	f000 808a 	beq.w	80033de <_svfprintf_r+0x416>
 80032ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032cc:	b11b      	cbz	r3, 80032d6 <_svfprintf_r+0x30e>
 80032ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80032d0:	9808      	ldr	r0, [sp, #32]
 80032d2:	f00f f827 	bl	8012324 <_free_r>
 80032d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032d8:	899b      	ldrh	r3, [r3, #12]
 80032da:	0659      	lsls	r1, r3, #25
 80032dc:	f101 82e5 	bmi.w	80048aa <_svfprintf_r+0x18e2>
 80032e0:	9807      	ldr	r0, [sp, #28]
 80032e2:	b053      	add	sp, #332	; 0x14c
 80032e4:	ecbd 8b02 	vpop	{d8}
 80032e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	f000 8087 	beq.w	8003400 <_svfprintf_r+0x438>
 80032f2:	2200      	movs	r2, #0
 80032f4:	f88d 50e4 	strb.w	r5, [sp, #228]	; 0xe4
 80032f8:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80032fc:	2301      	movs	r3, #1
 80032fe:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 8003302:	9305      	str	r3, [sp, #20]
 8003304:	461e      	mov	r6, r3
 8003306:	ab39      	add	r3, sp, #228	; 0xe4
 8003308:	920a      	str	r2, [sp, #40]	; 0x28
 800330a:	4691      	mov	r9, r2
 800330c:	920f      	str	r2, [sp, #60]	; 0x3c
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	f013 0302 	ands.w	r3, r3, #2
 8003316:	d002      	beq.n	800331e <_svfprintf_r+0x356>
 8003318:	9905      	ldr	r1, [sp, #20]
 800331a:	3102      	adds	r1, #2
 800331c:	9105      	str	r1, [sp, #20]
 800331e:	9903      	ldr	r1, [sp, #12]
 8003320:	f011 0484 	ands.w	r4, r1, #132	; 0x84
 8003324:	d105      	bne.n	8003332 <_svfprintf_r+0x36a>
 8003326:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800332a:	1a0f      	subs	r7, r1, r0
 800332c:	2f00      	cmp	r7, #0
 800332e:	f300 8341 	bgt.w	80039b4 <_svfprintf_r+0x9ec>
 8003332:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8003334:	b18a      	cbz	r2, 800335a <_svfprintf_r+0x392>
 8003336:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8003338:	f10d 017b 	add.w	r1, sp, #123	; 0x7b
 800333c:	3201      	adds	r2, #1
 800333e:	3701      	adds	r7, #1
 8003340:	f8cb 1000 	str.w	r1, [fp]
 8003344:	2a07      	cmp	r2, #7
 8003346:	f04f 0101 	mov.w	r1, #1
 800334a:	9728      	str	r7, [sp, #160]	; 0xa0
 800334c:	9227      	str	r2, [sp, #156]	; 0x9c
 800334e:	f8cb 1004 	str.w	r1, [fp, #4]
 8003352:	f300 8387 	bgt.w	8003a64 <_svfprintf_r+0xa9c>
 8003356:	f10b 0b08 	add.w	fp, fp, #8
 800335a:	b183      	cbz	r3, 800337e <_svfprintf_r+0x3b6>
 800335c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800335e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003360:	3301      	adds	r3, #1
 8003362:	3702      	adds	r7, #2
 8003364:	f8cb 2000 	str.w	r2, [fp]
 8003368:	2b07      	cmp	r3, #7
 800336a:	f04f 0202 	mov.w	r2, #2
 800336e:	9728      	str	r7, [sp, #160]	; 0xa0
 8003370:	9327      	str	r3, [sp, #156]	; 0x9c
 8003372:	f8cb 2004 	str.w	r2, [fp, #4]
 8003376:	f300 8383 	bgt.w	8003a80 <_svfprintf_r+0xab8>
 800337a:	f10b 0b08 	add.w	fp, fp, #8
 800337e:	2c80      	cmp	r4, #128	; 0x80
 8003380:	f000 81fc 	beq.w	800377c <_svfprintf_r+0x7b4>
 8003384:	eba9 0806 	sub.w	r8, r9, r6
 8003388:	f1b8 0f00 	cmp.w	r8, #0
 800338c:	f300 8242 	bgt.w	8003814 <_svfprintf_r+0x84c>
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	05da      	lsls	r2, r3, #23
 8003394:	f100 816d 	bmi.w	8003672 <_svfprintf_r+0x6aa>
 8003398:	9b04      	ldr	r3, [sp, #16]
 800339a:	f8cb 3000 	str.w	r3, [fp]
 800339e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80033a0:	f8cb 6004 	str.w	r6, [fp, #4]
 80033a4:	3301      	adds	r3, #1
 80033a6:	19f5      	adds	r5, r6, r7
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	9528      	str	r5, [sp, #160]	; 0xa0
 80033ac:	9327      	str	r3, [sp, #156]	; 0x9c
 80033ae:	f300 82aa 	bgt.w	8003906 <_svfprintf_r+0x93e>
 80033b2:	f10b 0b08 	add.w	fp, fp, #8
 80033b6:	9b03      	ldr	r3, [sp, #12]
 80033b8:	0758      	lsls	r0, r3, #29
 80033ba:	d505      	bpl.n	80033c8 <_svfprintf_r+0x400>
 80033bc:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80033c0:	1a9c      	subs	r4, r3, r2
 80033c2:	2c00      	cmp	r4, #0
 80033c4:	f300 836e 	bgt.w	8003aa4 <_svfprintf_r+0xadc>
 80033c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033cc:	9905      	ldr	r1, [sp, #20]
 80033ce:	428a      	cmp	r2, r1
 80033d0:	bfac      	ite	ge
 80033d2:	189b      	addge	r3, r3, r2
 80033d4:	185b      	addlt	r3, r3, r1
 80033d6:	9307      	str	r3, [sp, #28]
 80033d8:	2d00      	cmp	r5, #0
 80033da:	f47f af6e 	bne.w	80032ba <_svfprintf_r+0x2f2>
 80033de:	2300      	movs	r3, #0
 80033e0:	9327      	str	r3, [sp, #156]	; 0x9c
 80033e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033e4:	b11b      	cbz	r3, 80033ee <_svfprintf_r+0x426>
 80033e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033e8:	9808      	ldr	r0, [sp, #32]
 80033ea:	f00e ff9b 	bl	8012324 <_free_r>
 80033ee:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80033f2:	f8cd a010 	str.w	sl, [sp, #16]
 80033f6:	9b04      	ldr	r3, [sp, #16]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f ae15 	bne.w	800302a <_svfprintf_r+0x62>
 8003400:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003402:	2b00      	cmp	r3, #0
 8003404:	f43f af67 	beq.w	80032d6 <_svfprintf_r+0x30e>
 8003408:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800340a:	9808      	ldr	r0, [sp, #32]
 800340c:	aa26      	add	r2, sp, #152	; 0x98
 800340e:	4621      	mov	r1, r4
 8003410:	f00f fd48 	bl	8012ea4 <__ssprint_r>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	e760      	b.n	80032da <_svfprintf_r+0x312>
 8003418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800341a:	3307      	adds	r3, #7
 800341c:	f023 0307 	bic.w	r3, r3, #7
 8003420:	ecb3 7b02 	vldmia	r3!, {d7}
 8003424:	ec57 6b17 	vmov	r6, r7, d7
 8003428:	930b      	str	r3, [sp, #44]	; 0x2c
 800342a:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800342e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003430:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 8003434:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8003438:	4bae      	ldr	r3, [pc, #696]	; (80036f4 <_svfprintf_r+0x72c>)
 800343a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800343e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003442:	f7fd febf 	bl	80011c4 <__aeabi_dcmpun>
 8003446:	2800      	cmp	r0, #0
 8003448:	f040 849b 	bne.w	8003d82 <_svfprintf_r+0xdba>
 800344c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8003450:	4ba8      	ldr	r3, [pc, #672]	; (80036f4 <_svfprintf_r+0x72c>)
 8003452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003456:	f7fd fdfd 	bl	8001054 <__aeabi_dcmple>
 800345a:	2800      	cmp	r0, #0
 800345c:	f040 8491 	bne.w	8003d82 <_svfprintf_r+0xdba>
 8003460:	2200      	movs	r2, #0
 8003462:	2300      	movs	r3, #0
 8003464:	4630      	mov	r0, r6
 8003466:	4639      	mov	r1, r7
 8003468:	f7fd fdea 	bl	8001040 <__aeabi_dcmplt>
 800346c:	2800      	cmp	r0, #0
 800346e:	f040 875b 	bne.w	8004328 <_svfprintf_r+0x1360>
 8003472:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8003476:	9b03      	ldr	r3, [sp, #12]
 8003478:	4c9f      	ldr	r4, [pc, #636]	; (80036f8 <_svfprintf_r+0x730>)
 800347a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347e:	9303      	str	r3, [sp, #12]
 8003480:	4b9e      	ldr	r3, [pc, #632]	; (80036fc <_svfprintf_r+0x734>)
 8003482:	2d47      	cmp	r5, #71	; 0x47
 8003484:	bfc8      	it	gt
 8003486:	461c      	movgt	r4, r3
 8003488:	2103      	movs	r1, #3
 800348a:	2300      	movs	r3, #0
 800348c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8003490:	9404      	str	r4, [sp, #16]
 8003492:	930a      	str	r3, [sp, #40]	; 0x28
 8003494:	9105      	str	r1, [sp, #20]
 8003496:	460e      	mov	r6, r1
 8003498:	4699      	mov	r9, r3
 800349a:	930f      	str	r3, [sp, #60]	; 0x3c
 800349c:	e6e3      	b.n	8003266 <_svfprintf_r+0x29e>
 800349e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80034a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80034a6:	9903      	ldr	r1, [sp, #12]
 80034a8:	f011 0110 	ands.w	r1, r1, #16
 80034ac:	f47f aeac 	bne.w	8003208 <_svfprintf_r+0x240>
 80034b0:	9a03      	ldr	r2, [sp, #12]
 80034b2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
 80034b6:	f000 8719 	beq.w	80042ec <_svfprintf_r+0x1324>
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	460a      	mov	r2, r1
 80034be:	e6a3      	b.n	8003208 <_svfprintf_r+0x240>
 80034c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034c2:	f852 3b04 	ldr.w	r3, [r2], #4
 80034c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80034c8:	9a03      	ldr	r2, [sp, #12]
 80034ca:	06d0      	lsls	r0, r2, #27
 80034cc:	f100 8455 	bmi.w	8003d7a <_svfprintf_r+0xdb2>
 80034d0:	9a03      	ldr	r2, [sp, #12]
 80034d2:	0651      	lsls	r1, r2, #25
 80034d4:	f140 844d 	bpl.w	8003d72 <_svfprintf_r+0xdaa>
 80034d8:	f343 32c0 	sbfx	r2, r3, #15, #1
 80034dc:	4611      	mov	r1, r2
 80034de:	b21b      	sxth	r3, r3
 80034e0:	e664      	b.n	80031ac <_svfprintf_r+0x1e4>
 80034e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034e4:	2200      	movs	r2, #0
 80034e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80034ea:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80034ee:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
 80034f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80034f4:	e702      	b.n	80032fc <_svfprintf_r+0x334>
 80034f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80034f8:	f857 3b04 	ldr.w	r3, [r7], #4
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	2600      	movs	r6, #0
 8003500:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 869e 	beq.w	8004246 <_svfprintf_r+0x127e>
 800350a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800350e:	f000 850d 	beq.w	8003f2c <_svfprintf_r+0xf64>
 8003512:	9804      	ldr	r0, [sp, #16]
 8003514:	464a      	mov	r2, r9
 8003516:	4631      	mov	r1, r6
 8003518:	f7fd f832 	bl	8000580 <memchr>
 800351c:	900a      	str	r0, [sp, #40]	; 0x28
 800351e:	2800      	cmp	r0, #0
 8003520:	f001 8125 	beq.w	800476e <_svfprintf_r+0x17a6>
 8003524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003526:	9a04      	ldr	r2, [sp, #16]
 8003528:	970b      	str	r7, [sp, #44]	; 0x2c
 800352a:	46b1      	mov	r9, r6
 800352c:	1a9e      	subs	r6, r3, r2
 800352e:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8003532:	e9cd 990c 	strd	r9, r9, [sp, #48]	; 0x30
 8003536:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8003540:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8003544:	e68f      	b.n	8003266 <_svfprintf_r+0x29e>
 8003546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003548:	f853 2b04 	ldr.w	r2, [r3], #4
 800354c:	9206      	str	r2, [sp, #24]
 800354e:	2a00      	cmp	r2, #0
 8003550:	f280 840a 	bge.w	8003d68 <_svfprintf_r+0xda0>
 8003554:	9a06      	ldr	r2, [sp, #24]
 8003556:	930b      	str	r3, [sp, #44]	; 0x2c
 8003558:	4252      	negs	r2, r2
 800355a:	9206      	str	r2, [sp, #24]
 800355c:	9b03      	ldr	r3, [sp, #12]
 800355e:	f89a 5000 	ldrb.w	r5, [sl]
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	9303      	str	r3, [sp, #12]
 8003568:	e57e      	b.n	8003068 <_svfprintf_r+0xa0>
 800356a:	232b      	movs	r3, #43	; 0x2b
 800356c:	f89a 5000 	ldrb.w	r5, [sl]
 8003570:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003574:	e578      	b.n	8003068 <_svfprintf_r+0xa0>
 8003576:	9b03      	ldr	r3, [sp, #12]
 8003578:	f89a 5000 	ldrb.w	r5, [sl]
 800357c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003580:	9303      	str	r3, [sp, #12]
 8003582:	e571      	b.n	8003068 <_svfprintf_r+0xa0>
 8003584:	4652      	mov	r2, sl
 8003586:	f812 5b01 	ldrb.w	r5, [r2], #1
 800358a:	2d2a      	cmp	r5, #42	; 0x2a
 800358c:	f001 8219 	beq.w	80049c2 <_svfprintf_r+0x19fa>
 8003590:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003594:	2b09      	cmp	r3, #9
 8003596:	4692      	mov	sl, r2
 8003598:	f04f 0900 	mov.w	r9, #0
 800359c:	f63f ad66 	bhi.w	800306c <_svfprintf_r+0xa4>
 80035a0:	f81a 5b01 	ldrb.w	r5, [sl], #1
 80035a4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 80035a8:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 80035ac:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	d9f5      	bls.n	80035a0 <_svfprintf_r+0x5d8>
 80035b4:	e55a      	b.n	800306c <_svfprintf_r+0xa4>
 80035b6:	9b03      	ldr	r3, [sp, #12]
 80035b8:	f89a 5000 	ldrb.w	r5, [sl]
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	9303      	str	r3, [sp, #12]
 80035c2:	e551      	b.n	8003068 <_svfprintf_r+0xa0>
 80035c4:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80035c8:	f89a 5000 	ldrb.w	r5, [sl]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f ad4b 	bne.w	8003068 <_svfprintf_r+0xa0>
 80035d2:	2320      	movs	r3, #32
 80035d4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80035d8:	e546      	b.n	8003068 <_svfprintf_r+0xa0>
 80035da:	9b03      	ldr	r3, [sp, #12]
 80035dc:	f043 0610 	orr.w	r6, r3, #16
 80035e0:	f016 0220 	ands.w	r2, r6, #32
 80035e4:	f000 8389 	beq.w	8003cfa <_svfprintf_r+0xd32>
 80035e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035ea:	3307      	adds	r3, #7
 80035ec:	f023 0307 	bic.w	r3, r3, #7
 80035f0:	4619      	mov	r1, r3
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	f851 3b08 	ldr.w	r3, [r1], #8
 80035f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80035fa:	2101      	movs	r1, #1
 80035fc:	e608      	b.n	8003210 <_svfprintf_r+0x248>
 80035fe:	9b03      	ldr	r3, [sp, #12]
 8003600:	f89a 5000 	ldrb.w	r5, [sl]
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	9303      	str	r3, [sp, #12]
 800360a:	e52d      	b.n	8003068 <_svfprintf_r+0xa0>
 800360c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	f043 0602 	orr.w	r6, r3, #2
 8003614:	f852 3b04 	ldr.w	r3, [r2], #4
 8003618:	920b      	str	r2, [sp, #44]	; 0x2c
 800361a:	f647 0230 	movw	r2, #30768	; 0x7830
 800361e:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
 8003622:	4a37      	ldr	r2, [pc, #220]	; (8003700 <_svfprintf_r+0x738>)
 8003624:	9214      	str	r2, [sp, #80]	; 0x50
 8003626:	2102      	movs	r1, #2
 8003628:	2200      	movs	r2, #0
 800362a:	2578      	movs	r5, #120	; 0x78
 800362c:	e5f0      	b.n	8003210 <_svfprintf_r+0x248>
 800362e:	9b03      	ldr	r3, [sp, #12]
 8003630:	069e      	lsls	r6, r3, #26
 8003632:	f140 83fd 	bpl.w	8003e30 <_svfprintf_r+0xe68>
 8003636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003638:	9a07      	ldr	r2, [sp, #28]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	17d2      	asrs	r2, r2, #31
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003644:	3304      	adds	r3, #4
 8003646:	930b      	str	r3, [sp, #44]	; 0x2c
 8003648:	e6d3      	b.n	80033f2 <_svfprintf_r+0x42a>
 800364a:	f89a 5000 	ldrb.w	r5, [sl]
 800364e:	9b03      	ldr	r3, [sp, #12]
 8003650:	2d6c      	cmp	r5, #108	; 0x6c
 8003652:	f000 8453 	beq.w	8003efc <_svfprintf_r+0xf34>
 8003656:	f043 0310 	orr.w	r3, r3, #16
 800365a:	9303      	str	r3, [sp, #12]
 800365c:	e504      	b.n	8003068 <_svfprintf_r+0xa0>
 800365e:	f89a 5000 	ldrb.w	r5, [sl]
 8003662:	9b03      	ldr	r3, [sp, #12]
 8003664:	2d68      	cmp	r5, #104	; 0x68
 8003666:	f000 8440 	beq.w	8003eea <_svfprintf_r+0xf22>
 800366a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366e:	9303      	str	r3, [sp, #12]
 8003670:	e4fa      	b.n	8003068 <_svfprintf_r+0xa0>
 8003672:	2d65      	cmp	r5, #101	; 0x65
 8003674:	f340 8153 	ble.w	800391e <_svfprintf_r+0x956>
 8003678:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800367c:	2200      	movs	r2, #0
 800367e:	2300      	movs	r3, #0
 8003680:	f7fd fcd4 	bl	800102c <__aeabi_dcmpeq>
 8003684:	2800      	cmp	r0, #0
 8003686:	f000 8249 	beq.w	8003b1c <_svfprintf_r+0xb54>
 800368a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <_svfprintf_r+0x73c>)
 800368e:	f8cb 2000 	str.w	r2, [fp]
 8003692:	3301      	adds	r3, #1
 8003694:	3701      	adds	r7, #1
 8003696:	2201      	movs	r2, #1
 8003698:	2b07      	cmp	r3, #7
 800369a:	9728      	str	r7, [sp, #160]	; 0xa0
 800369c:	9327      	str	r3, [sp, #156]	; 0x9c
 800369e:	f8cb 2004 	str.w	r2, [fp, #4]
 80036a2:	f300 858e 	bgt.w	80041c2 <_svfprintf_r+0x11fa>
 80036a6:	f10b 0b08 	add.w	fp, fp, #8
 80036aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036ae:	4293      	cmp	r3, r2
 80036b0:	db04      	blt.n	80036bc <_svfprintf_r+0x6f4>
 80036b2:	9b03      	ldr	r3, [sp, #12]
 80036b4:	07db      	lsls	r3, r3, #31
 80036b6:	d401      	bmi.n	80036bc <_svfprintf_r+0x6f4>
 80036b8:	463d      	mov	r5, r7
 80036ba:	e67c      	b.n	80033b6 <_svfprintf_r+0x3ee>
 80036bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80036c0:	19dd      	adds	r5, r3, r7
 80036c2:	e9cb 2300 	strd	r2, r3, [fp]
 80036c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80036c8:	9528      	str	r5, [sp, #160]	; 0xa0
 80036ca:	3301      	adds	r3, #1
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80036d0:	f300 83fe 	bgt.w	8003ed0 <_svfprintf_r+0xf08>
 80036d4:	f10b 0b08 	add.w	fp, fp, #8
 80036d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036da:	1e5c      	subs	r4, r3, #1
 80036dc:	2c00      	cmp	r4, #0
 80036de:	f77f ae6a 	ble.w	80033b6 <_svfprintf_r+0x3ee>
 80036e2:	2c10      	cmp	r4, #16
 80036e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80036e6:	4f08      	ldr	r7, [pc, #32]	; (8003708 <_svfprintf_r+0x740>)
 80036e8:	f340 8578 	ble.w	80041dc <_svfprintf_r+0x1214>
 80036ec:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80036f0:	2610      	movs	r6, #16
 80036f2:	e011      	b.n	8003718 <_svfprintf_r+0x750>
 80036f4:	7fefffff 	.word	0x7fefffff
 80036f8:	0801b3ec 	.word	0x0801b3ec
 80036fc:	0801b3f0 	.word	0x0801b3f0
 8003700:	0801b3fc 	.word	0x0801b3fc
 8003704:	0801b42c 	.word	0x0801b42c
 8003708:	0801b430 	.word	0x0801b430
 800370c:	f10b 0b08 	add.w	fp, fp, #8
 8003710:	3c10      	subs	r4, #16
 8003712:	2c10      	cmp	r4, #16
 8003714:	f340 8562 	ble.w	80041dc <_svfprintf_r+0x1214>
 8003718:	3301      	adds	r3, #1
 800371a:	3510      	adds	r5, #16
 800371c:	2b07      	cmp	r3, #7
 800371e:	e9cb 7600 	strd	r7, r6, [fp]
 8003722:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8003726:	ddf1      	ble.n	800370c <_svfprintf_r+0x744>
 8003728:	aa26      	add	r2, sp, #152	; 0x98
 800372a:	4649      	mov	r1, r9
 800372c:	4640      	mov	r0, r8
 800372e:	f00f fbb9 	bl	8012ea4 <__ssprint_r>
 8003732:	2800      	cmp	r0, #0
 8003734:	f47f adc9 	bne.w	80032ca <_svfprintf_r+0x302>
 8003738:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 800373c:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003740:	e7e6      	b.n	8003710 <_svfprintf_r+0x748>
 8003742:	9e03      	ldr	r6, [sp, #12]
 8003744:	2901      	cmp	r1, #1
 8003746:	f43f ad3f 	beq.w	80031c8 <_svfprintf_r+0x200>
 800374a:	2902      	cmp	r1, #2
 800374c:	f000 8176 	beq.w	8003a3c <_svfprintf_r+0xa74>
 8003750:	ac52      	add	r4, sp, #328	; 0x148
 8003752:	f003 0107 	and.w	r1, r3, #7
 8003756:	08db      	lsrs	r3, r3, #3
 8003758:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
 800375c:	08d2      	lsrs	r2, r2, #3
 800375e:	3130      	adds	r1, #48	; 0x30
 8003760:	ea53 0702 	orrs.w	r7, r3, r2
 8003764:	4620      	mov	r0, r4
 8003766:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800376a:	d1f2      	bne.n	8003752 <_svfprintf_r+0x78a>
 800376c:	07f7      	lsls	r7, r6, #31
 800376e:	9404      	str	r4, [sp, #16]
 8003770:	f100 8276 	bmi.w	8003c60 <_svfprintf_r+0xc98>
 8003774:	ab52      	add	r3, sp, #328	; 0x148
 8003776:	9603      	str	r6, [sp, #12]
 8003778:	1b1e      	subs	r6, r3, r4
 800377a:	e568      	b.n	800324e <_svfprintf_r+0x286>
 800377c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8003780:	eba3 0802 	sub.w	r8, r3, r2
 8003784:	f1b8 0f00 	cmp.w	r8, #0
 8003788:	f77f adfc 	ble.w	8003384 <_svfprintf_r+0x3bc>
 800378c:	f1b8 0f10 	cmp.w	r8, #16
 8003790:	463a      	mov	r2, r7
 8003792:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003794:	4fc0      	ldr	r7, [pc, #768]	; (8003a98 <_svfprintf_r+0xad0>)
 8003796:	dd29      	ble.n	80037ec <_svfprintf_r+0x824>
 8003798:	9519      	str	r5, [sp, #100]	; 0x64
 800379a:	961c      	str	r6, [sp, #112]	; 0x70
 800379c:	2410      	movs	r4, #16
 800379e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80037a2:	4619      	mov	r1, r3
 80037a4:	e006      	b.n	80037b4 <_svfprintf_r+0x7ec>
 80037a6:	f1a8 0810 	sub.w	r8, r8, #16
 80037aa:	f1b8 0f10 	cmp.w	r8, #16
 80037ae:	f10b 0b08 	add.w	fp, fp, #8
 80037b2:	dd18      	ble.n	80037e6 <_svfprintf_r+0x81e>
 80037b4:	3101      	adds	r1, #1
 80037b6:	3210      	adds	r2, #16
 80037b8:	2907      	cmp	r1, #7
 80037ba:	e9cb 7400 	strd	r7, r4, [fp]
 80037be:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
 80037c2:	ddf0      	ble.n	80037a6 <_svfprintf_r+0x7de>
 80037c4:	aa26      	add	r2, sp, #152	; 0x98
 80037c6:	4629      	mov	r1, r5
 80037c8:	4630      	mov	r0, r6
 80037ca:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80037ce:	f00f fb69 	bl	8012ea4 <__ssprint_r>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	f47f ad79 	bne.w	80032ca <_svfprintf_r+0x302>
 80037d8:	f1a8 0810 	sub.w	r8, r8, #16
 80037dc:	f1b8 0f10 	cmp.w	r8, #16
 80037e0:	e9dd 1227 	ldrd	r1, r2, [sp, #156]	; 0x9c
 80037e4:	dce6      	bgt.n	80037b4 <_svfprintf_r+0x7ec>
 80037e6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80037e8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80037ea:	460b      	mov	r3, r1
 80037ec:	3301      	adds	r3, #1
 80037ee:	f8cb 7000 	str.w	r7, [fp]
 80037f2:	2b07      	cmp	r3, #7
 80037f4:	eb08 0702 	add.w	r7, r8, r2
 80037f8:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80037fc:	f8cb 8004 	str.w	r8, [fp, #4]
 8003800:	f300 850e 	bgt.w	8004220 <_svfprintf_r+0x1258>
 8003804:	eba9 0806 	sub.w	r8, r9, r6
 8003808:	f1b8 0f00 	cmp.w	r8, #0
 800380c:	f10b 0b08 	add.w	fp, fp, #8
 8003810:	f77f adbe 	ble.w	8003390 <_svfprintf_r+0x3c8>
 8003814:	f1b8 0f10 	cmp.w	r8, #16
 8003818:	463a      	mov	r2, r7
 800381a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800381c:	4f9e      	ldr	r7, [pc, #632]	; (8003a98 <_svfprintf_r+0xad0>)
 800381e:	dd2e      	ble.n	800387e <_svfprintf_r+0x8b6>
 8003820:	4659      	mov	r1, fp
 8003822:	9c08      	ldr	r4, [sp, #32]
 8003824:	46c3      	mov	fp, r8
 8003826:	f04f 0910 	mov.w	r9, #16
 800382a:	46b8      	mov	r8, r7
 800382c:	4637      	mov	r7, r6
 800382e:	462e      	mov	r6, r5
 8003830:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003832:	e006      	b.n	8003842 <_svfprintf_r+0x87a>
 8003834:	f1ab 0b10 	sub.w	fp, fp, #16
 8003838:	f1bb 0f10 	cmp.w	fp, #16
 800383c:	f101 0108 	add.w	r1, r1, #8
 8003840:	dd18      	ble.n	8003874 <_svfprintf_r+0x8ac>
 8003842:	3301      	adds	r3, #1
 8003844:	4894      	ldr	r0, [pc, #592]	; (8003a98 <_svfprintf_r+0xad0>)
 8003846:	3210      	adds	r2, #16
 8003848:	2b07      	cmp	r3, #7
 800384a:	e9c1 0900 	strd	r0, r9, [r1]
 800384e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003852:	ddef      	ble.n	8003834 <_svfprintf_r+0x86c>
 8003854:	aa26      	add	r2, sp, #152	; 0x98
 8003856:	4629      	mov	r1, r5
 8003858:	4620      	mov	r0, r4
 800385a:	f00f fb23 	bl	8012ea4 <__ssprint_r>
 800385e:	2800      	cmp	r0, #0
 8003860:	f47f ad33 	bne.w	80032ca <_svfprintf_r+0x302>
 8003864:	f1ab 0b10 	sub.w	fp, fp, #16
 8003868:	f1bb 0f10 	cmp.w	fp, #16
 800386c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003870:	a929      	add	r1, sp, #164	; 0xa4
 8003872:	dce6      	bgt.n	8003842 <_svfprintf_r+0x87a>
 8003874:	4635      	mov	r5, r6
 8003876:	463e      	mov	r6, r7
 8003878:	4647      	mov	r7, r8
 800387a:	46d8      	mov	r8, fp
 800387c:	468b      	mov	fp, r1
 800387e:	3301      	adds	r3, #1
 8003880:	f8cb 7000 	str.w	r7, [fp]
 8003884:	2b07      	cmp	r3, #7
 8003886:	eb08 0702 	add.w	r7, r8, r2
 800388a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800388e:	f8cb 8004 	str.w	r8, [fp, #4]
 8003892:	f300 8225 	bgt.w	8003ce0 <_svfprintf_r+0xd18>
 8003896:	f10b 0b08 	add.w	fp, fp, #8
 800389a:	e579      	b.n	8003390 <_svfprintf_r+0x3c8>
 800389c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800389e:	497f      	ldr	r1, [pc, #508]	; (8003a9c <_svfprintf_r+0xad4>)
 80038a0:	f8cb 1000 	str.w	r1, [fp]
 80038a4:	3301      	adds	r3, #1
 80038a6:	1c7d      	adds	r5, r7, #1
 80038a8:	2101      	movs	r1, #1
 80038aa:	2b07      	cmp	r3, #7
 80038ac:	9528      	str	r5, [sp, #160]	; 0xa0
 80038ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80038b0:	f8cb 1004 	str.w	r1, [fp, #4]
 80038b4:	f300 854a 	bgt.w	800434c <_svfprintf_r+0x1384>
 80038b8:	f10b 0b08 	add.w	fp, fp, #8
 80038bc:	2a00      	cmp	r2, #0
 80038be:	f040 84e0 	bne.w	8004282 <_svfprintf_r+0x12ba>
 80038c2:	9b03      	ldr	r3, [sp, #12]
 80038c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f43f ad73 	beq.w	80033b6 <_svfprintf_r+0x3ee>
 80038d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80038d4:	1959      	adds	r1, r3, r5
 80038d6:	e9cb 2300 	strd	r2, r3, [fp]
 80038da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80038dc:	9128      	str	r1, [sp, #160]	; 0xa0
 80038de:	3301      	adds	r3, #1
 80038e0:	2b07      	cmp	r3, #7
 80038e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80038e4:	f300 85ef 	bgt.w	80044c6 <_svfprintf_r+0x14fe>
 80038e8:	f10b 0b08 	add.w	fp, fp, #8
 80038ec:	9a04      	ldr	r2, [sp, #16]
 80038ee:	f8cb 2000 	str.w	r2, [fp]
 80038f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038f4:	f8cb 2004 	str.w	r2, [fp, #4]
 80038f8:	3301      	adds	r3, #1
 80038fa:	1855      	adds	r5, r2, r1
 80038fc:	2b07      	cmp	r3, #7
 80038fe:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8003902:	f77f ad56 	ble.w	80033b2 <_svfprintf_r+0x3ea>
 8003906:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800390a:	aa26      	add	r2, sp, #152	; 0x98
 800390c:	f00f faca 	bl	8012ea4 <__ssprint_r>
 8003910:	2800      	cmp	r0, #0
 8003912:	f47f acda 	bne.w	80032ca <_svfprintf_r+0x302>
 8003916:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003918:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 800391c:	e54b      	b.n	80033b6 <_svfprintf_r+0x3ee>
 800391e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003920:	2b01      	cmp	r3, #1
 8003922:	f10b 0608 	add.w	r6, fp, #8
 8003926:	f340 817a 	ble.w	8003c1e <_svfprintf_r+0xc56>
 800392a:	9b04      	ldr	r3, [sp, #16]
 800392c:	f8cb 3000 	str.w	r3, [fp]
 8003930:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003932:	3301      	adds	r3, #1
 8003934:	3701      	adds	r7, #1
 8003936:	2201      	movs	r2, #1
 8003938:	2b07      	cmp	r3, #7
 800393a:	9728      	str	r7, [sp, #160]	; 0xa0
 800393c:	9327      	str	r3, [sp, #156]	; 0x9c
 800393e:	f8cb 2004 	str.w	r2, [fp, #4]
 8003942:	f300 81f9 	bgt.w	8003d38 <_svfprintf_r+0xd70>
 8003946:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003948:	f103 0801 	add.w	r8, r3, #1
 800394c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800394e:	19d5      	adds	r5, r2, r7
 8003950:	f1b8 0f07 	cmp.w	r8, #7
 8003954:	e9c6 3200 	strd	r3, r2, [r6]
 8003958:	e9cd 8527 	strd	r8, r5, [sp, #156]	; 0x9c
 800395c:	f300 81f8 	bgt.w	8003d50 <_svfprintf_r+0xd88>
 8003960:	3608      	adds	r6, #8
 8003962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003964:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003968:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800396c:	2200      	movs	r2, #0
 800396e:	2300      	movs	r3, #0
 8003970:	f7fd fb5c 	bl	800102c <__aeabi_dcmpeq>
 8003974:	2800      	cmp	r0, #0
 8003976:	f040 818b 	bne.w	8003c90 <_svfprintf_r+0xcc8>
 800397a:	9c04      	ldr	r4, [sp, #16]
 800397c:	f8c6 9004 	str.w	r9, [r6, #4]
 8003980:	f108 0801 	add.w	r8, r8, #1
 8003984:	3401      	adds	r4, #1
 8003986:	444d      	add	r5, r9
 8003988:	f1b8 0f07 	cmp.w	r8, #7
 800398c:	e9cd 8527 	strd	r8, r5, [sp, #156]	; 0x9c
 8003990:	6034      	str	r4, [r6, #0]
 8003992:	f300 8159 	bgt.w	8003c48 <_svfprintf_r+0xc80>
 8003996:	3608      	adds	r6, #8
 8003998:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800399a:	6072      	str	r2, [r6, #4]
 800399c:	f108 0301 	add.w	r3, r8, #1
 80039a0:	4415      	add	r5, r2
 80039a2:	2b07      	cmp	r3, #7
 80039a4:	aa22      	add	r2, sp, #136	; 0x88
 80039a6:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80039aa:	6032      	str	r2, [r6, #0]
 80039ac:	dcab      	bgt.n	8003906 <_svfprintf_r+0x93e>
 80039ae:	f106 0b08 	add.w	fp, r6, #8
 80039b2:	e500      	b.n	80033b6 <_svfprintf_r+0x3ee>
 80039b4:	2f10      	cmp	r7, #16
 80039b6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 80039ba:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8003aa0 <_svfprintf_r+0xad8>
 80039be:	dd2d      	ble.n	8003a1c <_svfprintf_r+0xa54>
 80039c0:	9319      	str	r3, [sp, #100]	; 0x64
 80039c2:	4643      	mov	r3, r8
 80039c4:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 80039c8:	46b0      	mov	r8, r6
 80039ca:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80039ce:	461e      	mov	r6, r3
 80039d0:	e004      	b.n	80039dc <_svfprintf_r+0xa14>
 80039d2:	3f10      	subs	r7, #16
 80039d4:	2f10      	cmp	r7, #16
 80039d6:	f10b 0b08 	add.w	fp, fp, #8
 80039da:	dd19      	ble.n	8003a10 <_svfprintf_r+0xa48>
 80039dc:	3201      	adds	r2, #1
 80039de:	3110      	adds	r1, #16
 80039e0:	2310      	movs	r3, #16
 80039e2:	2a07      	cmp	r2, #7
 80039e4:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80039e8:	f8cb 6000 	str.w	r6, [fp]
 80039ec:	f8cb 3004 	str.w	r3, [fp, #4]
 80039f0:	ddef      	ble.n	80039d2 <_svfprintf_r+0xa0a>
 80039f2:	aa26      	add	r2, sp, #152	; 0x98
 80039f4:	4629      	mov	r1, r5
 80039f6:	4620      	mov	r0, r4
 80039f8:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80039fc:	f00f fa52 	bl	8012ea4 <__ssprint_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	f47f ac62 	bne.w	80032ca <_svfprintf_r+0x302>
 8003a06:	3f10      	subs	r7, #16
 8003a08:	2f10      	cmp	r7, #16
 8003a0a:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8003a0e:	dce5      	bgt.n	80039dc <_svfprintf_r+0xa14>
 8003a10:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8003a14:	4630      	mov	r0, r6
 8003a16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a18:	4646      	mov	r6, r8
 8003a1a:	4680      	mov	r8, r0
 8003a1c:	3201      	adds	r2, #1
 8003a1e:	4439      	add	r1, r7
 8003a20:	2a07      	cmp	r2, #7
 8003a22:	f8cb 8000 	str.w	r8, [fp]
 8003a26:	f8cb 7004 	str.w	r7, [fp, #4]
 8003a2a:	9128      	str	r1, [sp, #160]	; 0xa0
 8003a2c:	9227      	str	r2, [sp, #156]	; 0x9c
 8003a2e:	f300 83a9 	bgt.w	8004184 <_svfprintf_r+0x11bc>
 8003a32:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8003a36:	f10b 0b08 	add.w	fp, fp, #8
 8003a3a:	e47a      	b.n	8003332 <_svfprintf_r+0x36a>
 8003a3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8003a3e:	a952      	add	r1, sp, #328	; 0x148
 8003a40:	f003 000f 	and.w	r0, r3, #15
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	5c20      	ldrb	r0, [r4, r0]
 8003a48:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8003a4c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003a50:	0912      	lsrs	r2, r2, #4
 8003a52:	ea53 0002 	orrs.w	r0, r3, r2
 8003a56:	d1f3      	bne.n	8003a40 <_svfprintf_r+0xa78>
 8003a58:	ab52      	add	r3, sp, #328	; 0x148
 8003a5a:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8003a5e:	1a5e      	subs	r6, r3, r1
 8003a60:	f7ff bbf5 	b.w	800324e <_svfprintf_r+0x286>
 8003a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a68:	aa26      	add	r2, sp, #152	; 0x98
 8003a6a:	9319      	str	r3, [sp, #100]	; 0x64
 8003a6c:	f00f fa1a 	bl	8012ea4 <__ssprint_r>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	f47f ac2a 	bne.w	80032ca <_svfprintf_r+0x302>
 8003a76:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8003a78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a7a:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003a7e:	e46c      	b.n	800335a <_svfprintf_r+0x392>
 8003a80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a84:	aa26      	add	r2, sp, #152	; 0x98
 8003a86:	f00f fa0d 	bl	8012ea4 <__ssprint_r>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	f47f ac1d 	bne.w	80032ca <_svfprintf_r+0x302>
 8003a90:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8003a92:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003a96:	e472      	b.n	800337e <_svfprintf_r+0x3b6>
 8003a98:	0801b430 	.word	0x0801b430
 8003a9c:	0801b42c 	.word	0x0801b42c
 8003aa0:	0801b440 	.word	0x0801b440
 8003aa4:	2c10      	cmp	r4, #16
 8003aa6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003aa8:	f8df 83cc 	ldr.w	r8, [pc, #972]	; 8003e78 <_svfprintf_r+0xeb0>
 8003aac:	dd23      	ble.n	8003af6 <_svfprintf_r+0xb2e>
 8003aae:	4647      	mov	r7, r8
 8003ab0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab8:	2610      	movs	r6, #16
 8003aba:	e004      	b.n	8003ac6 <_svfprintf_r+0xafe>
 8003abc:	3c10      	subs	r4, #16
 8003abe:	2c10      	cmp	r4, #16
 8003ac0:	f10b 0b08 	add.w	fp, fp, #8
 8003ac4:	dd16      	ble.n	8003af4 <_svfprintf_r+0xb2c>
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	3510      	adds	r5, #16
 8003aca:	2b07      	cmp	r3, #7
 8003acc:	e9cb 7600 	strd	r7, r6, [fp]
 8003ad0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8003ad4:	ddf2      	ble.n	8003abc <_svfprintf_r+0xaf4>
 8003ad6:	aa26      	add	r2, sp, #152	; 0x98
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4640      	mov	r0, r8
 8003adc:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003ae0:	f00f f9e0 	bl	8012ea4 <__ssprint_r>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f47f abf0 	bne.w	80032ca <_svfprintf_r+0x302>
 8003aea:	3c10      	subs	r4, #16
 8003aec:	2c10      	cmp	r4, #16
 8003aee:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8003af2:	dce8      	bgt.n	8003ac6 <_svfprintf_r+0xafe>
 8003af4:	46b8      	mov	r8, r7
 8003af6:	3301      	adds	r3, #1
 8003af8:	4425      	add	r5, r4
 8003afa:	2b07      	cmp	r3, #7
 8003afc:	e9cb 8400 	strd	r8, r4, [fp]
 8003b00:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8003b04:	f77f ac60 	ble.w	80033c8 <_svfprintf_r+0x400>
 8003b08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003b0c:	aa26      	add	r2, sp, #152	; 0x98
 8003b0e:	f00f f9c9 	bl	8012ea4 <__ssprint_r>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	f47f abd9 	bne.w	80032ca <_svfprintf_r+0x302>
 8003b18:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003b1a:	e455      	b.n	80033c8 <_svfprintf_r+0x400>
 8003b1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	f77f aebc 	ble.w	800389c <_svfprintf_r+0x8d4>
 8003b24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b28:	9a04      	ldr	r2, [sp, #16]
 8003b2a:	429e      	cmp	r6, r3
 8003b2c:	bfa8      	it	ge
 8003b2e:	461e      	movge	r6, r3
 8003b30:	2e00      	cmp	r6, #0
 8003b32:	4413      	add	r3, r2
 8003b34:	9319      	str	r3, [sp, #100]	; 0x64
 8003b36:	dd0b      	ble.n	8003b50 <_svfprintf_r+0xb88>
 8003b38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	4437      	add	r7, r6
 8003b3e:	2b07      	cmp	r3, #7
 8003b40:	e9cb 2600 	strd	r2, r6, [fp]
 8003b44:	9728      	str	r7, [sp, #160]	; 0xa0
 8003b46:	9327      	str	r3, [sp, #156]	; 0x9c
 8003b48:	f300 859f 	bgt.w	800468a <_svfprintf_r+0x16c2>
 8003b4c:	f10b 0b08 	add.w	fp, fp, #8
 8003b50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b52:	2e00      	cmp	r6, #0
 8003b54:	bfa8      	it	ge
 8003b56:	1bad      	subge	r5, r5, r6
 8003b58:	2d00      	cmp	r5, #0
 8003b5a:	f300 81ef 	bgt.w	8003f3c <_svfprintf_r+0xf74>
 8003b5e:	9b04      	ldr	r3, [sp, #16]
 8003b60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b62:	4413      	add	r3, r2
 8003b64:	4699      	mov	r9, r3
 8003b66:	9b03      	ldr	r3, [sp, #12]
 8003b68:	055e      	lsls	r6, r3, #21
 8003b6a:	f100 820c 	bmi.w	8003f86 <_svfprintf_r+0xfbe>
 8003b6e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8003b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b72:	429c      	cmp	r4, r3
 8003b74:	db03      	blt.n	8003b7e <_svfprintf_r+0xbb6>
 8003b76:	9a03      	ldr	r2, [sp, #12]
 8003b78:	07d5      	lsls	r5, r2, #31
 8003b7a:	f140 848e 	bpl.w	800449a <_svfprintf_r+0x14d2>
 8003b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b82:	19dd      	adds	r5, r3, r7
 8003b84:	e9cb 2300 	strd	r2, r3, [fp]
 8003b88:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003b8a:	9528      	str	r5, [sp, #160]	; 0xa0
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	2b07      	cmp	r3, #7
 8003b90:	9327      	str	r3, [sp, #156]	; 0x9c
 8003b92:	f300 85de 	bgt.w	8004752 <_svfprintf_r+0x178a>
 8003b96:	f10b 0b08 	add.w	fp, fp, #8
 8003b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b9c:	1b1c      	subs	r4, r3, r4
 8003b9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ba0:	eba3 0609 	sub.w	r6, r3, r9
 8003ba4:	42a6      	cmp	r6, r4
 8003ba6:	bfa8      	it	ge
 8003ba8:	4626      	movge	r6, r4
 8003baa:	2e00      	cmp	r6, #0
 8003bac:	dd0d      	ble.n	8003bca <_svfprintf_r+0xc02>
 8003bae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003bb0:	f8cb 9000 	str.w	r9, [fp]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4435      	add	r5, r6
 8003bb8:	2b07      	cmp	r3, #7
 8003bba:	f8cb 6004 	str.w	r6, [fp, #4]
 8003bbe:	9528      	str	r5, [sp, #160]	; 0xa0
 8003bc0:	9327      	str	r3, [sp, #156]	; 0x9c
 8003bc2:	f300 85e0 	bgt.w	8004786 <_svfprintf_r+0x17be>
 8003bc6:	f10b 0b08 	add.w	fp, fp, #8
 8003bca:	2e00      	cmp	r6, #0
 8003bcc:	bfa8      	it	ge
 8003bce:	1ba4      	subge	r4, r4, r6
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	f77f abf0 	ble.w	80033b6 <_svfprintf_r+0x3ee>
 8003bd6:	2c10      	cmp	r4, #16
 8003bd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003bda:	4fa6      	ldr	r7, [pc, #664]	; (8003e74 <_svfprintf_r+0xeac>)
 8003bdc:	f340 82fe 	ble.w	80041dc <_svfprintf_r+0x1214>
 8003be0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8003be4:	2610      	movs	r6, #16
 8003be6:	e005      	b.n	8003bf4 <_svfprintf_r+0xc2c>
 8003be8:	f10b 0b08 	add.w	fp, fp, #8
 8003bec:	3c10      	subs	r4, #16
 8003bee:	2c10      	cmp	r4, #16
 8003bf0:	f340 82f4 	ble.w	80041dc <_svfprintf_r+0x1214>
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	3510      	adds	r5, #16
 8003bf8:	2b07      	cmp	r3, #7
 8003bfa:	e9cb 7600 	strd	r7, r6, [fp]
 8003bfe:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8003c02:	ddf1      	ble.n	8003be8 <_svfprintf_r+0xc20>
 8003c04:	aa26      	add	r2, sp, #152	; 0x98
 8003c06:	4649      	mov	r1, r9
 8003c08:	4640      	mov	r0, r8
 8003c0a:	f00f f94b 	bl	8012ea4 <__ssprint_r>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	f47f ab5b 	bne.w	80032ca <_svfprintf_r+0x302>
 8003c14:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8003c18:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003c1c:	e7e6      	b.n	8003bec <_svfprintf_r+0xc24>
 8003c1e:	9b03      	ldr	r3, [sp, #12]
 8003c20:	07dc      	lsls	r4, r3, #31
 8003c22:	f53f ae82 	bmi.w	800392a <_svfprintf_r+0x962>
 8003c26:	9b04      	ldr	r3, [sp, #16]
 8003c28:	f8cb 3000 	str.w	r3, [fp]
 8003c2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003c2e:	f103 0801 	add.w	r8, r3, #1
 8003c32:	1c7d      	adds	r5, r7, #1
 8003c34:	2301      	movs	r3, #1
 8003c36:	f1b8 0f07 	cmp.w	r8, #7
 8003c3a:	9528      	str	r5, [sp, #160]	; 0xa0
 8003c3c:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
 8003c40:	f8cb 3004 	str.w	r3, [fp, #4]
 8003c44:	f77f aea8 	ble.w	8003998 <_svfprintf_r+0x9d0>
 8003c48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c4c:	aa26      	add	r2, sp, #152	; 0x98
 8003c4e:	f00f f929 	bl	8012ea4 <__ssprint_r>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	f47f ab39 	bne.w	80032ca <_svfprintf_r+0x302>
 8003c58:	e9dd 8527 	ldrd	r8, r5, [sp, #156]	; 0x9c
 8003c5c:	ae29      	add	r6, sp, #164	; 0xa4
 8003c5e:	e69b      	b.n	8003998 <_svfprintf_r+0x9d0>
 8003c60:	2930      	cmp	r1, #48	; 0x30
 8003c62:	f000 82c8 	beq.w	80041f6 <_svfprintf_r+0x122e>
 8003c66:	9a04      	ldr	r2, [sp, #16]
 8003c68:	9603      	str	r6, [sp, #12]
 8003c6a:	2330      	movs	r3, #48	; 0x30
 8003c6c:	3802      	subs	r0, #2
 8003c6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003c72:	ab52      	add	r3, sp, #328	; 0x148
 8003c74:	1a1e      	subs	r6, r3, r0
 8003c76:	9004      	str	r0, [sp, #16]
 8003c78:	f7ff bae9 	b.w	800324e <_svfprintf_r+0x286>
 8003c7c:	f1b9 0f00 	cmp.w	r9, #0
 8003c80:	f47f aaa7 	bne.w	80031d2 <_svfprintf_r+0x20a>
 8003c84:	9603      	str	r6, [sp, #12]
 8003c86:	ab52      	add	r3, sp, #328	; 0x148
 8003c88:	464e      	mov	r6, r9
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	f7ff badf 	b.w	800324e <_svfprintf_r+0x286>
 8003c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	f77f ae80 	ble.w	8003998 <_svfprintf_r+0x9d0>
 8003c98:	2b11      	cmp	r3, #17
 8003c9a:	4f76      	ldr	r7, [pc, #472]	; (8003e74 <_svfprintf_r+0xeac>)
 8003c9c:	f340 82e4 	ble.w	8004268 <_svfprintf_r+0x12a0>
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	2410      	movs	r4, #16
 8003ca4:	e9dd 8b08 	ldrd	r8, fp, [sp, #32]
 8003ca8:	e006      	b.n	8003cb8 <_svfprintf_r+0xcf0>
 8003caa:	3608      	adds	r6, #8
 8003cac:	f1a9 0910 	sub.w	r9, r9, #16
 8003cb0:	f1b9 0f10 	cmp.w	r9, #16
 8003cb4:	f340 82d7 	ble.w	8004266 <_svfprintf_r+0x129e>
 8003cb8:	3301      	adds	r3, #1
 8003cba:	3510      	adds	r5, #16
 8003cbc:	2b07      	cmp	r3, #7
 8003cbe:	e9c6 7400 	strd	r7, r4, [r6]
 8003cc2:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8003cc6:	ddf0      	ble.n	8003caa <_svfprintf_r+0xce2>
 8003cc8:	aa26      	add	r2, sp, #152	; 0x98
 8003cca:	4659      	mov	r1, fp
 8003ccc:	4640      	mov	r0, r8
 8003cce:	f00f f8e9 	bl	8012ea4 <__ssprint_r>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	f47f aaf9 	bne.w	80032ca <_svfprintf_r+0x302>
 8003cd8:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8003cdc:	ae29      	add	r6, sp, #164	; 0xa4
 8003cde:	e7e5      	b.n	8003cac <_svfprintf_r+0xce4>
 8003ce0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ce4:	aa26      	add	r2, sp, #152	; 0x98
 8003ce6:	f00f f8dd 	bl	8012ea4 <__ssprint_r>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	f47f aaed 	bne.w	80032ca <_svfprintf_r+0x302>
 8003cf0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8003cf2:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003cf6:	f7ff bb4b 	b.w	8003390 <_svfprintf_r+0x3c8>
 8003cfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cfc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003d00:	910b      	str	r1, [sp, #44]	; 0x2c
 8003d02:	f016 0110 	ands.w	r1, r6, #16
 8003d06:	d10c      	bne.n	8003d22 <_svfprintf_r+0xd5a>
 8003d08:	f016 0040 	ands.w	r0, r6, #64	; 0x40
 8003d0c:	d004      	beq.n	8003d18 <_svfprintf_r+0xd50>
 8003d0e:	460a      	mov	r2, r1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2101      	movs	r1, #1
 8003d14:	f7ff ba7c 	b.w	8003210 <_svfprintf_r+0x248>
 8003d18:	f416 7200 	ands.w	r2, r6, #512	; 0x200
 8003d1c:	bf1c      	itt	ne
 8003d1e:	b2db      	uxtbne	r3, r3
 8003d20:	4602      	movne	r2, r0
 8003d22:	2101      	movs	r1, #1
 8003d24:	f7ff ba74 	b.w	8003210 <_svfprintf_r+0x248>
 8003d28:	425b      	negs	r3, r3
 8003d2a:	9e03      	ldr	r6, [sp, #12]
 8003d2c:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8003d30:	202d      	movs	r0, #45	; 0x2d
 8003d32:	2101      	movs	r1, #1
 8003d34:	f7ff ba6d 	b.w	8003212 <_svfprintf_r+0x24a>
 8003d38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003d3c:	aa26      	add	r2, sp, #152	; 0x98
 8003d3e:	f00f f8b1 	bl	8012ea4 <__ssprint_r>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	f47f aac1 	bne.w	80032ca <_svfprintf_r+0x302>
 8003d48:	e9dd 3727 	ldrd	r3, r7, [sp, #156]	; 0x9c
 8003d4c:	ae29      	add	r6, sp, #164	; 0xa4
 8003d4e:	e5fa      	b.n	8003946 <_svfprintf_r+0x97e>
 8003d50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003d54:	aa26      	add	r2, sp, #152	; 0x98
 8003d56:	f00f f8a5 	bl	8012ea4 <__ssprint_r>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	f47f aab5 	bne.w	80032ca <_svfprintf_r+0x302>
 8003d60:	e9dd 8527 	ldrd	r8, r5, [sp, #156]	; 0x9c
 8003d64:	ae29      	add	r6, sp, #164	; 0xa4
 8003d66:	e5fc      	b.n	8003962 <_svfprintf_r+0x99a>
 8003d68:	f89a 5000 	ldrb.w	r5, [sl]
 8003d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d6e:	f7ff b97b 	b.w	8003068 <_svfprintf_r+0xa0>
 8003d72:	9a03      	ldr	r2, [sp, #12]
 8003d74:	0592      	lsls	r2, r2, #22
 8003d76:	f100 83a0 	bmi.w	80044ba <_svfprintf_r+0x14f2>
 8003d7a:	17da      	asrs	r2, r3, #31
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	f7ff ba15 	b.w	80031ac <_svfprintf_r+0x1e4>
 8003d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	f7fd fa1b 	bl	80011c4 <__aeabi_dcmpun>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	f040 85cc 	bne.w	800492c <_svfprintf_r+0x1964>
 8003d94:	2d61      	cmp	r5, #97	; 0x61
 8003d96:	f000 8495 	beq.w	80046c4 <_svfprintf_r+0x16fc>
 8003d9a:	2d41      	cmp	r5, #65	; 0x41
 8003d9c:	f000 8503 	beq.w	80047a6 <_svfprintf_r+0x17de>
 8003da0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8003da4:	f000 83aa 	beq.w	80044fc <_svfprintf_r+0x1534>
 8003da8:	f025 0320 	bic.w	r3, r5, #32
 8003dac:	2b47      	cmp	r3, #71	; 0x47
 8003dae:	d104      	bne.n	8003dba <_svfprintf_r+0xdf2>
 8003db0:	f1b9 0f00 	cmp.w	r9, #0
 8003db4:	bf08      	it	eq
 8003db6:	f04f 0901 	moveq.w	r9, #1
 8003dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dbe:	9c03      	ldr	r4, [sp, #12]
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 8003dc6:	9205      	str	r2, [sp, #20]
 8003dc8:	f2c0 84b5 	blt.w	8004736 <_svfprintf_r+0x176e>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	ec41 0b18 	vmov	d8, r0, r1
 8003dd2:	9319      	str	r3, [sp, #100]	; 0x64
 8003dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8003dd6:	f1a5 0341 	sub.w	r3, r5, #65	; 0x41
 8003dda:	2b25      	cmp	r3, #37	; 0x25
 8003ddc:	f200 82c4 	bhi.w	8004368 <_svfprintf_r+0x13a0>
 8003de0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003de4:	02c20396 	.word	0x02c20396
 8003de8:	02c202c2 	.word	0x02c202c2
 8003dec:	0393038f 	.word	0x0393038f
 8003df0:	02c202c2 	.word	0x02c202c2
 8003df4:	02c202c2 	.word	0x02c202c2
 8003df8:	02c202c2 	.word	0x02c202c2
 8003dfc:	02c202c2 	.word	0x02c202c2
 8003e00:	02c202c2 	.word	0x02c202c2
 8003e04:	02c202c2 	.word	0x02c202c2
 8003e08:	02c202c2 	.word	0x02c202c2
 8003e0c:	02c202c2 	.word	0x02c202c2
 8003e10:	02c202c2 	.word	0x02c202c2
 8003e14:	02c202c2 	.word	0x02c202c2
 8003e18:	02c202c2 	.word	0x02c202c2
 8003e1c:	02c202c2 	.word	0x02c202c2
 8003e20:	02c202c2 	.word	0x02c202c2
 8003e24:	02c202c2 	.word	0x02c202c2
 8003e28:	02c202c2 	.word	0x02c202c2
 8003e2c:	0393038f 	.word	0x0393038f
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	06dd      	lsls	r5, r3, #27
 8003e34:	f100 8201 	bmi.w	800423a <_svfprintf_r+0x1272>
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	065c      	lsls	r4, r3, #25
 8003e3c:	f100 8337 	bmi.w	80044ae <_svfprintf_r+0x14e6>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	0598      	lsls	r0, r3, #22
 8003e44:	f140 81f9 	bpl.w	800423a <_svfprintf_r+0x1272>
 8003e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e4a:	9a07      	ldr	r2, [sp, #28]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	f7ff bbf7 	b.w	8003642 <_svfprintf_r+0x67a>
 8003e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e56:	f89a 5000 	ldrb.w	r5, [sl]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f43f a904 	beq.w	8003068 <_svfprintf_r+0xa0>
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f43f a900 	beq.w	8003068 <_svfprintf_r+0xa0>
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	f7ff b8fa 	b.w	8003068 <_svfprintf_r+0xa0>
 8003e74:	0801b430 	.word	0x0801b430
 8003e78:	0801b440 	.word	0x0801b440
 8003e7c:	4bbd      	ldr	r3, [pc, #756]	; (8004174 <_svfprintf_r+0x11ac>)
 8003e7e:	9314      	str	r3, [sp, #80]	; 0x50
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	f013 0220 	ands.w	r2, r3, #32
 8003e86:	f000 8102 	beq.w	800408e <_svfprintf_r+0x10c6>
 8003e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e8c:	3307      	adds	r3, #7
 8003e8e:	f023 0307 	bic.w	r3, r3, #7
 8003e92:	4619      	mov	r1, r3
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	f851 3b08 	ldr.w	r3, [r1], #8
 8003e9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003e9c:	9803      	ldr	r0, [sp, #12]
 8003e9e:	07c1      	lsls	r1, r0, #31
 8003ea0:	d50a      	bpl.n	8003eb8 <_svfprintf_r+0xef0>
 8003ea2:	ea53 0102 	orrs.w	r1, r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <_svfprintf_r+0xef0>
 8003ea8:	f040 0102 	orr.w	r1, r0, #2
 8003eac:	9103      	str	r1, [sp, #12]
 8003eae:	2130      	movs	r1, #48	; 0x30
 8003eb0:	f88d 507d 	strb.w	r5, [sp, #125]	; 0x7d
 8003eb4:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
 8003eb8:	9903      	ldr	r1, [sp, #12]
 8003eba:	f421 6680 	bic.w	r6, r1, #1024	; 0x400
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	f7ff b9a6 	b.w	8003210 <_svfprintf_r+0x248>
 8003ec4:	9e03      	ldr	r6, [sp, #12]
 8003ec6:	f7ff bb8b 	b.w	80035e0 <_svfprintf_r+0x618>
 8003eca:	4bab      	ldr	r3, [pc, #684]	; (8004178 <_svfprintf_r+0x11b0>)
 8003ecc:	9314      	str	r3, [sp, #80]	; 0x50
 8003ece:	e7d7      	b.n	8003e80 <_svfprintf_r+0xeb8>
 8003ed0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ed4:	aa26      	add	r2, sp, #152	; 0x98
 8003ed6:	f00e ffe5 	bl	8012ea4 <__ssprint_r>
 8003eda:	2800      	cmp	r0, #0
 8003edc:	f47f a9f5 	bne.w	80032ca <_svfprintf_r+0x302>
 8003ee0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003ee2:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003ee6:	f7ff bbf7 	b.w	80036d8 <_svfprintf_r+0x710>
 8003eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eee:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8003ef2:	9303      	str	r3, [sp, #12]
 8003ef4:	f10a 0a01 	add.w	sl, sl, #1
 8003ef8:	f7ff b8b6 	b.w	8003068 <_svfprintf_r+0xa0>
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	f10a 0a01 	add.w	sl, sl, #1
 8003f0a:	f7ff b8ad 	b.w	8003068 <_svfprintf_r+0xa0>
 8003f0e:	9808      	ldr	r0, [sp, #32]
 8003f10:	2140      	movs	r1, #64	; 0x40
 8003f12:	f00c fe55 	bl	8010bc0 <_malloc_r>
 8003f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f18:	6018      	str	r0, [r3, #0]
 8003f1a:	6118      	str	r0, [r3, #16]
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	f000 84c1 	beq.w	80048a4 <_svfprintf_r+0x18dc>
 8003f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f24:	2340      	movs	r3, #64	; 0x40
 8003f26:	6153      	str	r3, [r2, #20]
 8003f28:	f7ff b867 	b.w	8002ffa <_svfprintf_r+0x32>
 8003f2c:	9804      	ldr	r0, [sp, #16]
 8003f2e:	970b      	str	r7, [sp, #44]	; 0x2c
 8003f30:	f7fc f946 	bl	80001c0 <strlen>
 8003f34:	46b1      	mov	r9, r6
 8003f36:	4606      	mov	r6, r0
 8003f38:	f7ff baf9 	b.w	800352e <_svfprintf_r+0x566>
 8003f3c:	2d10      	cmp	r5, #16
 8003f3e:	463a      	mov	r2, r7
 8003f40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003f42:	4f8e      	ldr	r7, [pc, #568]	; (800417c <_svfprintf_r+0x11b4>)
 8003f44:	f340 81e1 	ble.w	800430a <_svfprintf_r+0x1342>
 8003f48:	e9dd 4808 	ldrd	r4, r8, [sp, #32]
 8003f4c:	2610      	movs	r6, #16
 8003f4e:	e005      	b.n	8003f5c <_svfprintf_r+0xf94>
 8003f50:	f10b 0b08 	add.w	fp, fp, #8
 8003f54:	3d10      	subs	r5, #16
 8003f56:	2d10      	cmp	r5, #16
 8003f58:	f340 81d7 	ble.w	800430a <_svfprintf_r+0x1342>
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	3210      	adds	r2, #16
 8003f60:	2b07      	cmp	r3, #7
 8003f62:	e9cb 7600 	strd	r7, r6, [fp]
 8003f66:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003f6a:	ddf1      	ble.n	8003f50 <_svfprintf_r+0xf88>
 8003f6c:	aa26      	add	r2, sp, #152	; 0x98
 8003f6e:	4641      	mov	r1, r8
 8003f70:	4620      	mov	r0, r4
 8003f72:	f00e ff97 	bl	8012ea4 <__ssprint_r>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	f47f a9a7 	bne.w	80032ca <_svfprintf_r+0x302>
 8003f7c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003f80:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8003f84:	e7e6      	b.n	8003f54 <_svfprintf_r+0xf8c>
 8003f86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f88:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 8003f8c:	465a      	mov	r2, fp
 8003f8e:	4638      	mov	r0, r7
 8003f90:	4e7a      	ldr	r6, [pc, #488]	; (800417c <_svfprintf_r+0x11b4>)
 8003f92:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8003f96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003f98:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003f9c:	464f      	mov	r7, r9
 8003f9e:	f04f 0810 	mov.w	r8, #16
 8003fa2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8003fa6:	b381      	cbz	r1, 800400a <_svfprintf_r+0x1042>
 8003fa8:	f1b9 0f00 	cmp.w	r9, #0
 8003fac:	f000 80fd 	beq.w	80041aa <_svfprintf_r+0x11e2>
 8003fb0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003fb4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003fb6:	e9c2 1300 	strd	r1, r3, [r2]
 8003fba:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8003fbc:	3101      	adds	r1, #1
 8003fbe:	4418      	add	r0, r3
 8003fc0:	2907      	cmp	r1, #7
 8003fc2:	9028      	str	r0, [sp, #160]	; 0xa0
 8003fc4:	9127      	str	r1, [sp, #156]	; 0x9c
 8003fc6:	dc73      	bgt.n	80040b0 <_svfprintf_r+0x10e8>
 8003fc8:	3208      	adds	r2, #8
 8003fca:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8003fcc:	f89a 1000 	ldrb.w	r1, [sl]
 8003fd0:	1be5      	subs	r5, r4, r7
 8003fd2:	428d      	cmp	r5, r1
 8003fd4:	bfa8      	it	ge
 8003fd6:	460d      	movge	r5, r1
 8003fd8:	2d00      	cmp	r5, #0
 8003fda:	dd0c      	ble.n	8003ff6 <_svfprintf_r+0x102e>
 8003fdc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8003fde:	3101      	adds	r1, #1
 8003fe0:	4428      	add	r0, r5
 8003fe2:	2907      	cmp	r1, #7
 8003fe4:	e9c2 7500 	strd	r7, r5, [r2]
 8003fe8:	9028      	str	r0, [sp, #160]	; 0xa0
 8003fea:	9127      	str	r1, [sp, #156]	; 0x9c
 8003fec:	f300 8109 	bgt.w	8004202 <_svfprintf_r+0x123a>
 8003ff0:	f89a 1000 	ldrb.w	r1, [sl]
 8003ff4:	3208      	adds	r2, #8
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	bfac      	ite	ge
 8003ffa:	1b4c      	subge	r4, r1, r5
 8003ffc:	460c      	movlt	r4, r1
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	dc12      	bgt.n	8004028 <_svfprintf_r+0x1060>
 8004002:	440f      	add	r7, r1
 8004004:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004006:	2900      	cmp	r1, #0
 8004008:	d1ce      	bne.n	8003fa8 <_svfprintf_r+0xfe0>
 800400a:	f1b9 0f00 	cmp.w	r9, #0
 800400e:	d1cf      	bne.n	8003fb0 <_svfprintf_r+0xfe8>
 8004010:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004012:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8004016:	46b9      	mov	r9, r7
 8004018:	4599      	cmp	r9, r3
 800401a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800401e:	4693      	mov	fp, r2
 8004020:	4607      	mov	r7, r0
 8004022:	bf28      	it	cs
 8004024:	4699      	movcs	r9, r3
 8004026:	e5a2      	b.n	8003b6e <_svfprintf_r+0xba6>
 8004028:	2c10      	cmp	r4, #16
 800402a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800402c:	f340 8490 	ble.w	8004950 <_svfprintf_r+0x1988>
 8004030:	9d08      	ldr	r5, [sp, #32]
 8004032:	9304      	str	r3, [sp, #16]
 8004034:	960c      	str	r6, [sp, #48]	; 0x30
 8004036:	e004      	b.n	8004042 <_svfprintf_r+0x107a>
 8004038:	3c10      	subs	r4, #16
 800403a:	2c10      	cmp	r4, #16
 800403c:	f102 0208 	add.w	r2, r2, #8
 8004040:	dd15      	ble.n	800406e <_svfprintf_r+0x10a6>
 8004042:	3101      	adds	r1, #1
 8004044:	3010      	adds	r0, #16
 8004046:	2907      	cmp	r1, #7
 8004048:	e9c2 6800 	strd	r6, r8, [r2]
 800404c:	e9cd 1027 	strd	r1, r0, [sp, #156]	; 0x9c
 8004050:	ddf2      	ble.n	8004038 <_svfprintf_r+0x1070>
 8004052:	aa26      	add	r2, sp, #152	; 0x98
 8004054:	4659      	mov	r1, fp
 8004056:	4628      	mov	r0, r5
 8004058:	f00e ff24 	bl	8012ea4 <__ssprint_r>
 800405c:	2800      	cmp	r0, #0
 800405e:	f47f a934 	bne.w	80032ca <_svfprintf_r+0x302>
 8004062:	3c10      	subs	r4, #16
 8004064:	2c10      	cmp	r4, #16
 8004066:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	; 0x9c
 800406a:	aa29      	add	r2, sp, #164	; 0xa4
 800406c:	dce9      	bgt.n	8004042 <_svfprintf_r+0x107a>
 800406e:	9b04      	ldr	r3, [sp, #16]
 8004070:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004072:	6015      	str	r5, [r2, #0]
 8004074:	3101      	adds	r1, #1
 8004076:	4420      	add	r0, r4
 8004078:	2907      	cmp	r1, #7
 800407a:	e9cd 1027 	strd	r1, r0, [sp, #156]	; 0x9c
 800407e:	6054      	str	r4, [r2, #4]
 8004080:	f300 8310 	bgt.w	80046a4 <_svfprintf_r+0x16dc>
 8004084:	f89a 1000 	ldrb.w	r1, [sl]
 8004088:	3208      	adds	r2, #8
 800408a:	440f      	add	r7, r1
 800408c:	e7ba      	b.n	8004004 <_svfprintf_r+0x103c>
 800408e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004090:	f851 3b04 	ldr.w	r3, [r1], #4
 8004094:	910b      	str	r1, [sp, #44]	; 0x2c
 8004096:	9903      	ldr	r1, [sp, #12]
 8004098:	f011 0110 	ands.w	r1, r1, #16
 800409c:	f47f aefe 	bne.w	8003e9c <_svfprintf_r+0xed4>
 80040a0:	9a03      	ldr	r2, [sp, #12]
 80040a2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
 80040a6:	f000 8129 	beq.w	80042fc <_svfprintf_r+0x1334>
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	460a      	mov	r2, r1
 80040ae:	e6f5      	b.n	8003e9c <_svfprintf_r+0xed4>
 80040b0:	9808      	ldr	r0, [sp, #32]
 80040b2:	9304      	str	r3, [sp, #16]
 80040b4:	aa26      	add	r2, sp, #152	; 0x98
 80040b6:	4659      	mov	r1, fp
 80040b8:	f00e fef4 	bl	8012ea4 <__ssprint_r>
 80040bc:	2800      	cmp	r0, #0
 80040be:	f47f a904 	bne.w	80032ca <_svfprintf_r+0x302>
 80040c2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80040c4:	9b04      	ldr	r3, [sp, #16]
 80040c6:	aa29      	add	r2, sp, #164	; 0xa4
 80040c8:	e77f      	b.n	8003fca <_svfprintf_r+0x1002>
 80040ca:	2100      	movs	r1, #0
 80040cc:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80040d0:	f406 6780 	and.w	r7, r6, #1024	; 0x400
 80040d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004180 <_svfprintf_r+0x11b8>
 80040d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80040da:	f8cd a00c 	str.w	sl, [sp, #12]
 80040de:	ac52      	add	r4, sp, #328	; 0x148
 80040e0:	468c      	mov	ip, r1
 80040e2:	e005      	b.n	80040f0 <_svfprintf_r+0x1128>
 80040e4:	2b0a      	cmp	r3, #10
 80040e6:	f172 0200 	sbcs.w	r2, r2, #0
 80040ea:	d335      	bcc.n	8004158 <_svfprintf_r+0x1190>
 80040ec:	4653      	mov	r3, sl
 80040ee:	462a      	mov	r2, r5
 80040f0:	1899      	adds	r1, r3, r2
 80040f2:	f141 0100 	adc.w	r1, r1, #0
 80040f6:	fba8 0501 	umull	r0, r5, r8, r1
 80040fa:	f025 0003 	bic.w	r0, r5, #3
 80040fe:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8004102:	1a09      	subs	r1, r1, r0
 8004104:	1a58      	subs	r0, r3, r1
 8004106:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
 800410a:	f162 0e00 	sbc.w	lr, r2, #0
 800410e:	fb05 f500 	mul.w	r5, r5, r0
 8004112:	fb08 550e 	mla	r5, r8, lr, r5
 8004116:	fba0 a008 	umull	sl, r0, r0, r8
 800411a:	4405      	add	r5, r0
 800411c:	f00a 0e01 	and.w	lr, sl, #1
 8004120:	2005      	movs	r0, #5
 8004122:	fbae 0e00 	umull	r0, lr, lr, r0
 8004126:	1840      	adds	r0, r0, r1
 8004128:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800412c:	3030      	adds	r0, #48	; 0x30
 800412e:	f804 0c01 	strb.w	r0, [r4, #-1]
 8004132:	ea4a 7ac5 	orr.w	sl, sl, r5, lsl #31
 8004136:	f10c 0c01 	add.w	ip, ip, #1
 800413a:	3c01      	subs	r4, #1
 800413c:	086d      	lsrs	r5, r5, #1
 800413e:	2f00      	cmp	r7, #0
 8004140:	d0d0      	beq.n	80040e4 <_svfprintf_r+0x111c>
 8004142:	7831      	ldrb	r1, [r6, #0]
 8004144:	458c      	cmp	ip, r1
 8004146:	d1cd      	bne.n	80040e4 <_svfprintf_r+0x111c>
 8004148:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800414c:	d0ca      	beq.n	80040e4 <_svfprintf_r+0x111c>
 800414e:	2b0a      	cmp	r3, #10
 8004150:	f172 0200 	sbcs.w	r2, r2, #0
 8004154:	f080 80ed 	bcs.w	8004332 <_svfprintf_r+0x136a>
 8004158:	9615      	str	r6, [sp, #84]	; 0x54
 800415a:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 800415e:	ab52      	add	r3, sp, #328	; 0x148
 8004160:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8004164:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8004168:	e9cd 6403 	strd	r6, r4, [sp, #12]
 800416c:	1b1e      	subs	r6, r3, r4
 800416e:	f7ff b86e 	b.w	800324e <_svfprintf_r+0x286>
 8004172:	bf00      	nop
 8004174:	0801b410 	.word	0x0801b410
 8004178:	0801b3fc 	.word	0x0801b3fc
 800417c:	0801b430 	.word	0x0801b430
 8004180:	cccccccd 	.word	0xcccccccd
 8004184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004188:	aa26      	add	r2, sp, #152	; 0x98
 800418a:	9319      	str	r3, [sp, #100]	; 0x64
 800418c:	f00e fe8a 	bl	8012ea4 <__ssprint_r>
 8004190:	2800      	cmp	r0, #0
 8004192:	f47f a89a 	bne.w	80032ca <_svfprintf_r+0x302>
 8004196:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800419a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800419c:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80041a0:	f7ff b8c7 	b.w	8003332 <_svfprintf_r+0x36a>
 80041a4:	9e03      	ldr	r6, [sp, #12]
 80041a6:	f7ff b80f 	b.w	80031c8 <_svfprintf_r+0x200>
 80041aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041ac:	3901      	subs	r1, #1
 80041ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80041b2:	910d      	str	r1, [sp, #52]	; 0x34
 80041b4:	e6fe      	b.n	8003fb4 <_svfprintf_r+0xfec>
 80041b6:	2901      	cmp	r1, #1
 80041b8:	9e03      	ldr	r6, [sp, #12]
 80041ba:	f47f aac6 	bne.w	800374a <_svfprintf_r+0x782>
 80041be:	f7ff b808 	b.w	80031d2 <_svfprintf_r+0x20a>
 80041c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041c6:	aa26      	add	r2, sp, #152	; 0x98
 80041c8:	f00e fe6c 	bl	8012ea4 <__ssprint_r>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	f47f a87c 	bne.w	80032ca <_svfprintf_r+0x302>
 80041d2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80041d4:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80041d8:	f7ff ba67 	b.w	80036aa <_svfprintf_r+0x6e2>
 80041dc:	3301      	adds	r3, #1
 80041de:	4425      	add	r5, r4
 80041e0:	2b07      	cmp	r3, #7
 80041e2:	f8cb 7000 	str.w	r7, [fp]
 80041e6:	f8cb 4004 	str.w	r4, [fp, #4]
 80041ea:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80041ee:	f77f a8e0 	ble.w	80033b2 <_svfprintf_r+0x3ea>
 80041f2:	f7ff bb88 	b.w	8003906 <_svfprintf_r+0x93e>
 80041f6:	9a04      	ldr	r2, [sp, #16]
 80041f8:	9603      	str	r6, [sp, #12]
 80041fa:	ab52      	add	r3, sp, #328	; 0x148
 80041fc:	1a9e      	subs	r6, r3, r2
 80041fe:	f7ff b826 	b.w	800324e <_svfprintf_r+0x286>
 8004202:	9808      	ldr	r0, [sp, #32]
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	aa26      	add	r2, sp, #152	; 0x98
 8004208:	4659      	mov	r1, fp
 800420a:	f00e fe4b 	bl	8012ea4 <__ssprint_r>
 800420e:	2800      	cmp	r0, #0
 8004210:	f47f a85b 	bne.w	80032ca <_svfprintf_r+0x302>
 8004214:	f89a 1000 	ldrb.w	r1, [sl]
 8004218:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800421a:	9b04      	ldr	r3, [sp, #16]
 800421c:	aa29      	add	r2, sp, #164	; 0xa4
 800421e:	e6ea      	b.n	8003ff6 <_svfprintf_r+0x102e>
 8004220:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004224:	aa26      	add	r2, sp, #152	; 0x98
 8004226:	f00e fe3d 	bl	8012ea4 <__ssprint_r>
 800422a:	2800      	cmp	r0, #0
 800422c:	f47f a84d 	bne.w	80032ca <_svfprintf_r+0x302>
 8004230:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8004232:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8004236:	f7ff b8a5 	b.w	8003384 <_svfprintf_r+0x3bc>
 800423a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800423c:	9a07      	ldr	r2, [sp, #28]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f7ff b9fe 	b.w	8003642 <_svfprintf_r+0x67a>
 8004246:	464e      	mov	r6, r9
 8004248:	2e06      	cmp	r6, #6
 800424a:	461a      	mov	r2, r3
 800424c:	bf28      	it	cs
 800424e:	2606      	movcs	r6, #6
 8004250:	4699      	mov	r9, r3
 8004252:	930a      	str	r3, [sp, #40]	; 0x28
 8004254:	4bc1      	ldr	r3, [pc, #772]	; (800455c <_svfprintf_r+0x1594>)
 8004256:	9605      	str	r6, [sp, #20]
 8004258:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 800425c:	970b      	str	r7, [sp, #44]	; 0x2c
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	920f      	str	r2, [sp, #60]	; 0x3c
 8004262:	f7ff b800 	b.w	8003266 <_svfprintf_r+0x29e>
 8004266:	4698      	mov	r8, r3
 8004268:	f108 0801 	add.w	r8, r8, #1
 800426c:	444d      	add	r5, r9
 800426e:	f1b8 0f07 	cmp.w	r8, #7
 8004272:	e9cd 8527 	strd	r8, r5, [sp, #156]	; 0x9c
 8004276:	6037      	str	r7, [r6, #0]
 8004278:	f8c6 9004 	str.w	r9, [r6, #4]
 800427c:	f77f ab8b 	ble.w	8003996 <_svfprintf_r+0x9ce>
 8004280:	e4e2      	b.n	8003c48 <_svfprintf_r+0xc80>
 8004282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004284:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004286:	1959      	adds	r1, r3, r5
 8004288:	e9cb 0300 	strd	r0, r3, [fp]
 800428c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800428e:	9128      	str	r1, [sp, #160]	; 0xa0
 8004290:	3301      	adds	r3, #1
 8004292:	2b07      	cmp	r3, #7
 8004294:	9327      	str	r3, [sp, #156]	; 0x9c
 8004296:	f300 8116 	bgt.w	80044c6 <_svfprintf_r+0x14fe>
 800429a:	f10b 0b08 	add.w	fp, fp, #8
 800429e:	2a00      	cmp	r2, #0
 80042a0:	f6bf ab24 	bge.w	80038ec <_svfprintf_r+0x924>
 80042a4:	4256      	negs	r6, r2
 80042a6:	3210      	adds	r2, #16
 80042a8:	4fad      	ldr	r7, [pc, #692]	; (8004560 <_svfprintf_r+0x1598>)
 80042aa:	f280 82d3 	bge.w	8004854 <_svfprintf_r+0x188c>
 80042ae:	e9dd 4808 	ldrd	r4, r8, [sp, #32]
 80042b2:	2510      	movs	r5, #16
 80042b4:	e005      	b.n	80042c2 <_svfprintf_r+0x12fa>
 80042b6:	f10b 0b08 	add.w	fp, fp, #8
 80042ba:	3e10      	subs	r6, #16
 80042bc:	2e10      	cmp	r6, #16
 80042be:	f340 82c9 	ble.w	8004854 <_svfprintf_r+0x188c>
 80042c2:	3301      	adds	r3, #1
 80042c4:	3110      	adds	r1, #16
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	e9cb 7500 	strd	r7, r5, [fp]
 80042cc:	e9cd 3127 	strd	r3, r1, [sp, #156]	; 0x9c
 80042d0:	ddf1      	ble.n	80042b6 <_svfprintf_r+0x12ee>
 80042d2:	aa26      	add	r2, sp, #152	; 0x98
 80042d4:	4641      	mov	r1, r8
 80042d6:	4620      	mov	r0, r4
 80042d8:	f00e fde4 	bl	8012ea4 <__ssprint_r>
 80042dc:	2800      	cmp	r0, #0
 80042de:	f47e aff4 	bne.w	80032ca <_svfprintf_r+0x302>
 80042e2:	e9dd 3127 	ldrd	r3, r1, [sp, #156]	; 0x9c
 80042e6:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80042ea:	e7e6      	b.n	80042ba <_svfprintf_r+0x12f2>
 80042ec:	9a03      	ldr	r2, [sp, #12]
 80042ee:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80042f2:	bf1c      	itt	ne
 80042f4:	b2db      	uxtbne	r3, r3
 80042f6:	4602      	movne	r2, r0
 80042f8:	f7fe bf86 	b.w	8003208 <_svfprintf_r+0x240>
 80042fc:	9a03      	ldr	r2, [sp, #12]
 80042fe:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8004302:	bf1c      	itt	ne
 8004304:	b2db      	uxtbne	r3, r3
 8004306:	4602      	movne	r2, r0
 8004308:	e5c8      	b.n	8003e9c <_svfprintf_r+0xed4>
 800430a:	3301      	adds	r3, #1
 800430c:	f8cb 7000 	str.w	r7, [fp]
 8004310:	2b07      	cmp	r3, #7
 8004312:	eb05 0702 	add.w	r7, r5, r2
 8004316:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800431a:	f8cb 5004 	str.w	r5, [fp, #4]
 800431e:	f300 80e0 	bgt.w	80044e2 <_svfprintf_r+0x151a>
 8004322:	f10b 0b08 	add.w	fp, fp, #8
 8004326:	e41a      	b.n	8003b5e <_svfprintf_r+0xb96>
 8004328:	222d      	movs	r2, #45	; 0x2d
 800432a:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800432e:	f7ff b8a2 	b.w	8003476 <_svfprintf_r+0x4ae>
 8004332:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004334:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004336:	1ae4      	subs	r4, r4, r3
 8004338:	461a      	mov	r2, r3
 800433a:	4620      	mov	r0, r4
 800433c:	f00d f984 	bl	8011648 <strncpy>
 8004340:	7873      	ldrb	r3, [r6, #1]
 8004342:	b103      	cbz	r3, 8004346 <_svfprintf_r+0x137e>
 8004344:	3601      	adds	r6, #1
 8004346:	f04f 0c00 	mov.w	ip, #0
 800434a:	e6cf      	b.n	80040ec <_svfprintf_r+0x1124>
 800434c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004350:	aa26      	add	r2, sp, #152	; 0x98
 8004352:	f00e fda7 	bl	8012ea4 <__ssprint_r>
 8004356:	2800      	cmp	r0, #0
 8004358:	f47e afb7 	bne.w	80032ca <_svfprintf_r+0x302>
 800435c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800435e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004360:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8004364:	f7ff baaa 	b.w	80038bc <_svfprintf_r+0x8f4>
 8004368:	464f      	mov	r7, r9
 800436a:	2102      	movs	r1, #2
 800436c:	ab24      	add	r3, sp, #144	; 0x90
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	ab21      	add	r3, sp, #132	; 0x84
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	9808      	ldr	r0, [sp, #32]
 8004376:	eeb0 0a48 	vmov.f32	s0, s16
 800437a:	eef0 0a68 	vmov.f32	s1, s17
 800437e:	ab20      	add	r3, sp, #128	; 0x80
 8004380:	463a      	mov	r2, r7
 8004382:	f002 f8ad 	bl	80064e0 <_dtoa_r>
 8004386:	2d67      	cmp	r5, #103	; 0x67
 8004388:	9004      	str	r0, [sp, #16]
 800438a:	f000 820e 	beq.w	80047aa <_svfprintf_r+0x17e2>
 800438e:	2d47      	cmp	r5, #71	; 0x47
 8004390:	f000 829d 	beq.w	80048ce <_svfprintf_r+0x1906>
 8004394:	9b04      	ldr	r3, [sp, #16]
 8004396:	f025 0820 	bic.w	r8, r5, #32
 800439a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800439e:	eb03 0607 	add.w	r6, r3, r7
 80043a2:	d105      	bne.n	80043b0 <_svfprintf_r+0x13e8>
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b30      	cmp	r3, #48	; 0x30
 80043a8:	f000 82e4 	beq.w	8004974 <_svfprintf_r+0x19ac>
 80043ac:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80043ae:	443e      	add	r6, r7
 80043b0:	ec51 0b18 	vmov	r0, r1, d8
 80043b4:	2200      	movs	r2, #0
 80043b6:	2300      	movs	r3, #0
 80043b8:	f7fc fe38 	bl	800102c <__aeabi_dcmpeq>
 80043bc:	2800      	cmp	r0, #0
 80043be:	f000 8140 	beq.w	8004642 <_svfprintf_r+0x167a>
 80043c2:	4633      	mov	r3, r6
 80043c4:	9a04      	ldr	r2, [sp, #16]
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	930e      	str	r3, [sp, #56]	; 0x38
 80043ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043cc:	920c      	str	r2, [sp, #48]	; 0x30
 80043ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043d2:	f000 8124 	beq.w	800461e <_svfprintf_r+0x1656>
 80043d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043da:	f000 81fe 	beq.w	80047da <_svfprintf_r+0x1812>
 80043de:	1e53      	subs	r3, r2, #1
 80043e0:	2d61      	cmp	r5, #97	; 0x61
 80043e2:	9320      	str	r3, [sp, #128]	; 0x80
 80043e4:	f000 82de 	beq.w	80049a4 <_svfprintf_r+0x19dc>
 80043e8:	2d41      	cmp	r5, #65	; 0x41
 80043ea:	f040 8120 	bne.w	800462e <_svfprintf_r+0x1666>
 80043ee:	2150      	movs	r1, #80	; 0x50
 80043f0:	2001      	movs	r0, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bfb6      	itet	lt
 80043f6:	f1c2 0301 	rsblt	r3, r2, #1
 80043fa:	222b      	movge	r2, #43	; 0x2b
 80043fc:	222d      	movlt	r2, #45	; 0x2d
 80043fe:	2b09      	cmp	r3, #9
 8004400:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
 8004404:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8004408:	f340 823d 	ble.w	8004886 <_svfprintf_r+0x18be>
 800440c:	f10d 0697 	add.w	r6, sp, #151	; 0x97
 8004410:	4f54      	ldr	r7, [pc, #336]	; (8004564 <_svfprintf_r+0x159c>)
 8004412:	4632      	mov	r2, r6
 8004414:	4610      	mov	r0, r2
 8004416:	fba7 1203 	umull	r1, r2, r7, r3
 800441a:	08d2      	lsrs	r2, r2, #3
 800441c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004420:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8004424:	3130      	adds	r1, #48	; 0x30
 8004426:	f800 1c01 	strb.w	r1, [r0, #-1]
 800442a:	4619      	mov	r1, r3
 800442c:	2963      	cmp	r1, #99	; 0x63
 800442e:	4613      	mov	r3, r2
 8004430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8004434:	dcee      	bgt.n	8004414 <_svfprintf_r+0x144c>
 8004436:	3330      	adds	r3, #48	; 0x30
 8004438:	f802 3c01 	strb.w	r3, [r2, #-1]
 800443c:	1e83      	subs	r3, r0, #2
 800443e:	42b3      	cmp	r3, r6
 8004440:	f080 82bc 	bcs.w	80049bc <_svfprintf_r+0x19f4>
 8004444:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8004448:	f813 1b01 	ldrb.w	r1, [r3], #1
 800444c:	f802 1f01 	strb.w	r1, [r2, #1]!
 8004450:	42b3      	cmp	r3, r6
 8004452:	d1f9      	bne.n	8004448 <_svfprintf_r+0x1480>
 8004454:	ab52      	add	r3, sp, #328	; 0x148
 8004456:	1a18      	subs	r0, r3, r0
 8004458:	f1a0 03ad 	sub.w	r3, r0, #173	; 0xad
 800445c:	9316      	str	r3, [sp, #88]	; 0x58
 800445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004460:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004462:	2b01      	cmp	r3, #1
 8004464:	eb03 0602 	add.w	r6, r3, r2
 8004468:	f340 822d 	ble.w	80048c6 <_svfprintf_r+0x18fe>
 800446c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800446e:	441e      	add	r6, r3
 8004470:	f424 6380 	bic.w	r3, r4, #1024	; 0x400
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	9303      	str	r3, [sp, #12]
 800447a:	2300      	movs	r3, #0
 800447c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004480:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
 8004484:	930f      	str	r3, [sp, #60]	; 0x3c
 8004486:	9205      	str	r2, [sp, #20]
 8004488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 80d2 	bne.w	8004634 <_svfprintf_r+0x166c>
 8004490:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8004494:	4699      	mov	r9, r3
 8004496:	f7fe bee6 	b.w	8003266 <_svfprintf_r+0x29e>
 800449a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800449c:	1b1c      	subs	r4, r3, r4
 800449e:	eba2 0609 	sub.w	r6, r2, r9
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	463d      	mov	r5, r7
 80044a6:	bfa8      	it	ge
 80044a8:	4626      	movge	r6, r4
 80044aa:	f7ff bb8e 	b.w	8003bca <_svfprintf_r+0xc02>
 80044ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044b0:	9a07      	ldr	r2, [sp, #28]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	801a      	strh	r2, [r3, #0]
 80044b6:	f7ff b8c4 	b.w	8003642 <_svfprintf_r+0x67a>
 80044ba:	f343 12c0 	sbfx	r2, r3, #7, #1
 80044be:	4611      	mov	r1, r2
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	f7fe be73 	b.w	80031ac <_svfprintf_r+0x1e4>
 80044c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044ca:	aa26      	add	r2, sp, #152	; 0x98
 80044cc:	f00e fcea 	bl	8012ea4 <__ssprint_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	f47e aefa 	bne.w	80032ca <_svfprintf_r+0x302>
 80044d6:	e9dd 3127 	ldrd	r3, r1, [sp, #156]	; 0x9c
 80044da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044dc:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80044e0:	e6dd      	b.n	800429e <_svfprintf_r+0x12d6>
 80044e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044e6:	aa26      	add	r2, sp, #152	; 0x98
 80044e8:	f00e fcdc 	bl	8012ea4 <__ssprint_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	f47e aeec 	bne.w	80032ca <_svfprintf_r+0x302>
 80044f2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80044f4:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80044f8:	f7ff bb31 	b.w	8003b5e <_svfprintf_r+0xb96>
 80044fc:	f04f 0906 	mov.w	r9, #6
 8004500:	e45b      	b.n	8003dba <_svfprintf_r+0xdf2>
 8004502:	f109 0701 	add.w	r7, r9, #1
 8004506:	2102      	movs	r1, #2
 8004508:	e730      	b.n	800436c <_svfprintf_r+0x13a4>
 800450a:	464f      	mov	r7, r9
 800450c:	2103      	movs	r1, #3
 800450e:	e72d      	b.n	800436c <_svfprintf_r+0x13a4>
 8004510:	a820      	add	r0, sp, #128	; 0x80
 8004512:	eeb0 0a48 	vmov.f32	s0, s16
 8004516:	eef0 0a68 	vmov.f32	s1, s17
 800451a:	f00e fc47 	bl	8012dac <frexp>
 800451e:	2200      	movs	r2, #0
 8004520:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004524:	ec51 0b10 	vmov	r0, r1, d0
 8004528:	f7fc fa36 	bl	8000998 <__aeabi_dmul>
 800452c:	2200      	movs	r2, #0
 800452e:	2300      	movs	r3, #0
 8004530:	4606      	mov	r6, r0
 8004532:	460f      	mov	r7, r1
 8004534:	f7fc fd7a 	bl	800102c <__aeabi_dcmpeq>
 8004538:	2800      	cmp	r0, #0
 800453a:	f040 81bb 	bne.w	80048b4 <_svfprintf_r+0x18ec>
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <_svfprintf_r+0x15a0>)
 8004540:	9303      	str	r3, [sp, #12]
 8004542:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8004546:	e9cd 9b1c 	strd	r9, fp, [sp, #112]	; 0x70
 800454a:	950d      	str	r5, [sp, #52]	; 0x34
 800454c:	e9cd 4a0e 	strd	r4, sl, [sp, #56]	; 0x38
 8004550:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004554:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004558:	461d      	mov	r5, r3
 800455a:	e00d      	b.n	8004578 <_svfprintf_r+0x15b0>
 800455c:	0801b424 	.word	0x0801b424
 8004560:	0801b430 	.word	0x0801b430
 8004564:	cccccccd 	.word	0xcccccccd
 8004568:	0801b410 	.word	0x0801b410
 800456c:	2200      	movs	r2, #0
 800456e:	2300      	movs	r3, #0
 8004570:	f7fc fd5c 	bl	800102c <__aeabi_dcmpeq>
 8004574:	b9f0      	cbnz	r0, 80045b4 <_svfprintf_r+0x15ec>
 8004576:	464d      	mov	r5, r9
 8004578:	4bad      	ldr	r3, [pc, #692]	; (8004830 <_svfprintf_r+0x1868>)
 800457a:	2200      	movs	r2, #0
 800457c:	4630      	mov	r0, r6
 800457e:	4639      	mov	r1, r7
 8004580:	f7fc fa0a 	bl	8000998 <__aeabi_dmul>
 8004584:	460f      	mov	r7, r1
 8004586:	4606      	mov	r6, r0
 8004588:	f7fc fc18 	bl	8000dbc <__aeabi_d2iz>
 800458c:	4604      	mov	r4, r0
 800458e:	f7fc f999 	bl	80008c4 <__aeabi_i2d>
 8004592:	460b      	mov	r3, r1
 8004594:	4602      	mov	r2, r0
 8004596:	4639      	mov	r1, r7
 8004598:	4630      	mov	r0, r6
 800459a:	f7fc f845 	bl	8000628 <__aeabi_dsub>
 800459e:	f81b 3004 	ldrb.w	r3, [fp, r4]
 80045a2:	46c2      	mov	sl, r8
 80045a4:	f808 3b01 	strb.w	r3, [r8], #1
 80045a8:	1c6b      	adds	r3, r5, #1
 80045aa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80045ae:	4606      	mov	r6, r0
 80045b0:	460f      	mov	r7, r1
 80045b2:	d1db      	bne.n	800456c <_svfprintf_r+0x15a4>
 80045b4:	4b9f      	ldr	r3, [pc, #636]	; (8004834 <_svfprintf_r+0x186c>)
 80045b6:	950c      	str	r5, [sp, #48]	; 0x30
 80045b8:	2200      	movs	r2, #0
 80045ba:	4630      	mov	r0, r6
 80045bc:	4639      	mov	r1, r7
 80045be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80045c0:	940d      	str	r4, [sp, #52]	; 0x34
 80045c2:	e9dd 9b1c 	ldrd	r9, fp, [sp, #112]	; 0x70
 80045c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80045c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80045cc:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80045d0:	f7fc fd54 	bl	800107c <__aeabi_dcmpgt>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	f040 810e 	bne.w	80047f6 <_svfprintf_r+0x182e>
 80045da:	4b96      	ldr	r3, [pc, #600]	; (8004834 <_svfprintf_r+0x186c>)
 80045dc:	4630      	mov	r0, r6
 80045de:	4639      	mov	r1, r7
 80045e0:	2200      	movs	r2, #0
 80045e2:	f7fc fd23 	bl	800102c <__aeabi_dcmpeq>
 80045e6:	b118      	cbz	r0, 80045f0 <_svfprintf_r+0x1628>
 80045e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ea:	07df      	lsls	r7, r3, #31
 80045ec:	f100 8103 	bmi.w	80047f6 <_svfprintf_r+0x182e>
 80045f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f2c0 811a 	blt.w	800482c <_svfprintf_r+0x1864>
 80045f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045fa:	3301      	adds	r3, #1
 80045fc:	4443      	add	r3, r8
 80045fe:	2230      	movs	r2, #48	; 0x30
 8004600:	f808 2b01 	strb.w	r2, [r8], #1
 8004604:	4543      	cmp	r3, r8
 8004606:	d1fb      	bne.n	8004600 <_svfprintf_r+0x1638>
 8004608:	9a04      	ldr	r2, [sp, #16]
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	930e      	str	r3, [sp, #56]	; 0x38
 800460e:	f025 0820 	bic.w	r8, r5, #32
 8004612:	e6da      	b.n	80043ca <_svfprintf_r+0x1402>
 8004614:	9a04      	ldr	r2, [sp, #16]
 8004616:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800461c:	930e      	str	r3, [sp, #56]	; 0x38
 800461e:	1cd3      	adds	r3, r2, #3
 8004620:	920c      	str	r2, [sp, #48]	; 0x30
 8004622:	db01      	blt.n	8004628 <_svfprintf_r+0x1660>
 8004624:	4591      	cmp	r9, r2
 8004626:	da18      	bge.n	800465a <_svfprintf_r+0x1692>
 8004628:	1e53      	subs	r3, r2, #1
 800462a:	3d02      	subs	r5, #2
 800462c:	9320      	str	r3, [sp, #128]	; 0x80
 800462e:	b2e9      	uxtb	r1, r5
 8004630:	2000      	movs	r0, #0
 8004632:	e6de      	b.n	80043f2 <_svfprintf_r+0x142a>
 8004634:	222d      	movs	r2, #45	; 0x2d
 8004636:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800463a:	f04f 0900 	mov.w	r9, #0
 800463e:	f7fe be14 	b.w	800326a <_svfprintf_r+0x2a2>
 8004642:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004644:	42b3      	cmp	r3, r6
 8004646:	f4bf aebd 	bcs.w	80043c4 <_svfprintf_r+0x13fc>
 800464a:	2130      	movs	r1, #48	; 0x30
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	9224      	str	r2, [sp, #144]	; 0x90
 8004650:	7019      	strb	r1, [r3, #0]
 8004652:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004654:	429e      	cmp	r6, r3
 8004656:	d8f9      	bhi.n	800464c <_svfprintf_r+0x1684>
 8004658:	e6b4      	b.n	80043c4 <_svfprintf_r+0x13fc>
 800465a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800465c:	4293      	cmp	r3, r2
 800465e:	f300 80ab 	bgt.w	80047b8 <_svfprintf_r+0x17f0>
 8004662:	07e3      	lsls	r3, r4, #31
 8004664:	f140 8160 	bpl.w	8004928 <_svfprintf_r+0x1960>
 8004668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800466a:	18d6      	adds	r6, r2, r3
 800466c:	0567      	lsls	r7, r4, #21
 800466e:	d502      	bpl.n	8004676 <_svfprintf_r+0x16ae>
 8004670:	2a00      	cmp	r2, #0
 8004672:	f300 8133 	bgt.w	80048dc <_svfprintf_r+0x1914>
 8004676:	9b05      	ldr	r3, [sp, #20]
 8004678:	9303      	str	r3, [sp, #12]
 800467a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 800467e:	9305      	str	r3, [sp, #20]
 8004680:	2567      	movs	r5, #103	; 0x67
 8004682:	2300      	movs	r3, #0
 8004684:	930f      	str	r3, [sp, #60]	; 0x3c
 8004686:	930d      	str	r3, [sp, #52]	; 0x34
 8004688:	e6fe      	b.n	8004488 <_svfprintf_r+0x14c0>
 800468a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800468e:	aa26      	add	r2, sp, #152	; 0x98
 8004690:	f00e fc08 	bl	8012ea4 <__ssprint_r>
 8004694:	2800      	cmp	r0, #0
 8004696:	f47e ae18 	bne.w	80032ca <_svfprintf_r+0x302>
 800469a:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800469c:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80046a0:	f7ff ba56 	b.w	8003b50 <_svfprintf_r+0xb88>
 80046a4:	9808      	ldr	r0, [sp, #32]
 80046a6:	9304      	str	r3, [sp, #16]
 80046a8:	aa26      	add	r2, sp, #152	; 0x98
 80046aa:	4659      	mov	r1, fp
 80046ac:	f00e fbfa 	bl	8012ea4 <__ssprint_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	f47e ae0a 	bne.w	80032ca <_svfprintf_r+0x302>
 80046b6:	f89a 1000 	ldrb.w	r1, [sl]
 80046ba:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80046bc:	9b04      	ldr	r3, [sp, #16]
 80046be:	aa29      	add	r2, sp, #164	; 0xa4
 80046c0:	440f      	add	r7, r1
 80046c2:	e49f      	b.n	8004004 <_svfprintf_r+0x103c>
 80046c4:	2378      	movs	r3, #120	; 0x78
 80046c6:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80046ca:	2330      	movs	r3, #48	; 0x30
 80046cc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80046d0:	9b03      	ldr	r3, [sp, #12]
 80046d2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 80046d6:	f043 0402 	orr.w	r4, r3, #2
 80046da:	f300 80af 	bgt.w	800483c <_svfprintf_r+0x1874>
 80046de:	2300      	movs	r3, #0
 80046e0:	930a      	str	r3, [sp, #40]	; 0x28
 80046e2:	ab39      	add	r3, sp, #228	; 0xe4
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80046ec:	9305      	str	r3, [sp, #20]
 80046ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	db23      	blt.n	800473c <_svfprintf_r+0x1774>
 80046f4:	ed9d 8b10 	vldr	d8, [sp, #64]	; 0x40
 80046f8:	2300      	movs	r3, #0
 80046fa:	9319      	str	r3, [sp, #100]	; 0x64
 80046fc:	2d61      	cmp	r5, #97	; 0x61
 80046fe:	f47f ab6a 	bne.w	8003dd6 <_svfprintf_r+0xe0e>
 8004702:	eeb0 0a48 	vmov.f32	s0, s16
 8004706:	eef0 0a68 	vmov.f32	s1, s17
 800470a:	a820      	add	r0, sp, #128	; 0x80
 800470c:	f00e fb4e 	bl	8012dac <frexp>
 8004710:	2200      	movs	r2, #0
 8004712:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004716:	ec51 0b10 	vmov	r0, r1, d0
 800471a:	f7fc f93d 	bl	8000998 <__aeabi_dmul>
 800471e:	2200      	movs	r2, #0
 8004720:	2300      	movs	r3, #0
 8004722:	4606      	mov	r6, r0
 8004724:	460f      	mov	r7, r1
 8004726:	f7fc fc81 	bl	800102c <__aeabi_dcmpeq>
 800472a:	2800      	cmp	r0, #0
 800472c:	f040 80c2 	bne.w	80048b4 <_svfprintf_r+0x18ec>
 8004730:	4b41      	ldr	r3, [pc, #260]	; (8004838 <_svfprintf_r+0x1870>)
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	e705      	b.n	8004542 <_svfprintf_r+0x157a>
 8004736:	2300      	movs	r3, #0
 8004738:	9c03      	ldr	r4, [sp, #12]
 800473a:	930a      	str	r3, [sp, #40]	; 0x28
 800473c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004740:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004744:	ee08 3a90 	vmov	s17, r3
 8004748:	232d      	movs	r3, #45	; 0x2d
 800474a:	ee08 2a10 	vmov	s16, r2
 800474e:	9319      	str	r3, [sp, #100]	; 0x64
 8004750:	e7d4      	b.n	80046fc <_svfprintf_r+0x1734>
 8004752:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004756:	aa26      	add	r2, sp, #152	; 0x98
 8004758:	f00e fba4 	bl	8012ea4 <__ssprint_r>
 800475c:	2800      	cmp	r0, #0
 800475e:	f47e adb4 	bne.w	80032ca <_svfprintf_r+0x302>
 8004762:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004764:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004766:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 800476a:	f7ff ba16 	b.w	8003b9a <_svfprintf_r+0xbd2>
 800476e:	464e      	mov	r6, r9
 8004770:	f8cd 9014 	str.w	r9, [sp, #20]
 8004774:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8004778:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800477c:	970b      	str	r7, [sp, #44]	; 0x2c
 800477e:	4681      	mov	r9, r0
 8004780:	900f      	str	r0, [sp, #60]	; 0x3c
 8004782:	f7fe bd70 	b.w	8003266 <_svfprintf_r+0x29e>
 8004786:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800478a:	aa26      	add	r2, sp, #152	; 0x98
 800478c:	f00e fb8a 	bl	8012ea4 <__ssprint_r>
 8004790:	2800      	cmp	r0, #0
 8004792:	f47e ad9a 	bne.w	80032ca <_svfprintf_r+0x302>
 8004796:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800479a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800479c:	1b1c      	subs	r4, r3, r4
 800479e:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80047a2:	f7ff ba12 	b.w	8003bca <_svfprintf_r+0xc02>
 80047a6:	2358      	movs	r3, #88	; 0x58
 80047a8:	e78d      	b.n	80046c6 <_svfprintf_r+0x16fe>
 80047aa:	07e6      	lsls	r6, r4, #31
 80047ac:	f57f af32 	bpl.w	8004614 <_svfprintf_r+0x164c>
 80047b0:	19c6      	adds	r6, r0, r7
 80047b2:	f04f 0847 	mov.w	r8, #71	; 0x47
 80047b6:	e5fb      	b.n	80043b0 <_svfprintf_r+0x13e8>
 80047b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047bc:	189e      	adds	r6, r3, r2
 80047be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f340 80c8 	ble.w	8004956 <_svfprintf_r+0x198e>
 80047c6:	2567      	movs	r5, #103	; 0x67
 80047c8:	0562      	lsls	r2, r4, #21
 80047ca:	f100 8088 	bmi.w	80048de <_svfprintf_r+0x1916>
 80047ce:	9b05      	ldr	r3, [sp, #20]
 80047d0:	9303      	str	r3, [sp, #12]
 80047d2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80047d6:	9305      	str	r3, [sp, #20]
 80047d8:	e753      	b.n	8004682 <_svfprintf_r+0x16ba>
 80047da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047dc:	f004 0301 	and.w	r3, r4, #1
 80047e0:	2a00      	cmp	r2, #0
 80047e2:	ea43 0309 	orr.w	r3, r3, r9
 80047e6:	f340 80d5 	ble.w	8004994 <_svfprintf_r+0x19cc>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f040 80bd 	bne.w	800496a <_svfprintf_r+0x19a2>
 80047f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80047f2:	2566      	movs	r5, #102	; 0x66
 80047f4:	e7e8      	b.n	80047c8 <_svfprintf_r+0x1800>
 80047f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f8:	9a03      	ldr	r2, [sp, #12]
 80047fa:	9324      	str	r3, [sp, #144]	; 0x90
 80047fc:	7bd1      	ldrb	r1, [r2, #15]
 80047fe:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004802:	428b      	cmp	r3, r1
 8004804:	4642      	mov	r2, r8
 8004806:	d109      	bne.n	800481c <_svfprintf_r+0x1854>
 8004808:	2030      	movs	r0, #48	; 0x30
 800480a:	f802 0c01 	strb.w	r0, [r2, #-1]
 800480e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004810:	1e53      	subs	r3, r2, #1
 8004812:	9324      	str	r3, [sp, #144]	; 0x90
 8004814:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004818:	4299      	cmp	r1, r3
 800481a:	d0f6      	beq.n	800480a <_svfprintf_r+0x1842>
 800481c:	2b39      	cmp	r3, #57	; 0x39
 800481e:	bf0b      	itete	eq
 8004820:	9b03      	ldreq	r3, [sp, #12]
 8004822:	3301      	addne	r3, #1
 8004824:	7a9b      	ldrbeq	r3, [r3, #10]
 8004826:	b2db      	uxtbne	r3, r3
 8004828:	f802 3c01 	strb.w	r3, [r2, #-1]
 800482c:	4643      	mov	r3, r8
 800482e:	e6eb      	b.n	8004608 <_svfprintf_r+0x1640>
 8004830:	40300000 	.word	0x40300000
 8004834:	3fe00000 	.word	0x3fe00000
 8004838:	0801b3fc 	.word	0x0801b3fc
 800483c:	9808      	ldr	r0, [sp, #32]
 800483e:	f109 0101 	add.w	r1, r9, #1
 8004842:	f00c f9bd 	bl	8010bc0 <_malloc_r>
 8004846:	9004      	str	r0, [sp, #16]
 8004848:	2800      	cmp	r0, #0
 800484a:	f000 80c9 	beq.w	80049e0 <_svfprintf_r+0x1a18>
 800484e:	9b04      	ldr	r3, [sp, #16]
 8004850:	930a      	str	r3, [sp, #40]	; 0x28
 8004852:	e748      	b.n	80046e6 <_svfprintf_r+0x171e>
 8004854:	3301      	adds	r3, #1
 8004856:	4431      	add	r1, r6
 8004858:	2b07      	cmp	r3, #7
 800485a:	e9cd 3127 	strd	r3, r1, [sp, #156]	; 0x9c
 800485e:	f8cb 7000 	str.w	r7, [fp]
 8004862:	f8cb 6004 	str.w	r6, [fp, #4]
 8004866:	f77f a83f 	ble.w	80038e8 <_svfprintf_r+0x920>
 800486a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800486e:	aa26      	add	r2, sp, #152	; 0x98
 8004870:	f00e fb18 	bl	8012ea4 <__ssprint_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	f47e ad28 	bne.w	80032ca <_svfprintf_r+0x302>
 800487a:	e9dd 3127 	ldrd	r3, r1, [sp, #156]	; 0x9c
 800487e:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8004882:	f7ff b833 	b.w	80038ec <_svfprintf_r+0x924>
 8004886:	2800      	cmp	r0, #0
 8004888:	f040 8081 	bne.w	800498e <_svfprintf_r+0x19c6>
 800488c:	2230      	movs	r2, #48	; 0x30
 800488e:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8004892:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8004896:	3330      	adds	r3, #48	; 0x30
 8004898:	f802 3b01 	strb.w	r3, [r2], #1
 800489c:	ab22      	add	r3, sp, #136	; 0x88
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	9316      	str	r3, [sp, #88]	; 0x58
 80048a2:	e5dc      	b.n	800445e <_svfprintf_r+0x1496>
 80048a4:	9a08      	ldr	r2, [sp, #32]
 80048a6:	230c      	movs	r3, #12
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ae:	9307      	str	r3, [sp, #28]
 80048b0:	f7fe bd16 	b.w	80032e0 <_svfprintf_r+0x318>
 80048b4:	4b4e      	ldr	r3, [pc, #312]	; (80049f0 <_svfprintf_r+0x1a28>)
 80048b6:	4a4f      	ldr	r2, [pc, #316]	; (80049f4 <_svfprintf_r+0x1a2c>)
 80048b8:	2d61      	cmp	r5, #97	; 0x61
 80048ba:	bf18      	it	ne
 80048bc:	461a      	movne	r2, r3
 80048be:	2301      	movs	r3, #1
 80048c0:	9203      	str	r2, [sp, #12]
 80048c2:	9320      	str	r3, [sp, #128]	; 0x80
 80048c4:	e63d      	b.n	8004542 <_svfprintf_r+0x157a>
 80048c6:	07e2      	lsls	r2, r4, #31
 80048c8:	f57f add2 	bpl.w	8004470 <_svfprintf_r+0x14a8>
 80048cc:	e5ce      	b.n	800446c <_svfprintf_r+0x14a4>
 80048ce:	07e1      	lsls	r1, r4, #31
 80048d0:	f57f aea0 	bpl.w	8004614 <_svfprintf_r+0x164c>
 80048d4:	9b04      	ldr	r3, [sp, #16]
 80048d6:	46a8      	mov	r8, r5
 80048d8:	19de      	adds	r6, r3, r7
 80048da:	e569      	b.n	80043b0 <_svfprintf_r+0x13e8>
 80048dc:	2567      	movs	r5, #103	; 0x67
 80048de:	9915      	ldr	r1, [sp, #84]	; 0x54
 80048e0:	780b      	ldrb	r3, [r1, #0]
 80048e2:	2bff      	cmp	r3, #255	; 0xff
 80048e4:	d078      	beq.n	80049d8 <_svfprintf_r+0x1a10>
 80048e6:	2400      	movs	r4, #0
 80048e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048ea:	4620      	mov	r0, r4
 80048ec:	e003      	b.n	80048f6 <_svfprintf_r+0x192e>
 80048ee:	3001      	adds	r0, #1
 80048f0:	3101      	adds	r1, #1
 80048f2:	2bff      	cmp	r3, #255	; 0xff
 80048f4:	d008      	beq.n	8004908 <_svfprintf_r+0x1940>
 80048f6:	4293      	cmp	r3, r2
 80048f8:	da06      	bge.n	8004908 <_svfprintf_r+0x1940>
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	784b      	ldrb	r3, [r1, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f5      	bne.n	80048ee <_svfprintf_r+0x1926>
 8004902:	780b      	ldrb	r3, [r1, #0]
 8004904:	3401      	adds	r4, #1
 8004906:	e7f4      	b.n	80048f2 <_svfprintf_r+0x192a>
 8004908:	9115      	str	r1, [sp, #84]	; 0x54
 800490a:	900d      	str	r0, [sp, #52]	; 0x34
 800490c:	940f      	str	r4, [sp, #60]	; 0x3c
 800490e:	920c      	str	r2, [sp, #48]	; 0x30
 8004910:	9b05      	ldr	r3, [sp, #20]
 8004912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004918:	4413      	add	r3, r2
 800491a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800491c:	fb02 6603 	mla	r6, r2, r3, r6
 8004920:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	e5af      	b.n	8004488 <_svfprintf_r+0x14c0>
 8004928:	4616      	mov	r6, r2
 800492a:	e69f      	b.n	800466c <_svfprintf_r+0x16a4>
 800492c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800492e:	4c32      	ldr	r4, [pc, #200]	; (80049f8 <_svfprintf_r+0x1a30>)
 8004930:	2b00      	cmp	r3, #0
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	bfa8      	it	ge
 8004936:	f89d 207b 	ldrbge.w	r2, [sp, #123]	; 0x7b
 800493a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493e:	bfb8      	it	lt
 8004940:	222d      	movlt	r2, #45	; 0x2d
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	bfb8      	it	lt
 8004946:	f88d 207b 	strblt.w	r2, [sp, #123]	; 0x7b
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <_svfprintf_r+0x1a34>)
 800494c:	f7fe bd99 	b.w	8003482 <_svfprintf_r+0x4ba>
 8004950:	4d2b      	ldr	r5, [pc, #172]	; (8004a00 <_svfprintf_r+0x1a38>)
 8004952:	f7ff bb8e 	b.w	8004072 <_svfprintf_r+0x10aa>
 8004956:	f1c3 0301 	rsb	r3, r3, #1
 800495a:	441e      	add	r6, r3
 800495c:	9a05      	ldr	r2, [sp, #20]
 800495e:	9203      	str	r2, [sp, #12]
 8004960:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8004964:	9305      	str	r3, [sp, #20]
 8004966:	2567      	movs	r5, #103	; 0x67
 8004968:	e68b      	b.n	8004682 <_svfprintf_r+0x16ba>
 800496a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800496c:	18d6      	adds	r6, r2, r3
 800496e:	444e      	add	r6, r9
 8004970:	2566      	movs	r5, #102	; 0x66
 8004972:	e729      	b.n	80047c8 <_svfprintf_r+0x1800>
 8004974:	ec51 0b18 	vmov	r0, r1, d8
 8004978:	2200      	movs	r2, #0
 800497a:	2300      	movs	r3, #0
 800497c:	f7fc fb56 	bl	800102c <__aeabi_dcmpeq>
 8004980:	2800      	cmp	r0, #0
 8004982:	f47f ad13 	bne.w	80043ac <_svfprintf_r+0x13e4>
 8004986:	f1c7 0701 	rsb	r7, r7, #1
 800498a:	9720      	str	r7, [sp, #128]	; 0x80
 800498c:	e50f      	b.n	80043ae <_svfprintf_r+0x13e6>
 800498e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8004992:	e780      	b.n	8004896 <_svfprintf_r+0x18ce>
 8004994:	b943      	cbnz	r3, 80049a8 <_svfprintf_r+0x19e0>
 8004996:	9b05      	ldr	r3, [sp, #20]
 8004998:	9303      	str	r3, [sp, #12]
 800499a:	2301      	movs	r3, #1
 800499c:	9305      	str	r3, [sp, #20]
 800499e:	2566      	movs	r5, #102	; 0x66
 80049a0:	461e      	mov	r6, r3
 80049a2:	e66e      	b.n	8004682 <_svfprintf_r+0x16ba>
 80049a4:	2170      	movs	r1, #112	; 0x70
 80049a6:	e523      	b.n	80043f0 <_svfprintf_r+0x1428>
 80049a8:	9b05      	ldr	r3, [sp, #20]
 80049aa:	9303      	str	r3, [sp, #12]
 80049ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ae:	1c5e      	adds	r6, r3, #1
 80049b0:	444e      	add	r6, r9
 80049b2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80049b6:	9305      	str	r3, [sp, #20]
 80049b8:	2566      	movs	r5, #102	; 0x66
 80049ba:	e662      	b.n	8004682 <_svfprintf_r+0x16ba>
 80049bc:	2302      	movs	r3, #2
 80049be:	9316      	str	r3, [sp, #88]	; 0x58
 80049c0:	e54d      	b.n	800445e <_svfprintf_r+0x1496>
 80049c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049c4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80049c8:	4692      	mov	sl, r2
 80049ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80049d0:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 80049d4:	f7fe bb48 	b.w	8003068 <_svfprintf_r+0xa0>
 80049d8:	2300      	movs	r3, #0
 80049da:	930f      	str	r3, [sp, #60]	; 0x3c
 80049dc:	930d      	str	r3, [sp, #52]	; 0x34
 80049de:	e797      	b.n	8004910 <_svfprintf_r+0x1948>
 80049e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049e2:	898b      	ldrh	r3, [r1, #12]
 80049e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049e8:	4613      	mov	r3, r2
 80049ea:	818a      	strh	r2, [r1, #12]
 80049ec:	f7fe bc75 	b.w	80032da <_svfprintf_r+0x312>
 80049f0:	0801b410 	.word	0x0801b410
 80049f4:	0801b3fc 	.word	0x0801b3fc
 80049f8:	0801b3f4 	.word	0x0801b3f4
 80049fc:	0801b3f8 	.word	0x0801b3f8
 8004a00:	0801b430 	.word	0x0801b430
 8004a04:	00000000 	.word	0x00000000

08004a08 <_vfprintf_r>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	ed2d 8b02 	vpush	{d8}
 8004a10:	b0d3      	sub	sp, #332	; 0x14c
 8004a12:	461c      	mov	r4, r3
 8004a14:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8004a18:	4692      	mov	sl, r2
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	f00d fda4 	bl	8012568 <_localeconv_r>
 8004a20:	6803      	ldr	r3, [r0, #0]
 8004a22:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a24:	4618      	mov	r0, r3
 8004a26:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a28:	f7fb fbca 	bl	80001c0 <strlen>
 8004a2c:	9012      	str	r0, [sp, #72]	; 0x48
 8004a2e:	b11d      	cbz	r5, 8004a38 <_vfprintf_r+0x30>
 8004a30:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8224 	beq.w	8004e80 <_vfprintf_r+0x478>
 8004a38:	9b06      	ldr	r3, [sp, #24]
 8004a3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004a40:	07d0      	lsls	r0, r2, #31
 8004a42:	d402      	bmi.n	8004a4a <_vfprintf_r+0x42>
 8004a44:	0599      	lsls	r1, r3, #22
 8004a46:	f140 86bc 	bpl.w	80057c2 <_vfprintf_r+0xdba>
 8004a4a:	071a      	lsls	r2, r3, #28
 8004a4c:	f140 80ca 	bpl.w	8004be4 <_vfprintf_r+0x1dc>
 8004a50:	9a06      	ldr	r2, [sp, #24]
 8004a52:	6912      	ldr	r2, [r2, #16]
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	f000 80c5 	beq.w	8004be4 <_vfprintf_r+0x1dc>
 8004a5a:	f003 021a 	and.w	r2, r3, #26
 8004a5e:	2a0a      	cmp	r2, #10
 8004a60:	f000 80cf 	beq.w	8004c02 <_vfprintf_r+0x1fa>
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8cd a010 	str.w	sl, [sp, #16]
 8004a6a:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8004a6e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8004a72:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8004a76:	930e      	str	r3, [sp, #56]	; 0x38
 8004a78:	9314      	str	r3, [sp, #80]	; 0x50
 8004a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7c:	9b04      	ldr	r3, [sp, #16]
 8004a7e:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 8004cb0 <_vfprintf_r+0x2a8>
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	aa29      	add	r2, sp, #164	; 0xa4
 8004a86:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004a8a:	9226      	str	r2, [sp, #152]	; 0x98
 8004a8c:	4693      	mov	fp, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 819c 	beq.w	8004dcc <_vfprintf_r+0x3c4>
 8004a94:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004a98:	e004      	b.n	8004aa4 <_vfprintf_r+0x9c>
 8004a9a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80c6 	beq.w	8004c30 <_vfprintf_r+0x228>
 8004aa4:	2b25      	cmp	r3, #37	; 0x25
 8004aa6:	d1f8      	bne.n	8004a9a <_vfprintf_r+0x92>
 8004aa8:	9b04      	ldr	r3, [sp, #16]
 8004aaa:	ebba 0503 	subs.w	r5, sl, r3
 8004aae:	f040 80c4 	bne.w	8004c3a <_vfprintf_r+0x232>
 8004ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8188 	beq.w	8004dcc <_vfprintf_r+0x3c4>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8004ac2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004ac6:	9308      	str	r3, [sp, #32]
 8004ac8:	f10a 0a01 	add.w	sl, sl, #1
 8004acc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004ad0:	9303      	str	r3, [sp, #12]
 8004ad2:	f10a 0a01 	add.w	sl, sl, #1
 8004ad6:	f1a5 0320 	sub.w	r3, r5, #32
 8004ada:	2b5a      	cmp	r3, #90	; 0x5a
 8004adc:	f200 80ec 	bhi.w	8004cb8 <_vfprintf_r+0x2b0>
 8004ae0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ae4:	00ea02b5 	.word	0x00ea02b5
 8004ae8:	02ae00ea 	.word	0x02ae00ea
 8004aec:	00ea00ea 	.word	0x00ea00ea
 8004af0:	006a00ea 	.word	0x006a00ea
 8004af4:	00ea00ea 	.word	0x00ea00ea
 8004af8:	02880276 	.word	0x02880276
 8004afc:	028100ea 	.word	0x028100ea
 8004b00:	00ea0295 	.word	0x00ea0295
 8004b04:	005b028e 	.word	0x005b028e
 8004b08:	005b005b 	.word	0x005b005b
 8004b0c:	005b005b 	.word	0x005b005b
 8004b10:	005b005b 	.word	0x005b005b
 8004b14:	005b005b 	.word	0x005b005b
 8004b18:	00ea00ea 	.word	0x00ea00ea
 8004b1c:	00ea00ea 	.word	0x00ea00ea
 8004b20:	00ea00ea 	.word	0x00ea00ea
 8004b24:	017b00ea 	.word	0x017b00ea
 8004b28:	020200ea 	.word	0x020200ea
 8004b2c:	017b01d9 	.word	0x017b01d9
 8004b30:	017b017b 	.word	0x017b017b
 8004b34:	00ea00ea 	.word	0x00ea00ea
 8004b38:	00ea00ea 	.word	0x00ea00ea
 8004b3c:	00ea02d2 	.word	0x00ea02d2
 8004b40:	023400ea 	.word	0x023400ea
 8004b44:	00ea00ea 	.word	0x00ea00ea
 8004b48:	020c00ea 	.word	0x020c00ea
 8004b4c:	02c000ea 	.word	0x02c000ea
 8004b50:	00ea00ea 	.word	0x00ea00ea
 8004b54:	00ea0733 	.word	0x00ea0733
 8004b58:	00ea00ea 	.word	0x00ea00ea
 8004b5c:	00ea00ea 	.word	0x00ea00ea
 8004b60:	00ea00ea 	.word	0x00ea00ea
 8004b64:	017b00ea 	.word	0x017b00ea
 8004b68:	020200ea 	.word	0x020200ea
 8004b6c:	017b01dd 	.word	0x017b01dd
 8004b70:	017b017b 	.word	0x017b017b
 8004b74:	01dd030a 	.word	0x01dd030a
 8004b78:	00ea01d2 	.word	0x00ea01d2
 8004b7c:	00ea0300 	.word	0x00ea0300
 8004b80:	023802d9 	.word	0x023802d9
 8004b84:	01d202e7 	.word	0x01d202e7
 8004b88:	020c00ea 	.word	0x020c00ea
 8004b8c:	0756007d 	.word	0x0756007d
 8004b90:	00ea00ea 	.word	0x00ea00ea
 8004b94:	00ea0759 	.word	0x00ea0759
 8004b98:	007d      	.short	0x007d
 8004b9a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f81a 5b01 	ldrb.w	r5, [sl], #1
 8004ba4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004ba8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004bac:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d9f5      	bls.n	8004ba0 <_vfprintf_r+0x198>
 8004bb4:	9208      	str	r2, [sp, #32]
 8004bb6:	e78e      	b.n	8004ad6 <_vfprintf_r+0xce>
 8004bb8:	9d07      	ldr	r5, [sp, #28]
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f00d fcd4 	bl	8012568 <_localeconv_r>
 8004bc0:	6843      	ldr	r3, [r0, #4]
 8004bc2:	9317      	str	r3, [sp, #92]	; 0x5c
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fb fafb 	bl	80001c0 <strlen>
 8004bca:	9018      	str	r0, [sp, #96]	; 0x60
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f00d fcca 	bl	8012568 <_localeconv_r>
 8004bd4:	6883      	ldr	r3, [r0, #8]
 8004bd6:	9315      	str	r3, [sp, #84]	; 0x54
 8004bd8:	2c00      	cmp	r4, #0
 8004bda:	f040 86a6 	bne.w	800592a <_vfprintf_r+0xf22>
 8004bde:	f89a 5000 	ldrb.w	r5, [sl]
 8004be2:	e776      	b.n	8004ad2 <_vfprintf_r+0xca>
 8004be4:	9d06      	ldr	r5, [sp, #24]
 8004be6:	9807      	ldr	r0, [sp, #28]
 8004be8:	4629      	mov	r1, r5
 8004bea:	f00d f90b 	bl	8011e04 <__swsetup_r>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f041 8368 	bne.w	80062c4 <_vfprintf_r+0x18bc>
 8004bf4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004bf8:	f003 021a 	and.w	r2, r3, #26
 8004bfc:	2a0a      	cmp	r2, #10
 8004bfe:	f47f af31 	bne.w	8004a64 <_vfprintf_r+0x5c>
 8004c02:	9906      	ldr	r1, [sp, #24]
 8004c04:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	f6ff af2b 	blt.w	8004a64 <_vfprintf_r+0x5c>
 8004c0e:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 8004c10:	07d6      	lsls	r6, r2, #31
 8004c12:	d402      	bmi.n	8004c1a <_vfprintf_r+0x212>
 8004c14:	059d      	lsls	r5, r3, #22
 8004c16:	f141 817d 	bpl.w	8005f14 <_vfprintf_r+0x150c>
 8004c1a:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8004c1e:	4623      	mov	r3, r4
 8004c20:	4652      	mov	r2, sl
 8004c22:	b053      	add	sp, #332	; 0x14c
 8004c24:	ecbd 8b02 	vpop	{d8}
 8004c28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	f00d b8aa 	b.w	8011d84 <__sbprintf>
 8004c30:	9b04      	ldr	r3, [sp, #16]
 8004c32:	ebba 0503 	subs.w	r5, sl, r3
 8004c36:	f000 80c9 	beq.w	8004dcc <_vfprintf_r+0x3c4>
 8004c3a:	9b04      	ldr	r3, [sp, #16]
 8004c3c:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8004c3e:	e9cb 3500 	strd	r3, r5, [fp]
 8004c42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004c44:	3301      	adds	r3, #1
 8004c46:	442f      	add	r7, r5
 8004c48:	2b07      	cmp	r3, #7
 8004c4a:	9728      	str	r7, [sp, #160]	; 0xa0
 8004c4c:	9327      	str	r3, [sp, #156]	; 0x9c
 8004c4e:	dc05      	bgt.n	8004c5c <_vfprintf_r+0x254>
 8004c50:	f10b 0b08 	add.w	fp, fp, #8
 8004c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c56:	442b      	add	r3, r5
 8004c58:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5a:	e72a      	b.n	8004ab2 <_vfprintf_r+0xaa>
 8004c5c:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8004c60:	aa26      	add	r2, sp, #152	; 0x98
 8004c62:	f00e f9a3 	bl	8012fac <__sprint_r>
 8004c66:	b980      	cbnz	r0, 8004c8a <_vfprintf_r+0x282>
 8004c68:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8004c6c:	e7f2      	b.n	8004c54 <_vfprintf_r+0x24c>
 8004c6e:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8004c72:	aa26      	add	r2, sp, #152	; 0x98
 8004c74:	f00e f99a 	bl	8012fac <__sprint_r>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	f000 8096 	beq.w	8004daa <_vfprintf_r+0x3a2>
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	b11b      	cbz	r3, 8004c8a <_vfprintf_r+0x282>
 8004c82:	9807      	ldr	r0, [sp, #28]
 8004c84:	4619      	mov	r1, r3
 8004c86:	f00d fb4d 	bl	8012324 <_free_r>
 8004c8a:	9b06      	ldr	r3, [sp, #24]
 8004c8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004c92:	07d4      	lsls	r4, r2, #31
 8004c94:	f140 80ea 	bpl.w	8004e6c <_vfprintf_r+0x464>
 8004c98:	0659      	lsls	r1, r3, #25
 8004c9a:	f101 831f 	bmi.w	80062dc <_vfprintf_r+0x18d4>
 8004c9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ca0:	b053      	add	sp, #332	; 0x14c
 8004ca2:	ecbd 8b02 	vpop	{d8}
 8004ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004caa:	bf00      	nop
 8004cac:	f3af 8000 	nop.w
	...
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	f000 8087 	beq.w	8004dcc <_vfprintf_r+0x3c4>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f88d 50e4 	strb.w	r5, [sp, #228]	; 0xe4
 8004cc4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 8004cce:	9305      	str	r3, [sp, #20]
 8004cd0:	461e      	mov	r6, r3
 8004cd2:	ab39      	add	r3, sp, #228	; 0xe4
 8004cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8004cd6:	4691      	mov	r9, r2
 8004cd8:	920f      	str	r2, [sp, #60]	; 0x3c
 8004cda:	9304      	str	r3, [sp, #16]
 8004cdc:	9b03      	ldr	r3, [sp, #12]
 8004cde:	f013 0302 	ands.w	r3, r3, #2
 8004ce2:	d002      	beq.n	8004cea <_vfprintf_r+0x2e2>
 8004ce4:	9905      	ldr	r1, [sp, #20]
 8004ce6:	3102      	adds	r1, #2
 8004ce8:	9105      	str	r1, [sp, #20]
 8004cea:	9903      	ldr	r1, [sp, #12]
 8004cec:	f011 0484 	ands.w	r4, r1, #132	; 0x84
 8004cf0:	d105      	bne.n	8004cfe <_vfprintf_r+0x2f6>
 8004cf2:	9908      	ldr	r1, [sp, #32]
 8004cf4:	9805      	ldr	r0, [sp, #20]
 8004cf6:	1a0f      	subs	r7, r1, r0
 8004cf8:	2f00      	cmp	r7, #0
 8004cfa:	f300 8389 	bgt.w	8005410 <_vfprintf_r+0xa08>
 8004cfe:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8004d00:	b18a      	cbz	r2, 8004d26 <_vfprintf_r+0x31e>
 8004d02:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8004d04:	f10d 017b 	add.w	r1, sp, #123	; 0x7b
 8004d08:	3201      	adds	r2, #1
 8004d0a:	3701      	adds	r7, #1
 8004d0c:	f8cb 1000 	str.w	r1, [fp]
 8004d10:	2a07      	cmp	r2, #7
 8004d12:	f04f 0101 	mov.w	r1, #1
 8004d16:	9728      	str	r7, [sp, #160]	; 0xa0
 8004d18:	9227      	str	r2, [sp, #156]	; 0x9c
 8004d1a:	f8cb 1004 	str.w	r1, [fp, #4]
 8004d1e:	f300 83dd 	bgt.w	80054dc <_vfprintf_r+0xad4>
 8004d22:	f10b 0b08 	add.w	fp, fp, #8
 8004d26:	b183      	cbz	r3, 8004d4a <_vfprintf_r+0x342>
 8004d28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004d2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	3702      	adds	r7, #2
 8004d30:	f8cb 2000 	str.w	r2, [fp]
 8004d34:	2b07      	cmp	r3, #7
 8004d36:	f04f 0202 	mov.w	r2, #2
 8004d3a:	9728      	str	r7, [sp, #160]	; 0xa0
 8004d3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8004d3e:	f8cb 2004 	str.w	r2, [fp, #4]
 8004d42:	f300 83d9 	bgt.w	80054f8 <_vfprintf_r+0xaf0>
 8004d46:	f10b 0b08 	add.w	fp, fp, #8
 8004d4a:	2c80      	cmp	r4, #128	; 0x80
 8004d4c:	f000 8257 	beq.w	80051fe <_vfprintf_r+0x7f6>
 8004d50:	eba9 0806 	sub.w	r8, r9, r6
 8004d54:	f1b8 0f00 	cmp.w	r8, #0
 8004d58:	f300 829d 	bgt.w	8005296 <_vfprintf_r+0x88e>
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	05dc      	lsls	r4, r3, #23
 8004d60:	f100 81d4 	bmi.w	800510c <_vfprintf_r+0x704>
 8004d64:	9b04      	ldr	r3, [sp, #16]
 8004d66:	f8cb 3000 	str.w	r3, [fp]
 8004d6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004d6c:	f8cb 6004 	str.w	r6, [fp, #4]
 8004d70:	3301      	adds	r3, #1
 8004d72:	19f5      	adds	r5, r6, r7
 8004d74:	2b07      	cmp	r3, #7
 8004d76:	9528      	str	r5, [sp, #160]	; 0xa0
 8004d78:	9327      	str	r3, [sp, #156]	; 0x9c
 8004d7a:	f300 82ee 	bgt.w	800535a <_vfprintf_r+0x952>
 8004d7e:	f10b 0b08 	add.w	fp, fp, #8
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	075e      	lsls	r6, r3, #29
 8004d86:	d505      	bpl.n	8004d94 <_vfprintf_r+0x38c>
 8004d88:	9b08      	ldr	r3, [sp, #32]
 8004d8a:	9a05      	ldr	r2, [sp, #20]
 8004d8c:	1a9c      	subs	r4, r3, r2
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	f300 83be 	bgt.w	8005510 <_vfprintf_r+0xb08>
 8004d94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d98:	9905      	ldr	r1, [sp, #20]
 8004d9a:	428a      	cmp	r2, r1
 8004d9c:	bfac      	ite	ge
 8004d9e:	189b      	addge	r3, r3, r2
 8004da0:	185b      	addlt	r3, r3, r1
 8004da2:	9309      	str	r3, [sp, #36]	; 0x24
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	f47f af62 	bne.w	8004c6e <_vfprintf_r+0x266>
 8004daa:	2300      	movs	r3, #0
 8004dac:	9327      	str	r3, [sp, #156]	; 0x9c
 8004dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db0:	b11b      	cbz	r3, 8004dba <_vfprintf_r+0x3b2>
 8004db2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004db4:	9807      	ldr	r0, [sp, #28]
 8004db6:	f00d fab5 	bl	8012324 <_free_r>
 8004dba:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8004dbe:	f8cd a010 	str.w	sl, [sp, #16]
 8004dc2:	9b04      	ldr	r3, [sp, #16]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f ae64 	bne.w	8004a94 <_vfprintf_r+0x8c>
 8004dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f041 8223 	bne.w	800621a <_vfprintf_r+0x1812>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9327      	str	r3, [sp, #156]	; 0x9c
 8004dd8:	e757      	b.n	8004c8a <_vfprintf_r+0x282>
 8004dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ddc:	3307      	adds	r3, #7
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	ecb3 7b02 	vldmia	r3!, {d7}
 8004de6:	ec57 6b17 	vmov	r6, r7, d7
 8004dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dec:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8004df0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004df2:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 8004df6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8004dfa:	4bb6      	ldr	r3, [pc, #728]	; (80050d4 <_vfprintf_r+0x6cc>)
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e00:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004e04:	f7fc f9de 	bl	80011c4 <__aeabi_dcmpun>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	f040 8537 	bne.w	800587c <_vfprintf_r+0xe74>
 8004e0e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8004e12:	4bb0      	ldr	r3, [pc, #704]	; (80050d4 <_vfprintf_r+0x6cc>)
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e18:	f7fc f91c 	bl	8001054 <__aeabi_dcmple>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f040 852d 	bne.w	800587c <_vfprintf_r+0xe74>
 8004e22:	2200      	movs	r2, #0
 8004e24:	2300      	movs	r3, #0
 8004e26:	4630      	mov	r0, r6
 8004e28:	4639      	mov	r1, r7
 8004e2a:	f7fc f909 	bl	8001040 <__aeabi_dcmplt>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	f040 86fc 	bne.w	8005c2c <_vfprintf_r+0x1224>
 8004e34:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8004e38:	9b03      	ldr	r3, [sp, #12]
 8004e3a:	4ca7      	ldr	r4, [pc, #668]	; (80050d8 <_vfprintf_r+0x6d0>)
 8004e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e40:	9303      	str	r3, [sp, #12]
 8004e42:	4ba6      	ldr	r3, [pc, #664]	; (80050dc <_vfprintf_r+0x6d4>)
 8004e44:	2d47      	cmp	r5, #71	; 0x47
 8004e46:	bfc8      	it	gt
 8004e48:	461c      	movgt	r4, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004e50:	2103      	movs	r1, #3
 8004e52:	9404      	str	r4, [sp, #16]
 8004e54:	930a      	str	r3, [sp, #40]	; 0x28
 8004e56:	9105      	str	r1, [sp, #20]
 8004e58:	460e      	mov	r6, r1
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	f43f af3c 	beq.w	8004cdc <_vfprintf_r+0x2d4>
 8004e64:	9b05      	ldr	r3, [sp, #20]
 8004e66:	3301      	adds	r3, #1
 8004e68:	9305      	str	r3, [sp, #20]
 8004e6a:	e737      	b.n	8004cdc <_vfprintf_r+0x2d4>
 8004e6c:	0598      	lsls	r0, r3, #22
 8004e6e:	f53f af13 	bmi.w	8004c98 <_vfprintf_r+0x290>
 8004e72:	9c06      	ldr	r4, [sp, #24]
 8004e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e76:	f011 f9d9 	bl	801622c <__retarget_lock_release_recursive>
 8004e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7e:	e70b      	b.n	8004c98 <_vfprintf_r+0x290>
 8004e80:	9807      	ldr	r0, [sp, #28]
 8004e82:	f00d f97b 	bl	801217c <__sinit>
 8004e86:	e5d7      	b.n	8004a38 <_vfprintf_r+0x30>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	f89a 5000 	ldrb.w	r5, [sl]
 8004e8e:	f043 0320 	orr.w	r3, r3, #32
 8004e92:	9303      	str	r3, [sp, #12]
 8004e94:	e61d      	b.n	8004ad2 <_vfprintf_r+0xca>
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	f043 0310 	orr.w	r3, r3, #16
 8004e9c:	9303      	str	r3, [sp, #12]
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	069c      	lsls	r4, r3, #26
 8004ea2:	f140 8455 	bpl.w	8005750 <_vfprintf_r+0xd48>
 8004ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ea8:	3307      	adds	r3, #7
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	f852 3b08 	ldr.w	r3, [r2], #8
 8004eb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004eb8:	460a      	mov	r2, r1
 8004eba:	2900      	cmp	r1, #0
 8004ebc:	f2c0 8479 	blt.w	80057b2 <_vfprintf_r+0xdaa>
 8004ec0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004ec4:	f000 82fb 	beq.w	80054be <_vfprintf_r+0xab6>
 8004ec8:	9903      	ldr	r1, [sp, #12]
 8004eca:	f021 0680 	bic.w	r6, r1, #128	; 0x80
 8004ece:	ea53 0102 	orrs.w	r1, r3, r2
 8004ed2:	f040 82f5 	bne.w	80054c0 <_vfprintf_r+0xab8>
 8004ed6:	f1b9 0f00 	cmp.w	r9, #0
 8004eda:	f040 82f6 	bne.w	80054ca <_vfprintf_r+0xac2>
 8004ede:	9603      	str	r6, [sp, #12]
 8004ee0:	ab52      	add	r3, sp, #328	; 0x148
 8004ee2:	464e      	mov	r6, r9
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	e065      	b.n	8004fb4 <_vfprintf_r+0x5ac>
 8004ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eea:	2200      	movs	r2, #0
 8004eec:	f853 1b04 	ldr.w	r1, [r3], #4
 8004ef0:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8004ef4:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
 8004ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004efa:	e6e5      	b.n	8004cc8 <_vfprintf_r+0x2c0>
 8004efc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004efe:	f857 3b04 	ldr.w	r3, [r7], #4
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	2600      	movs	r6, #0
 8004f06:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8578 	beq.w	8005a00 <_vfprintf_r+0xff8>
 8004f10:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004f14:	f000 8633 	beq.w	8005b7e <_vfprintf_r+0x1176>
 8004f18:	9804      	ldr	r0, [sp, #16]
 8004f1a:	464a      	mov	r2, r9
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	f7fb fb2f 	bl	8000580 <memchr>
 8004f22:	900a      	str	r0, [sp, #40]	; 0x28
 8004f24:	2800      	cmp	r0, #0
 8004f26:	f001 815c 	beq.w	80061e2 <_vfprintf_r+0x17da>
 8004f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2c:	9a04      	ldr	r2, [sp, #16]
 8004f2e:	970b      	str	r7, [sp, #44]	; 0x2c
 8004f30:	46b1      	mov	r9, r6
 8004f32:	1a9e      	subs	r6, r3, r2
 8004f34:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8004f38:	e9cd 990c 	strd	r9, r9, [sp, #48]	; 0x30
 8004f3c:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8004f40:	9305      	str	r3, [sp, #20]
 8004f42:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004f46:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004f4a:	e788      	b.n	8004e5e <_vfprintf_r+0x456>
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	f043 0310 	orr.w	r3, r3, #16
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	f013 0220 	ands.w	r2, r3, #32
 8004f5a:	f000 8418 	beq.w	800578e <_vfprintf_r+0xd86>
 8004f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f60:	3307      	adds	r3, #7
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	4619      	mov	r1, r3
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	f851 3b08 	ldr.w	r3, [r1], #8
 8004f6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f70:	9903      	ldr	r1, [sp, #12]
 8004f72:	f421 6680 	bic.w	r6, r1, #1024	; 0x400
 8004f76:	2100      	movs	r1, #0
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004f7e:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8004f82:	f000 8120 	beq.w	80051c6 <_vfprintf_r+0x7be>
 8004f86:	f026 0080 	bic.w	r0, r6, #128	; 0x80
 8004f8a:	9003      	str	r0, [sp, #12]
 8004f8c:	ea53 0002 	orrs.w	r0, r3, r2
 8004f90:	f040 8118 	bne.w	80051c4 <_vfprintf_r+0x7bc>
 8004f94:	f1b9 0f00 	cmp.w	r9, #0
 8004f98:	f040 85d9 	bne.w	8005b4e <_vfprintf_r+0x1146>
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	d19f      	bne.n	8004ee0 <_vfprintf_r+0x4d8>
 8004fa0:	f016 0601 	ands.w	r6, r6, #1
 8004fa4:	bf1b      	ittet	ne
 8004fa6:	2330      	movne	r3, #48	; 0x30
 8004fa8:	f88d 3147 	strbne.w	r3, [sp, #327]	; 0x147
 8004fac:	ab52      	addeq	r3, sp, #328	; 0x148
 8004fae:	f20d 1347 	addwne	r3, sp, #327	; 0x147
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	45b1      	cmp	r9, r6
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	4649      	mov	r1, r9
 8004fbc:	bfb8      	it	lt
 8004fbe:	4631      	movlt	r1, r6
 8004fc0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004fc4:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8004fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8004fca:	9105      	str	r1, [sp, #20]
 8004fcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fce:	e746      	b.n	8004e5e <_vfprintf_r+0x456>
 8004fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd6:	9208      	str	r2, [sp, #32]
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	f280 83fa 	bge.w	80057d2 <_vfprintf_r+0xdca>
 8004fde:	9a08      	ldr	r2, [sp, #32]
 8004fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fe2:	4252      	negs	r2, r2
 8004fe4:	9208      	str	r2, [sp, #32]
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	f89a 5000 	ldrb.w	r5, [sl]
 8004fec:	f043 0304 	orr.w	r3, r3, #4
 8004ff0:	9303      	str	r3, [sp, #12]
 8004ff2:	e56e      	b.n	8004ad2 <_vfprintf_r+0xca>
 8004ff4:	232b      	movs	r3, #43	; 0x2b
 8004ff6:	f89a 5000 	ldrb.w	r5, [sl]
 8004ffa:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004ffe:	e568      	b.n	8004ad2 <_vfprintf_r+0xca>
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	f89a 5000 	ldrb.w	r5, [sl]
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	9303      	str	r3, [sp, #12]
 800500c:	e561      	b.n	8004ad2 <_vfprintf_r+0xca>
 800500e:	4652      	mov	r2, sl
 8005010:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005014:	2d2a      	cmp	r5, #42	; 0x2a
 8005016:	f001 823e 	beq.w	8006496 <_vfprintf_r+0x1a8e>
 800501a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800501e:	2b09      	cmp	r3, #9
 8005020:	4692      	mov	sl, r2
 8005022:	f04f 0900 	mov.w	r9, #0
 8005026:	f63f ad56 	bhi.w	8004ad6 <_vfprintf_r+0xce>
 800502a:	f81a 5b01 	ldrb.w	r5, [sl], #1
 800502e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8005032:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8005036:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800503a:	2b09      	cmp	r3, #9
 800503c:	d9f5      	bls.n	800502a <_vfprintf_r+0x622>
 800503e:	e54a      	b.n	8004ad6 <_vfprintf_r+0xce>
 8005040:	9b03      	ldr	r3, [sp, #12]
 8005042:	f89a 5000 	ldrb.w	r5, [sl]
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	e541      	b.n	8004ad2 <_vfprintf_r+0xca>
 800504e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005052:	f89a 5000 	ldrb.w	r5, [sl]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f47f ad3b 	bne.w	8004ad2 <_vfprintf_r+0xca>
 800505c:	2320      	movs	r3, #32
 800505e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005062:	e536      	b.n	8004ad2 <_vfprintf_r+0xca>
 8005064:	9b03      	ldr	r3, [sp, #12]
 8005066:	f043 0610 	orr.w	r6, r3, #16
 800506a:	f016 0220 	ands.w	r2, r6, #32
 800506e:	f000 837f 	beq.w	8005770 <_vfprintf_r+0xd68>
 8005072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005074:	3307      	adds	r3, #7
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	4619      	mov	r1, r3
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	f851 3b08 	ldr.w	r3, [r1], #8
 8005082:	910b      	str	r1, [sp, #44]	; 0x2c
 8005084:	2101      	movs	r1, #1
 8005086:	e777      	b.n	8004f78 <_vfprintf_r+0x570>
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	f89a 5000 	ldrb.w	r5, [sl]
 800508e:	f043 0308 	orr.w	r3, r3, #8
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	e51d      	b.n	8004ad2 <_vfprintf_r+0xca>
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	069e      	lsls	r6, r3, #26
 800509a:	f140 83d8 	bpl.w	800584e <_vfprintf_r+0xe46>
 800509e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	17d2      	asrs	r2, r2, #31
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ac:	3304      	adds	r3, #4
 80050ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b0:	e685      	b.n	8004dbe <_vfprintf_r+0x3b6>
 80050b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	f043 0602 	orr.w	r6, r3, #2
 80050ba:	f852 3b04 	ldr.w	r3, [r2], #4
 80050be:	920b      	str	r2, [sp, #44]	; 0x2c
 80050c0:	f647 0230 	movw	r2, #30768	; 0x7830
 80050c4:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
 80050c8:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <_vfprintf_r+0x6d8>)
 80050ca:	9214      	str	r2, [sp, #80]	; 0x50
 80050cc:	2102      	movs	r1, #2
 80050ce:	2200      	movs	r2, #0
 80050d0:	2578      	movs	r5, #120	; 0x78
 80050d2:	e751      	b.n	8004f78 <_vfprintf_r+0x570>
 80050d4:	7fefffff 	.word	0x7fefffff
 80050d8:	0801b3ec 	.word	0x0801b3ec
 80050dc:	0801b3f0 	.word	0x0801b3f0
 80050e0:	0801b3fc 	.word	0x0801b3fc
 80050e4:	f89a 5000 	ldrb.w	r5, [sl]
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	2d6c      	cmp	r5, #108	; 0x6c
 80050ec:	f000 8472 	beq.w	80059d4 <_vfprintf_r+0xfcc>
 80050f0:	f043 0310 	orr.w	r3, r3, #16
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	e4ec      	b.n	8004ad2 <_vfprintf_r+0xca>
 80050f8:	f89a 5000 	ldrb.w	r5, [sl]
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	2d68      	cmp	r5, #104	; 0x68
 8005100:	f000 845f 	beq.w	80059c2 <_vfprintf_r+0xfba>
 8005104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	e4e2      	b.n	8004ad2 <_vfprintf_r+0xca>
 800510c:	2d65      	cmp	r5, #101	; 0x65
 800510e:	f340 8130 	ble.w	8005372 <_vfprintf_r+0x96a>
 8005112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	f7fb ff87 	bl	800102c <__aeabi_dcmpeq>
 800511e:	2800      	cmp	r0, #0
 8005120:	f000 8232 	beq.w	8005588 <_vfprintf_r+0xb80>
 8005124:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005126:	4ab8      	ldr	r2, [pc, #736]	; (8005408 <_vfprintf_r+0xa00>)
 8005128:	f8cb 2000 	str.w	r2, [fp]
 800512c:	3301      	adds	r3, #1
 800512e:	3701      	adds	r7, #1
 8005130:	2201      	movs	r2, #1
 8005132:	2b07      	cmp	r3, #7
 8005134:	9728      	str	r7, [sp, #160]	; 0xa0
 8005136:	9327      	str	r3, [sp, #156]	; 0x9c
 8005138:	f8cb 2004 	str.w	r2, [fp, #4]
 800513c:	f300 84fa 	bgt.w	8005b34 <_vfprintf_r+0x112c>
 8005140:	f10b 0b08 	add.w	fp, fp, #8
 8005144:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005148:	4293      	cmp	r3, r2
 800514a:	db04      	blt.n	8005156 <_vfprintf_r+0x74e>
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	07d8      	lsls	r0, r3, #31
 8005150:	d401      	bmi.n	8005156 <_vfprintf_r+0x74e>
 8005152:	463d      	mov	r5, r7
 8005154:	e615      	b.n	8004d82 <_vfprintf_r+0x37a>
 8005156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800515a:	19dd      	adds	r5, r3, r7
 800515c:	e9cb 2300 	strd	r2, r3, [fp]
 8005160:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005162:	9528      	str	r5, [sp, #160]	; 0xa0
 8005164:	3301      	adds	r3, #1
 8005166:	2b07      	cmp	r3, #7
 8005168:	9327      	str	r3, [sp, #156]	; 0x9c
 800516a:	f300 843c 	bgt.w	80059e6 <_vfprintf_r+0xfde>
 800516e:	f10b 0b08 	add.w	fp, fp, #8
 8005172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005174:	1e5c      	subs	r4, r3, #1
 8005176:	2c00      	cmp	r4, #0
 8005178:	f77f ae03 	ble.w	8004d82 <_vfprintf_r+0x37a>
 800517c:	2c10      	cmp	r4, #16
 800517e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005180:	4fa2      	ldr	r7, [pc, #648]	; (800540c <_vfprintf_r+0xa04>)
 8005182:	f340 84e9 	ble.w	8005b58 <_vfprintf_r+0x1150>
 8005186:	e9dd 9806 	ldrd	r9, r8, [sp, #24]
 800518a:	2610      	movs	r6, #16
 800518c:	e005      	b.n	800519a <_vfprintf_r+0x792>
 800518e:	f10b 0b08 	add.w	fp, fp, #8
 8005192:	3c10      	subs	r4, #16
 8005194:	2c10      	cmp	r4, #16
 8005196:	f340 84df 	ble.w	8005b58 <_vfprintf_r+0x1150>
 800519a:	3301      	adds	r3, #1
 800519c:	3510      	adds	r5, #16
 800519e:	2b07      	cmp	r3, #7
 80051a0:	e9cb 7600 	strd	r7, r6, [fp]
 80051a4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80051a8:	ddf1      	ble.n	800518e <_vfprintf_r+0x786>
 80051aa:	aa26      	add	r2, sp, #152	; 0x98
 80051ac:	4649      	mov	r1, r9
 80051ae:	4640      	mov	r0, r8
 80051b0:	f00d fefc 	bl	8012fac <__sprint_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	f47f ad62 	bne.w	8004c7e <_vfprintf_r+0x276>
 80051ba:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 80051be:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80051c2:	e7e6      	b.n	8005192 <_vfprintf_r+0x78a>
 80051c4:	9e03      	ldr	r6, [sp, #12]
 80051c6:	2901      	cmp	r1, #1
 80051c8:	f000 817a 	beq.w	80054c0 <_vfprintf_r+0xab8>
 80051cc:	2902      	cmp	r1, #2
 80051ce:	f000 8163 	beq.w	8005498 <_vfprintf_r+0xa90>
 80051d2:	ac52      	add	r4, sp, #328	; 0x148
 80051d4:	f003 0107 	and.w	r1, r3, #7
 80051d8:	08db      	lsrs	r3, r3, #3
 80051da:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
 80051de:	08d2      	lsrs	r2, r2, #3
 80051e0:	3130      	adds	r1, #48	; 0x30
 80051e2:	ea53 0702 	orrs.w	r7, r3, r2
 80051e6:	4620      	mov	r0, r4
 80051e8:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80051ec:	d1f2      	bne.n	80051d4 <_vfprintf_r+0x7cc>
 80051ee:	07f7      	lsls	r7, r6, #31
 80051f0:	9404      	str	r4, [sp, #16]
 80051f2:	f100 824a 	bmi.w	800568a <_vfprintf_r+0xc82>
 80051f6:	ab52      	add	r3, sp, #328	; 0x148
 80051f8:	9603      	str	r6, [sp, #12]
 80051fa:	1b1e      	subs	r6, r3, r4
 80051fc:	e6da      	b.n	8004fb4 <_vfprintf_r+0x5ac>
 80051fe:	9b08      	ldr	r3, [sp, #32]
 8005200:	9a05      	ldr	r2, [sp, #20]
 8005202:	eba3 0802 	sub.w	r8, r3, r2
 8005206:	f1b8 0f00 	cmp.w	r8, #0
 800520a:	f77f ada1 	ble.w	8004d50 <_vfprintf_r+0x348>
 800520e:	f1b8 0f10 	cmp.w	r8, #16
 8005212:	463a      	mov	r2, r7
 8005214:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005216:	4f7d      	ldr	r7, [pc, #500]	; (800540c <_vfprintf_r+0xa04>)
 8005218:	dd29      	ble.n	800526e <_vfprintf_r+0x866>
 800521a:	9519      	str	r5, [sp, #100]	; 0x64
 800521c:	961c      	str	r6, [sp, #112]	; 0x70
 800521e:	2410      	movs	r4, #16
 8005220:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 8005224:	4619      	mov	r1, r3
 8005226:	e006      	b.n	8005236 <_vfprintf_r+0x82e>
 8005228:	f1a8 0810 	sub.w	r8, r8, #16
 800522c:	f1b8 0f10 	cmp.w	r8, #16
 8005230:	f10b 0b08 	add.w	fp, fp, #8
 8005234:	dd18      	ble.n	8005268 <_vfprintf_r+0x860>
 8005236:	3101      	adds	r1, #1
 8005238:	3210      	adds	r2, #16
 800523a:	2907      	cmp	r1, #7
 800523c:	e9cb 7400 	strd	r7, r4, [fp]
 8005240:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
 8005244:	ddf0      	ble.n	8005228 <_vfprintf_r+0x820>
 8005246:	aa26      	add	r2, sp, #152	; 0x98
 8005248:	4629      	mov	r1, r5
 800524a:	4630      	mov	r0, r6
 800524c:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005250:	f00d feac 	bl	8012fac <__sprint_r>
 8005254:	2800      	cmp	r0, #0
 8005256:	f47f ad12 	bne.w	8004c7e <_vfprintf_r+0x276>
 800525a:	f1a8 0810 	sub.w	r8, r8, #16
 800525e:	f1b8 0f10 	cmp.w	r8, #16
 8005262:	e9dd 1227 	ldrd	r1, r2, [sp, #156]	; 0x9c
 8005266:	dce6      	bgt.n	8005236 <_vfprintf_r+0x82e>
 8005268:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800526a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800526c:	460b      	mov	r3, r1
 800526e:	3301      	adds	r3, #1
 8005270:	f8cb 7000 	str.w	r7, [fp]
 8005274:	2b07      	cmp	r3, #7
 8005276:	eb08 0702 	add.w	r7, r8, r2
 800527a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800527e:	f8cb 8004 	str.w	r8, [fp, #4]
 8005282:	f300 8391 	bgt.w	80059a8 <_vfprintf_r+0xfa0>
 8005286:	eba9 0806 	sub.w	r8, r9, r6
 800528a:	f1b8 0f00 	cmp.w	r8, #0
 800528e:	f10b 0b08 	add.w	fp, fp, #8
 8005292:	f77f ad63 	ble.w	8004d5c <_vfprintf_r+0x354>
 8005296:	f1b8 0f10 	cmp.w	r8, #16
 800529a:	463a      	mov	r2, r7
 800529c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800529e:	4f5b      	ldr	r7, [pc, #364]	; (800540c <_vfprintf_r+0xa04>)
 80052a0:	dd2e      	ble.n	8005300 <_vfprintf_r+0x8f8>
 80052a2:	4659      	mov	r1, fp
 80052a4:	9c07      	ldr	r4, [sp, #28]
 80052a6:	46c3      	mov	fp, r8
 80052a8:	f04f 0910 	mov.w	r9, #16
 80052ac:	46b8      	mov	r8, r7
 80052ae:	4637      	mov	r7, r6
 80052b0:	462e      	mov	r6, r5
 80052b2:	9d06      	ldr	r5, [sp, #24]
 80052b4:	e006      	b.n	80052c4 <_vfprintf_r+0x8bc>
 80052b6:	f1ab 0b10 	sub.w	fp, fp, #16
 80052ba:	f1bb 0f10 	cmp.w	fp, #16
 80052be:	f101 0108 	add.w	r1, r1, #8
 80052c2:	dd18      	ble.n	80052f6 <_vfprintf_r+0x8ee>
 80052c4:	3301      	adds	r3, #1
 80052c6:	4851      	ldr	r0, [pc, #324]	; (800540c <_vfprintf_r+0xa04>)
 80052c8:	3210      	adds	r2, #16
 80052ca:	2b07      	cmp	r3, #7
 80052cc:	e9c1 0900 	strd	r0, r9, [r1]
 80052d0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80052d4:	ddef      	ble.n	80052b6 <_vfprintf_r+0x8ae>
 80052d6:	aa26      	add	r2, sp, #152	; 0x98
 80052d8:	4629      	mov	r1, r5
 80052da:	4620      	mov	r0, r4
 80052dc:	f00d fe66 	bl	8012fac <__sprint_r>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	f47f accc 	bne.w	8004c7e <_vfprintf_r+0x276>
 80052e6:	f1ab 0b10 	sub.w	fp, fp, #16
 80052ea:	f1bb 0f10 	cmp.w	fp, #16
 80052ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80052f2:	a929      	add	r1, sp, #164	; 0xa4
 80052f4:	dce6      	bgt.n	80052c4 <_vfprintf_r+0x8bc>
 80052f6:	4635      	mov	r5, r6
 80052f8:	463e      	mov	r6, r7
 80052fa:	4647      	mov	r7, r8
 80052fc:	46d8      	mov	r8, fp
 80052fe:	468b      	mov	fp, r1
 8005300:	3301      	adds	r3, #1
 8005302:	f8cb 7000 	str.w	r7, [fp]
 8005306:	2b07      	cmp	r3, #7
 8005308:	eb08 0702 	add.w	r7, r8, r2
 800530c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8005310:	f8cb 8004 	str.w	r8, [fp, #4]
 8005314:	f300 820f 	bgt.w	8005736 <_vfprintf_r+0xd2e>
 8005318:	f10b 0b08 	add.w	fp, fp, #8
 800531c:	e51e      	b.n	8004d5c <_vfprintf_r+0x354>
 800531e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005320:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005322:	1959      	adds	r1, r3, r5
 8005324:	e9cb 0300 	strd	r0, r3, [fp]
 8005328:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800532a:	9128      	str	r1, [sp, #160]	; 0xa0
 800532c:	3301      	adds	r3, #1
 800532e:	2b07      	cmp	r3, #7
 8005330:	9327      	str	r3, [sp, #156]	; 0x9c
 8005332:	f300 85e0 	bgt.w	8005ef6 <_vfprintf_r+0x14ee>
 8005336:	f10b 0b08 	add.w	fp, fp, #8
 800533a:	2a00      	cmp	r2, #0
 800533c:	f2c0 879d 	blt.w	800627a <_vfprintf_r+0x1872>
 8005340:	9a04      	ldr	r2, [sp, #16]
 8005342:	f8cb 2000 	str.w	r2, [fp]
 8005346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005348:	f8cb 2004 	str.w	r2, [fp, #4]
 800534c:	3301      	adds	r3, #1
 800534e:	1855      	adds	r5, r2, r1
 8005350:	2b07      	cmp	r3, #7
 8005352:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005356:	f77f ad12 	ble.w	8004d7e <_vfprintf_r+0x376>
 800535a:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 800535e:	aa26      	add	r2, sp, #152	; 0x98
 8005360:	f00d fe24 	bl	8012fac <__sprint_r>
 8005364:	2800      	cmp	r0, #0
 8005366:	f47f ac8a 	bne.w	8004c7e <_vfprintf_r+0x276>
 800536a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800536c:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005370:	e507      	b.n	8004d82 <_vfprintf_r+0x37a>
 8005372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005374:	2b01      	cmp	r3, #1
 8005376:	f10b 0608 	add.w	r6, fp, #8
 800537a:	f340 8193 	ble.w	80056a4 <_vfprintf_r+0xc9c>
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	f8cb 3000 	str.w	r3, [fp]
 8005384:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005386:	3301      	adds	r3, #1
 8005388:	3701      	adds	r7, #1
 800538a:	2201      	movs	r2, #1
 800538c:	2b07      	cmp	r3, #7
 800538e:	9728      	str	r7, [sp, #160]	; 0xa0
 8005390:	9327      	str	r3, [sp, #156]	; 0x9c
 8005392:	f8cb 2004 	str.w	r2, [fp, #4]
 8005396:	f300 8353 	bgt.w	8005a40 <_vfprintf_r+0x1038>
 800539a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800539c:	f103 0801 	add.w	r8, r3, #1
 80053a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053a2:	19d5      	adds	r5, r2, r7
 80053a4:	f1b8 0f07 	cmp.w	r8, #7
 80053a8:	e9c6 3200 	strd	r3, r2, [r6]
 80053ac:	e9cd 8527 	strd	r8, r5, [sp, #156]	; 0x9c
 80053b0:	f300 8352 	bgt.w	8005a58 <_vfprintf_r+0x1050>
 80053b4:	3608      	adds	r6, #8
 80053b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053bc:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	f7fb fe32 	bl	800102c <__aeabi_dcmpeq>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f040 818c 	bne.w	80056e6 <_vfprintf_r+0xcde>
 80053ce:	9c04      	ldr	r4, [sp, #16]
 80053d0:	f8c6 9004 	str.w	r9, [r6, #4]
 80053d4:	f108 0801 	add.w	r8, r8, #1
 80053d8:	3401      	adds	r4, #1
 80053da:	444d      	add	r5, r9
 80053dc:	f1b8 0f07 	cmp.w	r8, #7
 80053e0:	e9cd 8527 	strd	r8, r5, [sp, #156]	; 0x9c
 80053e4:	6034      	str	r4, [r6, #0]
 80053e6:	f300 8172 	bgt.w	80056ce <_vfprintf_r+0xcc6>
 80053ea:	3608      	adds	r6, #8
 80053ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053ee:	6072      	str	r2, [r6, #4]
 80053f0:	f108 0301 	add.w	r3, r8, #1
 80053f4:	4415      	add	r5, r2
 80053f6:	2b07      	cmp	r3, #7
 80053f8:	aa22      	add	r2, sp, #136	; 0x88
 80053fa:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80053fe:	6032      	str	r2, [r6, #0]
 8005400:	dcab      	bgt.n	800535a <_vfprintf_r+0x952>
 8005402:	f106 0b08 	add.w	fp, r6, #8
 8005406:	e4bc      	b.n	8004d82 <_vfprintf_r+0x37a>
 8005408:	0801b42c 	.word	0x0801b42c
 800540c:	0801b450 	.word	0x0801b450
 8005410:	2f10      	cmp	r7, #16
 8005412:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8005416:	f8df 8460 	ldr.w	r8, [pc, #1120]	; 8005878 <_vfprintf_r+0xe70>
 800541a:	dd2d      	ble.n	8005478 <_vfprintf_r+0xa70>
 800541c:	9319      	str	r3, [sp, #100]	; 0x64
 800541e:	4643      	mov	r3, r8
 8005420:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 8005424:	46b0      	mov	r8, r6
 8005426:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800542a:	461e      	mov	r6, r3
 800542c:	e004      	b.n	8005438 <_vfprintf_r+0xa30>
 800542e:	3f10      	subs	r7, #16
 8005430:	2f10      	cmp	r7, #16
 8005432:	f10b 0b08 	add.w	fp, fp, #8
 8005436:	dd19      	ble.n	800546c <_vfprintf_r+0xa64>
 8005438:	3201      	adds	r2, #1
 800543a:	3110      	adds	r1, #16
 800543c:	2310      	movs	r3, #16
 800543e:	2a07      	cmp	r2, #7
 8005440:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8005444:	f8cb 6000 	str.w	r6, [fp]
 8005448:	f8cb 3004 	str.w	r3, [fp, #4]
 800544c:	ddef      	ble.n	800542e <_vfprintf_r+0xa26>
 800544e:	aa26      	add	r2, sp, #152	; 0x98
 8005450:	4629      	mov	r1, r5
 8005452:	4620      	mov	r0, r4
 8005454:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005458:	f00d fda8 	bl	8012fac <__sprint_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	f47f ac0e 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005462:	3f10      	subs	r7, #16
 8005464:	2f10      	cmp	r7, #16
 8005466:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800546a:	dce5      	bgt.n	8005438 <_vfprintf_r+0xa30>
 800546c:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8005470:	4630      	mov	r0, r6
 8005472:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005474:	4646      	mov	r6, r8
 8005476:	4680      	mov	r8, r0
 8005478:	3201      	adds	r2, #1
 800547a:	4439      	add	r1, r7
 800547c:	2a07      	cmp	r2, #7
 800547e:	f8cb 8000 	str.w	r8, [fp]
 8005482:	f8cb 7004 	str.w	r7, [fp, #4]
 8005486:	9128      	str	r1, [sp, #160]	; 0xa0
 8005488:	9227      	str	r2, [sp, #156]	; 0x9c
 800548a:	f300 8343 	bgt.w	8005b14 <_vfprintf_r+0x110c>
 800548e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8005492:	f10b 0b08 	add.w	fp, fp, #8
 8005496:	e432      	b.n	8004cfe <_vfprintf_r+0x2f6>
 8005498:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800549a:	a952      	add	r1, sp, #328	; 0x148
 800549c:	f003 000f 	and.w	r0, r3, #15
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	5c20      	ldrb	r0, [r4, r0]
 80054a4:	f801 0d01 	strb.w	r0, [r1, #-1]!
 80054a8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80054ac:	0912      	lsrs	r2, r2, #4
 80054ae:	ea53 0002 	orrs.w	r0, r3, r2
 80054b2:	d1f3      	bne.n	800549c <_vfprintf_r+0xa94>
 80054b4:	ab52      	add	r3, sp, #328	; 0x148
 80054b6:	e9cd 6103 	strd	r6, r1, [sp, #12]
 80054ba:	1a5e      	subs	r6, r3, r1
 80054bc:	e57a      	b.n	8004fb4 <_vfprintf_r+0x5ac>
 80054be:	9e03      	ldr	r6, [sp, #12]
 80054c0:	2b0a      	cmp	r3, #10
 80054c2:	f172 0100 	sbcs.w	r1, r2, #0
 80054c6:	f080 82d3 	bcs.w	8005a70 <_vfprintf_r+0x1068>
 80054ca:	3330      	adds	r3, #48	; 0x30
 80054cc:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 80054d0:	f20d 1347 	addw	r3, sp, #327	; 0x147
 80054d4:	9603      	str	r6, [sp, #12]
 80054d6:	9304      	str	r3, [sp, #16]
 80054d8:	2601      	movs	r6, #1
 80054da:	e56b      	b.n	8004fb4 <_vfprintf_r+0x5ac>
 80054dc:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80054e0:	aa26      	add	r2, sp, #152	; 0x98
 80054e2:	9319      	str	r3, [sp, #100]	; 0x64
 80054e4:	f00d fd62 	bl	8012fac <__sprint_r>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f47f abc8 	bne.w	8004c7e <_vfprintf_r+0x276>
 80054ee:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80054f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054f2:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80054f6:	e416      	b.n	8004d26 <_vfprintf_r+0x31e>
 80054f8:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80054fc:	aa26      	add	r2, sp, #152	; 0x98
 80054fe:	f00d fd55 	bl	8012fac <__sprint_r>
 8005502:	2800      	cmp	r0, #0
 8005504:	f47f abbb 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005508:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800550a:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 800550e:	e41c      	b.n	8004d4a <_vfprintf_r+0x342>
 8005510:	2c10      	cmp	r4, #16
 8005512:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005514:	f8df 8360 	ldr.w	r8, [pc, #864]	; 8005878 <_vfprintf_r+0xe70>
 8005518:	dd23      	ble.n	8005562 <_vfprintf_r+0xb5a>
 800551a:	4647      	mov	r7, r8
 800551c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005520:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005524:	2610      	movs	r6, #16
 8005526:	e004      	b.n	8005532 <_vfprintf_r+0xb2a>
 8005528:	3c10      	subs	r4, #16
 800552a:	2c10      	cmp	r4, #16
 800552c:	f10b 0b08 	add.w	fp, fp, #8
 8005530:	dd16      	ble.n	8005560 <_vfprintf_r+0xb58>
 8005532:	3301      	adds	r3, #1
 8005534:	3510      	adds	r5, #16
 8005536:	2b07      	cmp	r3, #7
 8005538:	e9cb 7600 	strd	r7, r6, [fp]
 800553c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005540:	ddf2      	ble.n	8005528 <_vfprintf_r+0xb20>
 8005542:	aa26      	add	r2, sp, #152	; 0x98
 8005544:	4649      	mov	r1, r9
 8005546:	4640      	mov	r0, r8
 8005548:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 800554c:	f00d fd2e 	bl	8012fac <__sprint_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	f47f ab94 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005556:	3c10      	subs	r4, #16
 8005558:	2c10      	cmp	r4, #16
 800555a:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 800555e:	dce8      	bgt.n	8005532 <_vfprintf_r+0xb2a>
 8005560:	46b8      	mov	r8, r7
 8005562:	3301      	adds	r3, #1
 8005564:	4425      	add	r5, r4
 8005566:	2b07      	cmp	r3, #7
 8005568:	e9cb 8400 	strd	r8, r4, [fp]
 800556c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005570:	f77f ac10 	ble.w	8004d94 <_vfprintf_r+0x38c>
 8005574:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8005578:	aa26      	add	r2, sp, #152	; 0x98
 800557a:	f00d fd17 	bl	8012fac <__sprint_r>
 800557e:	2800      	cmp	r0, #0
 8005580:	f47f ab7d 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005584:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005586:	e405      	b.n	8004d94 <_vfprintf_r+0x38c>
 8005588:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800558a:	2a00      	cmp	r2, #0
 800558c:	f340 8126 	ble.w	80057dc <_vfprintf_r+0xdd4>
 8005590:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005594:	9a04      	ldr	r2, [sp, #16]
 8005596:	429e      	cmp	r6, r3
 8005598:	bfa8      	it	ge
 800559a:	461e      	movge	r6, r3
 800559c:	2e00      	cmp	r6, #0
 800559e:	4413      	add	r3, r2
 80055a0:	9319      	str	r3, [sp, #100]	; 0x64
 80055a2:	dd0b      	ble.n	80055bc <_vfprintf_r+0xbb4>
 80055a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80055a6:	3301      	adds	r3, #1
 80055a8:	4437      	add	r7, r6
 80055aa:	2b07      	cmp	r3, #7
 80055ac:	e9cb 2600 	strd	r2, r6, [fp]
 80055b0:	9728      	str	r7, [sp, #160]	; 0xa0
 80055b2:	9327      	str	r3, [sp, #156]	; 0x9c
 80055b4:	f300 85e8 	bgt.w	8006188 <_vfprintf_r+0x1780>
 80055b8:	f10b 0b08 	add.w	fp, fp, #8
 80055bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055be:	2e00      	cmp	r6, #0
 80055c0:	bfa8      	it	ge
 80055c2:	1bad      	subge	r5, r5, r6
 80055c4:	2d00      	cmp	r5, #0
 80055c6:	f300 82f0 	bgt.w	8005baa <_vfprintf_r+0x11a2>
 80055ca:	9b04      	ldr	r3, [sp, #16]
 80055cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055ce:	4413      	add	r3, r2
 80055d0:	4699      	mov	r9, r3
 80055d2:	9b03      	ldr	r3, [sp, #12]
 80055d4:	0559      	lsls	r1, r3, #21
 80055d6:	f100 84f3 	bmi.w	8005fc0 <_vfprintf_r+0x15b8>
 80055da:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80055dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055de:	429c      	cmp	r4, r3
 80055e0:	db03      	blt.n	80055ea <_vfprintf_r+0xbe2>
 80055e2:	9a03      	ldr	r2, [sp, #12]
 80055e4:	07d2      	lsls	r2, r2, #31
 80055e6:	f140 83d7 	bpl.w	8005d98 <_vfprintf_r+0x1390>
 80055ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055ee:	19dd      	adds	r5, r3, r7
 80055f0:	e9cb 2300 	strd	r2, r3, [fp]
 80055f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80055f6:	9528      	str	r5, [sp, #160]	; 0xa0
 80055f8:	3301      	adds	r3, #1
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80055fe:	f300 85e2 	bgt.w	80061c6 <_vfprintf_r+0x17be>
 8005602:	f10b 0b08 	add.w	fp, fp, #8
 8005606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005608:	1b1c      	subs	r4, r3, r4
 800560a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800560c:	eba3 0609 	sub.w	r6, r3, r9
 8005610:	42a6      	cmp	r6, r4
 8005612:	bfa8      	it	ge
 8005614:	4626      	movge	r6, r4
 8005616:	2e00      	cmp	r6, #0
 8005618:	dd0d      	ble.n	8005636 <_vfprintf_r+0xc2e>
 800561a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800561c:	f8cb 9000 	str.w	r9, [fp]
 8005620:	3301      	adds	r3, #1
 8005622:	4435      	add	r5, r6
 8005624:	2b07      	cmp	r3, #7
 8005626:	f8cb 6004 	str.w	r6, [fp, #4]
 800562a:	9528      	str	r5, [sp, #160]	; 0xa0
 800562c:	9327      	str	r3, [sp, #156]	; 0x9c
 800562e:	f300 85e4 	bgt.w	80061fa <_vfprintf_r+0x17f2>
 8005632:	f10b 0b08 	add.w	fp, fp, #8
 8005636:	2e00      	cmp	r6, #0
 8005638:	bfa8      	it	ge
 800563a:	1ba4      	subge	r4, r4, r6
 800563c:	2c00      	cmp	r4, #0
 800563e:	f77f aba0 	ble.w	8004d82 <_vfprintf_r+0x37a>
 8005642:	2c10      	cmp	r4, #16
 8005644:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005646:	4f8a      	ldr	r7, [pc, #552]	; (8005870 <_vfprintf_r+0xe68>)
 8005648:	f340 8286 	ble.w	8005b58 <_vfprintf_r+0x1150>
 800564c:	e9dd 9806 	ldrd	r9, r8, [sp, #24]
 8005650:	2610      	movs	r6, #16
 8005652:	e005      	b.n	8005660 <_vfprintf_r+0xc58>
 8005654:	f10b 0b08 	add.w	fp, fp, #8
 8005658:	3c10      	subs	r4, #16
 800565a:	2c10      	cmp	r4, #16
 800565c:	f340 827c 	ble.w	8005b58 <_vfprintf_r+0x1150>
 8005660:	3301      	adds	r3, #1
 8005662:	3510      	adds	r5, #16
 8005664:	2b07      	cmp	r3, #7
 8005666:	e9cb 7600 	strd	r7, r6, [fp]
 800566a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800566e:	ddf1      	ble.n	8005654 <_vfprintf_r+0xc4c>
 8005670:	aa26      	add	r2, sp, #152	; 0x98
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	f00d fc99 	bl	8012fac <__sprint_r>
 800567a:	2800      	cmp	r0, #0
 800567c:	f47f aaff 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005680:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8005684:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005688:	e7e6      	b.n	8005658 <_vfprintf_r+0xc50>
 800568a:	2930      	cmp	r1, #48	; 0x30
 800568c:	f000 8186 	beq.w	800599c <_vfprintf_r+0xf94>
 8005690:	9a04      	ldr	r2, [sp, #16]
 8005692:	9603      	str	r6, [sp, #12]
 8005694:	2330      	movs	r3, #48	; 0x30
 8005696:	3802      	subs	r0, #2
 8005698:	f802 3c01 	strb.w	r3, [r2, #-1]
 800569c:	ab52      	add	r3, sp, #328	; 0x148
 800569e:	1a1e      	subs	r6, r3, r0
 80056a0:	9004      	str	r0, [sp, #16]
 80056a2:	e487      	b.n	8004fb4 <_vfprintf_r+0x5ac>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	07db      	lsls	r3, r3, #31
 80056a8:	f53f ae69 	bmi.w	800537e <_vfprintf_r+0x976>
 80056ac:	9b04      	ldr	r3, [sp, #16]
 80056ae:	f8cb 3000 	str.w	r3, [fp]
 80056b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80056b4:	f103 0801 	add.w	r8, r3, #1
 80056b8:	1c7d      	adds	r5, r7, #1
 80056ba:	2301      	movs	r3, #1
 80056bc:	f1b8 0f07 	cmp.w	r8, #7
 80056c0:	9528      	str	r5, [sp, #160]	; 0xa0
 80056c2:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
 80056c6:	f8cb 3004 	str.w	r3, [fp, #4]
 80056ca:	f77f ae8f 	ble.w	80053ec <_vfprintf_r+0x9e4>
 80056ce:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80056d2:	aa26      	add	r2, sp, #152	; 0x98
 80056d4:	f00d fc6a 	bl	8012fac <__sprint_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	f47f aad0 	bne.w	8004c7e <_vfprintf_r+0x276>
 80056de:	e9dd 8527 	ldrd	r8, r5, [sp, #156]	; 0x9c
 80056e2:	ae29      	add	r6, sp, #164	; 0xa4
 80056e4:	e682      	b.n	80053ec <_vfprintf_r+0x9e4>
 80056e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	f77f ae7f 	ble.w	80053ec <_vfprintf_r+0x9e4>
 80056ee:	2b11      	cmp	r3, #17
 80056f0:	4f5f      	ldr	r7, [pc, #380]	; (8005870 <_vfprintf_r+0xe68>)
 80056f2:	f340 824d 	ble.w	8005b90 <_vfprintf_r+0x1188>
 80056f6:	4643      	mov	r3, r8
 80056f8:	2410      	movs	r4, #16
 80056fa:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 80056fe:	e006      	b.n	800570e <_vfprintf_r+0xd06>
 8005700:	3608      	adds	r6, #8
 8005702:	f1a9 0910 	sub.w	r9, r9, #16
 8005706:	f1b9 0f10 	cmp.w	r9, #16
 800570a:	f340 8240 	ble.w	8005b8e <_vfprintf_r+0x1186>
 800570e:	3301      	adds	r3, #1
 8005710:	3510      	adds	r5, #16
 8005712:	2b07      	cmp	r3, #7
 8005714:	e9c6 7400 	strd	r7, r4, [r6]
 8005718:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800571c:	ddf0      	ble.n	8005700 <_vfprintf_r+0xcf8>
 800571e:	aa26      	add	r2, sp, #152	; 0x98
 8005720:	4659      	mov	r1, fp
 8005722:	4640      	mov	r0, r8
 8005724:	f00d fc42 	bl	8012fac <__sprint_r>
 8005728:	2800      	cmp	r0, #0
 800572a:	f47f aaa8 	bne.w	8004c7e <_vfprintf_r+0x276>
 800572e:	e9dd 3527 	ldrd	r3, r5, [sp, #156]	; 0x9c
 8005732:	ae29      	add	r6, sp, #164	; 0xa4
 8005734:	e7e5      	b.n	8005702 <_vfprintf_r+0xcfa>
 8005736:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 800573a:	aa26      	add	r2, sp, #152	; 0x98
 800573c:	f00d fc36 	bl	8012fac <__sprint_r>
 8005740:	2800      	cmp	r0, #0
 8005742:	f47f aa9c 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005746:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8005748:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 800574c:	f7ff bb06 	b.w	8004d5c <_vfprintf_r+0x354>
 8005750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005752:	f852 3b04 	ldr.w	r3, [r2], #4
 8005756:	920b      	str	r2, [sp, #44]	; 0x2c
 8005758:	9a03      	ldr	r2, [sp, #12]
 800575a:	06d0      	lsls	r0, r2, #27
 800575c:	d473      	bmi.n	8005846 <_vfprintf_r+0xe3e>
 800575e:	9a03      	ldr	r2, [sp, #12]
 8005760:	0651      	lsls	r1, r2, #25
 8005762:	d56c      	bpl.n	800583e <_vfprintf_r+0xe36>
 8005764:	f343 32c0 	sbfx	r2, r3, #15, #1
 8005768:	4611      	mov	r1, r2
 800576a:	b21b      	sxth	r3, r3
 800576c:	f7ff bba5 	b.w	8004eba <_vfprintf_r+0x4b2>
 8005770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005772:	f851 3b04 	ldr.w	r3, [r1], #4
 8005776:	910b      	str	r1, [sp, #44]	; 0x2c
 8005778:	f016 0110 	ands.w	r1, r6, #16
 800577c:	d15c      	bne.n	8005838 <_vfprintf_r+0xe30>
 800577e:	f016 0040 	ands.w	r0, r6, #64	; 0x40
 8005782:	d054      	beq.n	800582e <_vfprintf_r+0xe26>
 8005784:	460a      	mov	r2, r1
 8005786:	b29b      	uxth	r3, r3
 8005788:	2101      	movs	r1, #1
 800578a:	f7ff bbf5 	b.w	8004f78 <_vfprintf_r+0x570>
 800578e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005790:	f851 3b04 	ldr.w	r3, [r1], #4
 8005794:	910b      	str	r1, [sp, #44]	; 0x2c
 8005796:	9903      	ldr	r1, [sp, #12]
 8005798:	f011 0110 	ands.w	r1, r1, #16
 800579c:	f47f abe8 	bne.w	8004f70 <_vfprintf_r+0x568>
 80057a0:	9a03      	ldr	r2, [sp, #12]
 80057a2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
 80057a6:	f000 822a 	beq.w	8005bfe <_vfprintf_r+0x11f6>
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	460a      	mov	r2, r1
 80057ae:	f7ff bbdf 	b.w	8004f70 <_vfprintf_r+0x568>
 80057b2:	425b      	negs	r3, r3
 80057b4:	9e03      	ldr	r6, [sp, #12]
 80057b6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 80057ba:	202d      	movs	r0, #45	; 0x2d
 80057bc:	2101      	movs	r1, #1
 80057be:	f7ff bbdc 	b.w	8004f7a <_vfprintf_r+0x572>
 80057c2:	9d06      	ldr	r5, [sp, #24]
 80057c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c6:	f010 fd2b 	bl	8016220 <__retarget_lock_acquire_recursive>
 80057ca:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80057ce:	f7ff b93c 	b.w	8004a4a <_vfprintf_r+0x42>
 80057d2:	f89a 5000 	ldrb.w	r5, [sl]
 80057d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057d8:	f7ff b97b 	b.w	8004ad2 <_vfprintf_r+0xca>
 80057dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80057de:	4925      	ldr	r1, [pc, #148]	; (8005874 <_vfprintf_r+0xe6c>)
 80057e0:	f8cb 1000 	str.w	r1, [fp]
 80057e4:	3301      	adds	r3, #1
 80057e6:	1c7d      	adds	r5, r7, #1
 80057e8:	2101      	movs	r1, #1
 80057ea:	2b07      	cmp	r3, #7
 80057ec:	9528      	str	r5, [sp, #160]	; 0xa0
 80057ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80057f0:	f8cb 1004 	str.w	r1, [fp, #4]
 80057f4:	f300 84ac 	bgt.w	8006150 <_vfprintf_r+0x1748>
 80057f8:	f10b 0b08 	add.w	fp, fp, #8
 80057fc:	2a00      	cmp	r2, #0
 80057fe:	f47f ad8e 	bne.w	800531e <_vfprintf_r+0x916>
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	4313      	orrs	r3, r2
 800580c:	f43f aab9 	beq.w	8004d82 <_vfprintf_r+0x37a>
 8005810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005814:	1959      	adds	r1, r3, r5
 8005816:	e9cb 2300 	strd	r2, r3, [fp]
 800581a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800581c:	9128      	str	r1, [sp, #160]	; 0xa0
 800581e:	3301      	adds	r3, #1
 8005820:	2b07      	cmp	r3, #7
 8005822:	9327      	str	r3, [sp, #156]	; 0x9c
 8005824:	f300 8367 	bgt.w	8005ef6 <_vfprintf_r+0x14ee>
 8005828:	f10b 0b08 	add.w	fp, fp, #8
 800582c:	e588      	b.n	8005340 <_vfprintf_r+0x938>
 800582e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
 8005832:	bf1c      	itt	ne
 8005834:	b2db      	uxtbne	r3, r3
 8005836:	4602      	movne	r2, r0
 8005838:	2101      	movs	r1, #1
 800583a:	f7ff bb9d 	b.w	8004f78 <_vfprintf_r+0x570>
 800583e:	9a03      	ldr	r2, [sp, #12]
 8005840:	0592      	lsls	r2, r2, #22
 8005842:	f100 82b8 	bmi.w	8005db6 <_vfprintf_r+0x13ae>
 8005846:	17da      	asrs	r2, r3, #31
 8005848:	4611      	mov	r1, r2
 800584a:	f7ff bb36 	b.w	8004eba <_vfprintf_r+0x4b2>
 800584e:	9b03      	ldr	r3, [sp, #12]
 8005850:	06dd      	lsls	r5, r3, #27
 8005852:	f100 818e 	bmi.w	8005b72 <_vfprintf_r+0x116a>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	065c      	lsls	r4, r3, #25
 800585a:	f100 82a6 	bmi.w	8005daa <_vfprintf_r+0x13a2>
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	0598      	lsls	r0, r3, #22
 8005862:	f140 8186 	bpl.w	8005b72 <_vfprintf_r+0x116a>
 8005866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e41c      	b.n	80050aa <_vfprintf_r+0x6a2>
 8005870:	0801b450 	.word	0x0801b450
 8005874:	0801b42c 	.word	0x0801b42c
 8005878:	0801b460 	.word	0x0801b460
 800587c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	f7fb fc9e 	bl	80011c4 <__aeabi_dcmpun>
 8005888:	2800      	cmp	r0, #0
 800588a:	f040 8595 	bne.w	80063b8 <_vfprintf_r+0x19b0>
 800588e:	2d61      	cmp	r5, #97	; 0x61
 8005890:	f000 8497 	beq.w	80061c2 <_vfprintf_r+0x17ba>
 8005894:	2d41      	cmp	r5, #65	; 0x41
 8005896:	f000 8294 	beq.w	8005dc2 <_vfprintf_r+0x13ba>
 800589a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800589e:	f000 857c 	beq.w	800639a <_vfprintf_r+0x1992>
 80058a2:	f025 0320 	bic.w	r3, r5, #32
 80058a6:	2b47      	cmp	r3, #71	; 0x47
 80058a8:	d104      	bne.n	80058b4 <_vfprintf_r+0xeac>
 80058aa:	f1b9 0f00 	cmp.w	r9, #0
 80058ae:	bf08      	it	eq
 80058b0:	f04f 0901 	moveq.w	r9, #1
 80058b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058b8:	9c03      	ldr	r4, [sp, #12]
 80058ba:	2900      	cmp	r1, #0
 80058bc:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 80058c0:	9205      	str	r2, [sp, #20]
 80058c2:	f2c0 8453 	blt.w	800616c <_vfprintf_r+0x1764>
 80058c6:	2300      	movs	r3, #0
 80058c8:	ec41 0b18 	vmov	d8, r0, r1
 80058cc:	9319      	str	r3, [sp, #100]	; 0x64
 80058ce:	930a      	str	r3, [sp, #40]	; 0x28
 80058d0:	f1a5 0341 	sub.w	r3, r5, #65	; 0x41
 80058d4:	2b25      	cmp	r3, #37	; 0x25
 80058d6:	f200 81c6 	bhi.w	8005c66 <_vfprintf_r+0x125e>
 80058da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058de:	0334      	.short	0x0334
 80058e0:	01c401c4 	.word	0x01c401c4
 80058e4:	032d01c4 	.word	0x032d01c4
 80058e8:	01c40331 	.word	0x01c40331
 80058ec:	01c401c4 	.word	0x01c401c4
 80058f0:	01c401c4 	.word	0x01c401c4
 80058f4:	01c401c4 	.word	0x01c401c4
 80058f8:	01c401c4 	.word	0x01c401c4
 80058fc:	01c401c4 	.word	0x01c401c4
 8005900:	01c401c4 	.word	0x01c401c4
 8005904:	01c401c4 	.word	0x01c401c4
 8005908:	01c401c4 	.word	0x01c401c4
 800590c:	01c401c4 	.word	0x01c401c4
 8005910:	01c401c4 	.word	0x01c401c4
 8005914:	01c401c4 	.word	0x01c401c4
 8005918:	01c401c4 	.word	0x01c401c4
 800591c:	01c401c4 	.word	0x01c401c4
 8005920:	01c401c4 	.word	0x01c401c4
 8005924:	032d01c4 	.word	0x032d01c4
 8005928:	0331      	.short	0x0331
 800592a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800592c:	f89a 5000 	ldrb.w	r5, [sl]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f43f a8ce 	beq.w	8004ad2 <_vfprintf_r+0xca>
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f43f a8ca 	beq.w	8004ad2 <_vfprintf_r+0xca>
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005944:	9303      	str	r3, [sp, #12]
 8005946:	f7ff b8c4 	b.w	8004ad2 <_vfprintf_r+0xca>
 800594a:	4bbb      	ldr	r3, [pc, #748]	; (8005c38 <_vfprintf_r+0x1230>)
 800594c:	9314      	str	r3, [sp, #80]	; 0x50
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	f013 0220 	ands.w	r2, r3, #32
 8005954:	d064      	beq.n	8005a20 <_vfprintf_r+0x1018>
 8005956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005958:	3307      	adds	r3, #7
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	4619      	mov	r1, r3
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	f851 3b08 	ldr.w	r3, [r1], #8
 8005966:	910b      	str	r1, [sp, #44]	; 0x2c
 8005968:	9803      	ldr	r0, [sp, #12]
 800596a:	07c1      	lsls	r1, r0, #31
 800596c:	d50a      	bpl.n	8005984 <_vfprintf_r+0xf7c>
 800596e:	ea53 0102 	orrs.w	r1, r3, r2
 8005972:	d007      	beq.n	8005984 <_vfprintf_r+0xf7c>
 8005974:	f040 0102 	orr.w	r1, r0, #2
 8005978:	9103      	str	r1, [sp, #12]
 800597a:	2130      	movs	r1, #48	; 0x30
 800597c:	f88d 507d 	strb.w	r5, [sp, #125]	; 0x7d
 8005980:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
 8005984:	9903      	ldr	r1, [sp, #12]
 8005986:	f421 6680 	bic.w	r6, r1, #1024	; 0x400
 800598a:	2102      	movs	r1, #2
 800598c:	f7ff baf4 	b.w	8004f78 <_vfprintf_r+0x570>
 8005990:	9e03      	ldr	r6, [sp, #12]
 8005992:	f7ff bb6a 	b.w	800506a <_vfprintf_r+0x662>
 8005996:	4ba9      	ldr	r3, [pc, #676]	; (8005c3c <_vfprintf_r+0x1234>)
 8005998:	9314      	str	r3, [sp, #80]	; 0x50
 800599a:	e7d8      	b.n	800594e <_vfprintf_r+0xf46>
 800599c:	9a04      	ldr	r2, [sp, #16]
 800599e:	9603      	str	r6, [sp, #12]
 80059a0:	ab52      	add	r3, sp, #328	; 0x148
 80059a2:	1a9e      	subs	r6, r3, r2
 80059a4:	f7ff bb06 	b.w	8004fb4 <_vfprintf_r+0x5ac>
 80059a8:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80059ac:	aa26      	add	r2, sp, #152	; 0x98
 80059ae:	f00d fafd 	bl	8012fac <__sprint_r>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f47f a963 	bne.w	8004c7e <_vfprintf_r+0x276>
 80059b8:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80059ba:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80059be:	f7ff b9c7 	b.w	8004d50 <_vfprintf_r+0x348>
 80059c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c6:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80059ca:	9303      	str	r3, [sp, #12]
 80059cc:	f10a 0a01 	add.w	sl, sl, #1
 80059d0:	f7ff b87f 	b.w	8004ad2 <_vfprintf_r+0xca>
 80059d4:	f043 0320 	orr.w	r3, r3, #32
 80059d8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80059dc:	9303      	str	r3, [sp, #12]
 80059de:	f10a 0a01 	add.w	sl, sl, #1
 80059e2:	f7ff b876 	b.w	8004ad2 <_vfprintf_r+0xca>
 80059e6:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80059ea:	aa26      	add	r2, sp, #152	; 0x98
 80059ec:	f00d fade 	bl	8012fac <__sprint_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f47f a944 	bne.w	8004c7e <_vfprintf_r+0x276>
 80059f6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80059f8:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80059fc:	f7ff bbb9 	b.w	8005172 <_vfprintf_r+0x76a>
 8005a00:	464e      	mov	r6, r9
 8005a02:	2e06      	cmp	r6, #6
 8005a04:	461a      	mov	r2, r3
 8005a06:	bf28      	it	cs
 8005a08:	2606      	movcs	r6, #6
 8005a0a:	4699      	mov	r9, r3
 8005a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a0e:	4b8c      	ldr	r3, [pc, #560]	; (8005c40 <_vfprintf_r+0x1238>)
 8005a10:	9605      	str	r6, [sp, #20]
 8005a12:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 8005a16:	970b      	str	r7, [sp, #44]	; 0x2c
 8005a18:	9304      	str	r3, [sp, #16]
 8005a1a:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a1c:	f7ff ba1f 	b.w	8004e5e <_vfprintf_r+0x456>
 8005a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a22:	f851 3b04 	ldr.w	r3, [r1], #4
 8005a26:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a28:	9903      	ldr	r1, [sp, #12]
 8005a2a:	f011 0110 	ands.w	r1, r1, #16
 8005a2e:	d19b      	bne.n	8005968 <_vfprintf_r+0xf60>
 8005a30:	9a03      	ldr	r2, [sp, #12]
 8005a32:	f012 0040 	ands.w	r0, r2, #64	; 0x40
 8005a36:	f000 80db 	beq.w	8005bf0 <_vfprintf_r+0x11e8>
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	e793      	b.n	8005968 <_vfprintf_r+0xf60>
 8005a40:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8005a44:	aa26      	add	r2, sp, #152	; 0x98
 8005a46:	f00d fab1 	bl	8012fac <__sprint_r>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	f47f a917 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005a50:	e9dd 3727 	ldrd	r3, r7, [sp, #156]	; 0x9c
 8005a54:	ae29      	add	r6, sp, #164	; 0xa4
 8005a56:	e4a0      	b.n	800539a <_vfprintf_r+0x992>
 8005a58:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8005a5c:	aa26      	add	r2, sp, #152	; 0x98
 8005a5e:	f00d faa5 	bl	8012fac <__sprint_r>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f47f a90b 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005a68:	e9dd 8527 	ldrd	r8, r5, [sp, #156]	; 0x9c
 8005a6c:	ae29      	add	r6, sp, #164	; 0xa4
 8005a6e:	e4a2      	b.n	80053b6 <_vfprintf_r+0x9ae>
 8005a70:	2100      	movs	r1, #0
 8005a72:	f406 6780 	and.w	r7, r6, #1024	; 0x400
 8005a76:	9605      	str	r6, [sp, #20]
 8005a78:	e9cd a503 	strd	sl, r5, [sp, #12]
 8005a7c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8005c48 <_vfprintf_r+0x1240>
 8005a80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005a82:	ac52      	add	r4, sp, #328	; 0x148
 8005a84:	468c      	mov	ip, r1
 8005a86:	e005      	b.n	8005a94 <_vfprintf_r+0x108c>
 8005a88:	2b0a      	cmp	r3, #10
 8005a8a:	f172 0200 	sbcs.w	r2, r2, #0
 8005a8e:	d335      	bcc.n	8005afc <_vfprintf_r+0x10f4>
 8005a90:	4653      	mov	r3, sl
 8005a92:	462a      	mov	r2, r5
 8005a94:	1899      	adds	r1, r3, r2
 8005a96:	f141 0100 	adc.w	r1, r1, #0
 8005a9a:	fba8 0501 	umull	r0, r5, r8, r1
 8005a9e:	f025 0003 	bic.w	r0, r5, #3
 8005aa2:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8005aa6:	1a09      	subs	r1, r1, r0
 8005aa8:	1a58      	subs	r0, r3, r1
 8005aaa:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
 8005aae:	f162 0e00 	sbc.w	lr, r2, #0
 8005ab2:	fb05 f500 	mul.w	r5, r5, r0
 8005ab6:	fb08 550e 	mla	r5, r8, lr, r5
 8005aba:	fba0 a008 	umull	sl, r0, r0, r8
 8005abe:	4405      	add	r5, r0
 8005ac0:	f00a 0e01 	and.w	lr, sl, #1
 8005ac4:	2005      	movs	r0, #5
 8005ac6:	fbae 0e00 	umull	r0, lr, lr, r0
 8005aca:	1840      	adds	r0, r0, r1
 8005acc:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8005ad0:	3030      	adds	r0, #48	; 0x30
 8005ad2:	f804 0c01 	strb.w	r0, [r4, #-1]
 8005ad6:	ea4a 7ac5 	orr.w	sl, sl, r5, lsl #31
 8005ada:	f10c 0c01 	add.w	ip, ip, #1
 8005ade:	3c01      	subs	r4, #1
 8005ae0:	086d      	lsrs	r5, r5, #1
 8005ae2:	2f00      	cmp	r7, #0
 8005ae4:	d0d0      	beq.n	8005a88 <_vfprintf_r+0x1080>
 8005ae6:	7831      	ldrb	r1, [r6, #0]
 8005ae8:	458c      	cmp	ip, r1
 8005aea:	d1cd      	bne.n	8005a88 <_vfprintf_r+0x1080>
 8005aec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8005af0:	d0ca      	beq.n	8005a88 <_vfprintf_r+0x1080>
 8005af2:	2b0a      	cmp	r3, #10
 8005af4:	f172 0200 	sbcs.w	r2, r2, #0
 8005af8:	f080 80a8 	bcs.w	8005c4c <_vfprintf_r+0x1244>
 8005afc:	9615      	str	r6, [sp, #84]	; 0x54
 8005afe:	9e05      	ldr	r6, [sp, #20]
 8005b00:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8005b04:	ab52      	add	r3, sp, #328	; 0x148
 8005b06:	e9dd a503 	ldrd	sl, r5, [sp, #12]
 8005b0a:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8005b0e:	1b1e      	subs	r6, r3, r4
 8005b10:	f7ff ba50 	b.w	8004fb4 <_vfprintf_r+0x5ac>
 8005b14:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8005b18:	aa26      	add	r2, sp, #152	; 0x98
 8005b1a:	9319      	str	r3, [sp, #100]	; 0x64
 8005b1c:	f00d fa46 	bl	8012fac <__sprint_r>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	f47f a8ac 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005b26:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8005b2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b2c:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005b30:	f7ff b8e5 	b.w	8004cfe <_vfprintf_r+0x2f6>
 8005b34:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8005b38:	aa26      	add	r2, sp, #152	; 0x98
 8005b3a:	f00d fa37 	bl	8012fac <__sprint_r>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f47f a89d 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005b44:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8005b46:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005b4a:	f7ff bafb 	b.w	8005144 <_vfprintf_r+0x73c>
 8005b4e:	2901      	cmp	r1, #1
 8005b50:	9e03      	ldr	r6, [sp, #12]
 8005b52:	f47f ab3b 	bne.w	80051cc <_vfprintf_r+0x7c4>
 8005b56:	e4b8      	b.n	80054ca <_vfprintf_r+0xac2>
 8005b58:	3301      	adds	r3, #1
 8005b5a:	4425      	add	r5, r4
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	f8cb 7000 	str.w	r7, [fp]
 8005b62:	f8cb 4004 	str.w	r4, [fp, #4]
 8005b66:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005b6a:	f77f a908 	ble.w	8004d7e <_vfprintf_r+0x376>
 8005b6e:	f7ff bbf4 	b.w	800535a <_vfprintf_r+0x952>
 8005b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f7ff ba96 	b.w	80050aa <_vfprintf_r+0x6a2>
 8005b7e:	9804      	ldr	r0, [sp, #16]
 8005b80:	970b      	str	r7, [sp, #44]	; 0x2c
 8005b82:	f7fa fb1d 	bl	80001c0 <strlen>
 8005b86:	46b1      	mov	r9, r6
 8005b88:	4606      	mov	r6, r0
 8005b8a:	f7ff b9d3 	b.w	8004f34 <_vfprintf_r+0x52c>
 8005b8e:	4698      	mov	r8, r3
 8005b90:	f108 0801 	add.w	r8, r8, #1
 8005b94:	444d      	add	r5, r9
 8005b96:	f1b8 0f07 	cmp.w	r8, #7
 8005b9a:	e9cd 8527 	strd	r8, r5, [sp, #156]	; 0x9c
 8005b9e:	6037      	str	r7, [r6, #0]
 8005ba0:	f8c6 9004 	str.w	r9, [r6, #4]
 8005ba4:	f77f ac21 	ble.w	80053ea <_vfprintf_r+0x9e2>
 8005ba8:	e591      	b.n	80056ce <_vfprintf_r+0xcc6>
 8005baa:	2d10      	cmp	r5, #16
 8005bac:	463a      	mov	r2, r7
 8005bae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005bb0:	4f24      	ldr	r7, [pc, #144]	; (8005c44 <_vfprintf_r+0x123c>)
 8005bb2:	dd2c      	ble.n	8005c0e <_vfprintf_r+0x1206>
 8005bb4:	e9dd 8406 	ldrd	r8, r4, [sp, #24]
 8005bb8:	2610      	movs	r6, #16
 8005bba:	e004      	b.n	8005bc6 <_vfprintf_r+0x11be>
 8005bbc:	f10b 0b08 	add.w	fp, fp, #8
 8005bc0:	3d10      	subs	r5, #16
 8005bc2:	2d10      	cmp	r5, #16
 8005bc4:	dd23      	ble.n	8005c0e <_vfprintf_r+0x1206>
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	3210      	adds	r2, #16
 8005bca:	2b07      	cmp	r3, #7
 8005bcc:	e9cb 7600 	strd	r7, r6, [fp]
 8005bd0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005bd4:	ddf2      	ble.n	8005bbc <_vfprintf_r+0x11b4>
 8005bd6:	aa26      	add	r2, sp, #152	; 0x98
 8005bd8:	4641      	mov	r1, r8
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f00d f9e6 	bl	8012fac <__sprint_r>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	f47f a84c 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005be6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005bea:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005bee:	e7e7      	b.n	8005bc0 <_vfprintf_r+0x11b8>
 8005bf0:	9a03      	ldr	r2, [sp, #12]
 8005bf2:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8005bf6:	bf1c      	itt	ne
 8005bf8:	b2db      	uxtbne	r3, r3
 8005bfa:	4602      	movne	r2, r0
 8005bfc:	e6b4      	b.n	8005968 <_vfprintf_r+0xf60>
 8005bfe:	9a03      	ldr	r2, [sp, #12]
 8005c00:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8005c04:	bf1c      	itt	ne
 8005c06:	b2db      	uxtbne	r3, r3
 8005c08:	4602      	movne	r2, r0
 8005c0a:	f7ff b9b1 	b.w	8004f70 <_vfprintf_r+0x568>
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f8cb 7000 	str.w	r7, [fp]
 8005c14:	2b07      	cmp	r3, #7
 8005c16:	eb05 0702 	add.w	r7, r5, r2
 8005c1a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8005c1e:	f8cb 5004 	str.w	r5, [fp, #4]
 8005c22:	f300 817c 	bgt.w	8005f1e <_vfprintf_r+0x1516>
 8005c26:	f10b 0b08 	add.w	fp, fp, #8
 8005c2a:	e4ce      	b.n	80055ca <_vfprintf_r+0xbc2>
 8005c2c:	222d      	movs	r2, #45	; 0x2d
 8005c2e:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005c32:	f7ff b901 	b.w	8004e38 <_vfprintf_r+0x430>
 8005c36:	bf00      	nop
 8005c38:	0801b410 	.word	0x0801b410
 8005c3c:	0801b3fc 	.word	0x0801b3fc
 8005c40:	0801b424 	.word	0x0801b424
 8005c44:	0801b450 	.word	0x0801b450
 8005c48:	cccccccd 	.word	0xcccccccd
 8005c4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005c4e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005c50:	1ae4      	subs	r4, r4, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	4620      	mov	r0, r4
 8005c56:	f00b fcf7 	bl	8011648 <strncpy>
 8005c5a:	7873      	ldrb	r3, [r6, #1]
 8005c5c:	b103      	cbz	r3, 8005c60 <_vfprintf_r+0x1258>
 8005c5e:	3601      	adds	r6, #1
 8005c60:	f04f 0c00 	mov.w	ip, #0
 8005c64:	e714      	b.n	8005a90 <_vfprintf_r+0x1088>
 8005c66:	464f      	mov	r7, r9
 8005c68:	2102      	movs	r1, #2
 8005c6a:	ab24      	add	r3, sp, #144	; 0x90
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	ab21      	add	r3, sp, #132	; 0x84
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	9807      	ldr	r0, [sp, #28]
 8005c74:	eeb0 0a48 	vmov.f32	s0, s16
 8005c78:	eef0 0a68 	vmov.f32	s1, s17
 8005c7c:	ab20      	add	r3, sp, #128	; 0x80
 8005c7e:	463a      	mov	r2, r7
 8005c80:	f000 fc2e 	bl	80064e0 <_dtoa_r>
 8005c84:	2d67      	cmp	r5, #103	; 0x67
 8005c86:	9004      	str	r0, [sp, #16]
 8005c88:	f000 82d1 	beq.w	800622e <_vfprintf_r+0x1826>
 8005c8c:	2d47      	cmp	r5, #71	; 0x47
 8005c8e:	f000 838c 	beq.w	80063aa <_vfprintf_r+0x19a2>
 8005c92:	9b04      	ldr	r3, [sp, #16]
 8005c94:	f025 0820 	bic.w	r8, r5, #32
 8005c98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c9c:	eb03 0607 	add.w	r6, r3, r7
 8005ca0:	d105      	bne.n	8005cae <_vfprintf_r+0x12a6>
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b30      	cmp	r3, #48	; 0x30
 8005ca6:	f000 83c3 	beq.w	8006430 <_vfprintf_r+0x1a28>
 8005caa:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8005cac:	443e      	add	r6, r7
 8005cae:	ec51 0b18 	vmov	r0, r1, d8
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f7fb f9b9 	bl	800102c <__aeabi_dcmpeq>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	f000 8224 	beq.w	8006108 <_vfprintf_r+0x1700>
 8005cc0:	4633      	mov	r3, r6
 8005cc2:	9a04      	ldr	r2, [sp, #16]
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	930e      	str	r3, [sp, #56]	; 0x38
 8005cc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cca:	920c      	str	r2, [sp, #48]	; 0x30
 8005ccc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cd0:	f000 8158 	beq.w	8005f84 <_vfprintf_r+0x157c>
 8005cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cd8:	f000 82c1 	beq.w	800625e <_vfprintf_r+0x1856>
 8005cdc:	1e53      	subs	r3, r2, #1
 8005cde:	2d61      	cmp	r5, #97	; 0x61
 8005ce0:	9320      	str	r3, [sp, #128]	; 0x80
 8005ce2:	f000 83cc 	beq.w	800647e <_vfprintf_r+0x1a76>
 8005ce6:	2d41      	cmp	r5, #65	; 0x41
 8005ce8:	f040 8155 	bne.w	8005f96 <_vfprintf_r+0x158e>
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	2001      	movs	r0, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bfb6      	itet	lt
 8005cf4:	f1c2 0301 	rsblt	r3, r2, #1
 8005cf8:	222b      	movge	r2, #43	; 0x2b
 8005cfa:	222d      	movlt	r2, #45	; 0x2d
 8005cfc:	2b09      	cmp	r3, #9
 8005cfe:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
 8005d02:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8005d06:	f340 8313 	ble.w	8006330 <_vfprintf_r+0x1928>
 8005d0a:	f10d 0697 	add.w	r6, sp, #151	; 0x97
 8005d0e:	4fa7      	ldr	r7, [pc, #668]	; (8005fac <_vfprintf_r+0x15a4>)
 8005d10:	4632      	mov	r2, r6
 8005d12:	4610      	mov	r0, r2
 8005d14:	fba7 1203 	umull	r1, r2, r7, r3
 8005d18:	08d2      	lsrs	r2, r2, #3
 8005d1a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005d1e:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8005d22:	3130      	adds	r1, #48	; 0x30
 8005d24:	f800 1c01 	strb.w	r1, [r0, #-1]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	2963      	cmp	r1, #99	; 0x63
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8005d32:	dcee      	bgt.n	8005d12 <_vfprintf_r+0x130a>
 8005d34:	3330      	adds	r3, #48	; 0x30
 8005d36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d3a:	1e83      	subs	r3, r0, #2
 8005d3c:	42b3      	cmp	r3, r6
 8005d3e:	f080 83b5 	bcs.w	80064ac <_vfprintf_r+0x1aa4>
 8005d42:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8005d46:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005d4a:	f802 1f01 	strb.w	r1, [r2, #1]!
 8005d4e:	42b3      	cmp	r3, r6
 8005d50:	d1f9      	bne.n	8005d46 <_vfprintf_r+0x133e>
 8005d52:	ab52      	add	r3, sp, #328	; 0x148
 8005d54:	1a18      	subs	r0, r3, r0
 8005d56:	f1a0 03ad 	sub.w	r3, r0, #173	; 0xad
 8005d5a:	9316      	str	r3, [sp, #88]	; 0x58
 8005d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	eb03 0602 	add.w	r6, r3, r2
 8005d66:	f340 831c 	ble.w	80063a2 <_vfprintf_r+0x199a>
 8005d6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d6c:	441e      	add	r6, r3
 8005d6e:	f424 6380 	bic.w	r3, r4, #1024	; 0x400
 8005d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d76:	9303      	str	r3, [sp, #12]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8005d7e:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
 8005d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d84:	9205      	str	r2, [sp, #20]
 8005d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f040 8107 	bne.w	8005f9c <_vfprintf_r+0x1594>
 8005d8e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8005d92:	4699      	mov	r9, r3
 8005d94:	f7ff b863 	b.w	8004e5e <_vfprintf_r+0x456>
 8005d98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d9a:	1b1c      	subs	r4, r3, r4
 8005d9c:	eba2 0609 	sub.w	r6, r2, r9
 8005da0:	42a6      	cmp	r6, r4
 8005da2:	463d      	mov	r5, r7
 8005da4:	bfa8      	it	ge
 8005da6:	4626      	movge	r6, r4
 8005da8:	e445      	b.n	8005636 <_vfprintf_r+0xc2e>
 8005daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	f7ff b97a 	b.w	80050aa <_vfprintf_r+0x6a2>
 8005db6:	f343 12c0 	sbfx	r2, r3, #7, #1
 8005dba:	4611      	mov	r1, r2
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	f7ff b87c 	b.w	8004eba <_vfprintf_r+0x4b2>
 8005dc2:	2358      	movs	r3, #88	; 0x58
 8005dc4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8005dc8:	2330      	movs	r3, #48	; 0x30
 8005dca:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8005dd4:	f043 0402 	orr.w	r4, r3, #2
 8005dd8:	f300 8285 	bgt.w	80062e6 <_vfprintf_r+0x18de>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	930a      	str	r3, [sp, #40]	; 0x28
 8005de0:	ab39      	add	r3, sp, #228	; 0xe4
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f2c0 81bf 	blt.w	8006172 <_vfprintf_r+0x176a>
 8005df4:	ed9d 8b10 	vldr	d8, [sp, #64]	; 0x40
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9319      	str	r3, [sp, #100]	; 0x64
 8005dfc:	2d61      	cmp	r5, #97	; 0x61
 8005dfe:	f47f ad67 	bne.w	80058d0 <_vfprintf_r+0xec8>
 8005e02:	eeb0 0a48 	vmov.f32	s0, s16
 8005e06:	eef0 0a68 	vmov.f32	s1, s17
 8005e0a:	a820      	add	r0, sp, #128	; 0x80
 8005e0c:	f00c ffce 	bl	8012dac <frexp>
 8005e10:	2200      	movs	r2, #0
 8005e12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e16:	ec51 0b10 	vmov	r0, r1, d0
 8005e1a:	f7fa fdbd 	bl	8000998 <__aeabi_dmul>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2300      	movs	r3, #0
 8005e22:	4606      	mov	r6, r0
 8005e24:	460f      	mov	r7, r1
 8005e26:	f7fb f901 	bl	800102c <__aeabi_dcmpeq>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	f040 82ac 	bne.w	8006388 <_vfprintf_r+0x1980>
 8005e30:	4b5f      	ldr	r3, [pc, #380]	; (8005fb0 <_vfprintf_r+0x15a8>)
 8005e32:	9303      	str	r3, [sp, #12]
 8005e34:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8005e38:	e9cd 9b1c 	strd	r9, fp, [sp, #112]	; 0x70
 8005e3c:	950d      	str	r5, [sp, #52]	; 0x34
 8005e3e:	e9cd 4a0e 	strd	r4, sl, [sp, #56]	; 0x38
 8005e42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005e46:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	e005      	b.n	8005e5a <_vfprintf_r+0x1452>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2300      	movs	r3, #0
 8005e52:	f7fb f8eb 	bl	800102c <__aeabi_dcmpeq>
 8005e56:	b9f0      	cbnz	r0, 8005e96 <_vfprintf_r+0x148e>
 8005e58:	464d      	mov	r5, r9
 8005e5a:	4b56      	ldr	r3, [pc, #344]	; (8005fb4 <_vfprintf_r+0x15ac>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa fd99 	bl	8000998 <__aeabi_dmul>
 8005e66:	460f      	mov	r7, r1
 8005e68:	4606      	mov	r6, r0
 8005e6a:	f7fa ffa7 	bl	8000dbc <__aeabi_d2iz>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	f7fa fd28 	bl	80008c4 <__aeabi_i2d>
 8005e74:	460b      	mov	r3, r1
 8005e76:	4602      	mov	r2, r0
 8005e78:	4639      	mov	r1, r7
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7fa fbd4 	bl	8000628 <__aeabi_dsub>
 8005e80:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8005e84:	46c2      	mov	sl, r8
 8005e86:	f808 3b01 	strb.w	r3, [r8], #1
 8005e8a:	1c6b      	adds	r3, r5, #1
 8005e8c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005e90:	4606      	mov	r6, r0
 8005e92:	460f      	mov	r7, r1
 8005e94:	d1db      	bne.n	8005e4e <_vfprintf_r+0x1446>
 8005e96:	4b48      	ldr	r3, [pc, #288]	; (8005fb8 <_vfprintf_r+0x15b0>)
 8005e98:	950c      	str	r5, [sp, #48]	; 0x30
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005ea2:	940d      	str	r4, [sp, #52]	; 0x34
 8005ea4:	e9dd 9b1c 	ldrd	r9, fp, [sp, #112]	; 0x70
 8005ea8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005eaa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005eae:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8005eb2:	f7fb f8e3 	bl	800107c <__aeabi_dcmpgt>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f040 8249 	bne.w	800634e <_vfprintf_r+0x1946>
 8005ebc:	4b3e      	ldr	r3, [pc, #248]	; (8005fb8 <_vfprintf_r+0x15b0>)
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f7fb f8b2 	bl	800102c <__aeabi_dcmpeq>
 8005ec8:	b118      	cbz	r0, 8005ed2 <_vfprintf_r+0x14ca>
 8005eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ecc:	07df      	lsls	r7, r3, #31
 8005ece:	f100 823e 	bmi.w	800634e <_vfprintf_r+0x1946>
 8005ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f2c0 8255 	blt.w	8006384 <_vfprintf_r+0x197c>
 8005eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005edc:	3301      	adds	r3, #1
 8005ede:	4443      	add	r3, r8
 8005ee0:	2230      	movs	r2, #48	; 0x30
 8005ee2:	f808 2b01 	strb.w	r2, [r8], #1
 8005ee6:	4543      	cmp	r3, r8
 8005ee8:	d1fb      	bne.n	8005ee2 <_vfprintf_r+0x14da>
 8005eea:	9a04      	ldr	r2, [sp, #16]
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	930e      	str	r3, [sp, #56]	; 0x38
 8005ef0:	f025 0820 	bic.w	r8, r5, #32
 8005ef4:	e6e8      	b.n	8005cc8 <_vfprintf_r+0x12c0>
 8005ef6:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8005efa:	aa26      	add	r2, sp, #152	; 0x98
 8005efc:	f00d f856 	bl	8012fac <__sprint_r>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f47e aebc 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005f06:	e9dd 3127 	ldrd	r3, r1, [sp, #156]	; 0x9c
 8005f0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f0c:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005f10:	f7ff ba13 	b.w	800533a <_vfprintf_r+0x932>
 8005f14:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005f16:	f010 f989 	bl	801622c <__retarget_lock_release_recursive>
 8005f1a:	f7fe be7e 	b.w	8004c1a <_vfprintf_r+0x212>
 8005f1e:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8005f22:	aa26      	add	r2, sp, #152	; 0x98
 8005f24:	f00d f842 	bl	8012fac <__sprint_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f47e aea8 	bne.w	8004c7e <_vfprintf_r+0x276>
 8005f2e:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8005f30:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8005f34:	f7ff bb49 	b.w	80055ca <_vfprintf_r+0xbc2>
 8005f38:	f109 0701 	add.w	r7, r9, #1
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	e694      	b.n	8005c6a <_vfprintf_r+0x1262>
 8005f40:	464f      	mov	r7, r9
 8005f42:	2103      	movs	r1, #3
 8005f44:	e691      	b.n	8005c6a <_vfprintf_r+0x1262>
 8005f46:	a820      	add	r0, sp, #128	; 0x80
 8005f48:	eeb0 0a48 	vmov.f32	s0, s16
 8005f4c:	eef0 0a68 	vmov.f32	s1, s17
 8005f50:	f00c ff2c 	bl	8012dac <frexp>
 8005f54:	2200      	movs	r2, #0
 8005f56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005f5a:	ec51 0b10 	vmov	r0, r1, d0
 8005f5e:	f7fa fd1b 	bl	8000998 <__aeabi_dmul>
 8005f62:	2200      	movs	r2, #0
 8005f64:	2300      	movs	r3, #0
 8005f66:	4606      	mov	r6, r0
 8005f68:	460f      	mov	r7, r1
 8005f6a:	f7fb f85f 	bl	800102c <__aeabi_dcmpeq>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f040 820a 	bne.w	8006388 <_vfprintf_r+0x1980>
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <_vfprintf_r+0x15b4>)
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	e75c      	b.n	8005e34 <_vfprintf_r+0x142c>
 8005f7a:	9a04      	ldr	r2, [sp, #16]
 8005f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f82:	930e      	str	r3, [sp, #56]	; 0x38
 8005f84:	1cd3      	adds	r3, r2, #3
 8005f86:	920c      	str	r2, [sp, #48]	; 0x30
 8005f88:	db02      	blt.n	8005f90 <_vfprintf_r+0x1588>
 8005f8a:	4591      	cmp	r9, r2
 8005f8c:	f280 80c8 	bge.w	8006120 <_vfprintf_r+0x1718>
 8005f90:	1e53      	subs	r3, r2, #1
 8005f92:	3d02      	subs	r5, #2
 8005f94:	9320      	str	r3, [sp, #128]	; 0x80
 8005f96:	b2e9      	uxtb	r1, r5
 8005f98:	2000      	movs	r0, #0
 8005f9a:	e6a9      	b.n	8005cf0 <_vfprintf_r+0x12e8>
 8005f9c:	222d      	movs	r2, #45	; 0x2d
 8005f9e:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005fa2:	f04f 0900 	mov.w	r9, #0
 8005fa6:	f7fe bf5d 	b.w	8004e64 <_vfprintf_r+0x45c>
 8005faa:	bf00      	nop
 8005fac:	cccccccd 	.word	0xcccccccd
 8005fb0:	0801b3fc 	.word	0x0801b3fc
 8005fb4:	40300000 	.word	0x40300000
 8005fb8:	3fe00000 	.word	0x3fe00000
 8005fbc:	0801b410 	.word	0x0801b410
 8005fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fc2:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 8005fc6:	465a      	mov	r2, fp
 8005fc8:	4638      	mov	r0, r7
 8005fca:	4eb0      	ldr	r6, [pc, #704]	; (800628c <_vfprintf_r+0x1884>)
 8005fcc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8005fd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005fd2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8005fd6:	464f      	mov	r7, r9
 8005fd8:	f04f 0810 	mov.w	r8, #16
 8005fdc:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8005fe0:	b371      	cbz	r1, 8006040 <_vfprintf_r+0x1638>
 8005fe2:	f1b9 0f00 	cmp.w	r9, #0
 8005fe6:	d07a      	beq.n	80060de <_vfprintf_r+0x16d6>
 8005fe8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005fec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005fee:	e9c2 1300 	strd	r1, r3, [r2]
 8005ff2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005ff4:	3101      	adds	r1, #1
 8005ff6:	4418      	add	r0, r3
 8005ff8:	2907      	cmp	r1, #7
 8005ffa:	9028      	str	r0, [sp, #160]	; 0xa0
 8005ffc:	9127      	str	r1, [sp, #156]	; 0x9c
 8005ffe:	dc61      	bgt.n	80060c4 <_vfprintf_r+0x16bc>
 8006000:	3208      	adds	r2, #8
 8006002:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006004:	f89a 1000 	ldrb.w	r1, [sl]
 8006008:	1be5      	subs	r5, r4, r7
 800600a:	428d      	cmp	r5, r1
 800600c:	bfa8      	it	ge
 800600e:	460d      	movge	r5, r1
 8006010:	2d00      	cmp	r5, #0
 8006012:	dd0b      	ble.n	800602c <_vfprintf_r+0x1624>
 8006014:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006016:	3101      	adds	r1, #1
 8006018:	4428      	add	r0, r5
 800601a:	2907      	cmp	r1, #7
 800601c:	e9c2 7500 	strd	r7, r5, [r2]
 8006020:	9028      	str	r0, [sp, #160]	; 0xa0
 8006022:	9127      	str	r1, [sp, #156]	; 0x9c
 8006024:	dc61      	bgt.n	80060ea <_vfprintf_r+0x16e2>
 8006026:	f89a 1000 	ldrb.w	r1, [sl]
 800602a:	3208      	adds	r2, #8
 800602c:	2d00      	cmp	r5, #0
 800602e:	bfac      	ite	ge
 8006030:	1b4c      	subge	r4, r1, r5
 8006032:	460c      	movlt	r4, r1
 8006034:	2c00      	cmp	r4, #0
 8006036:	dc13      	bgt.n	8006060 <_vfprintf_r+0x1658>
 8006038:	440f      	add	r7, r1
 800603a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800603c:	2900      	cmp	r1, #0
 800603e:	d1d0      	bne.n	8005fe2 <_vfprintf_r+0x15da>
 8006040:	f1b9 0f00 	cmp.w	r9, #0
 8006044:	d1d0      	bne.n	8005fe8 <_vfprintf_r+0x15e0>
 8006046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006048:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 800604c:	46b9      	mov	r9, r7
 800604e:	4599      	cmp	r9, r3
 8006050:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8006054:	4693      	mov	fp, r2
 8006056:	4607      	mov	r7, r0
 8006058:	bf28      	it	cs
 800605a:	4699      	movcs	r9, r3
 800605c:	f7ff babd 	b.w	80055da <_vfprintf_r+0xbd2>
 8006060:	2c10      	cmp	r4, #16
 8006062:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006064:	f340 81e2 	ble.w	800642c <_vfprintf_r+0x1a24>
 8006068:	9d07      	ldr	r5, [sp, #28]
 800606a:	9304      	str	r3, [sp, #16]
 800606c:	960c      	str	r6, [sp, #48]	; 0x30
 800606e:	e004      	b.n	800607a <_vfprintf_r+0x1672>
 8006070:	3c10      	subs	r4, #16
 8006072:	2c10      	cmp	r4, #16
 8006074:	f102 0208 	add.w	r2, r2, #8
 8006078:	dd15      	ble.n	80060a6 <_vfprintf_r+0x169e>
 800607a:	3101      	adds	r1, #1
 800607c:	3010      	adds	r0, #16
 800607e:	2907      	cmp	r1, #7
 8006080:	e9c2 6800 	strd	r6, r8, [r2]
 8006084:	e9cd 1027 	strd	r1, r0, [sp, #156]	; 0x9c
 8006088:	ddf2      	ble.n	8006070 <_vfprintf_r+0x1668>
 800608a:	aa26      	add	r2, sp, #152	; 0x98
 800608c:	4659      	mov	r1, fp
 800608e:	4628      	mov	r0, r5
 8006090:	f00c ff8c 	bl	8012fac <__sprint_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	f47e adf2 	bne.w	8004c7e <_vfprintf_r+0x276>
 800609a:	3c10      	subs	r4, #16
 800609c:	2c10      	cmp	r4, #16
 800609e:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	; 0x9c
 80060a2:	aa29      	add	r2, sp, #164	; 0xa4
 80060a4:	dce9      	bgt.n	800607a <_vfprintf_r+0x1672>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060aa:	6015      	str	r5, [r2, #0]
 80060ac:	3101      	adds	r1, #1
 80060ae:	4420      	add	r0, r4
 80060b0:	2907      	cmp	r1, #7
 80060b2:	e9cd 1027 	strd	r1, r0, [sp, #156]	; 0x9c
 80060b6:	6054      	str	r4, [r2, #4]
 80060b8:	dc73      	bgt.n	80061a2 <_vfprintf_r+0x179a>
 80060ba:	f89a 1000 	ldrb.w	r1, [sl]
 80060be:	3208      	adds	r2, #8
 80060c0:	440f      	add	r7, r1
 80060c2:	e7ba      	b.n	800603a <_vfprintf_r+0x1632>
 80060c4:	9807      	ldr	r0, [sp, #28]
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	aa26      	add	r2, sp, #152	; 0x98
 80060ca:	4659      	mov	r1, fp
 80060cc:	f00c ff6e 	bl	8012fac <__sprint_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f47e add4 	bne.w	8004c7e <_vfprintf_r+0x276>
 80060d6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80060d8:	9b04      	ldr	r3, [sp, #16]
 80060da:	aa29      	add	r2, sp, #164	; 0xa4
 80060dc:	e791      	b.n	8006002 <_vfprintf_r+0x15fa>
 80060de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060e0:	3901      	subs	r1, #1
 80060e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80060e6:	910d      	str	r1, [sp, #52]	; 0x34
 80060e8:	e780      	b.n	8005fec <_vfprintf_r+0x15e4>
 80060ea:	9807      	ldr	r0, [sp, #28]
 80060ec:	9304      	str	r3, [sp, #16]
 80060ee:	aa26      	add	r2, sp, #152	; 0x98
 80060f0:	4659      	mov	r1, fp
 80060f2:	f00c ff5b 	bl	8012fac <__sprint_r>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f47e adc1 	bne.w	8004c7e <_vfprintf_r+0x276>
 80060fc:	f89a 1000 	ldrb.w	r1, [sl]
 8006100:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	aa29      	add	r2, sp, #164	; 0xa4
 8006106:	e791      	b.n	800602c <_vfprintf_r+0x1624>
 8006108:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800610a:	42b3      	cmp	r3, r6
 800610c:	f4bf add9 	bcs.w	8005cc2 <_vfprintf_r+0x12ba>
 8006110:	2130      	movs	r1, #48	; 0x30
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	9224      	str	r2, [sp, #144]	; 0x90
 8006116:	7019      	strb	r1, [r3, #0]
 8006118:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800611a:	429e      	cmp	r6, r3
 800611c:	d8f9      	bhi.n	8006112 <_vfprintf_r+0x170a>
 800611e:	e5d0      	b.n	8005cc2 <_vfprintf_r+0x12ba>
 8006120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006122:	4293      	cmp	r3, r2
 8006124:	f300 808a 	bgt.w	800623c <_vfprintf_r+0x1834>
 8006128:	07e3      	lsls	r3, r4, #31
 800612a:	f140 8157 	bpl.w	80063dc <_vfprintf_r+0x19d4>
 800612e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006130:	18d6      	adds	r6, r2, r3
 8006132:	0567      	lsls	r7, r4, #21
 8006134:	d502      	bpl.n	800613c <_vfprintf_r+0x1734>
 8006136:	2a00      	cmp	r2, #0
 8006138:	f300 8152 	bgt.w	80063e0 <_vfprintf_r+0x19d8>
 800613c:	9b05      	ldr	r3, [sp, #20]
 800613e:	9303      	str	r3, [sp, #12]
 8006140:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8006144:	9305      	str	r3, [sp, #20]
 8006146:	2567      	movs	r5, #103	; 0x67
 8006148:	2300      	movs	r3, #0
 800614a:	930f      	str	r3, [sp, #60]	; 0x3c
 800614c:	930d      	str	r3, [sp, #52]	; 0x34
 800614e:	e61a      	b.n	8005d86 <_vfprintf_r+0x137e>
 8006150:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8006154:	aa26      	add	r2, sp, #152	; 0x98
 8006156:	f00c ff29 	bl	8012fac <__sprint_r>
 800615a:	2800      	cmp	r0, #0
 800615c:	f47e ad8f 	bne.w	8004c7e <_vfprintf_r+0x276>
 8006160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006162:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006164:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8006168:	f7ff bb48 	b.w	80057fc <_vfprintf_r+0xdf4>
 800616c:	2300      	movs	r3, #0
 800616e:	9c03      	ldr	r4, [sp, #12]
 8006170:	930a      	str	r3, [sp, #40]	; 0x28
 8006172:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006176:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800617a:	ee08 3a90 	vmov	s17, r3
 800617e:	232d      	movs	r3, #45	; 0x2d
 8006180:	ee08 2a10 	vmov	s16, r2
 8006184:	9319      	str	r3, [sp, #100]	; 0x64
 8006186:	e639      	b.n	8005dfc <_vfprintf_r+0x13f4>
 8006188:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 800618c:	aa26      	add	r2, sp, #152	; 0x98
 800618e:	f00c ff0d 	bl	8012fac <__sprint_r>
 8006192:	2800      	cmp	r0, #0
 8006194:	f47e ad73 	bne.w	8004c7e <_vfprintf_r+0x276>
 8006198:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800619a:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 800619e:	f7ff ba0d 	b.w	80055bc <_vfprintf_r+0xbb4>
 80061a2:	9807      	ldr	r0, [sp, #28]
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	aa26      	add	r2, sp, #152	; 0x98
 80061a8:	4659      	mov	r1, fp
 80061aa:	f00c feff 	bl	8012fac <__sprint_r>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f47e ad65 	bne.w	8004c7e <_vfprintf_r+0x276>
 80061b4:	f89a 1000 	ldrb.w	r1, [sl]
 80061b8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	aa29      	add	r2, sp, #164	; 0xa4
 80061be:	440f      	add	r7, r1
 80061c0:	e73b      	b.n	800603a <_vfprintf_r+0x1632>
 80061c2:	2378      	movs	r3, #120	; 0x78
 80061c4:	e5fe      	b.n	8005dc4 <_vfprintf_r+0x13bc>
 80061c6:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80061ca:	aa26      	add	r2, sp, #152	; 0x98
 80061cc:	f00c feee 	bl	8012fac <__sprint_r>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f47e ad54 	bne.w	8004c7e <_vfprintf_r+0x276>
 80061d6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80061d8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80061da:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80061de:	f7ff ba12 	b.w	8005606 <_vfprintf_r+0xbfe>
 80061e2:	464e      	mov	r6, r9
 80061e4:	f8cd 9014 	str.w	r9, [sp, #20]
 80061e8:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80061ec:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 80061f0:	970b      	str	r7, [sp, #44]	; 0x2c
 80061f2:	4681      	mov	r9, r0
 80061f4:	900f      	str	r0, [sp, #60]	; 0x3c
 80061f6:	f7fe be32 	b.w	8004e5e <_vfprintf_r+0x456>
 80061fa:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80061fe:	aa26      	add	r2, sp, #152	; 0x98
 8006200:	f00c fed4 	bl	8012fac <__sprint_r>
 8006204:	2800      	cmp	r0, #0
 8006206:	f47e ad3a 	bne.w	8004c7e <_vfprintf_r+0x276>
 800620a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800620c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006210:	1b1c      	subs	r4, r3, r4
 8006212:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 8006216:	f7ff ba0e 	b.w	8005636 <_vfprintf_r+0xc2e>
 800621a:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 800621e:	aa26      	add	r2, sp, #152	; 0x98
 8006220:	f00c fec4 	bl	8012fac <__sprint_r>
 8006224:	2800      	cmp	r0, #0
 8006226:	f43e add5 	beq.w	8004dd4 <_vfprintf_r+0x3cc>
 800622a:	f7fe bd2e 	b.w	8004c8a <_vfprintf_r+0x282>
 800622e:	07e6      	lsls	r6, r4, #31
 8006230:	f57f aea3 	bpl.w	8005f7a <_vfprintf_r+0x1572>
 8006234:	19c6      	adds	r6, r0, r7
 8006236:	f04f 0847 	mov.w	r8, #71	; 0x47
 800623a:	e538      	b.n	8005cae <_vfprintf_r+0x12a6>
 800623c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800623e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006240:	189e      	adds	r6, r3, r2
 8006242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006244:	2b00      	cmp	r3, #0
 8006246:	f340 8103 	ble.w	8006450 <_vfprintf_r+0x1a48>
 800624a:	2567      	movs	r5, #103	; 0x67
 800624c:	0562      	lsls	r2, r4, #21
 800624e:	f100 80c8 	bmi.w	80063e2 <_vfprintf_r+0x19da>
 8006252:	9b05      	ldr	r3, [sp, #20]
 8006254:	9303      	str	r3, [sp, #12]
 8006256:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	e774      	b.n	8006148 <_vfprintf_r+0x1740>
 800625e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006260:	f004 0301 	and.w	r3, r4, #1
 8006264:	2a00      	cmp	r2, #0
 8006266:	ea43 0309 	orr.w	r3, r3, r9
 800626a:	f340 8100 	ble.w	800646e <_vfprintf_r+0x1a66>
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 80f8 	bne.w	8006464 <_vfprintf_r+0x1a5c>
 8006274:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006276:	2566      	movs	r5, #102	; 0x66
 8006278:	e7e8      	b.n	800624c <_vfprintf_r+0x1844>
 800627a:	4256      	negs	r6, r2
 800627c:	3210      	adds	r2, #16
 800627e:	4f03      	ldr	r7, [pc, #12]	; (800628c <_vfprintf_r+0x1884>)
 8006280:	da3d      	bge.n	80062fe <_vfprintf_r+0x18f6>
 8006282:	e9dd 8406 	ldrd	r8, r4, [sp, #24]
 8006286:	2510      	movs	r5, #16
 8006288:	e007      	b.n	800629a <_vfprintf_r+0x1892>
 800628a:	bf00      	nop
 800628c:	0801b450 	.word	0x0801b450
 8006290:	f10b 0b08 	add.w	fp, fp, #8
 8006294:	3e10      	subs	r6, #16
 8006296:	2e10      	cmp	r6, #16
 8006298:	dd31      	ble.n	80062fe <_vfprintf_r+0x18f6>
 800629a:	3301      	adds	r3, #1
 800629c:	3110      	adds	r1, #16
 800629e:	2b07      	cmp	r3, #7
 80062a0:	e9cb 7500 	strd	r7, r5, [fp]
 80062a4:	e9cd 3127 	strd	r3, r1, [sp, #156]	; 0x9c
 80062a8:	ddf2      	ble.n	8006290 <_vfprintf_r+0x1888>
 80062aa:	aa26      	add	r2, sp, #152	; 0x98
 80062ac:	4641      	mov	r1, r8
 80062ae:	4620      	mov	r0, r4
 80062b0:	f00c fe7c 	bl	8012fac <__sprint_r>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f47e ace2 	bne.w	8004c7e <_vfprintf_r+0x276>
 80062ba:	e9dd 3127 	ldrd	r3, r1, [sp, #156]	; 0x9c
 80062be:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 80062c2:	e7e7      	b.n	8006294 <_vfprintf_r+0x188c>
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c8:	07db      	lsls	r3, r3, #31
 80062ca:	d407      	bmi.n	80062dc <_vfprintf_r+0x18d4>
 80062cc:	9b06      	ldr	r3, [sp, #24]
 80062ce:	899b      	ldrh	r3, [r3, #12]
 80062d0:	059f      	lsls	r7, r3, #22
 80062d2:	d403      	bmi.n	80062dc <_vfprintf_r+0x18d4>
 80062d4:	9b06      	ldr	r3, [sp, #24]
 80062d6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80062d8:	f00f ffa8 	bl	801622c <__retarget_lock_release_recursive>
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	f7fe bcdc 	b.w	8004c9e <_vfprintf_r+0x296>
 80062e6:	9807      	ldr	r0, [sp, #28]
 80062e8:	f109 0101 	add.w	r1, r9, #1
 80062ec:	f00a fc68 	bl	8010bc0 <_malloc_r>
 80062f0:	9004      	str	r0, [sp, #16]
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f000 80e1 	beq.w	80064ba <_vfprintf_r+0x1ab2>
 80062f8:	9b04      	ldr	r3, [sp, #16]
 80062fa:	930a      	str	r3, [sp, #40]	; 0x28
 80062fc:	e572      	b.n	8005de4 <_vfprintf_r+0x13dc>
 80062fe:	3301      	adds	r3, #1
 8006300:	4431      	add	r1, r6
 8006302:	2b07      	cmp	r3, #7
 8006304:	e9cd 3127 	strd	r3, r1, [sp, #156]	; 0x9c
 8006308:	f8cb 7000 	str.w	r7, [fp]
 800630c:	f8cb 6004 	str.w	r6, [fp, #4]
 8006310:	f77f aa8a 	ble.w	8005828 <_vfprintf_r+0xe20>
 8006314:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8006318:	aa26      	add	r2, sp, #152	; 0x98
 800631a:	f00c fe47 	bl	8012fac <__sprint_r>
 800631e:	2800      	cmp	r0, #0
 8006320:	f47e acad 	bne.w	8004c7e <_vfprintf_r+0x276>
 8006324:	e9dd 3127 	ldrd	r3, r1, [sp, #156]	; 0x9c
 8006328:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
 800632c:	f7ff b808 	b.w	8005340 <_vfprintf_r+0x938>
 8006330:	2800      	cmp	r0, #0
 8006332:	f040 808a 	bne.w	800644a <_vfprintf_r+0x1a42>
 8006336:	2230      	movs	r2, #48	; 0x30
 8006338:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800633c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8006340:	3330      	adds	r3, #48	; 0x30
 8006342:	f802 3b01 	strb.w	r3, [r2], #1
 8006346:	ab22      	add	r3, sp, #136	; 0x88
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	9316      	str	r3, [sp, #88]	; 0x58
 800634c:	e506      	b.n	8005d5c <_vfprintf_r+0x1354>
 800634e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006350:	9a03      	ldr	r2, [sp, #12]
 8006352:	9324      	str	r3, [sp, #144]	; 0x90
 8006354:	7bd1      	ldrb	r1, [r2, #15]
 8006356:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800635a:	4299      	cmp	r1, r3
 800635c:	4642      	mov	r2, r8
 800635e:	d109      	bne.n	8006374 <_vfprintf_r+0x196c>
 8006360:	2030      	movs	r0, #48	; 0x30
 8006362:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006366:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006368:	1e53      	subs	r3, r2, #1
 800636a:	9324      	str	r3, [sp, #144]	; 0x90
 800636c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006370:	4299      	cmp	r1, r3
 8006372:	d0f6      	beq.n	8006362 <_vfprintf_r+0x195a>
 8006374:	2b39      	cmp	r3, #57	; 0x39
 8006376:	bf0b      	itete	eq
 8006378:	9b03      	ldreq	r3, [sp, #12]
 800637a:	3301      	addne	r3, #1
 800637c:	7a9b      	ldrbeq	r3, [r3, #10]
 800637e:	b2db      	uxtbne	r3, r3
 8006380:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006384:	4643      	mov	r3, r8
 8006386:	e5b0      	b.n	8005eea <_vfprintf_r+0x14e2>
 8006388:	4b4f      	ldr	r3, [pc, #316]	; (80064c8 <_vfprintf_r+0x1ac0>)
 800638a:	4a50      	ldr	r2, [pc, #320]	; (80064cc <_vfprintf_r+0x1ac4>)
 800638c:	2d61      	cmp	r5, #97	; 0x61
 800638e:	bf18      	it	ne
 8006390:	461a      	movne	r2, r3
 8006392:	2301      	movs	r3, #1
 8006394:	9203      	str	r2, [sp, #12]
 8006396:	9320      	str	r3, [sp, #128]	; 0x80
 8006398:	e54c      	b.n	8005e34 <_vfprintf_r+0x142c>
 800639a:	f04f 0906 	mov.w	r9, #6
 800639e:	f7ff ba89 	b.w	80058b4 <_vfprintf_r+0xeac>
 80063a2:	07e2      	lsls	r2, r4, #31
 80063a4:	f57f ace3 	bpl.w	8005d6e <_vfprintf_r+0x1366>
 80063a8:	e4df      	b.n	8005d6a <_vfprintf_r+0x1362>
 80063aa:	07e1      	lsls	r1, r4, #31
 80063ac:	f57f ade5 	bpl.w	8005f7a <_vfprintf_r+0x1572>
 80063b0:	9b04      	ldr	r3, [sp, #16]
 80063b2:	46a8      	mov	r8, r5
 80063b4:	19de      	adds	r6, r3, r7
 80063b6:	e47a      	b.n	8005cae <_vfprintf_r+0x12a6>
 80063b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063ba:	4c45      	ldr	r4, [pc, #276]	; (80064d0 <_vfprintf_r+0x1ac8>)
 80063bc:	2b00      	cmp	r3, #0
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	bfa8      	it	ge
 80063c2:	f89d 207b 	ldrbge.w	r2, [sp, #123]	; 0x7b
 80063c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ca:	bfb8      	it	lt
 80063cc:	222d      	movlt	r2, #45	; 0x2d
 80063ce:	9303      	str	r3, [sp, #12]
 80063d0:	bfb8      	it	lt
 80063d2:	f88d 207b 	strblt.w	r2, [sp, #123]	; 0x7b
 80063d6:	4b3f      	ldr	r3, [pc, #252]	; (80064d4 <_vfprintf_r+0x1acc>)
 80063d8:	f7fe bd34 	b.w	8004e44 <_vfprintf_r+0x43c>
 80063dc:	4616      	mov	r6, r2
 80063de:	e6a8      	b.n	8006132 <_vfprintf_r+0x172a>
 80063e0:	2567      	movs	r5, #103	; 0x67
 80063e2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80063e4:	780b      	ldrb	r3, [r1, #0]
 80063e6:	2bff      	cmp	r3, #255	; 0xff
 80063e8:	d063      	beq.n	80064b2 <_vfprintf_r+0x1aaa>
 80063ea:	2400      	movs	r4, #0
 80063ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ee:	4620      	mov	r0, r4
 80063f0:	e003      	b.n	80063fa <_vfprintf_r+0x19f2>
 80063f2:	3001      	adds	r0, #1
 80063f4:	3101      	adds	r1, #1
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d008      	beq.n	800640c <_vfprintf_r+0x1a04>
 80063fa:	4293      	cmp	r3, r2
 80063fc:	da06      	bge.n	800640c <_vfprintf_r+0x1a04>
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	784b      	ldrb	r3, [r1, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f5      	bne.n	80063f2 <_vfprintf_r+0x19ea>
 8006406:	780b      	ldrb	r3, [r1, #0]
 8006408:	3401      	adds	r4, #1
 800640a:	e7f4      	b.n	80063f6 <_vfprintf_r+0x19ee>
 800640c:	920c      	str	r2, [sp, #48]	; 0x30
 800640e:	9115      	str	r1, [sp, #84]	; 0x54
 8006410:	900d      	str	r0, [sp, #52]	; 0x34
 8006412:	940f      	str	r4, [sp, #60]	; 0x3c
 8006414:	9b05      	ldr	r3, [sp, #20]
 8006416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006418:	9303      	str	r3, [sp, #12]
 800641a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800641c:	4413      	add	r3, r2
 800641e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006420:	fb02 6603 	mla	r6, r2, r3, r6
 8006424:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8006428:	9305      	str	r3, [sp, #20]
 800642a:	e4ac      	b.n	8005d86 <_vfprintf_r+0x137e>
 800642c:	4d2a      	ldr	r5, [pc, #168]	; (80064d8 <_vfprintf_r+0x1ad0>)
 800642e:	e63c      	b.n	80060aa <_vfprintf_r+0x16a2>
 8006430:	ec51 0b18 	vmov	r0, r1, d8
 8006434:	2200      	movs	r2, #0
 8006436:	2300      	movs	r3, #0
 8006438:	f7fa fdf8 	bl	800102c <__aeabi_dcmpeq>
 800643c:	2800      	cmp	r0, #0
 800643e:	f47f ac34 	bne.w	8005caa <_vfprintf_r+0x12a2>
 8006442:	f1c7 0701 	rsb	r7, r7, #1
 8006446:	9720      	str	r7, [sp, #128]	; 0x80
 8006448:	e430      	b.n	8005cac <_vfprintf_r+0x12a4>
 800644a:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800644e:	e777      	b.n	8006340 <_vfprintf_r+0x1938>
 8006450:	f1c3 0301 	rsb	r3, r3, #1
 8006454:	441e      	add	r6, r3
 8006456:	9a05      	ldr	r2, [sp, #20]
 8006458:	9203      	str	r2, [sp, #12]
 800645a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	2567      	movs	r5, #103	; 0x67
 8006462:	e671      	b.n	8006148 <_vfprintf_r+0x1740>
 8006464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006466:	18d6      	adds	r6, r2, r3
 8006468:	444e      	add	r6, r9
 800646a:	2566      	movs	r5, #102	; 0x66
 800646c:	e6ee      	b.n	800624c <_vfprintf_r+0x1844>
 800646e:	b943      	cbnz	r3, 8006482 <_vfprintf_r+0x1a7a>
 8006470:	9b05      	ldr	r3, [sp, #20]
 8006472:	9303      	str	r3, [sp, #12]
 8006474:	2301      	movs	r3, #1
 8006476:	9305      	str	r3, [sp, #20]
 8006478:	2566      	movs	r5, #102	; 0x66
 800647a:	461e      	mov	r6, r3
 800647c:	e664      	b.n	8006148 <_vfprintf_r+0x1740>
 800647e:	2170      	movs	r1, #112	; 0x70
 8006480:	e435      	b.n	8005cee <_vfprintf_r+0x12e6>
 8006482:	9b05      	ldr	r3, [sp, #20]
 8006484:	9303      	str	r3, [sp, #12]
 8006486:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006488:	1c5e      	adds	r6, r3, #1
 800648a:	444e      	add	r6, r9
 800648c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	2566      	movs	r5, #102	; 0x66
 8006494:	e658      	b.n	8006148 <_vfprintf_r+0x1740>
 8006496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006498:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800649c:	4692      	mov	sl, r2
 800649e:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a4:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 80064a8:	f7fe bb13 	b.w	8004ad2 <_vfprintf_r+0xca>
 80064ac:	2302      	movs	r3, #2
 80064ae:	9316      	str	r3, [sp, #88]	; 0x58
 80064b0:	e454      	b.n	8005d5c <_vfprintf_r+0x1354>
 80064b2:	2300      	movs	r3, #0
 80064b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b6:	930d      	str	r3, [sp, #52]	; 0x34
 80064b8:	e7ac      	b.n	8006414 <_vfprintf_r+0x1a0c>
 80064ba:	9a06      	ldr	r2, [sp, #24]
 80064bc:	8993      	ldrh	r3, [r2, #12]
 80064be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c2:	8193      	strh	r3, [r2, #12]
 80064c4:	f7fe bbe1 	b.w	8004c8a <_vfprintf_r+0x282>
 80064c8:	0801b410 	.word	0x0801b410
 80064cc:	0801b3fc 	.word	0x0801b3fc
 80064d0:	0801b3f4 	.word	0x0801b3f4
 80064d4:	0801b3f8 	.word	0x0801b3f8
 80064d8:	0801b450 	.word	0x0801b450
 80064dc:	00000000 	.word	0x00000000

080064e0 <_dtoa_r>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	b09f      	sub	sp, #124	; 0x7c
 80064e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80064ea:	9100      	str	r1, [sp, #0]
 80064ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80064ee:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80064f0:	9002      	str	r0, [sp, #8]
 80064f2:	ec57 6b10 	vmov	r6, r7, d0
 80064f6:	920a      	str	r2, [sp, #40]	; 0x28
 80064f8:	9308      	str	r3, [sp, #32]
 80064fa:	b149      	cbz	r1, 8006510 <_dtoa_r+0x30>
 80064fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064fe:	604a      	str	r2, [r1, #4]
 8006500:	2301      	movs	r3, #1
 8006502:	4093      	lsls	r3, r2
 8006504:	4604      	mov	r4, r0
 8006506:	608b      	str	r3, [r1, #8]
 8006508:	f00c f8ba 	bl	8012680 <_Bfree>
 800650c:	2300      	movs	r3, #0
 800650e:	6423      	str	r3, [r4, #64]	; 0x40
 8006510:	f1b7 0900 	subs.w	r9, r7, #0
 8006514:	bfb4      	ite	lt
 8006516:	2301      	movlt	r3, #1
 8006518:	2300      	movge	r3, #0
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	4b76      	ldr	r3, [pc, #472]	; (80066f8 <_dtoa_r+0x218>)
 800651e:	bfbc      	itt	lt
 8006520:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
 8006524:	f8cd 9014 	strlt.w	r9, [sp, #20]
 8006528:	ea33 0309 	bics.w	r3, r3, r9
 800652c:	f000 80a8 	beq.w	8006680 <_dtoa_r+0x1a0>
 8006530:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006534:	2200      	movs	r2, #0
 8006536:	ec51 0b17 	vmov	r0, r1, d7
 800653a:	2300      	movs	r3, #0
 800653c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006540:	f7fa fd74 	bl	800102c <__aeabi_dcmpeq>
 8006544:	4680      	mov	r8, r0
 8006546:	b168      	cbz	r0, 8006564 <_dtoa_r+0x84>
 8006548:	9a08      	ldr	r2, [sp, #32]
 800654a:	2301      	movs	r3, #1
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006550:	b113      	cbz	r3, 8006558 <_dtoa_r+0x78>
 8006552:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006554:	4b69      	ldr	r3, [pc, #420]	; (80066fc <_dtoa_r+0x21c>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	4b69      	ldr	r3, [pc, #420]	; (8006700 <_dtoa_r+0x220>)
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	9803      	ldr	r0, [sp, #12]
 800655e:	b01f      	add	sp, #124	; 0x7c
 8006560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006564:	ed9d 0b06 	vldr	d0, [sp, #24]
 8006568:	9802      	ldr	r0, [sp, #8]
 800656a:	aa1c      	add	r2, sp, #112	; 0x70
 800656c:	a91d      	add	r1, sp, #116	; 0x74
 800656e:	f00c fbbd 	bl	8012cec <__d2b>
 8006572:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8006576:	4682      	mov	sl, r0
 8006578:	f040 8098 	bne.w	80066ac <_dtoa_r+0x1cc>
 800657c:	e9dd 851c 	ldrd	r8, r5, [sp, #112]	; 0x70
 8006580:	4445      	add	r5, r8
 8006582:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006586:	2b20      	cmp	r3, #32
 8006588:	f340 8384 	ble.w	8006c94 <_dtoa_r+0x7b4>
 800658c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006590:	fa09 f903 	lsl.w	r9, r9, r3
 8006594:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8006598:	fa26 f303 	lsr.w	r3, r6, r3
 800659c:	ea49 0003 	orr.w	r0, r9, r3
 80065a0:	f7fa f980 	bl	80008a4 <__aeabi_ui2d>
 80065a4:	2301      	movs	r3, #1
 80065a6:	3d01      	subs	r5, #1
 80065a8:	9311      	str	r3, [sp, #68]	; 0x44
 80065aa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80065ae:	4b55      	ldr	r3, [pc, #340]	; (8006704 <_dtoa_r+0x224>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	f7fa f839 	bl	8000628 <__aeabi_dsub>
 80065b6:	a34a      	add	r3, pc, #296	; (adr r3, 80066e0 <_dtoa_r+0x200>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7fa f9ec 	bl	8000998 <__aeabi_dmul>
 80065c0:	a349      	add	r3, pc, #292	; (adr r3, 80066e8 <_dtoa_r+0x208>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7fa f831 	bl	800062c <__adddf3>
 80065ca:	4606      	mov	r6, r0
 80065cc:	4628      	mov	r0, r5
 80065ce:	460f      	mov	r7, r1
 80065d0:	f7fa f978 	bl	80008c4 <__aeabi_i2d>
 80065d4:	a346      	add	r3, pc, #280	; (adr r3, 80066f0 <_dtoa_r+0x210>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7fa f9dd 	bl	8000998 <__aeabi_dmul>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7fa f821 	bl	800062c <__adddf3>
 80065ea:	4606      	mov	r6, r0
 80065ec:	460f      	mov	r7, r1
 80065ee:	f7fa fbe5 	bl	8000dbc <__aeabi_d2iz>
 80065f2:	2200      	movs	r2, #0
 80065f4:	4683      	mov	fp, r0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fd20 	bl	8001040 <__aeabi_dcmplt>
 8006600:	2800      	cmp	r0, #0
 8006602:	f040 831b 	bne.w	8006c3c <_dtoa_r+0x75c>
 8006606:	eba8 0805 	sub.w	r8, r8, r5
 800660a:	f1bb 0f16 	cmp.w	fp, #22
 800660e:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8006612:	f200 818d 	bhi.w	8006930 <_dtoa_r+0x450>
 8006616:	4d3c      	ldr	r5, [pc, #240]	; (8006708 <_dtoa_r+0x228>)
 8006618:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
 800661c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006624:	f7fa fd0c 	bl	8001040 <__aeabi_dcmplt>
 8006628:	2800      	cmp	r0, #0
 800662a:	d073      	beq.n	8006714 <_dtoa_r+0x234>
 800662c:	2300      	movs	r3, #0
 800662e:	2c00      	cmp	r4, #0
 8006630:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006634:	9310      	str	r3, [sp, #64]	; 0x40
 8006636:	f2c0 8180 	blt.w	800693a <_dtoa_r+0x45a>
 800663a:	2300      	movs	r3, #0
 800663c:	930b      	str	r3, [sp, #44]	; 0x2c
 800663e:	f1bb 0f00 	cmp.w	fp, #0
 8006642:	da6d      	bge.n	8006720 <_dtoa_r+0x240>
 8006644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006646:	eba3 030b 	sub.w	r3, r3, fp
 800664a:	930b      	str	r3, [sp, #44]	; 0x2c
 800664c:	f1cb 0300 	rsb	r3, fp, #0
 8006650:	e9cd b30e 	strd	fp, r3, [sp, #56]	; 0x38
 8006654:	9b00      	ldr	r3, [sp, #0]
 8006656:	2b09      	cmp	r3, #9
 8006658:	f04f 0b00 	mov.w	fp, #0
 800665c:	d868      	bhi.n	8006730 <_dtoa_r+0x250>
 800665e:	2b05      	cmp	r3, #5
 8006660:	f340 831d 	ble.w	8006c9e <_dtoa_r+0x7be>
 8006664:	3b04      	subs	r3, #4
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2500      	movs	r5, #0
 800666a:	9b00      	ldr	r3, [sp, #0]
 800666c:	3b02      	subs	r3, #2
 800666e:	2b03      	cmp	r3, #3
 8006670:	f200 8624 	bhi.w	80072bc <_dtoa_r+0xddc>
 8006674:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006678:	045d0460 	.word	0x045d0460
 800667c:	04390455 	.word	0x04390455
 8006680:	9a08      	ldr	r2, [sp, #32]
 8006682:	f3c9 0913 	ubfx	r9, r9, #0, #20
 8006686:	f242 730f 	movw	r3, #9999	; 0x270f
 800668a:	ea59 0906 	orrs.w	r9, r9, r6
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	d11c      	bne.n	80066cc <_dtoa_r+0x1ec>
 8006692:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 862c 	beq.w	80072f2 <_dtoa_r+0xe12>
 800669a:	4b1c      	ldr	r3, [pc, #112]	; (800670c <_dtoa_r+0x22c>)
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	3308      	adds	r3, #8
 80066a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80066a2:	9803      	ldr	r0, [sp, #12]
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	b01f      	add	sp, #124	; 0x7c
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80066b0:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80066b4:	4608      	mov	r0, r1
 80066b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80066ba:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80066be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066c2:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80066c6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80066ca:	e770      	b.n	80065ae <_dtoa_r+0xce>
 80066cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 83e8 	bne.w	8006ea4 <_dtoa_r+0x9c4>
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <_dtoa_r+0x230>)
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	e740      	b.n	800655c <_dtoa_r+0x7c>
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w
 80066e0:	636f4361 	.word	0x636f4361
 80066e4:	3fd287a7 	.word	0x3fd287a7
 80066e8:	8b60c8b3 	.word	0x8b60c8b3
 80066ec:	3fc68a28 	.word	0x3fc68a28
 80066f0:	509f79fb 	.word	0x509f79fb
 80066f4:	3fd34413 	.word	0x3fd34413
 80066f8:	7ff00000 	.word	0x7ff00000
 80066fc:	0801b42d 	.word	0x0801b42d
 8006700:	0801b42c 	.word	0x0801b42c
 8006704:	3ff80000 	.word	0x3ff80000
 8006708:	0801a598 	.word	0x0801a598
 800670c:	0801b470 	.word	0x0801b470
 8006710:	0801b47c 	.word	0x0801b47c
 8006714:	f1b8 0f00 	cmp.w	r8, #0
 8006718:	f340 845d 	ble.w	8006fd6 <_dtoa_r+0xaf6>
 800671c:	9010      	str	r0, [sp, #64]	; 0x40
 800671e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006720:	2300      	movs	r3, #0
 8006722:	930f      	str	r3, [sp, #60]	; 0x3c
 8006724:	9b00      	ldr	r3, [sp, #0]
 8006726:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800672a:	2b09      	cmp	r3, #9
 800672c:	445c      	add	r4, fp
 800672e:	d996      	bls.n	800665e <_dtoa_r+0x17e>
 8006730:	2300      	movs	r3, #0
 8006732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006736:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 800673a:	2501      	movs	r5, #1
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	950c      	str	r5, [sp, #48]	; 0x30
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	2100      	movs	r1, #0
 8006744:	6459      	str	r1, [r3, #68]	; 0x44
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	9318      	str	r3, [sp, #96]	; 0x60
 800674a:	9802      	ldr	r0, [sp, #8]
 800674c:	f00b ff72 	bl	8012634 <_Balloc>
 8006750:	9003      	str	r0, [sp, #12]
 8006752:	2800      	cmp	r0, #0
 8006754:	f000 85bb 	beq.w	80072ce <_dtoa_r+0xdee>
 8006758:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	2b0e      	cmp	r3, #14
 8006762:	f200 8114 	bhi.w	800698e <_dtoa_r+0x4ae>
 8006766:	2d00      	cmp	r5, #0
 8006768:	f000 8111 	beq.w	800698e <_dtoa_r+0x4ae>
 800676c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800676e:	2a00      	cmp	r2, #0
 8006770:	f340 8438 	ble.w	8006fe4 <_dtoa_r+0xb04>
 8006774:	4db1      	ldr	r5, [pc, #708]	; (8006a3c <_dtoa_r+0x55c>)
 8006776:	f002 030f 	and.w	r3, r2, #15
 800677a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800677e:	1115      	asrs	r5, r2, #4
 8006780:	05d2      	lsls	r2, r2, #23
 8006782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006786:	f140 83f8 	bpl.w	8006f7a <_dtoa_r+0xa9a>
 800678a:	4bad      	ldr	r3, [pc, #692]	; (8006a40 <_dtoa_r+0x560>)
 800678c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006794:	f7fa fa2a 	bl	8000bec <__aeabi_ddiv>
 8006798:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800679c:	f005 050f 	and.w	r5, r5, #15
 80067a0:	2703      	movs	r7, #3
 80067a2:	b17d      	cbz	r5, 80067c4 <_dtoa_r+0x2e4>
 80067a4:	4ea6      	ldr	r6, [pc, #664]	; (8006a40 <_dtoa_r+0x560>)
 80067a6:	07eb      	lsls	r3, r5, #31
 80067a8:	d508      	bpl.n	80067bc <_dtoa_r+0x2dc>
 80067aa:	4640      	mov	r0, r8
 80067ac:	4649      	mov	r1, r9
 80067ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067b2:	f7fa f8f1 	bl	8000998 <__aeabi_dmul>
 80067b6:	3701      	adds	r7, #1
 80067b8:	4680      	mov	r8, r0
 80067ba:	4689      	mov	r9, r1
 80067bc:	106d      	asrs	r5, r5, #1
 80067be:	f106 0608 	add.w	r6, r6, #8
 80067c2:	d1f0      	bne.n	80067a6 <_dtoa_r+0x2c6>
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80067cc:	f7fa fa0e 	bl	8000bec <__aeabi_ddiv>
 80067d0:	4680      	mov	r8, r0
 80067d2:	4689      	mov	r9, r1
 80067d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067d6:	b143      	cbz	r3, 80067ea <_dtoa_r+0x30a>
 80067d8:	4b9a      	ldr	r3, [pc, #616]	; (8006a44 <_dtoa_r+0x564>)
 80067da:	2200      	movs	r2, #0
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7fa fc2e 	bl	8001040 <__aeabi_dcmplt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f040 84f0 	bne.w	80071ca <_dtoa_r+0xcea>
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7fa f86a 	bl	80008c4 <__aeabi_i2d>
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	f7fa f8d0 	bl	8000998 <__aeabi_dmul>
 80067f8:	4b93      	ldr	r3, [pc, #588]	; (8006a48 <_dtoa_r+0x568>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	f7f9 ff16 	bl	800062c <__adddf3>
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	4606      	mov	r6, r0
 8006804:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80a9 	beq.w	8006960 <_dtoa_r+0x480>
 800680e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006810:	9319      	str	r3, [sp, #100]	; 0x64
 8006812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006814:	9312      	str	r3, [sp, #72]	; 0x48
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	4d88      	ldr	r5, [pc, #544]	; (8006a3c <_dtoa_r+0x55c>)
 800681a:	4649      	mov	r1, r9
 800681c:	4640      	mov	r0, r8
 800681e:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 8006822:	1c5e      	adds	r6, r3, #1
 8006824:	f7fa faca 	bl	8000dbc <__aeabi_d2iz>
 8006828:	9912      	ldr	r1, [sp, #72]	; 0x48
 800682a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 800682e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8006832:	4607      	mov	r7, r0
 8006834:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8006838:	f7fa f844 	bl	80008c4 <__aeabi_i2d>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	f7f9 fef0 	bl	8000628 <__aeabi_dsub>
 8006848:	4689      	mov	r9, r1
 800684a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800684c:	3730      	adds	r7, #48	; 0x30
 800684e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006852:	4680      	mov	r8, r0
 8006854:	b2ff      	uxtb	r7, r7
 8006856:	2900      	cmp	r1, #0
 8006858:	f000 8452 	beq.w	8007100 <_dtoa_r+0xc20>
 800685c:	497b      	ldr	r1, [pc, #492]	; (8006a4c <_dtoa_r+0x56c>)
 800685e:	2000      	movs	r0, #0
 8006860:	f7fa f9c4 	bl	8000bec <__aeabi_ddiv>
 8006864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006868:	f7f9 fede 	bl	8000628 <__aeabi_dsub>
 800686c:	9d03      	ldr	r5, [sp, #12]
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006876:	702f      	strb	r7, [r5, #0]
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	f7fa fbfe 	bl	800107c <__aeabi_dcmpgt>
 8006880:	2800      	cmp	r0, #0
 8006882:	f040 8496 	bne.w	80071b2 <_dtoa_r+0xcd2>
 8006886:	e9cd b41a 	strd	fp, r4, [sp, #104]	; 0x68
 800688a:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 800688e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006890:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8006894:	2700      	movs	r7, #0
 8006896:	e02a      	b.n	80068ee <_dtoa_r+0x40e>
 8006898:	3701      	adds	r7, #1
 800689a:	42af      	cmp	r7, r5
 800689c:	f280 84dd 	bge.w	800725a <_dtoa_r+0xd7a>
 80068a0:	4b6b      	ldr	r3, [pc, #428]	; (8006a50 <_dtoa_r+0x570>)
 80068a2:	4650      	mov	r0, sl
 80068a4:	4659      	mov	r1, fp
 80068a6:	2200      	movs	r2, #0
 80068a8:	f7fa f876 	bl	8000998 <__aeabi_dmul>
 80068ac:	4b68      	ldr	r3, [pc, #416]	; (8006a50 <_dtoa_r+0x570>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	4682      	mov	sl, r0
 80068b2:	468b      	mov	fp, r1
 80068b4:	4640      	mov	r0, r8
 80068b6:	4649      	mov	r1, r9
 80068b8:	f7fa f86e 	bl	8000998 <__aeabi_dmul>
 80068bc:	4689      	mov	r9, r1
 80068be:	4680      	mov	r8, r0
 80068c0:	f7fa fa7c 	bl	8000dbc <__aeabi_d2iz>
 80068c4:	4604      	mov	r4, r0
 80068c6:	f7f9 fffd 	bl	80008c4 <__aeabi_i2d>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4640      	mov	r0, r8
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7f9 fea9 	bl	8000628 <__aeabi_dsub>
 80068d6:	3430      	adds	r4, #48	; 0x30
 80068d8:	f806 4b01 	strb.w	r4, [r6], #1
 80068dc:	4652      	mov	r2, sl
 80068de:	465b      	mov	r3, fp
 80068e0:	4680      	mov	r8, r0
 80068e2:	4689      	mov	r9, r1
 80068e4:	f7fa fbac 	bl	8001040 <__aeabi_dcmplt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	f040 84b3 	bne.w	8007254 <_dtoa_r+0xd74>
 80068ee:	4642      	mov	r2, r8
 80068f0:	464b      	mov	r3, r9
 80068f2:	4954      	ldr	r1, [pc, #336]	; (8006a44 <_dtoa_r+0x564>)
 80068f4:	2000      	movs	r0, #0
 80068f6:	f7f9 fe97 	bl	8000628 <__aeabi_dsub>
 80068fa:	4652      	mov	r2, sl
 80068fc:	465b      	mov	r3, fp
 80068fe:	f7fa fb9f 	bl	8001040 <__aeabi_dcmplt>
 8006902:	2800      	cmp	r0, #0
 8006904:	d0c8      	beq.n	8006898 <_dtoa_r+0x3b8>
 8006906:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006908:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 800690c:	9a03      	ldr	r2, [sp, #12]
 800690e:	4637      	mov	r7, r6
 8006910:	f103 0801 	add.w	r8, r3, #1
 8006914:	e002      	b.n	800691c <_dtoa_r+0x43c>
 8006916:	4297      	cmp	r7, r2
 8006918:	f000 847b 	beq.w	8007212 <_dtoa_r+0xd32>
 800691c:	463e      	mov	r6, r7
 800691e:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
 8006922:	2b39      	cmp	r3, #57	; 0x39
 8006924:	d0f7      	beq.n	8006916 <_dtoa_r+0x436>
 8006926:	3301      	adds	r3, #1
 8006928:	b2db      	uxtb	r3, r3
 800692a:	703b      	strb	r3, [r7, #0]
 800692c:	4645      	mov	r5, r8
 800692e:	e174      	b.n	8006c1a <_dtoa_r+0x73a>
 8006930:	2301      	movs	r3, #1
 8006932:	2c00      	cmp	r4, #0
 8006934:	9310      	str	r3, [sp, #64]	; 0x40
 8006936:	f6bf ae80 	bge.w	800663a <_dtoa_r+0x15a>
 800693a:	f1c8 0301 	rsb	r3, r8, #1
 800693e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006940:	2400      	movs	r4, #0
 8006942:	e67c      	b.n	800663e <_dtoa_r+0x15e>
 8006944:	4638      	mov	r0, r7
 8006946:	f7f9 ffbd 	bl	80008c4 <__aeabi_i2d>
 800694a:	4642      	mov	r2, r8
 800694c:	464b      	mov	r3, r9
 800694e:	f7fa f823 	bl	8000998 <__aeabi_dmul>
 8006952:	4b3d      	ldr	r3, [pc, #244]	; (8006a48 <_dtoa_r+0x568>)
 8006954:	2200      	movs	r2, #0
 8006956:	f7f9 fe69 	bl	800062c <__adddf3>
 800695a:	4606      	mov	r6, r0
 800695c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006960:	4b3c      	ldr	r3, [pc, #240]	; (8006a54 <_dtoa_r+0x574>)
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	2200      	movs	r2, #0
 8006968:	f7f9 fe5e 	bl	8000628 <__aeabi_dsub>
 800696c:	4632      	mov	r2, r6
 800696e:	463b      	mov	r3, r7
 8006970:	4680      	mov	r8, r0
 8006972:	4689      	mov	r9, r1
 8006974:	f7fa fb82 	bl	800107c <__aeabi_dcmpgt>
 8006978:	2800      	cmp	r0, #0
 800697a:	f040 8459 	bne.w	8007230 <_dtoa_r+0xd50>
 800697e:	4640      	mov	r0, r8
 8006980:	4649      	mov	r1, r9
 8006982:	4632      	mov	r2, r6
 8006984:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006988:	f7fa fb5a 	bl	8001040 <__aeabi_dcmplt>
 800698c:	bb28      	cbnz	r0, 80069da <_dtoa_r+0x4fa>
 800698e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006990:	2b00      	cmp	r3, #0
 8006992:	f2c0 8091 	blt.w	8006ab8 <_dtoa_r+0x5d8>
 8006996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006998:	2a0e      	cmp	r2, #14
 800699a:	f300 808d 	bgt.w	8006ab8 <_dtoa_r+0x5d8>
 800699e:	4d27      	ldr	r5, [pc, #156]	; (8006a3c <_dtoa_r+0x55c>)
 80069a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069a2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80069a6:	ed95 7b00 	vldr	d7, [r5]
 80069aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	ed8d 7b00 	vstr	d7, [sp]
 80069b2:	da19      	bge.n	80069e8 <_dtoa_r+0x508>
 80069b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dc16      	bgt.n	80069e8 <_dtoa_r+0x508>
 80069ba:	d10e      	bne.n	80069da <_dtoa_r+0x4fa>
 80069bc:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <_dtoa_r+0x574>)
 80069be:	2200      	movs	r2, #0
 80069c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069c4:	f7f9 ffe8 	bl	8000998 <__aeabi_dmul>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069d0:	f7fa fb40 	bl	8001054 <__aeabi_dcmple>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f000 842b 	beq.w	8007230 <_dtoa_r+0xd50>
 80069da:	f04f 0900 	mov.w	r9, #0
 80069de:	9e03      	ldr	r6, [sp, #12]
 80069e0:	464f      	mov	r7, r9
 80069e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e4:	43dd      	mvns	r5, r3
 80069e6:	e224      	b.n	8006e32 <_dtoa_r+0x952>
 80069e8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80069ec:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80069f0:	4622      	mov	r2, r4
 80069f2:	462b      	mov	r3, r5
 80069f4:	4640      	mov	r0, r8
 80069f6:	4649      	mov	r1, r9
 80069f8:	f7fa f8f8 	bl	8000bec <__aeabi_ddiv>
 80069fc:	f7fa f9de 	bl	8000dbc <__aeabi_d2iz>
 8006a00:	4606      	mov	r6, r0
 8006a02:	f7f9 ff5f 	bl	80008c4 <__aeabi_i2d>
 8006a06:	4622      	mov	r2, r4
 8006a08:	462b      	mov	r3, r5
 8006a0a:	f7f9 ffc5 	bl	8000998 <__aeabi_dmul>
 8006a0e:	9f03      	ldr	r7, [sp, #12]
 8006a10:	460b      	mov	r3, r1
 8006a12:	4602      	mov	r2, r0
 8006a14:	4649      	mov	r1, r9
 8006a16:	4640      	mov	r0, r8
 8006a18:	f7f9 fe06 	bl	8000628 <__aeabi_dsub>
 8006a1c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8006a20:	f807 3b01 	strb.w	r3, [r7], #1
 8006a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	f000 8310 	beq.w	800704c <_dtoa_r+0xb6c>
 8006a2c:	2501      	movs	r5, #1
 8006a2e:	f8cd a010 	str.w	sl, [sp, #16]
 8006a32:	4699      	mov	r9, r3
 8006a34:	e9dd ab00 	ldrd	sl, fp, [sp]
 8006a38:	46a8      	mov	r8, r5
 8006a3a:	e02b      	b.n	8006a94 <_dtoa_r+0x5b4>
 8006a3c:	0801a598 	.word	0x0801a598
 8006a40:	0801a570 	.word	0x0801a570
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	401c0000 	.word	0x401c0000
 8006a4c:	3fe00000 	.word	0x3fe00000
 8006a50:	40240000 	.word	0x40240000
 8006a54:	40140000 	.word	0x40140000
 8006a58:	4652      	mov	r2, sl
 8006a5a:	465b      	mov	r3, fp
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f7fa f8c4 	bl	8000bec <__aeabi_ddiv>
 8006a64:	f7fa f9aa 	bl	8000dbc <__aeabi_d2iz>
 8006a68:	4606      	mov	r6, r0
 8006a6a:	f7f9 ff2b 	bl	80008c4 <__aeabi_i2d>
 8006a6e:	4652      	mov	r2, sl
 8006a70:	465b      	mov	r3, fp
 8006a72:	f7f9 ff91 	bl	8000998 <__aeabi_dmul>
 8006a76:	f108 0801 	add.w	r8, r8, #1
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4620      	mov	r0, r4
 8006a82:	f7f9 fdd1 	bl	8000628 <__aeabi_dsub>
 8006a86:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8006a8a:	45c8      	cmp	r8, r9
 8006a8c:	f807 3b01 	strb.w	r3, [r7], #1
 8006a90:	f000 82da 	beq.w	8007048 <_dtoa_r+0xb68>
 8006a94:	4bb9      	ldr	r3, [pc, #740]	; (8006d7c <_dtoa_r+0x89c>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	f7f9 ff7e 	bl	8000998 <__aeabi_dmul>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	f7fa fac2 	bl	800102c <__aeabi_dcmpeq>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d0d5      	beq.n	8006a58 <_dtoa_r+0x578>
 8006aac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006aae:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006ab2:	3501      	adds	r5, #1
 8006ab4:	463e      	mov	r6, r7
 8006ab6:	e0b0      	b.n	8006c1a <_dtoa_r+0x73a>
 8006ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	f040 80d2 	bne.w	8006c64 <_dtoa_r+0x784>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006ac4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac8:	461f      	mov	r7, r3
 8006aca:	b155      	cbz	r5, 8006ae2 <_dtoa_r+0x602>
 8006acc:	2c00      	cmp	r4, #0
 8006ace:	dd08      	ble.n	8006ae2 <_dtoa_r+0x602>
 8006ad0:	42a5      	cmp	r5, r4
 8006ad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	bfa8      	it	ge
 8006ad8:	4623      	movge	r3, r4
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ade:	1aed      	subs	r5, r5, r3
 8006ae0:	1ae4      	subs	r4, r4, r3
 8006ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ae4:	b153      	cbz	r3, 8006afc <_dtoa_r+0x61c>
 8006ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ae8:	b113      	cbz	r3, 8006af0 <_dtoa_r+0x610>
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	f040 82e7 	bne.w	80070be <_dtoa_r+0xbde>
 8006af0:	4651      	mov	r1, sl
 8006af2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006af4:	9802      	ldr	r0, [sp, #8]
 8006af6:	f00b ff53 	bl	80129a0 <__pow5mult>
 8006afa:	4682      	mov	sl, r0
 8006afc:	9802      	ldr	r0, [sp, #8]
 8006afe:	2101      	movs	r1, #1
 8006b00:	f00b fe6a 	bl	80127d8 <__i2b>
 8006b04:	4681      	mov	r9, r0
 8006b06:	f1bb 0f00 	cmp.w	fp, #0
 8006b0a:	f040 81b6 	bne.w	8006e7a <_dtoa_r+0x99a>
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f340 81cc 	ble.w	8006eae <_dtoa_r+0x9ce>
 8006b16:	2001      	movs	r0, #1
 8006b18:	4420      	add	r0, r4
 8006b1a:	f010 001f 	ands.w	r0, r0, #31
 8006b1e:	f000 809a 	beq.w	8006c56 <_dtoa_r+0x776>
 8006b22:	f1c0 0320 	rsb	r3, r0, #32
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	f340 81da 	ble.w	8006ee0 <_dtoa_r+0xa00>
 8006b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b2e:	f1c0 001c 	rsb	r0, r0, #28
 8006b32:	4403      	add	r3, r0
 8006b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b36:	4405      	add	r5, r0
 8006b38:	4404      	add	r4, r0
 8006b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	dd05      	ble.n	8006b4c <_dtoa_r+0x66c>
 8006b40:	4651      	mov	r1, sl
 8006b42:	9802      	ldr	r0, [sp, #8]
 8006b44:	461a      	mov	r2, r3
 8006b46:	f00b ff85 	bl	8012a54 <__lshift>
 8006b4a:	4682      	mov	sl, r0
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	dd05      	ble.n	8006b5c <_dtoa_r+0x67c>
 8006b50:	4649      	mov	r1, r9
 8006b52:	9802      	ldr	r0, [sp, #8]
 8006b54:	4622      	mov	r2, r4
 8006b56:	f00b ff7d 	bl	8012a54 <__lshift>
 8006b5a:	4681      	mov	r9, r0
 8006b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f040 8170 	bne.w	8006e44 <_dtoa_r+0x964>
 8006b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f340 8148 	ble.w	8006dfc <_dtoa_r+0x91c>
 8006b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 80a4 	bne.w	8006cbc <_dtoa_r+0x7dc>
 8006b74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006b76:	3501      	adds	r5, #1
 8006b78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006b7e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b82:	2601      	movs	r6, #1
 8006b84:	e007      	b.n	8006b96 <_dtoa_r+0x6b6>
 8006b86:	4651      	mov	r1, sl
 8006b88:	2300      	movs	r3, #0
 8006b8a:	220a      	movs	r2, #10
 8006b8c:	4658      	mov	r0, fp
 8006b8e:	f00b fd81 	bl	8012694 <__multadd>
 8006b92:	3601      	adds	r6, #1
 8006b94:	4682      	mov	sl, r0
 8006b96:	4649      	mov	r1, r9
 8006b98:	4650      	mov	r0, sl
 8006b9a:	f00b f995 	bl	8011ec8 <quorem>
 8006b9e:	42a6      	cmp	r6, r4
 8006ba0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ba4:	f808 3b01 	strb.w	r3, [r8], #1
 8006ba8:	dbed      	blt.n	8006b86 <_dtoa_r+0x6a6>
 8006baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	bfc8      	it	gt
 8006bb0:	4616      	movgt	r6, r2
 8006bb2:	9a03      	ldr	r2, [sp, #12]
 8006bb4:	bfd8      	it	le
 8006bb6:	2601      	movle	r6, #1
 8006bb8:	eb02 0b06 	add.w	fp, r2, r6
 8006bbc:	2400      	movs	r4, #0
 8006bbe:	4651      	mov	r1, sl
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	9802      	ldr	r0, [sp, #8]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	f00b ff45 	bl	8012a54 <__lshift>
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4682      	mov	sl, r0
 8006bce:	f00b ffb9 	bl	8012b44 <__mcmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f340 81e2 	ble.w	8006f9c <_dtoa_r+0xabc>
 8006bd8:	9a03      	ldr	r2, [sp, #12]
 8006bda:	e002      	b.n	8006be2 <_dtoa_r+0x702>
 8006bdc:	455a      	cmp	r2, fp
 8006bde:	f000 81e8 	beq.w	8006fb2 <_dtoa_r+0xad2>
 8006be2:	465e      	mov	r6, fp
 8006be4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006be8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bec:	2b39      	cmp	r3, #57	; 0x39
 8006bee:	d0f5      	beq.n	8006bdc <_dtoa_r+0x6fc>
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	f88b 3000 	strb.w	r3, [fp]
 8006bf6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	f00b fd3f 	bl	8012680 <_Bfree>
 8006c02:	b157      	cbz	r7, 8006c1a <_dtoa_r+0x73a>
 8006c04:	b12c      	cbz	r4, 8006c12 <_dtoa_r+0x732>
 8006c06:	42bc      	cmp	r4, r7
 8006c08:	d003      	beq.n	8006c12 <_dtoa_r+0x732>
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	f00b fd37 	bl	8012680 <_Bfree>
 8006c12:	9802      	ldr	r0, [sp, #8]
 8006c14:	4639      	mov	r1, r7
 8006c16:	f00b fd33 	bl	8012680 <_Bfree>
 8006c1a:	9802      	ldr	r0, [sp, #8]
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	f00b fd2f 	bl	8012680 <_Bfree>
 8006c22:	2300      	movs	r3, #0
 8006c24:	7033      	strb	r3, [r6, #0]
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	601d      	str	r5, [r3, #0]
 8006c2a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f43f ac95 	beq.w	800655c <_dtoa_r+0x7c>
 8006c32:	9803      	ldr	r0, [sp, #12]
 8006c34:	601e      	str	r6, [r3, #0]
 8006c36:	b01f      	add	sp, #124	; 0x7c
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3c:	4658      	mov	r0, fp
 8006c3e:	f7f9 fe41 	bl	80008c4 <__aeabi_i2d>
 8006c42:	4632      	mov	r2, r6
 8006c44:	463b      	mov	r3, r7
 8006c46:	f7fa f9f1 	bl	800102c <__aeabi_dcmpeq>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	f47f acdb 	bne.w	8006606 <_dtoa_r+0x126>
 8006c50:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006c54:	e4d7      	b.n	8006606 <_dtoa_r+0x126>
 8006c56:	231c      	movs	r3, #28
 8006c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c5a:	441a      	add	r2, r3
 8006c5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c5e:	441d      	add	r5, r3
 8006c60:	441c      	add	r4, r3
 8006c62:	e76a      	b.n	8006b3a <_dtoa_r+0x65a>
 8006c64:	9a00      	ldr	r2, [sp, #0]
 8006c66:	2a01      	cmp	r2, #1
 8006c68:	f340 81a8 	ble.w	8006fbc <_dtoa_r+0xadc>
 8006c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c70:	1e5e      	subs	r6, r3, #1
 8006c72:	42b2      	cmp	r2, r6
 8006c74:	f2c0 816a 	blt.w	8006f4c <_dtoa_r+0xa6c>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	eba2 0606 	sub.w	r6, r2, r6
 8006c7e:	f280 82dd 	bge.w	800723c <_dtoa_r+0xd5c>
 8006c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c86:	1a9d      	subs	r5, r3, r2
 8006c88:	9802      	ldr	r0, [sp, #8]
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	f00b fda4 	bl	80127d8 <__i2b>
 8006c90:	4607      	mov	r7, r0
 8006c92:	e71a      	b.n	8006aca <_dtoa_r+0x5ea>
 8006c94:	f1c3 0320 	rsb	r3, r3, #32
 8006c98:	fa06 f003 	lsl.w	r0, r6, r3
 8006c9c:	e480      	b.n	80065a0 <_dtoa_r+0xc0>
 8006c9e:	2501      	movs	r5, #1
 8006ca0:	e4e3      	b.n	800666a <_dtoa_r+0x18a>
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9802      	ldr	r0, [sp, #8]
 8006ca8:	220a      	movs	r2, #10
 8006caa:	f00b fcf3 	bl	8012694 <__multadd>
 8006cae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	f340 82ef 	ble.w	8007296 <_dtoa_r+0xdb6>
 8006cb8:	960e      	str	r6, [sp, #56]	; 0x38
 8006cba:	9309      	str	r3, [sp, #36]	; 0x24
 8006cbc:	2d00      	cmp	r5, #0
 8006cbe:	f300 813e 	bgt.w	8006f3e <_dtoa_r+0xa5e>
 8006cc2:	f1bb 0f00 	cmp.w	fp, #0
 8006cc6:	f040 81de 	bne.w	8007086 <_dtoa_r+0xba6>
 8006cca:	46b8      	mov	r8, r7
 8006ccc:	9e03      	ldr	r6, [sp, #12]
 8006cce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006cd0:	1e73      	subs	r3, r6, #1
 8006cd2:	441c      	add	r4, r3
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
 8006cde:	9c02      	ldr	r4, [sp, #8]
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	f00b f8f0 	bl	8011ec8 <quorem>
 8006ce8:	4639      	mov	r1, r7
 8006cea:	4683      	mov	fp, r0
 8006cec:	4650      	mov	r0, sl
 8006cee:	f00b ff29 	bl	8012b44 <__mcmp>
 8006cf2:	4642      	mov	r2, r8
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f00b ff45 	bl	8012b88 <__mdiff>
 8006cfe:	68c2      	ldr	r2, [r0, #12]
 8006d00:	4601      	mov	r1, r0
 8006d02:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	d13a      	bne.n	8006d80 <_dtoa_r+0x8a0>
 8006d0a:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
 8006d0e:	4650      	mov	r0, sl
 8006d10:	f00b ff18 	bl	8012b44 <__mcmp>
 8006d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d16:	9006      	str	r0, [sp, #24]
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f00b fcb1 	bl	8012680 <_Bfree>
 8006d1e:	9a06      	ldr	r2, [sp, #24]
 8006d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d15a      	bne.n	8006ddc <_dtoa_r+0x8fc>
 8006d26:	9a00      	ldr	r2, [sp, #0]
 8006d28:	b91a      	cbnz	r2, 8006d32 <_dtoa_r+0x852>
 8006d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d2c:	2a00      	cmp	r2, #0
 8006d2e:	f000 829a 	beq.w	8007266 <_dtoa_r+0xd86>
 8006d32:	2d00      	cmp	r5, #0
 8006d34:	db45      	blt.n	8006dc2 <_dtoa_r+0x8e2>
 8006d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d38:	46b3      	mov	fp, r6
 8006d3a:	42b2      	cmp	r2, r6
 8006d3c:	f80b 3b01 	strb.w	r3, [fp], #1
 8006d40:	f000 81b8 	beq.w	80070b4 <_dtoa_r+0xbd4>
 8006d44:	4651      	mov	r1, sl
 8006d46:	2300      	movs	r3, #0
 8006d48:	220a      	movs	r2, #10
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f00b fca2 	bl	8012694 <__multadd>
 8006d50:	4547      	cmp	r7, r8
 8006d52:	4682      	mov	sl, r0
 8006d54:	4639      	mov	r1, r7
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	f04f 020a 	mov.w	r2, #10
 8006d5e:	4620      	mov	r0, r4
 8006d60:	d036      	beq.n	8006dd0 <_dtoa_r+0x8f0>
 8006d62:	f00b fc97 	bl	8012694 <__multadd>
 8006d66:	4641      	mov	r1, r8
 8006d68:	4607      	mov	r7, r0
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	220a      	movs	r2, #10
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f00b fc90 	bl	8012694 <__multadd>
 8006d74:	465e      	mov	r6, fp
 8006d76:	4680      	mov	r8, r0
 8006d78:	e7b2      	b.n	8006ce0 <_dtoa_r+0x800>
 8006d7a:	bf00      	nop
 8006d7c:	40240000 	.word	0x40240000
 8006d80:	9802      	ldr	r0, [sp, #8]
 8006d82:	9306      	str	r3, [sp, #24]
 8006d84:	f00b fc7c 	bl	8012680 <_Bfree>
 8006d88:	2d00      	cmp	r5, #0
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	db06      	blt.n	8006d9c <_dtoa_r+0x8bc>
 8006d8e:	9a04      	ldr	r2, [sp, #16]
 8006d90:	9900      	ldr	r1, [sp, #0]
 8006d92:	f002 0201 	and.w	r2, r2, #1
 8006d96:	430d      	orrs	r5, r1
 8006d98:	432a      	orrs	r2, r5
 8006d9a:	d12a      	bne.n	8006df2 <_dtoa_r+0x912>
 8006d9c:	4651      	mov	r1, sl
 8006d9e:	2201      	movs	r2, #1
 8006da0:	9802      	ldr	r0, [sp, #8]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	f00b fe56 	bl	8012a54 <__lshift>
 8006da8:	4649      	mov	r1, r9
 8006daa:	4682      	mov	sl, r0
 8006dac:	f00b feca 	bl	8012b44 <__mcmp>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	9b00      	ldr	r3, [sp, #0]
 8006db4:	f340 80e7 	ble.w	8006f86 <_dtoa_r+0xaa6>
 8006db8:	2b39      	cmp	r3, #57	; 0x39
 8006dba:	f000 822f 	beq.w	800721c <_dtoa_r+0xd3c>
 8006dbe:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 8006dc2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8006dc8:	463c      	mov	r4, r7
 8006dca:	3501      	adds	r5, #1
 8006dcc:	4647      	mov	r7, r8
 8006dce:	e712      	b.n	8006bf6 <_dtoa_r+0x716>
 8006dd0:	f00b fc60 	bl	8012694 <__multadd>
 8006dd4:	465e      	mov	r6, fp
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	4680      	mov	r8, r0
 8006dda:	e781      	b.n	8006ce0 <_dtoa_r+0x800>
 8006ddc:	2d00      	cmp	r5, #0
 8006dde:	f2c0 827d 	blt.w	80072dc <_dtoa_r+0xdfc>
 8006de2:	9900      	ldr	r1, [sp, #0]
 8006de4:	430d      	orrs	r5, r1
 8006de6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006de8:	430d      	orrs	r5, r1
 8006dea:	f000 8277 	beq.w	80072dc <_dtoa_r+0xdfc>
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	dda1      	ble.n	8006d36 <_dtoa_r+0x856>
 8006df2:	2b39      	cmp	r3, #57	; 0x39
 8006df4:	f000 8212 	beq.w	800721c <_dtoa_r+0xd3c>
 8006df8:	3301      	adds	r3, #1
 8006dfa:	e7e2      	b.n	8006dc2 <_dtoa_r+0x8e2>
 8006dfc:	9b00      	ldr	r3, [sp, #0]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	f77f aeb4 	ble.w	8006b6c <_dtoa_r+0x68c>
 8006e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 811c 	bne.w	8007044 <_dtoa_r+0xb64>
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	2205      	movs	r2, #5
 8006e10:	9802      	ldr	r0, [sp, #8]
 8006e12:	f00b fc3f 	bl	8012694 <__multadd>
 8006e16:	4601      	mov	r1, r0
 8006e18:	4681      	mov	r9, r0
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	f00b fe92 	bl	8012b44 <__mcmp>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f340 810f 	ble.w	8007044 <_dtoa_r+0xb64>
 8006e26:	9e03      	ldr	r6, [sp, #12]
 8006e28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006e2a:	2331      	movs	r3, #49	; 0x31
 8006e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e30:	3501      	adds	r5, #1
 8006e32:	9802      	ldr	r0, [sp, #8]
 8006e34:	4649      	mov	r1, r9
 8006e36:	3501      	adds	r5, #1
 8006e38:	f00b fc22 	bl	8012680 <_Bfree>
 8006e3c:	2f00      	cmp	r7, #0
 8006e3e:	f47f aee8 	bne.w	8006c12 <_dtoa_r+0x732>
 8006e42:	e6ea      	b.n	8006c1a <_dtoa_r+0x73a>
 8006e44:	4649      	mov	r1, r9
 8006e46:	4650      	mov	r0, sl
 8006e48:	f00b fe7c 	bl	8012b44 <__mcmp>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f6bf ae89 	bge.w	8006b64 <_dtoa_r+0x684>
 8006e52:	4651      	mov	r1, sl
 8006e54:	2300      	movs	r3, #0
 8006e56:	9802      	ldr	r0, [sp, #8]
 8006e58:	220a      	movs	r2, #10
 8006e5a:	f00b fc1b 	bl	8012694 <__multadd>
 8006e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e60:	1e5e      	subs	r6, r3, #1
 8006e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e64:	4682      	mov	sl, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f47f af1b 	bne.w	8006ca2 <_dtoa_r+0x7c2>
 8006e6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f340 81ff 	ble.w	8007272 <_dtoa_r+0xd92>
 8006e74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006e76:	9309      	str	r3, [sp, #36]	; 0x24
 8006e78:	e67e      	b.n	8006b78 <_dtoa_r+0x698>
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	465a      	mov	r2, fp
 8006e7e:	9802      	ldr	r0, [sp, #8]
 8006e80:	f00b fd8e 	bl	80129a0 <__pow5mult>
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	4681      	mov	r9, r0
 8006e8a:	dd6b      	ble.n	8006f64 <_dtoa_r+0xa84>
 8006e8c:	f04f 0b00 	mov.w	fp, #0
 8006e90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e94:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8006e98:	6918      	ldr	r0, [r3, #16]
 8006e9a:	f00b fc4b 	bl	8012734 <__hi0bits>
 8006e9e:	f1c0 0020 	rsb	r0, r0, #32
 8006ea2:	e639      	b.n	8006b18 <_dtoa_r+0x638>
 8006ea4:	4b92      	ldr	r3, [pc, #584]	; (80070f0 <_dtoa_r+0xc10>)
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	f7ff bbf9 	b.w	80066a0 <_dtoa_r+0x1c0>
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f47f ae30 	bne.w	8006b16 <_dtoa_r+0x636>
 8006eb6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8006eba:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f47f ae29 	bne.w	8006b16 <_dtoa_r+0x636>
 8006ec4:	4b8b      	ldr	r3, [pc, #556]	; (80070f4 <_dtoa_r+0xc14>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	b123      	cbz	r3, 8006ed4 <_dtoa_r+0x9f4>
 8006eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ecc:	3301      	adds	r3, #1
 8006ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ed0:	3401      	adds	r4, #1
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f1bb 0f00 	cmp.w	fp, #0
 8006ed8:	f040 81ae 	bne.w	8007238 <_dtoa_r+0xd58>
 8006edc:	469b      	mov	fp, r3
 8006ede:	e61a      	b.n	8006b16 <_dtoa_r+0x636>
 8006ee0:	f43f ae2b 	beq.w	8006b3a <_dtoa_r+0x65a>
 8006ee4:	f1c0 033c 	rsb	r3, r0, #60	; 0x3c
 8006ee8:	e6b6      	b.n	8006c58 <_dtoa_r+0x778>
 8006eea:	2301      	movs	r3, #1
 8006eec:	930c      	str	r3, [sp, #48]	; 0x30
 8006eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ef2:	4413      	add	r3, r2
 8006ef4:	9318      	str	r3, [sp, #96]	; 0x60
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	461e      	mov	r6, r3
 8006efc:	9309      	str	r3, [sp, #36]	; 0x24
 8006efe:	bfb8      	it	lt
 8006f00:	2601      	movlt	r6, #1
 8006f02:	2e17      	cmp	r6, #23
 8006f04:	f340 81d5 	ble.w	80072b2 <_dtoa_r+0xdd2>
 8006f08:	2201      	movs	r2, #1
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	f103 0014 	add.w	r0, r3, #20
 8006f12:	42b0      	cmp	r0, r6
 8006f14:	4611      	mov	r1, r2
 8006f16:	f102 0201 	add.w	r2, r2, #1
 8006f1a:	d9f7      	bls.n	8006f0c <_dtoa_r+0xa2c>
 8006f1c:	9b02      	ldr	r3, [sp, #8]
 8006f1e:	6459      	str	r1, [r3, #68]	; 0x44
 8006f20:	e413      	b.n	800674a <_dtoa_r+0x26a>
 8006f22:	2301      	movs	r3, #1
 8006f24:	930c      	str	r3, [sp, #48]	; 0x30
 8006f26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	dd32      	ble.n	8006f92 <_dtoa_r+0xab2>
 8006f2c:	9618      	str	r6, [sp, #96]	; 0x60
 8006f2e:	9609      	str	r6, [sp, #36]	; 0x24
 8006f30:	e7e7      	b.n	8006f02 <_dtoa_r+0xa22>
 8006f32:	2300      	movs	r3, #0
 8006f34:	930c      	str	r3, [sp, #48]	; 0x30
 8006f36:	e7da      	b.n	8006eee <_dtoa_r+0xa0e>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f3c:	e7f3      	b.n	8006f26 <_dtoa_r+0xa46>
 8006f3e:	4639      	mov	r1, r7
 8006f40:	9802      	ldr	r0, [sp, #8]
 8006f42:	462a      	mov	r2, r5
 8006f44:	f00b fd86 	bl	8012a54 <__lshift>
 8006f48:	4607      	mov	r7, r0
 8006f4a:	e6ba      	b.n	8006cc2 <_dtoa_r+0x7e2>
 8006f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f50:	960f      	str	r6, [sp, #60]	; 0x3c
 8006f52:	1af3      	subs	r3, r6, r3
 8006f54:	449b      	add	fp, r3
 8006f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f58:	4615      	mov	r5, r2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	441c      	add	r4, r3
 8006f5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f60:	2600      	movs	r6, #0
 8006f62:	e691      	b.n	8006c88 <_dtoa_r+0x7a8>
 8006f64:	9b04      	ldr	r3, [sp, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d190      	bne.n	8006e8c <_dtoa_r+0x9ac>
 8006f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f6e:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8006f72:	460a      	mov	r2, r1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d189      	bne.n	8006e8c <_dtoa_r+0x9ac>
 8006f78:	e7a4      	b.n	8006ec4 <_dtoa_r+0x9e4>
 8006f7a:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006f7e:	2702      	movs	r7, #2
 8006f80:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8006f84:	e40d      	b.n	80067a2 <_dtoa_r+0x2c2>
 8006f86:	f47f af1c 	bne.w	8006dc2 <_dtoa_r+0x8e2>
 8006f8a:	07da      	lsls	r2, r3, #31
 8006f8c:	f57f af19 	bpl.w	8006dc2 <_dtoa_r+0x8e2>
 8006f90:	e712      	b.n	8006db8 <_dtoa_r+0x8d8>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8006f98:	f7ff bbd2 	b.w	8006740 <_dtoa_r+0x260>
 8006f9c:	d103      	bne.n	8006fa6 <_dtoa_r+0xac6>
 8006f9e:	9b00      	ldr	r3, [sp, #0]
 8006fa0:	07db      	lsls	r3, r3, #31
 8006fa2:	f53f ae19 	bmi.w	8006bd8 <_dtoa_r+0x6f8>
 8006fa6:	465e      	mov	r6, fp
 8006fa8:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8006fac:	2b30      	cmp	r3, #48	; 0x30
 8006fae:	d0fa      	beq.n	8006fa6 <_dtoa_r+0xac6>
 8006fb0:	e621      	b.n	8006bf6 <_dtoa_r+0x716>
 8006fb2:	9a03      	ldr	r2, [sp, #12]
 8006fb4:	2331      	movs	r3, #49	; 0x31
 8006fb6:	3501      	adds	r5, #1
 8006fb8:	7013      	strb	r3, [r2, #0]
 8006fba:	e61c      	b.n	8006bf6 <_dtoa_r+0x716>
 8006fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	f000 80fa 	beq.w	80071b8 <_dtoa_r+0xcd8>
 8006fc4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006fcc:	4615      	mov	r5, r2
 8006fce:	441a      	add	r2, r3
 8006fd0:	441c      	add	r4, r3
 8006fd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fd4:	e658      	b.n	8006c88 <_dtoa_r+0x7a8>
 8006fd6:	f1c8 0301 	rsb	r3, r8, #1
 8006fda:	4604      	mov	r4, r0
 8006fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fde:	9010      	str	r0, [sp, #64]	; 0x40
 8006fe0:	f7ff bb9e 	b.w	8006720 <_dtoa_r+0x240>
 8006fe4:	f000 80ec 	beq.w	80071c0 <_dtoa_r+0xce0>
 8006fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fea:	4d43      	ldr	r5, [pc, #268]	; (80070f8 <_dtoa_r+0xc18>)
 8006fec:	425e      	negs	r6, r3
 8006fee:	f006 030f 	and.w	r3, r6, #15
 8006ff2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ffe:	f7f9 fccb 	bl	8000998 <__aeabi_dmul>
 8007002:	1135      	asrs	r5, r6, #4
 8007004:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007008:	f000 814e 	beq.w	80072a8 <_dtoa_r+0xdc8>
 800700c:	4e3b      	ldr	r6, [pc, #236]	; (80070fc <_dtoa_r+0xc1c>)
 800700e:	2300      	movs	r3, #0
 8007010:	2702      	movs	r7, #2
 8007012:	4680      	mov	r8, r0
 8007014:	4689      	mov	r9, r1
 8007016:	07e8      	lsls	r0, r5, #31
 8007018:	d509      	bpl.n	800702e <_dtoa_r+0xb4e>
 800701a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800701e:	4640      	mov	r0, r8
 8007020:	4649      	mov	r1, r9
 8007022:	f7f9 fcb9 	bl	8000998 <__aeabi_dmul>
 8007026:	3701      	adds	r7, #1
 8007028:	4680      	mov	r8, r0
 800702a:	4689      	mov	r9, r1
 800702c:	2301      	movs	r3, #1
 800702e:	106d      	asrs	r5, r5, #1
 8007030:	f106 0608 	add.w	r6, r6, #8
 8007034:	d1ef      	bne.n	8007016 <_dtoa_r+0xb36>
 8007036:	2b00      	cmp	r3, #0
 8007038:	f47f abcc 	bne.w	80067d4 <_dtoa_r+0x2f4>
 800703c:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8007040:	f7ff bbc8 	b.w	80067d4 <_dtoa_r+0x2f4>
 8007044:	9e03      	ldr	r6, [sp, #12]
 8007046:	e4cc      	b.n	80069e2 <_dtoa_r+0x502>
 8007048:	f8dd a010 	ldr.w	sl, [sp, #16]
 800704c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	f7f9 faeb 	bl	800062c <__adddf3>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800705e:	3501      	adds	r5, #1
 8007060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007064:	46a8      	mov	r8, r5
 8007066:	f7fa f809 	bl	800107c <__aeabi_dcmpgt>
 800706a:	b940      	cbnz	r0, 800707e <_dtoa_r+0xb9e>
 800706c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007074:	f7f9 ffda 	bl	800102c <__aeabi_dcmpeq>
 8007078:	b118      	cbz	r0, 8007082 <_dtoa_r+0xba2>
 800707a:	07f1      	lsls	r1, r6, #31
 800707c:	d501      	bpl.n	8007082 <_dtoa_r+0xba2>
 800707e:	9a03      	ldr	r2, [sp, #12]
 8007080:	e44c      	b.n	800691c <_dtoa_r+0x43c>
 8007082:	463e      	mov	r6, r7
 8007084:	e5c9      	b.n	8006c1a <_dtoa_r+0x73a>
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	9802      	ldr	r0, [sp, #8]
 800708a:	f00b fad3 	bl	8012634 <_Balloc>
 800708e:	4605      	mov	r5, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	f000 8127 	beq.w	80072e4 <_dtoa_r+0xe04>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3302      	adds	r3, #2
 800709a:	009a      	lsls	r2, r3, #2
 800709c:	f107 010c 	add.w	r1, r7, #12
 80070a0:	300c      	adds	r0, #12
 80070a2:	f7f9 fff5 	bl	8001090 <memcpy>
 80070a6:	9802      	ldr	r0, [sp, #8]
 80070a8:	4629      	mov	r1, r5
 80070aa:	2201      	movs	r2, #1
 80070ac:	f00b fcd2 	bl	8012a54 <__lshift>
 80070b0:	4680      	mov	r8, r0
 80070b2:	e60b      	b.n	8006ccc <_dtoa_r+0x7ec>
 80070b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80070b6:	463c      	mov	r4, r7
 80070b8:	3501      	adds	r5, #1
 80070ba:	4647      	mov	r7, r8
 80070bc:	e57f      	b.n	8006bbe <_dtoa_r+0x6de>
 80070be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80070c2:	4639      	mov	r1, r7
 80070c4:	4632      	mov	r2, r6
 80070c6:	4640      	mov	r0, r8
 80070c8:	f00b fc6a 	bl	80129a0 <__pow5mult>
 80070cc:	4652      	mov	r2, sl
 80070ce:	4601      	mov	r1, r0
 80070d0:	4607      	mov	r7, r0
 80070d2:	4640      	mov	r0, r8
 80070d4:	f00b fbae 	bl	8012834 <__multiply>
 80070d8:	4651      	mov	r1, sl
 80070da:	4682      	mov	sl, r0
 80070dc:	4640      	mov	r0, r8
 80070de:	f00b facf 	bl	8012680 <_Bfree>
 80070e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070e4:	1b9b      	subs	r3, r3, r6
 80070e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e8:	f43f ad08 	beq.w	8006afc <_dtoa_r+0x61c>
 80070ec:	e500      	b.n	8006af0 <_dtoa_r+0x610>
 80070ee:	bf00      	nop
 80070f0:	0801b47c 	.word	0x0801b47c
 80070f4:	7ff00000 	.word	0x7ff00000
 80070f8:	0801a598 	.word	0x0801a598
 80070fc:	0801a570 	.word	0x0801a570
 8007100:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007104:	f7f9 fc48 	bl	8000998 <__aeabi_dmul>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	701f      	strb	r7, [r3, #0]
 800710c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800710e:	2b01      	cmp	r3, #1
 8007110:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007114:	f000 80c6 	beq.w	80072a4 <_dtoa_r+0xdc4>
 8007118:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007120:	441f      	add	r7, r3
 8007122:	4b7c      	ldr	r3, [pc, #496]	; (8007314 <_dtoa_r+0xe34>)
 8007124:	2200      	movs	r2, #0
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 fc35 	bl	8000998 <__aeabi_dmul>
 800712e:	4689      	mov	r9, r1
 8007130:	4680      	mov	r8, r0
 8007132:	f7f9 fe43 	bl	8000dbc <__aeabi_d2iz>
 8007136:	4683      	mov	fp, r0
 8007138:	f7f9 fbc4 	bl	80008c4 <__aeabi_i2d>
 800713c:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4640      	mov	r0, r8
 8007146:	4649      	mov	r1, r9
 8007148:	f7f9 fa6e 	bl	8000628 <__aeabi_dsub>
 800714c:	f806 bb01 	strb.w	fp, [r6], #1
 8007150:	42b7      	cmp	r7, r6
 8007152:	4680      	mov	r8, r0
 8007154:	4689      	mov	r9, r1
 8007156:	d1e4      	bne.n	8007122 <_dtoa_r+0xc42>
 8007158:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800715c:	4b6e      	ldr	r3, [pc, #440]	; (8007318 <_dtoa_r+0xe38>)
 800715e:	2200      	movs	r2, #0
 8007160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007164:	f7f9 fa62 	bl	800062c <__adddf3>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 ff84 	bl	800107c <__aeabi_dcmpgt>
 8007174:	2800      	cmp	r0, #0
 8007176:	d167      	bne.n	8007248 <_dtoa_r+0xd68>
 8007178:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800717c:	4966      	ldr	r1, [pc, #408]	; (8007318 <_dtoa_r+0xe38>)
 800717e:	2000      	movs	r0, #0
 8007180:	f7f9 fa52 	bl	8000628 <__aeabi_dsub>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 ff58 	bl	8001040 <__aeabi_dcmplt>
 8007190:	b948      	cbnz	r0, 80071a6 <_dtoa_r+0xcc6>
 8007192:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007194:	2b00      	cmp	r3, #0
 8007196:	f6ff ac93 	blt.w	8006ac0 <_dtoa_r+0x5e0>
 800719a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800719c:	2b0e      	cmp	r3, #14
 800719e:	f73f ac8f 	bgt.w	8006ac0 <_dtoa_r+0x5e0>
 80071a2:	f7ff bbfd 	b.w	80069a0 <_dtoa_r+0x4c0>
 80071a6:	463e      	mov	r6, r7
 80071a8:	3f01      	subs	r7, #1
 80071aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071ae:	2b30      	cmp	r3, #48	; 0x30
 80071b0:	d0f9      	beq.n	80071a6 <_dtoa_r+0xcc6>
 80071b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80071b4:	3501      	adds	r5, #1
 80071b6:	e530      	b.n	8006c1a <_dtoa_r+0x73a>
 80071b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80071ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071be:	e703      	b.n	8006fc8 <_dtoa_r+0xae8>
 80071c0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80071c4:	2702      	movs	r7, #2
 80071c6:	f7ff bb05 	b.w	80067d4 <_dtoa_r+0x2f4>
 80071ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f43f abb9 	beq.w	8006944 <_dtoa_r+0x464>
 80071d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f77f abda 	ble.w	800698e <_dtoa_r+0x4ae>
 80071da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071dc:	9312      	str	r3, [sp, #72]	; 0x48
 80071de:	3a01      	subs	r2, #1
 80071e0:	4b4c      	ldr	r3, [pc, #304]	; (8007314 <_dtoa_r+0xe34>)
 80071e2:	9219      	str	r2, [sp, #100]	; 0x64
 80071e4:	4640      	mov	r0, r8
 80071e6:	2200      	movs	r2, #0
 80071e8:	4649      	mov	r1, r9
 80071ea:	f7f9 fbd5 	bl	8000998 <__aeabi_dmul>
 80071ee:	4680      	mov	r8, r0
 80071f0:	4689      	mov	r9, r1
 80071f2:	1c78      	adds	r0, r7, #1
 80071f4:	f7f9 fb66 	bl	80008c4 <__aeabi_i2d>
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	f7f9 fbcc 	bl	8000998 <__aeabi_dmul>
 8007200:	4b46      	ldr	r3, [pc, #280]	; (800731c <_dtoa_r+0xe3c>)
 8007202:	2200      	movs	r2, #0
 8007204:	f7f9 fa12 	bl	800062c <__adddf3>
 8007208:	4606      	mov	r6, r0
 800720a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800720e:	f7ff bb02 	b.w	8006816 <_dtoa_r+0x336>
 8007212:	f108 0801 	add.w	r8, r8, #1
 8007216:	2331      	movs	r3, #49	; 0x31
 8007218:	f7ff bb87 	b.w	800692a <_dtoa_r+0x44a>
 800721c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800721e:	9a03      	ldr	r2, [sp, #12]
 8007220:	46b3      	mov	fp, r6
 8007222:	2339      	movs	r3, #57	; 0x39
 8007224:	463c      	mov	r4, r7
 8007226:	f80b 3b01 	strb.w	r3, [fp], #1
 800722a:	3501      	adds	r5, #1
 800722c:	4647      	mov	r7, r8
 800722e:	e4d8      	b.n	8006be2 <_dtoa_r+0x702>
 8007230:	f04f 0900 	mov.w	r9, #0
 8007234:	464f      	mov	r7, r9
 8007236:	e5f6      	b.n	8006e26 <_dtoa_r+0x946>
 8007238:	469b      	mov	fp, r3
 800723a:	e629      	b.n	8006e90 <_dtoa_r+0x9b0>
 800723c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800723e:	4615      	mov	r5, r2
 8007240:	441a      	add	r2, r3
 8007242:	441c      	add	r4, r3
 8007244:	920b      	str	r2, [sp, #44]	; 0x2c
 8007246:	e51f      	b.n	8006c88 <_dtoa_r+0x7a8>
 8007248:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800724a:	9a03      	ldr	r2, [sp, #12]
 800724c:	f103 0801 	add.w	r8, r3, #1
 8007250:	f7ff bb64 	b.w	800691c <_dtoa_r+0x43c>
 8007254:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8007258:	e7ab      	b.n	80071b2 <_dtoa_r+0xcd2>
 800725a:	e9dd b41a 	ldrd	fp, r4, [sp, #104]	; 0x68
 800725e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8007262:	f7ff bb94 	b.w	800698e <_dtoa_r+0x4ae>
 8007266:	2b39      	cmp	r3, #57	; 0x39
 8007268:	d0d8      	beq.n	800721c <_dtoa_r+0xd3c>
 800726a:	2d00      	cmp	r5, #0
 800726c:	f73f ada7 	bgt.w	8006dbe <_dtoa_r+0x8de>
 8007270:	e5a7      	b.n	8006dc2 <_dtoa_r+0x8e2>
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	2b02      	cmp	r3, #2
 8007276:	dc0a      	bgt.n	800728e <_dtoa_r+0xdae>
 8007278:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800727a:	9309      	str	r3, [sp, #36]	; 0x24
 800727c:	4649      	mov	r1, r9
 800727e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007280:	f00a fe22 	bl	8011ec8 <quorem>
 8007284:	9a03      	ldr	r2, [sp, #12]
 8007286:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800728a:	7013      	strb	r3, [r2, #0]
 800728c:	e48d      	b.n	8006baa <_dtoa_r+0x6ca>
 800728e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007290:	9309      	str	r3, [sp, #36]	; 0x24
 8007292:	960e      	str	r6, [sp, #56]	; 0x38
 8007294:	e5b6      	b.n	8006e04 <_dtoa_r+0x924>
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	2b02      	cmp	r3, #2
 800729a:	dcf8      	bgt.n	800728e <_dtoa_r+0xdae>
 800729c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800729e:	960e      	str	r6, [sp, #56]	; 0x38
 80072a0:	9309      	str	r3, [sp, #36]	; 0x24
 80072a2:	e50b      	b.n	8006cbc <_dtoa_r+0x7dc>
 80072a4:	4637      	mov	r7, r6
 80072a6:	e759      	b.n	800715c <_dtoa_r+0xc7c>
 80072a8:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 80072ac:	2702      	movs	r7, #2
 80072ae:	f7ff ba91 	b.w	80067d4 <_dtoa_r+0x2f4>
 80072b2:	9b02      	ldr	r3, [sp, #8]
 80072b4:	2100      	movs	r1, #0
 80072b6:	6459      	str	r1, [r3, #68]	; 0x44
 80072b8:	f7ff ba47 	b.w	800674a <_dtoa_r+0x26a>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	2500      	movs	r5, #0
 80072c0:	645d      	str	r5, [r3, #68]	; 0x44
 80072c2:	4629      	mov	r1, r5
 80072c4:	4618      	mov	r0, r3
 80072c6:	f00b f9b5 	bl	8012634 <_Balloc>
 80072ca:	9003      	str	r0, [sp, #12]
 80072cc:	b9a8      	cbnz	r0, 80072fa <_dtoa_r+0xe1a>
 80072ce:	4b14      	ldr	r3, [pc, #80]	; (8007320 <_dtoa_r+0xe40>)
 80072d0:	4814      	ldr	r0, [pc, #80]	; (8007324 <_dtoa_r+0xe44>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072d8:	f00c fd98 	bl	8013e0c <__assert_func>
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f77f ad70 	ble.w	8006dc2 <_dtoa_r+0x8e2>
 80072e2:	e55b      	b.n	8006d9c <_dtoa_r+0x8bc>
 80072e4:	4b0e      	ldr	r3, [pc, #56]	; (8007320 <_dtoa_r+0xe40>)
 80072e6:	480f      	ldr	r0, [pc, #60]	; (8007324 <_dtoa_r+0xe44>)
 80072e8:	462a      	mov	r2, r5
 80072ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072ee:	f00c fd8d 	bl	8013e0c <__assert_func>
 80072f2:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <_dtoa_r+0xe48>)
 80072f4:	9303      	str	r3, [sp, #12]
 80072f6:	f7ff b931 	b.w	800655c <_dtoa_r+0x7c>
 80072fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
 8007300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007304:	2201      	movs	r2, #1
 8007306:	950a      	str	r5, [sp, #40]	; 0x28
 8007308:	9318      	str	r3, [sp, #96]	; 0x60
 800730a:	920c      	str	r2, [sp, #48]	; 0x30
 800730c:	9309      	str	r3, [sp, #36]	; 0x24
 800730e:	f7ff bb3e 	b.w	800698e <_dtoa_r+0x4ae>
 8007312:	bf00      	nop
 8007314:	40240000 	.word	0x40240000
 8007318:	3fe00000 	.word	0x3fe00000
 800731c:	401c0000 	.word	0x401c0000
 8007320:	0801b480 	.word	0x0801b480
 8007324:	0801b494 	.word	0x0801b494
 8007328:	0801b470 	.word	0x0801b470

0800732c <callback_intrpt>:
{
 800732c:	b508      	push	{r3, lr}
	k_work_submit(&work);
 800732e:	4805      	ldr	r0, [pc, #20]	; (8007344 <callback_intrpt+0x18>)
 8007330:	f008 fcca 	bl	800fcc8 <k_work_submit>
	k_work_submit(&my_work);
 8007334:	4804      	ldr	r0, [pc, #16]	; (8007348 <callback_intrpt+0x1c>)
 8007336:	f008 fcc7 	bl	800fcc8 <k_work_submit>
}
 800733a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("New messure done\n");
 800733e:	4803      	ldr	r0, [pc, #12]	; (800734c <callback_intrpt+0x20>)
 8007340:	f00d ba75 	b.w	801482e <printk>
 8007344:	200019ec 	.word	0x200019ec
 8007348:	200019dc 	.word	0x200019dc
 800734c:	0801b5ec 	.word	0x0801b5ec

08007350 <timer_callback>:
	z_impl_k_sem_give(sem);
 8007350:	4801      	ldr	r0, [pc, #4]	; (8007358 <timer_callback+0x8>)
 8007352:	f008 bc11 	b.w	800fb78 <z_impl_k_sem_give>
 8007356:	bf00      	nop
 8007358:	20000df0 	.word	0x20000df0

0800735c <i2c_reg_write_byte_dt.constprop.0.isra.0>:
 * @param reg_addr Address of the internal register being written.
 * @param value Value to be written to internal register.
 *
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
 800735c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
 800735e:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
 8007360:	f88d 0000 	strb.w	r0, [sp]
 8007364:	f88d 1001 	strb.w	r1, [sp, #1]
	msg.buf = (uint8_t *)buf;
 8007368:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 800736c:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800736e:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8007372:	4804      	ldr	r0, [pc, #16]	; (8007384 <i2c_reg_write_byte_dt.constprop.0.isra.0+0x28>)
 8007374:	6883      	ldr	r3, [r0, #8]
 8007376:	2201      	movs	r2, #1
 8007378:	689c      	ldr	r4, [r3, #8]
 800737a:	a901      	add	r1, sp, #4
 800737c:	236a      	movs	r3, #106	; 0x6a
 800737e:	47a0      	blx	r4
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
}
 8007380:	b004      	add	sp, #16
 8007382:	bd10      	pop	{r4, pc}
 8007384:	08019f58 	.word	0x08019f58

08007388 <display>:
void display(void){
 8007388:	b538      	push	{r3, r4, r5, lr}
  dm163_turn_off_row(dm163_dev, rows, row);
 800738a:	4c0a      	ldr	r4, [pc, #40]	; (80073b4 <display+0x2c>)
 800738c:	490a      	ldr	r1, [pc, #40]	; (80073b8 <display+0x30>)
 800738e:	2200      	movs	r2, #0
 8007390:	4620      	mov	r0, r4
 8007392:	f012 f91e 	bl	80195d2 <dm163_turn_off_row>
			  uint32_t num_channels, const uint8_t *buf)
{
	const struct led_driver_api *api =
		(const struct led_driver_api *)dev->api;

	if (api->write_channels == NULL) {
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	699d      	ldr	r5, [r3, #24]
 800739a:	b125      	cbz	r5, 80073a6 <display+0x1e>
		return -ENOSYS;
	}
	return api->write_channels(dev, start_channel, num_channels, buf);
 800739c:	4b07      	ldr	r3, [pc, #28]	; (80073bc <display+0x34>)
 800739e:	2218      	movs	r2, #24
 80073a0:	2100      	movs	r1, #0
 80073a2:	4620      	mov	r0, r4
 80073a4:	47a8      	blx	r5
}  
 80073a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  gpio_pin_set_dt(&rows[row],1);
 80073aa:	4803      	ldr	r0, [pc, #12]	; (80073b8 <display+0x30>)
 80073ac:	2101      	movs	r1, #1
 80073ae:	f00d b9bf 	b.w	8014730 <gpio_pin_set_dt.isra.0>
 80073b2:	bf00      	nop
 80073b4:	0801a018 	.word	0x0801a018
 80073b8:	0801a668 	.word	0x0801a668
 80073bc:	200022a7 	.word	0x200022a7

080073c0 <main>:
int main() {
 80073c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	k_work_init(&work,work_handler);
 80073c2:	4939      	ldr	r1, [pc, #228]	; (80074a8 <main+0xe8>)
 80073c4:	4839      	ldr	r0, [pc, #228]	; (80074ac <main+0xec>)
 80073c6:	f012 f9ae 	bl	8019726 <k_work_init>
	k_work_init(&my_work,thread1);
 80073ca:	4939      	ldr	r1, [pc, #228]	; (80074b0 <main+0xf0>)
 80073cc:	4839      	ldr	r0, [pc, #228]	; (80074b4 <main+0xf4>)
 80073ce:	f012 f9aa 	bl	8019726 <k_work_init>
 80073d2:	4d39      	ldr	r5, [pc, #228]	; (80074b8 <main+0xf8>)
 80073d4:	4628      	mov	r0, r5
 80073d6:	f012 f91d 	bl	8019614 <z_device_is_ready>
	if (!device_is_ready(lsm6dsl_int.port)) {
 80073da:	b928      	cbnz	r0, 80073e8 <main+0x28>
		printk("Error: device %s is not ready\n",
 80073dc:	6829      	ldr	r1, [r5, #0]
 80073de:	4837      	ldr	r0, [pc, #220]	; (80074bc <main+0xfc>)
 80073e0:	f00d fa25 	bl	801482e <printk>
}
 80073e4:	b004      	add	sp, #16
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
	i2c_reg_write_byte_dt(&lsm6dsl,CTRL3_C_addr,0x1);
 80073e8:	2101      	movs	r1, #1
 80073ea:	2012      	movs	r0, #18
 80073ec:	f7ff ffb6 	bl	800735c <i2c_reg_write_byte_dt.constprop.0.isra.0>
	i2c_reg_write_byte_dt(&lsm6dsl,INT1_CTRL_addr,INT1_CTRL_value);
 80073f0:	2101      	movs	r1, #1
 80073f2:	200d      	movs	r0, #13
 80073f4:	f7ff ffb2 	bl	800735c <i2c_reg_write_byte_dt.constprop.0.isra.0>
	i2c_reg_write_byte_dt(&lsm6dsl,CTRL1_XL_addr,CTRL1_XL);
 80073f8:	21b8      	movs	r1, #184	; 0xb8
 80073fa:	2010      	movs	r0, #16
 80073fc:	f7ff ffae 	bl	800735c <i2c_reg_write_byte_dt.constprop.0.isra.0>
	i2c_reg_write_byte_dt(&lsm6dsl,0x11,CTRL2_G);
 8007400:	2110      	movs	r1, #16
 8007402:	2011      	movs	r0, #17
 8007404:	f7ff ffaa 	bl	800735c <i2c_reg_write_byte_dt.constprop.0.isra.0>
	ret = gpio_pin_configure_dt(&lsm6dsl_int, GPIO_INPUT);
 8007408:	482d      	ldr	r0, [pc, #180]	; (80074c0 <main+0x100>)
 800740a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800740e:	f00d f95a 	bl	80146c6 <gpio_pin_configure_dt>
	if (ret != 0) {
 8007412:	4604      	mov	r4, r0
 8007414:	b130      	cbz	r0, 8007424 <main+0x64>
		printk("Error %d: failed to configure %s pin %d\n",
 8007416:	4601      	mov	r1, r0
 8007418:	682a      	ldr	r2, [r5, #0]
 800741a:	482a      	ldr	r0, [pc, #168]	; (80074c4 <main+0x104>)
 800741c:	230b      	movs	r3, #11
 800741e:	f00d fa06 	bl	801482e <printk>
		return;
 8007422:	e7df      	b.n	80073e4 <main+0x24>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8007424:	4928      	ldr	r1, [pc, #160]	; (80074c8 <main+0x108>)
 8007426:	4b29      	ldr	r3, [pc, #164]	; (80074cc <main+0x10c>)
 8007428:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
 800742a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800742e:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8007430:	68ab      	ldr	r3, [r5, #8]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	b113      	cbz	r3, 800743c <main+0x7c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8007436:	2201      	movs	r2, #1
 8007438:	4628      	mov	r0, r5
 800743a:	4798      	blx	r3
 800743c:	4824      	ldr	r0, [pc, #144]	; (80074d0 <main+0x110>)
 800743e:	f012 f8e9 	bl	8019614 <z_device_is_ready>
if (!device_is_ready(dm163_dev)) {
 8007442:	b910      	cbnz	r0, 800744a <main+0x8a>
}
 8007444:	f06f 0012 	mvn.w	r0, #18
 8007448:	e7cc      	b.n	80073e4 <main+0x24>
 800744a:	4e22      	ldr	r6, [pc, #136]	; (80074d4 <main+0x114>)
  for (int row = 0; row < 8; row++)
 800744c:	2500      	movs	r5, #0
    gpio_pin_configure_dt(&rows[row], GPIO_OUTPUT_INACTIVE);
 800744e:	4630      	mov	r0, r6
 8007450:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
  for (int row = 0; row < 8; row++)
 8007454:	3501      	adds	r5, #1
    gpio_pin_configure_dt(&rows[row], GPIO_OUTPUT_INACTIVE);
 8007456:	f00d f936 	bl	80146c6 <gpio_pin_configure_dt>
  for (int row = 0; row < 8; row++)
 800745a:	2d08      	cmp	r5, #8
 800745c:	f106 0608 	add.w	r6, r6, #8
 8007460:	d1f5      	bne.n	800744e <main+0x8e>
	const struct led_driver_api *api =
 8007462:	4d1b      	ldr	r5, [pc, #108]	; (80074d0 <main+0x110>)
	if (api->set_brightness == NULL) {
 8007464:	68ae      	ldr	r6, [r5, #8]
 8007466:	6933      	ldr	r3, [r6, #16]
 8007468:	b11b      	cbz	r3, 8007472 <main+0xb2>
	return api->set_brightness(dev, led, value);
 800746a:	2232      	movs	r2, #50	; 0x32
 800746c:	4621      	mov	r1, r4
 800746e:	4628      	mov	r0, r5
 8007470:	4798      	blx	r3
  for (int i = 0; i < 8; i++)
 8007472:	3401      	adds	r4, #1
 8007474:	2c08      	cmp	r4, #8
 8007476:	d1f6      	bne.n	8007466 <main+0xa6>
  k_timer_start(&timer, timer_period,timer_period); 
 8007478:	220a      	movs	r2, #10
 800747a:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 800747c:	4816      	ldr	r0, [pc, #88]	; (80074d8 <main+0x118>)
i2c_burst_read_dt(&lsm6dsl,adresses,buffer,6);
 800747e:	4e17      	ldr	r6, [pc, #92]	; (80074dc <main+0x11c>)
	return i2c_write_read(dev, dev_addr,
 8007480:	4d17      	ldr	r5, [pc, #92]	; (80074e0 <main+0x120>)
 8007482:	4c18      	ldr	r4, [pc, #96]	; (80074e4 <main+0x124>)
 8007484:	e9cd 2300 	strd	r2, r3, [sp]
 8007488:	f009 f988 	bl	801079c <z_impl_k_timer_start>
	return i2c_burst_read(spec->bus, spec->addr,
 800748c:	7833      	ldrb	r3, [r6, #0]
 800748e:	f88d 300f 	strb.w	r3, [sp, #15]
	return i2c_write_read(dev, dev_addr,
 8007492:	2306      	movs	r3, #6
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	f10d 020f 	add.w	r2, sp, #15
 800749a:	462b      	mov	r3, r5
 800749c:	216a      	movs	r1, #106	; 0x6a
 800749e:	4620      	mov	r0, r4
 80074a0:	f00d f930 	bl	8014704 <i2c_write_read.constprop.0.isra.0>
 80074a4:	e7f2      	b.n	800748c <main+0xcc>
 80074a6:	bf00      	nop
 80074a8:	08001591 	.word	0x08001591
 80074ac:	200019ec 	.word	0x200019ec
 80074b0:	080018c9 	.word	0x080018c9
 80074b4:	200019dc 	.word	0x200019dc
 80074b8:	08019eb0 	.word	0x08019eb0
 80074bc:	0801b6c1 	.word	0x0801b6c1
 80074c0:	0801a660 	.word	0x0801a660
 80074c4:	0801b6e0 	.word	0x0801b6e0
 80074c8:	20001a10 	.word	0x20001a10
 80074cc:	0800732d 	.word	0x0800732d
 80074d0:	0801a018 	.word	0x0801a018
 80074d4:	0801a668 	.word	0x0801a668
 80074d8:	20000d78 	.word	0x20000d78
 80074dc:	20000a05 	.word	0x20000a05
 80074e0:	200022a1 	.word	0x200022a1
 80074e4:	08019f58 	.word	0x08019f58

080074e8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	b095      	sub	sp, #84	; 0x54
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	4604      	mov	r4, r0
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f6:	627a      	str	r2, [r7, #36]	; 0x24
 80074f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074fc:	60fb      	str	r3, [r7, #12]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 80074fe:	4688      	mov	r8, r1
 8007500:	b949      	cbnz	r1, 8007516 <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
 8007502:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
 8007504:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
 8007506:	7880      	ldrb	r0, [r0, #2]
 8007508:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800750c:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
 800750e:	4545      	cmp	r5, r8
 8007510:	d819      	bhi.n	8007546 <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
 8007512:	eba0 0804 	sub.w	r8, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
 8007516:	f894 b002 	ldrb.w	fp, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
 800751a:	78e3      	ldrb	r3, [r4, #3]
 800751c:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
 800751e:	f1bb 0f00 	cmp.w	fp, #0
 8007522:	d002      	beq.n	800752a <cbprintf_package_convert+0x42>
 8007524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007526:	07d8      	lsls	r0, r3, #31
 8007528:	d416      	bmi.n	8007558 <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	bb53      	cbnz	r3, 8007584 <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	b11b      	cbz	r3, 800753a <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	4641      	mov	r1, r8
 8007536:	4620      	mov	r0, r4
 8007538:	4798      	blx	r3
		}

		return in_len;
 800753a:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
 800753c:	4628      	mov	r0, r5
 800753e:	3754      	adds	r7, #84	; 0x54
 8007540:	46bd      	mov	sp, r7
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
 8007546:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
 8007548:	4630      	mov	r0, r6
 800754a:	f7f8 fe39 	bl	80001c0 <strlen>
 800754e:	3001      	adds	r0, #1
 8007550:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
 8007552:	f108 0801 	add.w	r8, r8, #1
 8007556:	e7da      	b.n	800750e <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
 8007558:	7823      	ldrb	r3, [r4, #0]
	args_size = in_desc->len * sizeof(int);
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	6862      	ldr	r2, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
 8007564:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
 8007566:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	f040 8102 	bne.w	8007776 <cbprintf_package_convert+0x28e>
		out_len = (int)in_len;
 8007572:	4645      	mov	r5, r8
		if (ro_cpy) {
 8007574:	eb0b 090a 	add.w	r9, fp, sl
 8007578:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
 800757a:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
 800757c:	45c1      	cmp	r9, r8
 800757e:	d155      	bne.n	800762c <cbprintf_package_convert+0x144>
 8007580:	44da      	add	sl, fp
 8007582:	e013      	b.n	80075ac <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
 8007584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007586:	0799      	lsls	r1, r3, #30
 8007588:	d5d1      	bpl.n	800752e <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
 800758a:	7823      	ldrb	r3, [r4, #0]
 800758c:	623b      	str	r3, [r7, #32]
 800758e:	469a      	mov	sl, r3
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
 800759a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d17e      	bne.n	80076a0 <cbprintf_package_convert+0x1b8>
		out_len = (int)in_len;
 80075a2:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80075a4:	f1bb 0f00 	cmp.w	fp, #0
 80075a8:	d153      	bne.n	8007652 <cbprintf_package_convert+0x16a>
	size_t strl_cnt = 0;
 80075aa:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
 80075ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ae:	f013 0f05 	tst.w	r3, #5
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80075b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	bf0c      	ite	eq
 80075c0:	f04f 0b02 	moveq.w	fp, #2
 80075c4:	f04f 0b01 	movne.w	fp, #1
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
 80075ca:	45ca      	cmp	sl, r9
 80075cc:	d0b6      	beq.n	800753c <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
 80075ce:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
 80075d2:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80075d6:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 80075da:	4bab      	ldr	r3, [pc, #684]	; (8007888 <cbprintf_package_convert+0x3a0>)
 80075dc:	4598      	cmp	r8, r3
 80075de:	d302      	bcc.n	80075e6 <cbprintf_package_convert+0xfe>
 80075e0:	4baa      	ldr	r3, [pc, #680]	; (800788c <cbprintf_package_convert+0x3a4>)
 80075e2:	4598      	cmp	r8, r3
 80075e4:	d33c      	bcc.n	8007660 <cbprintf_package_convert+0x178>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d046      	beq.n	800767a <cbprintf_package_convert+0x192>
 80075ec:	69f8      	ldr	r0, [r7, #28]
 80075ee:	f00d f8e4 	bl	80147ba <is_ptr>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d041      	beq.n	800767a <cbprintf_package_convert+0x192>
				LOG_WRN("(unsigned) char * used for %%p argument. "
 80075f6:	48a6      	ldr	r0, [pc, #664]	; (8007890 <cbprintf_package_convert+0x3a8>)
 80075f8:	6803      	ldr	r3, [r0, #0]
 80075fa:	f013 0f06 	tst.w	r3, #6
 80075fe:	d013      	beq.n	8007628 <cbprintf_package_convert+0x140>
 8007600:	46e8      	mov	r8, sp
 8007602:	b08a      	sub	sp, #40	; 0x28
 8007604:	466a      	mov	r2, sp
 8007606:	4ba3      	ldr	r3, [pc, #652]	; (8007894 <cbprintf_package_convert+0x3ac>)
 8007608:	6153      	str	r3, [r2, #20]
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	e9c2 3106 	strd	r3, r1, [r2, #24]
 8007610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007614:	8413      	strh	r3, [r2, #32]
 8007616:	4ba0      	ldr	r3, [pc, #640]	; (8007898 <cbprintf_package_convert+0x3b0>)
 8007618:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
 800761c:	2300      	movs	r3, #0
 800761e:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 8007622:	f000 fd95 	bl	8008150 <z_impl_z_log_msg_static_create>
 8007626:	46c5      	mov	sp, r8
				out_len -= 2;
 8007628:	3d02      	subs	r5, #2
				continue;
 800762a:	e7ce      	b.n	80075ca <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
 800762c:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
 8007630:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007634:	f7f8 fdc4 	bl	80001c0 <strlen>
				if (strl && strl_cnt < strl_len) {
 8007638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
 800763a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 800763c:	b13b      	cbz	r3, 800764e <cbprintf_package_convert+0x166>
 800763e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007642:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
 8007644:	bf3e      	ittt	cc
 8007646:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
 8007648:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
 800764c:	3601      	addcc	r6, #1
				out_len += len;
 800764e:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
 8007650:	e794      	b.n	800757c <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8007652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007654:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
 8007658:	bf1c      	itt	ne
 800765a:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
 800765c:	44da      	addne	sl, fp
 800765e:	e7a5      	b.n	80075ac <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	b123      	cbz	r3, 800766e <cbprintf_package_convert+0x186>
 8007664:	69f8      	ldr	r0, [r7, #28]
 8007666:	f00d f8a8 	bl	80147ba <is_ptr>
 800766a:	2800      	cmp	r0, #0
 800766c:	d1c3      	bne.n	80075f6 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 800766e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007670:	07da      	lsls	r2, r3, #31
 8007672:	d405      	bmi.n	8007680 <cbprintf_package_convert+0x198>
					out_len -= drop_ro_str_pos ? 2 : 1;
 8007674:	eba5 050b 	sub.w	r5, r5, fp
 8007678:	e7a7      	b.n	80075ca <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0a4      	beq.n	80075ca <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
 8007680:	4640      	mov	r0, r8
 8007682:	f7f8 fd9d 	bl	80001c0 <strlen>
				if (strl && strl_cnt < strl_len) {
 8007686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007688:	b143      	cbz	r3, 800769c <cbprintf_package_convert+0x1b4>
 800768a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800768e:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
 8007690:	bf3f      	itttt	cc
 8007692:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
 8007694:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
 8007696:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
 800769a:	3601      	addcc	r6, #1
				out_len += (len - 1);
 800769c:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
 800769e:	e794      	b.n	80075ca <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80076a0:	f1bb 0f00 	cmp.w	fp, #0
 80076a4:	d06d      	beq.n	8007782 <cbprintf_package_convert+0x29a>
 80076a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a8:	f013 0604 	ands.w	r6, r3, #4
 80076ac:	d06c      	beq.n	8007788 <cbprintf_package_convert+0x2a0>
		keep_cnt = ros_nbr;
 80076ae:	46d9      	mov	r9, fp
		scpy_cnt = 0;
 80076b0:	2600      	movs	r6, #0
		dst = keep_str_pos;
 80076b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80076b6:	465a      	mov	r2, fp
 80076b8:	4651      	mov	r1, sl
 80076ba:	f7f9 fce9 	bl	8001090 <memcpy>
	str_pos += ros_nbr;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
 80076c8:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 80076cc:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80076ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4553      	cmp	r3, sl
 80076da:	d157      	bne.n	800778c <cbprintf_package_convert+0x2a4>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 80076dc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 80076de:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 80076e0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 80076e2:	0789      	lsls	r1, r1, #30
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 80076e4:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 80076e8:	bf54      	ite	pl
 80076ea:	ea4f 0159 	movpl.w	r1, r9, lsr #1
 80076ee:	2100      	movmi	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 80076f0:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 80076f2:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 80076f4:	f100 809a 	bmi.w	800782c <cbprintf_package_convert+0x344>
 80076f8:	f010 0f04 	tst.w	r0, #4
 80076fc:	bf14      	ite	ne
 80076fe:	4648      	movne	r0, r9
 8007700:	2000      	moveq	r0, #0
 8007702:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
 8007704:	7062      	strb	r2, [r4, #1]
 8007706:	70a0      	strb	r0, [r4, #2]
 8007708:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	6939      	ldr	r1, [r7, #16]
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	4620      	mov	r0, r4
 8007712:	4798      	blx	r3
	if (rv < 0) {
 8007714:	1e05      	subs	r5, r0, #0
 8007716:	f6ff af11 	blt.w	800753c <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	7023      	strb	r3, [r4, #0]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	7063      	strb	r3, [r4, #1]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8007726:	4649      	mov	r1, r9
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
 800772c:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8007730:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007734:	4798      	blx	r3
	if (rv < 0) {
 8007736:	f1b0 0900 	subs.w	r9, r0, #0
 800773a:	f2c0 80af 	blt.w	800789c <cbprintf_package_convert+0x3b4>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 800773e:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
 8007740:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8007742:	eba8 010b 	sub.w	r1, r8, fp
 8007746:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4650      	mov	r0, sl
 800774c:	1ac9      	subs	r1, r1, r3
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	4798      	blx	r3
	if (rv < 0) {
 8007752:	2800      	cmp	r0, #0
 8007754:	f2c0 80a4 	blt.w	80078a0 <cbprintf_package_convert+0x3b8>
	out_len += rv;
 8007758:	44a9      	add	r9, r5
	out_len += rv;
 800775a:	eb09 0500 	add.w	r5, r9, r0
	for (int i = 0; i < scpy_cnt; i++) {
 800775e:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
 8007762:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
 8007766:	45b3      	cmp	fp, r6
 8007768:	db62      	blt.n	8007830 <cbprintf_package_convert+0x348>
	(void)cb(NULL, 0, ctx);
 800776a:	2100      	movs	r1, #0
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	4608      	mov	r0, r1
 8007772:	4798      	blx	r3
	return out_len;
 8007774:	e6e2      	b.n	800753c <cbprintf_package_convert+0x54>
	if (cb == NULL) {
 8007776:	465e      	mov	r6, fp
 8007778:	f04f 0900 	mov.w	r9, #0
 800777c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8007780:	e799      	b.n	80076b6 <cbprintf_package_convert+0x1ce>
		scpy_cnt = 0;
 8007782:	465e      	mov	r6, fp
		keep_cnt = 0;
 8007784:	46d9      	mov	r9, fp
 8007786:	e79a      	b.n	80076be <cbprintf_package_convert+0x1d6>
 8007788:	46b1      	mov	r9, r6
 800778a:	e798      	b.n	80076be <cbprintf_package_convert+0x1d6>
		uint8_t arg_idx = *str_pos++;
 800778c:	f81a 1b02 	ldrb.w	r1, [sl], #2
 8007790:	4b3d      	ldr	r3, [pc, #244]	; (8007888 <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
 8007792:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
 8007796:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800779a:	4298      	cmp	r0, r3
 800779c:	d302      	bcc.n	80077a4 <cbprintf_package_convert+0x2bc>
 800779e:	4b3b      	ldr	r3, [pc, #236]	; (800788c <cbprintf_package_convert+0x3a4>)
 80077a0:	4298      	cmp	r0, r3
 80077a2:	d31d      	bcc.n	80077e0 <cbprintf_package_convert+0x2f8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	b123      	cbz	r3, 80077b2 <cbprintf_package_convert+0x2ca>
 80077a8:	69f8      	ldr	r0, [r7, #28]
 80077aa:	f00d f806 	bl	80147ba <is_ptr>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d191      	bne.n	80076d6 <cbprintf_package_convert+0x1ee>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	b9fb      	cbnz	r3, 80077f6 <cbprintf_package_convert+0x30e>
				keep_str_pos[keep_cnt++] = arg_idx;
 80077b6:	f109 0328 	add.w	r3, r9, #40	; 0x28
 80077ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077be:	f109 0001 	add.w	r0, r9, #1
 80077c2:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
 80077c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80077ca:	fa53 f080 	uxtab	r0, r3, r0
 80077ce:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
 80077d2:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
 80077d6:	fa5f f989 	uxtb.w	r9, r9
 80077da:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
 80077de:	e77a      	b.n	80076d6 <cbprintf_package_convert+0x1ee>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	b12b      	cbz	r3, 80077f0 <cbprintf_package_convert+0x308>
 80077e4:	69f8      	ldr	r0, [r7, #28]
 80077e6:	f00c ffe8 	bl	80147ba <is_ptr>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f47f af73 	bne.w	80076d6 <cbprintf_package_convert+0x1ee>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 80077f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d509      	bpl.n	800780a <cbprintf_package_convert+0x322>
				cpy_str_pos[scpy_cnt++] = arg_pos;
 80077f6:	f106 0328 	add.w	r3, r6, #40	; 0x28
 80077fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077fe:	1c71      	adds	r1, r6, #1
 8007800:	189e      	adds	r6, r3, r2
 8007802:	f806 5c20 	strb.w	r5, [r6, #-32]
 8007806:	b2ce      	uxtb	r6, r1
 8007808:	e765      	b.n	80076d6 <cbprintf_package_convert+0x1ee>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 800780a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800780c:	0758      	lsls	r0, r3, #29
 800780e:	f57f af62 	bpl.w	80076d6 <cbprintf_package_convert+0x1ee>
				keep_str_pos[keep_cnt++] = arg_pos;
 8007812:	f109 0328 	add.w	r3, r9, #40	; 0x28
 8007816:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800781a:	f109 0101 	add.w	r1, r9, #1
 800781e:	eb03 0902 	add.w	r9, r3, r2
 8007822:	f809 5c10 	strb.w	r5, [r9, #-16]
 8007826:	fa5f f981 	uxtb.w	r9, r1
 800782a:	e754      	b.n	80076d6 <cbprintf_package_convert+0x1ee>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 800782c:	2000      	movs	r0, #0
 800782e:	e768      	b.n	8007702 <cbprintf_package_convert+0x21a>
		uint8_t loc = cpy_str_pos[i];
 8007830:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8007834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
 8007838:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
 800783c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800783e:	b1fb      	cbz	r3, 8007880 <cbprintf_package_convert+0x398>
 8007840:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	2101      	movs	r1, #1
 800784a:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 800784e:	4798      	blx	r3
		if (rv < 0) {
 8007850:	2800      	cmp	r0, #0
 8007852:	db25      	blt.n	80078a0 <cbprintf_package_convert+0x3b8>
		out_len += rv;
 8007854:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
 8007856:	f1b8 0f00 	cmp.w	r8, #0
 800785a:	d106      	bne.n	800786a <cbprintf_package_convert+0x382>
 800785c:	4648      	mov	r0, r9
 800785e:	f7f8 fcaf 	bl	80001c0 <strlen>
 8007862:	f100 0801 	add.w	r8, r0, #1
 8007866:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	4641      	mov	r1, r8
 8007870:	4648      	mov	r0, r9
 8007872:	4798      	blx	r3
		if (rv < 0) {
 8007874:	2800      	cmp	r0, #0
 8007876:	db13      	blt.n	80078a0 <cbprintf_package_convert+0x3b8>
		out_len += rv;
 8007878:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
 800787a:	f10b 0b01 	add.w	fp, fp, #1
 800787e:	e772      	b.n	8007766 <cbprintf_package_convert+0x27e>
		uint16_t str_len = strl ? strl[i] : 0;
 8007880:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
 8007884:	e7de      	b.n	8007844 <cbprintf_package_convert+0x35c>
 8007886:	bf00      	nop
 8007888:	08019d30 	.word	0x08019d30
 800788c:	0801e49c 	.word	0x0801e49c
 8007890:	20000d34 	.word	0x20000d34
 8007894:	0801b709 	.word	0x0801b709
 8007898:	01000004 	.word	0x01000004
 800789c:	464d      	mov	r5, r9
 800789e:	e64d      	b.n	800753c <cbprintf_package_convert+0x54>
 80078a0:	4605      	mov	r5, r0
 80078a2:	e64b      	b.n	800753c <cbprintf_package_convert+0x54>

080078a4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80078a4:	4b01      	ldr	r3, [pc, #4]	; (80078ac <char_out+0x8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4718      	bx	r3
 80078aa:	bf00      	nop
 80078ac:	200006a0 	.word	0x200006a0

080078b0 <__printk_hook_install>:
	_char_out = fn;
 80078b0:	4b01      	ldr	r3, [pc, #4]	; (80078b8 <__printk_hook_install+0x8>)
 80078b2:	6018      	str	r0, [r3, #0]
}
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	200006a0 	.word	0x200006a0

080078bc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80078bc:	b507      	push	{r0, r1, r2, lr}
 80078be:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80078c0:	2100      	movs	r1, #0
 80078c2:	4602      	mov	r2, r0
 80078c4:	9100      	str	r1, [sp, #0]
 80078c6:	4803      	ldr	r0, [pc, #12]	; (80078d4 <vprintk+0x18>)
 80078c8:	f7fa f8ea 	bl	8001aa0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80078cc:	b003      	add	sp, #12
 80078ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80078d2:	bf00      	nop
 80078d4:	080078a5 	.word	0x080078a5

080078d8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80078d8:	b530      	push	{r4, r5, lr}
 80078da:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
 80078dc:	2500      	movs	r5, #0
 80078de:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
 80078e2:	4604      	mov	r4, r0
 80078e4:	9500      	str	r5, [sp, #0]
 80078e6:	a903      	add	r1, sp, #12
 80078e8:	4805      	ldr	r0, [pc, #20]	; (8007900 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
 80078ea:	9505      	str	r5, [sp, #20]
 80078ec:	f7fa f8d8 	bl	8001aa0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
 80078f0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 80078f4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 80078f6:	bfb8      	it	lt
 80078f8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 80078fa:	b007      	add	sp, #28
 80078fc:	bd30      	pop	{r4, r5, pc}
 80078fe:	bf00      	nop
 8007900:	08014809 	.word	0x08014809

08007904 <extract_decimal>:
{
 8007904:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
 8007906:	4e09      	ldr	r6, [pc, #36]	; (800792c <extract_decimal+0x28>)
 8007908:	6801      	ldr	r1, [r0, #0]
{
 800790a:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 800790c:	270a      	movs	r7, #10
	size_t val = 0;
 800790e:	2000      	movs	r0, #0
 8007910:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
 8007912:	3101      	adds	r1, #1
 8007914:	781c      	ldrb	r4, [r3, #0]
 8007916:	5d35      	ldrb	r5, [r6, r4]
 8007918:	076d      	lsls	r5, r5, #29
 800791a:	d401      	bmi.n	8007920 <extract_decimal+0x1c>
	*str = sp;
 800791c:	6013      	str	r3, [r2, #0]
}
 800791e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8007920:	fb07 4300 	mla	r3, r7, r0, r4
 8007924:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8007928:	e7f2      	b.n	8007910 <extract_decimal+0xc>
 800792a:	bf00      	nop
 800792c:	0801b2e9 	.word	0x0801b2e9

08007930 <encode_uint>:
{
 8007930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	4615      	mov	r5, r2
 8007936:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8007938:	78d3      	ldrb	r3, [r2, #3]
 800793a:	4a22      	ldr	r2, [pc, #136]	; (80079c4 <encode_uint+0x94>)
 800793c:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
 8007940:	2b6f      	cmp	r3, #111	; 0x6f
{
 8007942:	4680      	mov	r8, r0
 8007944:	460f      	mov	r7, r1
 8007946:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 800794a:	d029      	beq.n	80079a0 <encode_uint+0x70>
 800794c:	d824      	bhi.n	8007998 <encode_uint+0x68>
		return 10;
 800794e:	2b58      	cmp	r3, #88	; 0x58
 8007950:	bf0c      	ite	eq
 8007952:	2610      	moveq	r6, #16
 8007954:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8007956:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 800795a:	4632      	mov	r2, r6
 800795c:	2300      	movs	r3, #0
 800795e:	4640      	mov	r0, r8
 8007960:	4639      	mov	r1, r7
 8007962:	f7f9 faf3 	bl	8000f4c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8007966:	2a09      	cmp	r2, #9
 8007968:	b2d4      	uxtb	r4, r2
 800796a:	d81e      	bhi.n	80079aa <encode_uint+0x7a>
 800796c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 800796e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8007970:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8007972:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8007976:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 800797a:	d301      	bcc.n	8007980 <encode_uint+0x50>
 800797c:	45d1      	cmp	r9, sl
 800797e:	d811      	bhi.n	80079a4 <encode_uint+0x74>
	if (conv->flag_hash) {
 8007980:	782b      	ldrb	r3, [r5, #0]
 8007982:	069b      	lsls	r3, r3, #26
 8007984:	d505      	bpl.n	8007992 <encode_uint+0x62>
		if (radix == 8) {
 8007986:	2e08      	cmp	r6, #8
 8007988:	d115      	bne.n	80079b6 <encode_uint+0x86>
			conv->altform_0 = true;
 800798a:	78ab      	ldrb	r3, [r5, #2]
 800798c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8007990:	70ab      	strb	r3, [r5, #2]
}
 8007992:	4648      	mov	r0, r9
 8007994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8007998:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 800799c:	2b70      	cmp	r3, #112	; 0x70
 800799e:	e7d7      	b.n	8007950 <encode_uint+0x20>
	switch (specifier) {
 80079a0:	2608      	movs	r6, #8
 80079a2:	e7d8      	b.n	8007956 <encode_uint+0x26>
		value /= radix;
 80079a4:	4680      	mov	r8, r0
 80079a6:	460f      	mov	r7, r1
 80079a8:	e7d7      	b.n	800795a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80079aa:	f1bb 0f01 	cmp.w	fp, #1
 80079ae:	bf0c      	ite	eq
 80079b0:	3437      	addeq	r4, #55	; 0x37
 80079b2:	3457      	addne	r4, #87	; 0x57
 80079b4:	e7db      	b.n	800796e <encode_uint+0x3e>
		} else if (radix == 16) {
 80079b6:	2e10      	cmp	r6, #16
 80079b8:	d1eb      	bne.n	8007992 <encode_uint+0x62>
			conv->altform_0c = true;
 80079ba:	78ab      	ldrb	r3, [r5, #2]
 80079bc:	f043 0310 	orr.w	r3, r3, #16
 80079c0:	e7e6      	b.n	8007990 <encode_uint+0x60>
 80079c2:	bf00      	nop
 80079c4:	0801b2e9 	.word	0x0801b2e9

080079c8 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
 80079c8:	070b      	lsls	r3, r1, #28
 80079ca:	d506      	bpl.n	80079da <foldcase+0x12>
 80079cc:	4b03      	ldr	r3, [pc, #12]	; (80079dc <foldcase+0x14>)
 80079ce:	5c1b      	ldrb	r3, [r3, r0]
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	2b01      	cmp	r3, #1
        return tolower(ch);
 80079d6:	bf08      	it	eq
 80079d8:	3020      	addeq	r0, #32
    return ch;
}
 80079da:	4770      	bx	lr
 80079dc:	0801b2e9 	.word	0x0801b2e9

080079e0 <stm32l4_init>:
	__asm__ volatile(
 80079e0:	f04f 0210 	mov.w	r2, #16
 80079e4:	f3ef 8311 	mrs	r3, BASEPRI
 80079e8:	f382 8812 	msr	BASEPRI_MAX, r2
 80079ec:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 80079f8:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <stm32l4_init+0x24>)
 80079fa:	4a03      	ldr	r2, [pc, #12]	; (8007a08 <stm32l4_init+0x28>)
 80079fc:	601a      	str	r2, [r3, #0]

	return 0;
}
 80079fe:	2000      	movs	r0, #0
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000878 	.word	0x20000878
 8007a08:	003d0900 	.word	0x003d0900

08007a0c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8007a10:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8007a6c <activate_foreach_backend+0x60>
{
 8007a14:	4604      	mov	r4, r0
	while (mask_cpy) {
 8007a16:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
 8007a18:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
 8007a1c:	b914      	cbnz	r4, 8007a24 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
 8007a1e:	4638      	mov	r0, r7
 8007a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
 8007a24:	fa94 f5a4 	rbit	r5, r4
 8007a28:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
 8007a2c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8007a30:	012e      	lsls	r6, r5, #4
 8007a32:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
 8007a36:	ea6f 0a03 	mvn.w	sl, r3
 8007a3a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8007a3e:	7b2b      	ldrb	r3, [r5, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0eb      	beq.n	8007a1c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
 8007a44:	f858 3006 	ldr.w	r3, [r8, r6]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	b94b      	cbnz	r3, 8007a60 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
 8007a4c:	4446      	add	r6, r8
			log_backend_enable(backend,
 8007a4e:	2204      	movs	r2, #4
 8007a50:	6873      	ldr	r3, [r6, #4]
 8007a52:	4628      	mov	r0, r5
 8007a54:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
 8007a56:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
 8007a5a:	f000 fb0b 	bl	8008074 <log_backend_enable>
 8007a5e:	e7dd      	b.n	8007a1c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
 8007a60:	4628      	mov	r0, r5
 8007a62:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d1d9      	bne.n	8007a1c <activate_foreach_backend+0x10>
 8007a68:	e7f0      	b.n	8007a4c <activate_foreach_backend+0x40>
 8007a6a:	bf00      	nop
 8007a6c:	0801a44c 	.word	0x0801a44c

08007a70 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8007a70:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8007a72:	4910      	ldr	r1, [pc, #64]	; (8007ab4 <enable_logger+0x44>)
 8007a74:	4810      	ldr	r0, [pc, #64]	; (8007ab8 <enable_logger+0x48>)
{
 8007a76:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f011 ffd1 	bl	8019a20 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8007a7e:	4d0f      	ldr	r5, [pc, #60]	; (8007abc <enable_logger+0x4c>)
 8007a80:	490f      	ldr	r1, [pc, #60]	; (8007ac0 <enable_logger+0x50>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	2300      	movs	r3, #0
 8007a86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	230e      	movs	r3, #14
 8007a8e:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8007a92:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007a96:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <enable_logger+0x54>)
 8007a98:	9400      	str	r4, [sp, #0]
 8007a9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f007 ff36 	bl	800f910 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8007aa4:	4908      	ldr	r1, [pc, #32]	; (8007ac8 <enable_logger+0x58>)
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f007 fe6e 	bl	800f788 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
 8007aac:	4620      	mov	r0, r4
 8007aae:	b009      	add	sp, #36	; 0x24
 8007ab0:	bd30      	pop	{r4, r5, pc}
 8007ab2:	bf00      	nop
 8007ab4:	08007acd 	.word	0x08007acd
 8007ab8:	20001398 	.word	0x20001398
 8007abc:	20000e98 	.word	0x20000e98
 8007ac0:	20002400 	.word	0x20002400
 8007ac4:	08007dd1 	.word	0x08007dd1
 8007ac8:	0801bbc9 	.word	0x0801bbc9

08007acc <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 8007acc:	4801      	ldr	r0, [pc, #4]	; (8007ad4 <log_process_thread_timer_expiry_fn+0x8>)
 8007ace:	f008 b853 	b.w	800fb78 <z_impl_k_sem_give>
 8007ad2:	bf00      	nop
 8007ad4:	20000dd8 	.word	0x20000dd8

08007ad8 <z_log_init>:
{
 8007ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007adc:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
 8007ade:	481e      	ldr	r0, [pc, #120]	; (8007b58 <z_log_init+0x80>)
{
 8007ae0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
 8007ae2:	f00d fb05 	bl	80150f0 <atomic_inc>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	b378      	cbz	r0, 8007b4a <z_log_init+0x72>
	uint32_t mask = 0;
 8007aea:	2500      	movs	r5, #0
}
 8007aec:	4628      	mov	r0, r5
 8007aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
 8007af2:	7b23      	ldrb	r3, [r4, #12]
 8007af4:	b173      	cbz	r3, 8007b14 <z_log_init+0x3c>
	if (backend->api->init) {
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	b10b      	cbz	r3, 8007b00 <z_log_init+0x28>
		backend->api->init(backend);
 8007afc:	4620      	mov	r0, r4
 8007afe:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	b9cb      	cbnz	r3, 8007b3a <z_log_init+0x62>
				log_backend_enable(backend,
 8007b06:	6863      	ldr	r3, [r4, #4]
 8007b08:	2204      	movs	r2, #4
 8007b0a:	6819      	ldr	r1, [r3, #0]
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fab1 	bl	8008074 <log_backend_enable>
			i++;
 8007b12:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007b14:	3410      	adds	r4, #16
 8007b16:	454c      	cmp	r4, r9
 8007b18:	d3eb      	bcc.n	8007af2 <z_log_init+0x1a>
	if (blocking) {
 8007b1a:	f1b8 0f00 	cmp.w	r8, #0
 8007b1e:	d0e5      	beq.n	8007aec <z_log_init+0x14>
		while (mask) {
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	d0e2      	beq.n	8007aea <z_log_init+0x12>
			mask = activate_foreach_backend(mask);
 8007b24:	4628      	mov	r0, r5
 8007b26:	f7ff ff71 	bl	8007a0c <activate_foreach_backend>
 8007b2a:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	d0f7      	beq.n	8007b20 <z_log_init+0x48>
	return z_impl_k_sleep(timeout);
 8007b30:	2100      	movs	r1, #0
 8007b32:	2064      	movs	r0, #100	; 0x64
 8007b34:	f008 fbc2 	bl	80102bc <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 8007b38:	e7f2      	b.n	8007b20 <z_log_init+0x48>
		return backend->api->is_ready(backend);
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d0e1      	beq.n	8007b06 <z_log_init+0x2e>
				mask |= BIT(i);
 8007b42:	fa0a f306 	lsl.w	r3, sl, r6
 8007b46:	431d      	orrs	r5, r3
 8007b48:	e7e3      	b.n	8007b12 <z_log_init+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007b4a:	4c04      	ldr	r4, [pc, #16]	; (8007b5c <z_log_init+0x84>)
 8007b4c:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8007b60 <z_log_init+0x88>
	uint32_t mask = 0;
 8007b50:	4605      	mov	r5, r0
				mask |= BIT(i);
 8007b52:	f04f 0a01 	mov.w	sl, #1
 8007b56:	e7de      	b.n	8007b16 <z_log_init+0x3e>
 8007b58:	20001a2c 	.word	0x20001a2c
 8007b5c:	0801a44c 	.word	0x0801a44c
 8007b60:	0801a45c 	.word	0x0801a45c

08007b64 <log_set_timestamp_func>:
{
 8007b64:	b508      	push	{r3, lr}
 8007b66:	4603      	mov	r3, r0
 8007b68:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
 8007b6a:	b12b      	cbz	r3, 8007b78 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
 8007b6c:	4a04      	ldr	r2, [pc, #16]	; (8007b80 <log_set_timestamp_func+0x1c>)
 8007b6e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
 8007b70:	f000 fd18 	bl	80085a4 <log_output_timestamp_freq_set>
	return 0;
 8007b74:	2000      	movs	r0, #0
}
 8007b76:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8007b78:	f06f 0015 	mvn.w	r0, #21
 8007b7c:	e7fb      	b.n	8007b76 <log_set_timestamp_func+0x12>
 8007b7e:	bf00      	nop
 8007b80:	200006a4 	.word	0x200006a4

08007b84 <z_log_notify_backend_enabled>:
{
 8007b84:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8007b86:	4c04      	ldr	r4, [pc, #16]	; (8007b98 <z_log_notify_backend_enabled+0x14>)
 8007b88:	7823      	ldrb	r3, [r4, #0]
 8007b8a:	b913      	cbnz	r3, 8007b92 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
 8007b8c:	4803      	ldr	r0, [pc, #12]	; (8007b9c <z_log_notify_backend_enabled+0x18>)
 8007b8e:	f007 fff3 	bl	800fb78 <z_impl_k_sem_give>
	backend_attached = true;
 8007b92:	2301      	movs	r3, #1
 8007b94:	7023      	strb	r3, [r4, #0]
}
 8007b96:	bd10      	pop	{r4, pc}
 8007b98:	20002367 	.word	0x20002367
 8007b9c:	20000dd8 	.word	0x20000dd8

08007ba0 <z_log_dropped>:
{
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
 8007ba4:	4808      	ldr	r0, [pc, #32]	; (8007bc8 <z_log_dropped+0x28>)
 8007ba6:	f00d faa3 	bl	80150f0 <atomic_inc>
	if (buffered) {
 8007baa:	b15c      	cbz	r4, 8007bc4 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8007bac:	f3bf 8f5b 	dmb	ish
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <z_log_dropped+0x2c>)
 8007bb2:	e853 1f00 	ldrex	r1, [r3]
 8007bb6:	3901      	subs	r1, #1
 8007bb8:	e843 1200 	strex	r2, r1, [r3]
 8007bbc:	2a00      	cmp	r2, #0
 8007bbe:	d1f8      	bne.n	8007bb2 <z_log_dropped+0x12>
 8007bc0:	f3bf 8f5b 	dmb	ish
}
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20001a24 	.word	0x20001a24
 8007bcc:	20001a28 	.word	0x20001a28

08007bd0 <z_log_dropped_read_and_clear>:
}
 8007bd0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007bd2:	4b06      	ldr	r3, [pc, #24]	; (8007bec <z_log_dropped_read_and_clear+0x1c>)
 8007bd4:	f3bf 8f5b 	dmb	ish
 8007bd8:	4601      	mov	r1, r0
 8007bda:	e853 0f00 	ldrex	r0, [r3]
 8007bde:	e843 1200 	strex	r2, r1, [r3]
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	d1f9      	bne.n	8007bda <z_log_dropped_read_and_clear+0xa>
 8007be6:	f3bf 8f5b 	dmb	ish
 8007bea:	4770      	bx	lr
 8007bec:	20001a24 	.word	0x20001a24

08007bf0 <dropped_notify>:
{
 8007bf0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8007bf2:	f7ff ffed 	bl	8007bd0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007bf6:	4c08      	ldr	r4, [pc, #32]	; (8007c18 <dropped_notify+0x28>)
 8007bf8:	4e08      	ldr	r6, [pc, #32]	; (8007c1c <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
 8007bfa:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007bfc:	42b4      	cmp	r4, r6
 8007bfe:	d300      	bcc.n	8007c02 <dropped_notify+0x12>
}
 8007c00:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8007c02:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8007c04:	795b      	ldrb	r3, [r3, #5]
 8007c06:	b12b      	cbz	r3, 8007c14 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	b113      	cbz	r3, 8007c14 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4620      	mov	r0, r4
 8007c12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007c14:	3410      	adds	r4, #16
 8007c16:	e7f1      	b.n	8007bfc <dropped_notify+0xc>
 8007c18:	0801a44c 	.word	0x0801a44c
 8007c1c:	0801a45c 	.word	0x0801a45c

08007c20 <z_log_msg_init>:
{
 8007c20:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8007c22:	4c04      	ldr	r4, [pc, #16]	; (8007c34 <z_log_msg_init+0x14>)
 8007c24:	4904      	ldr	r1, [pc, #16]	; (8007c38 <z_log_msg_init+0x18>)
 8007c26:	4620      	mov	r0, r4
 8007c28:	f00c ffc0 	bl	8014bac <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
 8007c2c:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <z_log_msg_init+0x1c>)
 8007c2e:	601c      	str	r4, [r3, #0]
}
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	bf00      	nop
 8007c34:	20000cdc 	.word	0x20000cdc
 8007c38:	0801a6a8 	.word	0x0801a6a8
 8007c3c:	20001a1c 	.word	0x20001a1c

08007c40 <log_core_init>:
{
 8007c40:	b508      	push	{r3, lr}
	panic_mode = false;
 8007c42:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <log_core_init+0x24>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 8007c44:	4808      	ldr	r0, [pc, #32]	; (8007c68 <log_core_init+0x28>)
	panic_mode = false;
 8007c46:	2300      	movs	r3, #0
 8007c48:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8007c4a:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <log_core_init+0x2c>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 8007c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	dropped_cnt = 0;
 8007c50:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 8007c52:	f7ff ff87 	bl	8007b64 <log_set_timestamp_func>
		z_log_msg_init();
 8007c56:	f7ff ffe3 	bl	8007c20 <z_log_msg_init>
}
 8007c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
 8007c5e:	f000 b97b 	b.w	8007f58 <z_log_runtime_filters_init>
 8007c62:	bf00      	nop
 8007c64:	20002368 	.word	0x20002368
 8007c68:	0801510b 	.word	0x0801510b
 8007c6c:	20001a24 	.word	0x20001a24

08007c70 <z_log_msg_alloc>:
{
 8007c70:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
 8007c72:	2200      	movs	r2, #0
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <z_log_msg_alloc+0xc>)
 8007c76:	2300      	movs	r3, #0
 8007c78:	f00c bfb9 	b.w	8014bee <mpsc_pbuf_alloc>
 8007c7c:	20000cdc 	.word	0x20000cdc

08007c80 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
 8007c80:	4801      	ldr	r0, [pc, #4]	; (8007c88 <z_log_msg_local_claim+0x8>)
 8007c82:	f00d b852 	b.w	8014d2a <mpsc_pbuf_claim>
 8007c86:	bf00      	nop
 8007c88:	20000cdc 	.word	0x20000cdc

08007c8c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
 8007c8c:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <z_log_msg_free+0xc>)
{
 8007c8e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	f00d b89a 	b.w	8014dca <mpsc_pbuf_free>
 8007c96:	bf00      	nop
 8007c98:	20001a1c 	.word	0x20001a1c

08007c9c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
 8007c9c:	4801      	ldr	r0, [pc, #4]	; (8007ca4 <z_log_msg_pending+0x8>)
 8007c9e:	f00d b8c8 	b.w	8014e32 <mpsc_pbuf_is_pending>
 8007ca2:	bf00      	nop
 8007ca4:	20000cdc 	.word	0x20000cdc

08007ca8 <z_impl_log_process>:
{
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
 8007caa:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <z_impl_log_process+0xc8>)
 8007cac:	7818      	ldrb	r0, [r3, #0]
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d05d      	beq.n	8007d6e <z_impl_log_process+0xc6>
	return z_log_msg_local_claim();
 8007cb2:	f7ff ffe5 	bl	8007c80 <z_log_msg_local_claim>
	if (msg) {
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	b190      	cbz	r0, 8007ce0 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8007cba:	f3bf 8f5b 	dmb	ish
 8007cbe:	4b2d      	ldr	r3, [pc, #180]	; (8007d74 <z_impl_log_process+0xcc>)
 8007cc0:	e853 1f00 	ldrex	r1, [r3]
 8007cc4:	3901      	subs	r1, #1
 8007cc6:	e843 1200 	strex	r2, r1, [r3]
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	d1f8      	bne.n	8007cc0 <z_impl_log_process+0x18>
 8007cce:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007cd2:	4d29      	ldr	r5, [pc, #164]	; (8007d78 <z_impl_log_process+0xd0>)
 8007cd4:	4e29      	ldr	r6, [pc, #164]	; (8007d7c <z_impl_log_process+0xd4>)
 8007cd6:	42b5      	cmp	r5, r6
 8007cd8:	d326      	bcc.n	8007d28 <z_impl_log_process+0x80>
		z_log_msg_free(msg);
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f7ff ffd6 	bl	8007c8c <z_log_msg_free>
	return dropped_cnt > 0;
 8007ce0:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <z_impl_log_process+0xd8>)
 8007ce2:	4c28      	ldr	r4, [pc, #160]	; (8007d84 <z_impl_log_process+0xdc>)
		if ((dropped_pend || unordered_pend) &&
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dd12      	ble.n	8007d10 <z_impl_log_process+0x68>
	return z_impl_k_uptime_ticks();
 8007cea:	f011 fe97 	bl	8019a1c <z_impl_k_uptime_ticks>
 8007cee:	220a      	movs	r2, #10
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f7f9 f92b 	bl	8000f4c <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 8007cf6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cfa:	1ac0      	subs	r0, r0, r3
		if ((dropped_pend || unordered_pend) &&
 8007cfc:	f240 33e9 	movw	r3, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 8007d00:	eb61 0102 	sbc.w	r1, r1, r2
		if ((dropped_pend || unordered_pend) &&
 8007d04:	4298      	cmp	r0, r3
 8007d06:	f171 0100 	sbcs.w	r1, r1, #0
 8007d0a:	d301      	bcc.n	8007d10 <z_impl_log_process+0x68>
				dropped_notify();
 8007d0c:	f7ff ff70 	bl	8007bf0 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
 8007d10:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d14:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
 8007d18:	f142 0200 	adc.w	r2, r2, #0
 8007d1c:	e9c4 3200 	strd	r3, r2, [r4]
}
 8007d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
 8007d24:	f7ff bfba 	b.w	8007c9c <z_log_msg_pending>
	return backend->cb->active;
 8007d28:	686b      	ldr	r3, [r5, #4]
		if (log_backend_is_active(backend) &&
 8007d2a:	795b      	ldrb	r3, [r3, #5]
 8007d2c:	b13b      	cbz	r3, 8007d3e <z_impl_log_process+0x96>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
 8007d2e:	7821      	ldrb	r1, [r4, #0]
	if (!z_log_item_is_msg(msg)) {
 8007d30:	074b      	lsls	r3, r1, #29
 8007d32:	d506      	bpl.n	8007d42 <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	4621      	mov	r1, r4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007d3e:	3510      	adds	r5, #16
 8007d40:	e7c9      	b.n	8007cd6 <z_impl_log_process+0x2e>
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
 8007d42:	8823      	ldrh	r3, [r4, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 8007d44:	6862      	ldr	r2, [r4, #4]
	if (level == LOG_LEVEL_NONE) {
 8007d46:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
	return msg->hdr.desc.level;
 8007d4a:	f3c3 1782 	ubfx	r7, r3, #6, #3
	return msg->hdr.desc.domain;
 8007d4e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
 8007d52:	d0ef      	beq.n	8007d34 <z_impl_log_process+0x8c>
	if (source) {
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	d0ed      	beq.n	8007d34 <z_impl_log_process+0x8c>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8007d58:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <z_impl_log_process+0xe0>)
 8007d5a:	1ad2      	subs	r2, r2, r3
		backend_level = log_filter_get(backend, domain_id, source_id, true);
 8007d5c:	f342 028f 	sbfx	r2, r2, #2, #16
 8007d60:	2301      	movs	r3, #1
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f9d2 	bl	800810c <log_filter_get>
		if (log_backend_is_active(backend) &&
 8007d68:	42b8      	cmp	r0, r7
 8007d6a:	d3e8      	bcc.n	8007d3e <z_impl_log_process+0x96>
 8007d6c:	e7e2      	b.n	8007d34 <z_impl_log_process+0x8c>
}
 8007d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d70:	20002367 	.word	0x20002367
 8007d74:	20001a28 	.word	0x20001a28
 8007d78:	0801a44c 	.word	0x0801a44c
 8007d7c:	0801a45c 	.word	0x0801a45c
 8007d80:	20001a24 	.word	0x20001a24
 8007d84:	20001390 	.word	0x20001390
 8007d88:	20000d20 	.word	0x20000d20

08007d8c <z_impl_log_panic>:
{
 8007d8c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
 8007d8e:	4d0d      	ldr	r5, [pc, #52]	; (8007dc4 <z_impl_log_panic+0x38>)
 8007d90:	7829      	ldrb	r1, [r5, #0]
 8007d92:	b961      	cbnz	r1, 8007dae <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7ff fe9f 	bl	8007ad8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007d9a:	4c0b      	ldr	r4, [pc, #44]	; (8007dc8 <z_impl_log_panic+0x3c>)
 8007d9c:	4e0b      	ldr	r6, [pc, #44]	; (8007dcc <z_impl_log_panic+0x40>)
 8007d9e:	42b4      	cmp	r4, r6
 8007da0:	d306      	bcc.n	8007db0 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
 8007da2:	f7ff ff81 	bl	8007ca8 <z_impl_log_process>
		while (log_process() == true) {
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d1fb      	bne.n	8007da2 <z_impl_log_panic+0x16>
	panic_mode = true;
 8007daa:	2301      	movs	r3, #1
 8007dac:	702b      	strb	r3, [r5, #0]
}
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
 8007db0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8007db2:	795b      	ldrb	r3, [r3, #5]
 8007db4:	b11b      	cbz	r3, 8007dbe <z_impl_log_panic+0x32>
	backend->api->panic(backend);
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	4620      	mov	r0, r4
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007dbe:	3410      	adds	r4, #16
 8007dc0:	e7ed      	b.n	8007d9e <z_impl_log_panic+0x12>
 8007dc2:	bf00      	nop
 8007dc4:	20002368 	.word	0x20002368
 8007dc8:	0801a44c 	.word	0x0801a44c
 8007dcc:	0801a45c 	.word	0x0801a45c

08007dd0 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
 8007dd0:	2100      	movs	r1, #0
{
 8007dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	f7ff fe7e 	bl	8007ad8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8007ddc:	4604      	mov	r4, r0
 8007dde:	b348      	cbz	r0, 8007e34 <log_process_thread_func+0x64>
 8007de0:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8007de4:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
 8007de8:	f008 fa80 	bl	80102ec <z_impl_z_current_get>
	proc_tid = process_tid;
 8007dec:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <log_process_thread_func+0x88>)
 8007dee:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8007df0:	b130      	cbz	r0, 8007e00 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8007df2:	4b1a      	ldr	r3, [pc, #104]	; (8007e5c <log_process_thread_func+0x8c>)
	    process_tid &&
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	dd02      	ble.n	8007e00 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
 8007dfa:	4819      	ldr	r0, [pc, #100]	; (8007e60 <log_process_thread_func+0x90>)
 8007dfc:	f007 febc 	bl	800fb78 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007e00:	4f18      	ldr	r7, [pc, #96]	; (8007e64 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
 8007e02:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8007e60 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8007e06:	2500      	movs	r5, #0
		if (activate_mask) {
 8007e08:	b144      	cbz	r4, 8007e1c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7ff fdfe 	bl	8007a0c <activate_foreach_backend>
			if (!activate_mask) {
 8007e10:	4604      	mov	r4, r0
 8007e12:	b918      	cbnz	r0, 8007e1c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
 8007e14:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007e18:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007e1c:	f7ff ff44 	bl	8007ca8 <z_impl_log_process>
		if (log_process() == false) {
 8007e20:	4606      	mov	r6, r0
 8007e22:	b928      	cbnz	r0, 8007e30 <log_process_thread_func+0x60>
			if (processed_any) {
 8007e24:	b9b5      	cbnz	r5, 8007e54 <log_process_thread_func+0x84>
 8007e26:	4642      	mov	r2, r8
 8007e28:	464b      	mov	r3, r9
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	f007 feca 	bl	800fbc4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8007e30:	4635      	mov	r5, r6
 8007e32:	e7e9      	b.n	8007e08 <log_process_thread_func+0x38>
 8007e34:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007e38:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007e3c:	e7d4      	b.n	8007de8 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
 8007e3e:	682b      	ldr	r3, [r5, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	b11b      	cbz	r3, 8007e4c <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
 8007e44:	2200      	movs	r2, #0
 8007e46:	4611      	mov	r1, r2
 8007e48:	4628      	mov	r0, r5
 8007e4a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8007e4c:	3510      	adds	r5, #16
 8007e4e:	42bd      	cmp	r5, r7
 8007e50:	d3f5      	bcc.n	8007e3e <log_process_thread_func+0x6e>
 8007e52:	e7e8      	b.n	8007e26 <log_process_thread_func+0x56>
 8007e54:	4d04      	ldr	r5, [pc, #16]	; (8007e68 <log_process_thread_func+0x98>)
 8007e56:	e7fa      	b.n	8007e4e <log_process_thread_func+0x7e>
 8007e58:	20001a20 	.word	0x20001a20
 8007e5c:	20001a28 	.word	0x20001a28
 8007e60:	20000dd8 	.word	0x20000dd8
 8007e64:	0801a45c 	.word	0x0801a45c
 8007e68:	0801a44c 	.word	0x0801a44c

08007e6c <z_log_msg_post_finalize>:
{
 8007e6c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
 8007e6e:	4818      	ldr	r0, [pc, #96]	; (8007ed0 <z_log_msg_post_finalize+0x64>)
 8007e70:	f00d f93e 	bl	80150f0 <atomic_inc>
	if (panic_mode) {
 8007e74:	4b17      	ldr	r3, [pc, #92]	; (8007ed4 <z_log_msg_post_finalize+0x68>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	b17b      	cbz	r3, 8007e9a <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
 8007e7a:	f04f 0310 	mov.w	r3, #16
 8007e7e:	f3ef 8411 	mrs	r4, BASEPRI
 8007e82:	f383 8812 	msr	BASEPRI_MAX, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f7ff ff0d 	bl	8007ca8 <z_impl_log_process>
	__asm__ volatile(
 8007e8e:	f384 8811 	msr	BASEPRI, r4
 8007e92:	f3bf 8f6f 	isb	sy
}
 8007e96:	b002      	add	sp, #8
 8007e98:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <z_log_msg_post_finalize+0x6c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f9      	beq.n	8007e96 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
 8007ea2:	b950      	cbnz	r0, 8007eba <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e9cd 2300 	strd	r2, r3, [sp]
 8007eac:	480b      	ldr	r0, [pc, #44]	; (8007edc <z_log_msg_post_finalize+0x70>)
 8007eae:	f242 7210 	movw	r2, #10000	; 0x2710
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f008 fc72 	bl	801079c <z_impl_k_timer_start>
 8007eb8:	e7ed      	b.n	8007e96 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8007eba:	280a      	cmp	r0, #10
 8007ebc:	d1eb      	bne.n	8007e96 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
 8007ebe:	4807      	ldr	r0, [pc, #28]	; (8007edc <z_log_msg_post_finalize+0x70>)
 8007ec0:	f011 fdba 	bl	8019a38 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8007ec4:	4806      	ldr	r0, [pc, #24]	; (8007ee0 <z_log_msg_post_finalize+0x74>)
}
 8007ec6:	b002      	add	sp, #8
 8007ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ecc:	f007 be54 	b.w	800fb78 <z_impl_k_sem_give>
 8007ed0:	20001a28 	.word	0x20001a28
 8007ed4:	20002368 	.word	0x20002368
 8007ed8:	20001a20 	.word	0x20001a20
 8007edc:	20001398 	.word	0x20001398
 8007ee0:	20000dd8 	.word	0x20000dd8

08007ee4 <z_log_msg_commit>:
{
 8007ee4:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
 8007ee6:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <z_log_msg_commit+0x1c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
{
 8007eea:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8007eec:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
 8007eee:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 8007ef0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
 8007ef2:	4804      	ldr	r0, [pc, #16]	; (8007f04 <z_log_msg_commit+0x20>)
 8007ef4:	f00c fef9 	bl	8014cea <mpsc_pbuf_commit>
}
 8007ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 8007efc:	f7ff bfb6 	b.w	8007e6c <z_log_msg_post_finalize>
 8007f00:	200006a4 	.word	0x200006a4
 8007f04:	20000cdc 	.word	0x20000cdc

08007f08 <log_mem_get_usage>:
{
 8007f08:	b508      	push	{r3, lr}
 8007f0a:	460a      	mov	r2, r1
	mpsc_pbuf_get_utilization(&log_buffer, buf_size, usage);
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	4802      	ldr	r0, [pc, #8]	; (8007f18 <log_mem_get_usage+0x10>)
 8007f10:	f00c ff99 	bl	8014e46 <mpsc_pbuf_get_utilization>
}
 8007f14:	2000      	movs	r0, #0
 8007f16:	bd08      	pop	{r3, pc}
 8007f18:	20000cdc 	.word	0x20000cdc

08007f1c <log_mem_get_max_usage>:
{
 8007f1c:	4601      	mov	r1, r0
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
 8007f1e:	4801      	ldr	r0, [pc, #4]	; (8007f24 <log_mem_get_max_usage+0x8>)
 8007f20:	f00c bf9c 	b.w	8014e5c <mpsc_pbuf_get_max_utilization>
 8007f24:	20000cdc 	.word	0x20000cdc

08007f28 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
 8007f28:	4b02      	ldr	r3, [pc, #8]	; (8007f34 <log_src_cnt_get+0xc>)
 8007f2a:	4803      	ldr	r0, [pc, #12]	; (8007f38 <log_src_cnt_get+0x10>)
 8007f2c:	1ac0      	subs	r0, r0, r3
 8007f2e:	08c0      	lsrs	r0, r0, #3
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	0801a3a4 	.word	0x0801a3a4
 8007f38:	0801a44c 	.word	0x0801a44c

08007f3c <log_source_name_get>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8007f3c:	4a04      	ldr	r2, [pc, #16]	; (8007f50 <log_source_name_get+0x14>)
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <log_source_name_get+0x18>)
 8007f40:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
 8007f42:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
 8007f46:	bf34      	ite	cc
 8007f48:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
 8007f4c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
 8007f4e:	4770      	bx	lr
 8007f50:	0801a3a4 	.word	0x0801a3a4
 8007f54:	0801a44c 	.word	0x0801a44c

08007f58 <z_log_runtime_filters_init>:
 8007f58:	480b      	ldr	r0, [pc, #44]	; (8007f88 <z_log_runtime_filters_init+0x30>)
 8007f5a:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <z_log_runtime_filters_init+0x34>)

	return z_log_link_get_dynamic_filter(domain_id, source_id);
}

void z_log_runtime_filters_init(void)
{
 8007f5c:	b530      	push	{r4, r5, lr}
 8007f5e:	1a1b      	subs	r3, r3, r0
 8007f60:	4c0b      	ldr	r4, [pc, #44]	; (8007f90 <z_log_runtime_filters_init+0x38>)
 8007f62:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
 8007f64:	2100      	movs	r1, #0
			return __log_const_start[source_id].level;
 8007f66:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
 8007f68:	4299      	cmp	r1, r3
 8007f6a:	d100      	bne.n	8007f6e <z_log_runtime_filters_init+0x16>
		level = MAX(level, CONFIG_LOG_OVERRIDE_LEVEL);
		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
 8007f6c:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
 8007f6e:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 8007f72:	6825      	ldr	r5, [r4, #0]
 8007f74:	f002 0207 	and.w	r2, r2, #7
 8007f78:	f025 0507 	bic.w	r5, r5, #7
 8007f7c:	432a      	orrs	r2, r5
 8007f7e:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
 8007f82:	3101      	adds	r1, #1
 8007f84:	e7f0      	b.n	8007f68 <z_log_runtime_filters_init+0x10>
 8007f86:	bf00      	nop
 8007f88:	0801a3a4 	.word	0x0801a3a4
 8007f8c:	0801a44c 	.word	0x0801a44c
 8007f90:	20000d20 	.word	0x20000d20

08007f94 <log_source_id_get>:

int log_source_id_get(const char *name)
{
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	4f0a      	ldr	r7, [pc, #40]	; (8007fc0 <log_source_id_get+0x2c>)
 8007f98:	4d0a      	ldr	r5, [pc, #40]	; (8007fc4 <log_source_id_get+0x30>)
 8007f9a:	1bed      	subs	r5, r5, r7
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID); i++) {
 8007fa0:	2400      	movs	r4, #0
 8007fa2:	42ac      	cmp	r4, r5
 8007fa4:	d103      	bne.n	8007fae <log_source_id_get+0x1a>
		if (strcmp(log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i),
			   name) == 0) {
			return i;
		}
	}
	return -1;
 8007fa6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8007faa:	4620      	mov	r0, r4
 8007fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strcmp(log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i),
 8007fae:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	f7f8 f978 	bl	80002a8 <strcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d0f6      	beq.n	8007faa <log_source_id_get+0x16>
	for (int i = 0; i < log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID); i++) {
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	e7f0      	b.n	8007fa2 <log_source_id_get+0xe>
 8007fc0:	0801a3a4 	.word	0x0801a3a4
 8007fc4:	0801a44c 	.word	0x0801a44c

08007fc8 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
 8007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4688      	mov	r8, r1
 8007fce:	4615      	mov	r5, r2
 8007fd0:	461e      	mov	r6, r3
	}

	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));


	if (backend == NULL) {
 8007fd2:	b998      	cbnz	r0, 8007ffc <z_impl_log_filter_set+0x34>
		uint32_t max = 0U;

		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
 8007fd4:	4f22      	ldr	r7, [pc, #136]	; (8008060 <z_impl_log_filter_set+0x98>)
 8007fd6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8008070 <z_impl_log_filter_set+0xa8>
		uint32_t max = 0U;
 8007fda:	4604      	mov	r4, r0
 8007fdc:	e009      	b.n	8007ff2 <z_impl_log_filter_set+0x2a>
		union { uintptr_t x; uint32_t val; } parm3 = { .val = level };
		return (uint32_t) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
 8007fde:	4638      	mov	r0, r7
 8007fe0:	4633      	mov	r3, r6
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	f7ff ffef 	bl	8007fc8 <z_impl_log_filter_set>
			uint32_t current = log_filter_set(iter_backend,
						 domain_id, source_id, level);

			max = MAX(current, max);
 8007fea:	4284      	cmp	r4, r0
 8007fec:	bf38      	it	cc
 8007fee:	4604      	movcc	r4, r0
		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	454f      	cmp	r7, r9
 8007ff4:	d3f3      	bcc.n	8007fde <z_impl_log_filter_set+0x16>
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
			       CONFIG_LOG_OVERRIDE_LEVEL));
	set_runtime_filter(log_backend_id_get(backend), domain_id, source_id, level);

	return level;
}
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffc:	4b19      	ldr	r3, [pc, #100]	; (8008064 <z_impl_log_filter_set+0x9c>)
 8007ffe:	4a1a      	ldr	r2, [pc, #104]	; (8008068 <z_impl_log_filter_set+0xa0>)
 8008000:	1ad2      	subs	r2, r2, r3
		if (source_id < log_src_cnt_get(domain_id)) {
 8008002:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
 8008006:	d228      	bcs.n	800805a <z_impl_log_filter_set+0x92>
			return __log_const_start[source_id].level;
 8008008:	eb03 03c5 	add.w	r3, r3, r5, lsl #3

		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(domain_id, source_id);
 800800c:	791c      	ldrb	r4, [r3, #4]
 800800e:	42b4      	cmp	r4, r6
 8008010:	bf28      	it	cs
 8008012:	4634      	movcs	r4, r6
	return backend->cb->id;
 8008014:	6843      	ldr	r3, [r0, #4]
	prev_max = LOG_FILTER_SLOT_GET(filters, LOG_FILTER_AGGR_SLOT_IDX);
 8008016:	4e15      	ldr	r6, [pc, #84]	; (800806c <z_impl_log_filter_set+0xa4>)
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
 8008018:	791a      	ldrb	r2, [r3, #4]
 800801a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800801e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008022:	2107      	movs	r1, #7
 8008024:	4091      	lsls	r1, r2
 8008026:	ea23 0301 	bic.w	r3, r3, r1
 800802a:	f004 0107 	and.w	r1, r4, #7
 800802e:	fa01 f202 	lsl.w	r2, r1, r2
 8008032:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
 8008034:	2100      	movs	r1, #0
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
 8008036:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
 8008038:	fa23 f002 	lsr.w	r0, r3, r2
 800803c:	f000 0007 	and.w	r0, r0, #7
 8008040:	4281      	cmp	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
 8008042:	f102 0203 	add.w	r2, r2, #3
 8008046:	bf38      	it	cc
 8008048:	4601      	movcc	r1, r0
 800804a:	2a1e      	cmp	r2, #30
 800804c:	d1f4      	bne.n	8008038 <z_impl_log_filter_set+0x70>
	LOG_FILTER_SLOT_SET(filters, LOG_FILTER_AGGR_SLOT_IDX, new_max);
 800804e:	f023 0307 	bic.w	r3, r3, #7
 8008052:	430b      	orrs	r3, r1
 8008054:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
}
 8008058:	e7cd      	b.n	8007ff6 <z_impl_log_filter_set+0x2e>
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
 800805a:	2400      	movs	r4, #0
 800805c:	e7da      	b.n	8008014 <z_impl_log_filter_set+0x4c>
 800805e:	bf00      	nop
 8008060:	0801a44c 	.word	0x0801a44c
 8008064:	0801a3a4 	.word	0x0801a3a4
 8008068:	0801a44c 	.word	0x0801a44c
 800806c:	20000d20 	.word	0x20000d20
 8008070:	0801a45c 	.word	0x0801a45c

08008074 <log_backend_enable>:
{
 8008074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008078:	4604      	mov	r4, r0
	backend->cb->id = id;
 800807a:	6843      	ldr	r3, [r0, #4]
	id += backend - log_backend_get(0);
 800807c:	4811      	ldr	r0, [pc, #68]	; (80080c4 <log_backend_enable+0x50>)
 800807e:	1a20      	subs	r0, r4, r0
 8008080:	1100      	asrs	r0, r0, #4
 8008082:	3001      	adds	r0, #1
	log_backend_id_set(backend, id);
 8008084:	7118      	strb	r0, [r3, #4]
	backend->cb->level = level;
 8008086:	6863      	ldr	r3, [r4, #4]
{
 8008088:	4617      	mov	r7, r2
	backend->cb->level = level;
 800808a:	719a      	strb	r2, [r3, #6]
 800808c:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <log_backend_enable+0x54>)
 800808e:	4a0f      	ldr	r2, [pc, #60]	; (80080cc <log_backend_enable+0x58>)
 8008090:	eba3 0802 	sub.w	r8, r3, r2
{
 8008094:	460e      	mov	r6, r1
 8008096:	ea4f 08d8 	mov.w	r8, r8, lsr #3
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
 800809a:	2500      	movs	r5, #0
 800809c:	4545      	cmp	r5, r8
 800809e:	d308      	bcc.n	80080b2 <log_backend_enable+0x3e>
	backend->cb->ctx = ctx;
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	715a      	strb	r2, [r3, #5]
}
 80080aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_log_notify_backend_enabled();
 80080ae:	f7ff bd69 	b.w	8007b84 <z_log_notify_backend_enabled>
 80080b2:	2100      	movs	r1, #0
 80080b4:	b22a      	sxth	r2, r5
 80080b6:	463b      	mov	r3, r7
 80080b8:	4620      	mov	r0, r4
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
 80080ba:	3501      	adds	r5, #1
 80080bc:	f7ff ff84 	bl	8007fc8 <z_impl_log_filter_set>
 80080c0:	b2ad      	uxth	r5, r5
 80080c2:	e7eb      	b.n	800809c <log_backend_enable+0x28>
 80080c4:	0801a44c 	.word	0x0801a44c
 80080c8:	0801a44c 	.word	0x0801a44c
 80080cc:	0801a3a4 	.word	0x0801a3a4

080080d0 <log_backend_disable>:
{
 80080d0:	b570      	push	{r4, r5, r6, lr}
	return backend->cb->active;
 80080d2:	6843      	ldr	r3, [r0, #4]
	if (log_backend_is_active(backend)) {
 80080d4:	795b      	ldrb	r3, [r3, #5]
{
 80080d6:	4605      	mov	r5, r0
	if (log_backend_is_active(backend)) {
 80080d8:	b91b      	cbnz	r3, 80080e2 <log_backend_disable+0x12>
	backend->cb->active = false;
 80080da:	686b      	ldr	r3, [r5, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	715a      	strb	r2, [r3, #5]
}
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	4e08      	ldr	r6, [pc, #32]	; (8008104 <log_backend_disable+0x34>)
 80080e4:	4b08      	ldr	r3, [pc, #32]	; (8008108 <log_backend_disable+0x38>)
 80080e6:	1af6      	subs	r6, r6, r3
 80080e8:	08f6      	lsrs	r6, r6, #3
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
 80080ea:	2400      	movs	r4, #0
 80080ec:	42b4      	cmp	r4, r6
 80080ee:	d2f4      	bcs.n	80080da <log_backend_disable+0xa>
 80080f0:	2300      	movs	r3, #0
 80080f2:	b222      	sxth	r2, r4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4628      	mov	r0, r5
 80080f8:	3401      	adds	r4, #1
 80080fa:	f7ff ff65 	bl	8007fc8 <z_impl_log_filter_set>
 80080fe:	b2a4      	uxth	r4, r4
 8008100:	e7f4      	b.n	80080ec <log_backend_disable+0x1c>
 8008102:	bf00      	nop
 8008104:	0801a44c 	.word	0x0801a44c
 8008108:	0801a3a4 	.word	0x0801a3a4

0800810c <log_filter_get>:
{
 800810c:	4601      	mov	r1, r0
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
 800810e:	4618      	mov	r0, r3
 8008110:	b163      	cbz	r3, 800812c <log_filter_get+0x20>
		if (source_id < 0) {
 8008112:	2a00      	cmp	r2, #0
 8008114:	db14      	blt.n	8008140 <log_filter_get+0x34>
	return backend->cb->id;
 8008116:	684b      	ldr	r3, [r1, #4]
		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
 8008118:	490a      	ldr	r1, [pc, #40]	; (8008144 <log_filter_get+0x38>)
 800811a:	791b      	ldrb	r3, [r3, #4]
 800811c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8008120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008124:	40d8      	lsrs	r0, r3
 8008126:	f000 0007 	and.w	r0, r0, #7
 800812a:	4770      	bx	lr
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <log_filter_get+0x3c>)
 800812e:	4907      	ldr	r1, [pc, #28]	; (800814c <log_filter_get+0x40>)
 8008130:	1ac9      	subs	r1, r1, r3
		if (source_id < log_src_cnt_get(domain_id)) {
 8008132:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
 8008136:	d204      	bcs.n	8008142 <log_filter_get+0x36>
			return __log_const_start[source_id].level;
 8008138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800813c:	7918      	ldrb	r0, [r3, #4]
 800813e:	4770      	bx	lr
			return LOG_LEVEL_DBG;
 8008140:	2004      	movs	r0, #4
}
 8008142:	4770      	bx	lr
 8008144:	20000d20 	.word	0x20000d20
 8008148:	0801a3a4 	.word	0x0801a3a4
 800814c:	0801a44c 	.word	0x0801a44c

08008150 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	b08f      	sub	sp, #60	; 0x3c
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8008156:	f3c1 44cb 	ubfx	r4, r1, #19, #12
 800815a:	f3c1 2649 	ubfx	r6, r1, #9, #10
 800815e:	9005      	str	r0, [sp, #20]
 8008160:	460d      	mov	r5, r1
 8008162:	4690      	mov	r8, r2
 8008164:	4699      	mov	r9, r3
 8008166:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
 8008168:	2e00      	cmp	r6, #0
 800816a:	d03c      	beq.n	80081e6 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
 800816c:	f04f 0b04 	mov.w	fp, #4
 8008170:	af09      	add	r7, sp, #36	; 0x24
 8008172:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
 8008176:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 8008178:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
 800817a:	ab0b      	add	r3, sp, #44	; 0x2c
 800817c:	f8cd b008 	str.w	fp, [sp, #8]
 8008180:	9701      	str	r7, [sp, #4]
 8008182:	f8cd a000 	str.w	sl, [sp]
 8008186:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
 8008188:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800818c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 800818e:	9607      	str	r6, [sp, #28]
 8008190:	f7ff f9aa 	bl	80074e8 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
 8008194:	f3c0 0309 	ubfx	r3, r0, #0, #10
 8008198:	1918      	adds	r0, r3, r4
 800819a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 800819e:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
 80081a0:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 80081a2:	f363 2552 	bfi	r5, r3, #9, #10
 80081a6:	9306      	str	r3, [sp, #24]
 80081a8:	f7ff fd62 	bl	8007c70 <z_log_msg_alloc>
		if (msg) {
 80081ac:	4604      	mov	r4, r0
 80081ae:	b178      	cbz	r0, 80081d0 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
 80081b4:	3010      	adds	r0, #16
 80081b6:	2200      	movs	r2, #0
 80081b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80081ba:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 80081bc:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 80081c0:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <z_impl_z_log_msg_static_create+0xa4>)
 80081c2:	9907      	ldr	r1, [sp, #28]
 80081c4:	f8cd a000 	str.w	sl, [sp]
 80081c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7ff f98c 	bl	80074e8 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
 80081d0:	f366 2552 	bfi	r5, r6, #9, #10
 80081d4:	9905      	ldr	r1, [sp, #20]
 80081d6:	464b      	mov	r3, r9
 80081d8:	462a      	mov	r2, r5
 80081da:	4620      	mov	r0, r4
}
 80081dc:	b00f      	add	sp, #60	; 0x3c
 80081de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
 80081e2:	f00c bfb5 	b.w	8015150 <z_log_msg_finalize>
 80081e6:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 80081ea:	0880      	lsrs	r0, r0, #2
 80081ec:	f7ff fd40 	bl	8007c70 <z_log_msg_alloc>
 80081f0:	4604      	mov	r4, r0
 80081f2:	e7ed      	b.n	80081d0 <z_impl_z_log_msg_static_create+0x80>
 80081f4:	08015125 	.word	0x08015125

080081f8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80081f8:	b40e      	push	{r1, r2, r3}
 80081fa:	b503      	push	{r0, r1, lr}
 80081fc:	ab03      	add	r3, sp, #12
 80081fe:	4601      	mov	r1, r0
 8008200:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8008204:	4804      	ldr	r0, [pc, #16]	; (8008218 <print_formatted+0x20>)
	va_start(args, fmt);
 8008206:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8008208:	f00c ffc9 	bl	801519e <cbvprintf>
	va_end(args);

	return length;
}
 800820c:	b002      	add	sp, #8
 800820e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008212:	b003      	add	sp, #12
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	080151c7 	.word	0x080151c7

0800821c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800821c:	06ca      	lsls	r2, r1, #27
 800821e:	d405      	bmi.n	800822c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8008220:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 8008222:	bf4c      	ite	mi
 8008224:	4902      	ldrmi	r1, [pc, #8]	; (8008230 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 8008226:	4903      	ldrpl	r1, [pc, #12]	; (8008234 <newline_print+0x18>)
 8008228:	f7ff bfe6 	b.w	80081f8 <print_formatted>
	}
}
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	0801bd34 	.word	0x0801bd34
 8008234:	0801b889 	.word	0x0801b889

08008238 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	b08b      	sub	sp, #44	; 0x2c
 800823e:	469a      	mov	sl, r3
 8008240:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
 8008244:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8008248:	9306      	str	r3, [sp, #24]
 800824a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800824c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800824e:	9208      	str	r2, [sp, #32]
 8008250:	4604      	mov	r4, r0
 8008252:	460d      	mov	r5, r1
 8008254:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 8008256:	f1bb 0f00 	cmp.w	fp, #0
 800825a:	f000 8085 	beq.w	8008368 <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800825e:	f006 0301 	and.w	r3, r6, #1
 8008262:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8008264:	f006 0308 	and.w	r3, r6, #8
 8008268:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
 800826a:	f00c ff59 	bl	8015120 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 800826e:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
 8008272:	4602      	mov	r2, r0
 8008274:	2800      	cmp	r0, #0
 8008276:	d047      	beq.n	8008308 <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
 8008278:	4984      	ldr	r1, [pc, #528]	; (800848c <log_output_process+0x254>)
 800827a:	4620      	mov	r0, r4
 800827c:	f7ff ffbc 	bl	80081f8 <print_formatted>
 8008280:	4680      	mov	r8, r0
	if (stamp) {
 8008282:	f1b9 0f00 	cmp.w	r9, #0
 8008286:	d008      	beq.n	800829a <log_output_process+0x62>
	if (!format) {
 8008288:	f016 0f44 	tst.w	r6, #68	; 0x44
 800828c:	d13e      	bne.n	800830c <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
 800828e:	4980      	ldr	r1, [pc, #512]	; (8008490 <log_output_process+0x258>)
 8008290:	462a      	mov	r2, r5
 8008292:	4620      	mov	r0, r4
 8008294:	f7ff ffb0 	bl	80081f8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8008298:	4480      	add	r8, r0
	if (color) {
 800829a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829c:	b153      	cbz	r3, 80082b4 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
 800829e:	4b7d      	ldr	r3, [pc, #500]	; (8008494 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
 80082a0:	497d      	ldr	r1, [pc, #500]	; (8008498 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
 80082a2:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
 80082a6:	4b7d      	ldr	r3, [pc, #500]	; (800849c <log_output_process+0x264>)
 80082a8:	4620      	mov	r0, r4
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	bf08      	it	eq
 80082ae:	461a      	moveq	r2, r3
 80082b0:	f7ff ffa2 	bl	80081f8 <print_formatted>
	if (level_on) {
 80082b4:	9b07      	ldr	r3, [sp, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d054      	beq.n	8008364 <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80082ba:	4b79      	ldr	r3, [pc, #484]	; (80084a0 <log_output_process+0x268>)
 80082bc:	4979      	ldr	r1, [pc, #484]	; (80084a4 <log_output_process+0x26c>)
 80082be:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7ff ff98 	bl	80081f8 <print_formatted>
 80082c8:	4605      	mov	r5, r0
	if (domain) {
 80082ca:	9b08      	ldr	r3, [sp, #32]
 80082cc:	b12b      	cbz	r3, 80082da <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
 80082ce:	4976      	ldr	r1, [pc, #472]	; (80084a8 <log_output_process+0x270>)
 80082d0:	461a      	mov	r2, r3
 80082d2:	4620      	mov	r0, r4
 80082d4:	f7ff ff90 	bl	80081f8 <print_formatted>
 80082d8:	4405      	add	r5, r0
	if (source) {
 80082da:	f1ba 0f00 	cmp.w	sl, #0
 80082de:	d005      	beq.n	80082ec <log_output_process+0xb4>
		total += print_formatted(output,
 80082e0:	4972      	ldr	r1, [pc, #456]	; (80084ac <log_output_process+0x274>)
 80082e2:	4652      	mov	r2, sl
 80082e4:	4620      	mov	r0, r4
 80082e6:	f7ff ff87 	bl	80081f8 <print_formatted>
 80082ea:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
 80082ec:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 80082ee:	2f00      	cmp	r7, #0
 80082f0:	d148      	bne.n	8008384 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d14e      	bne.n	8008396 <log_output_process+0x15e>
	if (color) {
 80082f8:	07f3      	lsls	r3, r6, #31
 80082fa:	f100 80c0 	bmi.w	800847e <log_output_process+0x246>
	newline_print(output, flags);
 80082fe:	4631      	mov	r1, r6
 8008300:	4620      	mov	r0, r4
 8008302:	f7ff ff8b 	bl	800821c <newline_print>
}
 8008306:	e0b4      	b.n	8008472 <log_output_process+0x23a>
	uint32_t length = 0U;
 8008308:	4680      	mov	r8, r0
 800830a:	e7ba      	b.n	8008282 <log_output_process+0x4a>
	} else if (freq != 0U) {
 800830c:	4b68      	ldr	r3, [pc, #416]	; (80084b0 <log_output_process+0x278>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	2800      	cmp	r0, #0
 8008312:	d0c1      	beq.n	8008298 <log_output_process+0x60>
		timestamp /= timestamp_div;
 8008314:	4b67      	ldr	r3, [pc, #412]	; (80084b4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
 8008316:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 8008320:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008324:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
 8008328:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
 800832c:	fb09 f505 	mul.w	r5, r9, r5
		mins = seconds / 60U;
 8008330:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8008334:	fbb3 f2f1 	udiv	r2, r3, r1
 8008338:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800833c:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
 8008340:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8008344:	fb00 551e 	mls	r5, r0, lr, r5
				length = print_formatted(output,
 8008348:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800834c:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
 8008350:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8008352:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 8008356:	4958      	ldr	r1, [pc, #352]	; (80084b8 <log_output_process+0x280>)
 8008358:	e9cd e501 	strd	lr, r5, [sp, #4]
 800835c:	4620      	mov	r0, r4
 800835e:	f7ff ff4b 	bl	80081f8 <print_formatted>
 8008362:	e799      	b.n	8008298 <log_output_process+0x60>
	int total = 0;
 8008364:	9d07      	ldr	r5, [sp, #28]
 8008366:	e7b0      	b.n	80082ca <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8008368:	f1ba 0f01 	cmp.w	sl, #1
 800836c:	d106      	bne.n	800837c <log_output_process+0x144>
	if (package) {
 800836e:	2f00      	cmp	r7, #0
 8008370:	d165      	bne.n	800843e <log_output_process+0x206>
	if (data_len) {
 8008372:	9b05      	ldr	r3, [sp, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d07c      	beq.n	8008472 <log_output_process+0x23a>
		prefix_offset = 0;
 8008378:	2500      	movs	r5, #0
 800837a:	e00c      	b.n	8008396 <log_output_process+0x15e>
	if (package) {
 800837c:	2f00      	cmp	r7, #0
 800837e:	d0f8      	beq.n	8008372 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8008380:	484e      	ldr	r0, [pc, #312]	; (80084bc <log_output_process+0x284>)
 8008382:	e05d      	b.n	8008440 <log_output_process+0x208>
		cb = out_func;
 8008384:	484e      	ldr	r0, [pc, #312]	; (80084c0 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8008386:	494f      	ldr	r1, [pc, #316]	; (80084c4 <log_output_process+0x28c>)
 8008388:	463b      	mov	r3, r7
 800838a:	4622      	mov	r2, r4
 800838c:	f00c f9e4 	bl	8014758 <cbpprintf_external>
	if (data_len) {
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d069      	beq.n	800846a <log_output_process+0x232>
		print_formatted(output, " ");
 8008396:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80084d8 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
 800839a:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80084dc <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800839e:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
 80083a0:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 80083a2:	2f10      	cmp	r7, #16
	newline_print(output, flags);
 80083a4:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 80083a6:	bf28      	it	cs
 80083a8:	2710      	movcs	r7, #16
	newline_print(output, flags);
 80083aa:	f7ff ff37 	bl	800821c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 80083ae:	f04f 0a00 	mov.w	sl, #0
 80083b2:	4555      	cmp	r5, sl
 80083b4:	dc46      	bgt.n	8008444 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	4649      	mov	r1, r9
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff ff1b 	bl	80081f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80083c2:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
 80083c6:	f01a 0f07 	tst.w	sl, #7
 80083ca:	d103      	bne.n	80083d4 <log_output_process+0x19c>
			print_formatted(output, " ");
 80083cc:	4641      	mov	r1, r8
 80083ce:	4620      	mov	r0, r4
 80083d0:	f7ff ff12 	bl	80081f8 <print_formatted>
		if (i < length) {
 80083d4:	4557      	cmp	r7, sl
 80083d6:	d93c      	bls.n	8008452 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
 80083d8:	9b06      	ldr	r3, [sp, #24]
 80083da:	4649      	mov	r1, r9
 80083dc:	f813 200a 	ldrb.w	r2, [r3, sl]
 80083e0:	4620      	mov	r0, r4
 80083e2:	f7ff ff09 	bl	80081f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80083e6:	f10a 0a01 	add.w	sl, sl, #1
 80083ea:	f1ba 0f10 	cmp.w	sl, #16
 80083ee:	d1ea      	bne.n	80083c6 <log_output_process+0x18e>
	print_formatted(output, "|");
 80083f0:	4935      	ldr	r1, [pc, #212]	; (80084c8 <log_output_process+0x290>)
 80083f2:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80083f4:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
 80083f8:	f7ff fefe 	bl	80081f8 <print_formatted>
		if (i < length) {
 80083fc:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
 80083fe:	9b06      	ldr	r3, [sp, #24]
 8008400:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
 8008402:	4b32      	ldr	r3, [pc, #200]	; (80084cc <log_output_process+0x294>)
 8008404:	5c99      	ldrb	r1, [r3, r2]
 8008406:	f011 0f97 	tst.w	r1, #151	; 0x97
 800840a:	bf08      	it	eq
 800840c:	222e      	moveq	r2, #46	; 0x2e
 800840e:	4930      	ldr	r1, [pc, #192]	; (80084d0 <log_output_process+0x298>)
 8008410:	4620      	mov	r0, r4
 8008412:	f7ff fef1 	bl	80081f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8008416:	f10a 0a01 	add.w	sl, sl, #1
 800841a:	f1ba 0f10 	cmp.w	sl, #16
 800841e:	d01d      	beq.n	800845c <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
 8008420:	f01a 0f07 	tst.w	sl, #7
 8008424:	d103      	bne.n	800842e <log_output_process+0x1f6>
			print_formatted(output, " ");
 8008426:	4641      	mov	r1, r8
 8008428:	4620      	mov	r0, r4
 800842a:	f7ff fee5 	bl	80081f8 <print_formatted>
		if (i < length) {
 800842e:	4557      	cmp	r7, sl
 8008430:	4652      	mov	r2, sl
 8008432:	d8e4      	bhi.n	80083fe <log_output_process+0x1c6>
			print_formatted(output, " ");
 8008434:	4641      	mov	r1, r8
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff fede 	bl	80081f8 <print_formatted>
 800843c:	e7eb      	b.n	8008416 <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 800843e:	4820      	ldr	r0, [pc, #128]	; (80084c0 <log_output_process+0x288>)
		prefix_offset = 0;
 8008440:	465d      	mov	r5, fp
 8008442:	e7a0      	b.n	8008386 <log_output_process+0x14e>
		print_formatted(output, " ");
 8008444:	4641      	mov	r1, r8
 8008446:	4620      	mov	r0, r4
 8008448:	f7ff fed6 	bl	80081f8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	e7af      	b.n	80083b2 <log_output_process+0x17a>
			print_formatted(output, "   ");
 8008452:	4920      	ldr	r1, [pc, #128]	; (80084d4 <log_output_process+0x29c>)
 8008454:	4620      	mov	r0, r4
 8008456:	f7ff fecf 	bl	80081f8 <print_formatted>
 800845a:	e7c4      	b.n	80083e6 <log_output_process+0x1ae>
		data += length;
 800845c:	9b06      	ldr	r3, [sp, #24]
 800845e:	443b      	add	r3, r7
 8008460:	9306      	str	r3, [sp, #24]
	} while (len);
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	1bdb      	subs	r3, r3, r7
 8008466:	9305      	str	r3, [sp, #20]
 8008468:	d199      	bne.n	800839e <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 800846a:	f1bb 0f00 	cmp.w	fp, #0
 800846e:	f47f af43 	bne.w	80082f8 <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8008472:	4620      	mov	r0, r4
}
 8008474:	b00b      	add	sp, #44	; 0x2c
 8008476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 800847a:	f00c be97 	b.w	80151ac <log_output_flush>
		print_formatted(output, "%s", log_color);
 800847e:	4a07      	ldr	r2, [pc, #28]	; (800849c <log_output_process+0x264>)
 8008480:	4905      	ldr	r1, [pc, #20]	; (8008498 <log_output_process+0x260>)
 8008482:	4620      	mov	r0, r4
 8008484:	f7ff feb8 	bl	80081f8 <print_formatted>
}
 8008488:	e739      	b.n	80082fe <log_output_process+0xc6>
 800848a:	bf00      	nop
 800848c:	0801b7d9 	.word	0x0801b7d9
 8008490:	0801b7dd 	.word	0x0801b7dd
 8008494:	0801a6bc 	.word	0x0801a6bc
 8008498:	0801bf55 	.word	0x0801bf55
 800849c:	0801b7d4 	.word	0x0801b7d4
 80084a0:	0801a6d0 	.word	0x0801a6d0
 80084a4:	0801b802 	.word	0x0801b802
 80084a8:	0801b808 	.word	0x0801b808
 80084ac:	0801b80c 	.word	0x0801b80c
 80084b0:	20001a34 	.word	0x20001a34
 80084b4:	20001a30 	.word	0x20001a30
 80084b8:	0801b7e6 	.word	0x0801b7e6
 80084bc:	080151fd 	.word	0x080151fd
 80084c0:	080151c7 	.word	0x080151c7
 80084c4:	0801519f 	.word	0x0801519f
 80084c8:	0801b81b 	.word	0x0801b81b
 80084cc:	0801b2e9 	.word	0x0801b2e9
 80084d0:	0801c525 	.word	0x0801c525
 80084d4:	0801b817 	.word	0x0801b817
 80084d8:	0801b819 	.word	0x0801b819
 80084dc:	0801b811 	.word	0x0801b811

080084e0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
 80084e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return msg->hdr.desc.level;
 80084e4:	880f      	ldrh	r7, [r1, #0]
	return msg->hdr.source;
 80084e6:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 80084e8:	688e      	ldr	r6, [r1, #8]
 80084ea:	b086      	sub	sp, #24
 80084ec:	4605      	mov	r5, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
 80084f2:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
 80084f6:	b15b      	cbz	r3, 8008510 <log_output_msg_process+0x30>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 80084f8:	4a13      	ldr	r2, [pc, #76]	; (8008548 <log_output_msg_process+0x68>)
 80084fa:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
 80084fc:	f343 018f 	sbfx	r1, r3, #2, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 8008500:	2900      	cmp	r1, #0
 8008502:	db1f      	blt.n	8008544 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
 8008504:	7820      	ldrb	r0, [r4, #0]
 8008506:	f3c0 00c2 	ubfx	r0, r0, #3, #3
 800850a:	f7ff fd17 	bl	8007f3c <log_source_name_get>
 800850e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8008510:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
 8008512:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 8008514:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
 8008518:	9700      	str	r7, [sp, #0]
 800851a:	f3c2 2249 	ubfx	r2, r2, #9, #10
 800851e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 8008520:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
 8008524:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 8008528:	bf08      	it	eq
 800852a:	2100      	moveq	r1, #0
 800852c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008530:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	f7ff fe7d 	bl	8008238 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
 800853e:	b006      	add	sp, #24
 8008540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	e7e3      	b.n	8008510 <log_output_msg_process+0x30>
 8008548:	20000d20 	.word	0x20000d20

0800854c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 800854c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800854e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008552:	428b      	cmp	r3, r1
 8008554:	bf28      	it	cs
 8008556:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8008558:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800855a:	4a0f      	ldr	r2, [pc, #60]	; (8008598 <log_output_dropped_process+0x4c>)
{
 800855c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800855e:	2105      	movs	r1, #5
 8008560:	4668      	mov	r0, sp
 8008562:	f00c f971 	bl	8014848 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	490c      	ldr	r1, [pc, #48]	; (800859c <log_output_dropped_process+0x50>)
 800856a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800856c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800856e:	2204      	movs	r2, #4
 8008570:	4628      	mov	r0, r5
 8008572:	f00c fe07 	bl	8015184 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	4632      	mov	r2, r6
 800857a:	4669      	mov	r1, sp
 800857c:	4628      	mov	r0, r5
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f00c fe00 	bl	8015184 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8008584:	6863      	ldr	r3, [r4, #4]
 8008586:	4906      	ldr	r1, [pc, #24]	; (80085a0 <log_output_dropped_process+0x54>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2217      	movs	r2, #23
 800858c:	4628      	mov	r0, r5
 800858e:	f00c fdf9 	bl	8015184 <buffer_write>
		     output->control_block->ctx);
}
 8008592:	b002      	add	sp, #8
 8008594:	bd70      	pop	{r4, r5, r6, pc}
 8008596:	bf00      	nop
 8008598:	0801d60a 	.word	0x0801d60a
 800859c:	0801b835 	.word	0x0801b835
 80085a0:	0801b81d 	.word	0x0801b81d

080085a4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80085a4:	4a07      	ldr	r2, [pc, #28]	; (80085c4 <log_output_timestamp_freq_set+0x20>)
 80085a6:	2100      	movs	r1, #0
 80085a8:	2301      	movs	r3, #1
 80085aa:	4290      	cmp	r0, r2
 80085ac:	d806      	bhi.n	80085bc <log_output_timestamp_freq_set+0x18>
 80085ae:	4a06      	ldr	r2, [pc, #24]	; (80085c8 <log_output_timestamp_freq_set+0x24>)
 80085b0:	b901      	cbnz	r1, 80085b4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 80085b2:	2301      	movs	r3, #1
 80085b4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <log_output_timestamp_freq_set+0x28>)
 80085b8:	6018      	str	r0, [r3, #0]
}
 80085ba:	4770      	bx	lr
		frequency /= 2U;
 80085bc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	2101      	movs	r1, #1
 80085c2:	e7f2      	b.n	80085aa <log_output_timestamp_freq_set+0x6>
 80085c4:	000f4240 	.word	0x000f4240
 80085c8:	20001a30 	.word	0x20001a30
 80085cc:	20001a34 	.word	0x20001a34

080085d0 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 80085d0:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
 80085d2:	2804      	cmp	r0, #4
	entry->handler = NULL;
 80085d4:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 80085d6:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
 80085d8:	bf98      	it	ls
 80085da:	4b04      	ldrls	r3, [pc, #16]	; (80085ec <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
 80085dc:	4a04      	ldr	r2, [pc, #16]	; (80085f0 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
 80085de:	bf98      	it	ls
 80085e0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
 80085e4:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
 80085e6:	600b      	str	r3, [r1, #0]
}
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	0801a82c 	.word	0x0801a82c
 80085f0:	0801a4d8 	.word	0x0801a4d8

080085f4 <backend_name_get>:

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
 80085f4:	4a06      	ldr	r2, [pc, #24]	; (8008610 <backend_name_get+0x1c>)
 80085f6:	608a      	str	r2, [r1, #8]
	entry->handler = NULL;
 80085f8:	2300      	movs	r3, #0
	entry->syntax  = NULL;

	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80085fa:	4a06      	ldr	r2, [pc, #24]	; (8008614 <backend_name_get+0x20>)
 80085fc:	4806      	ldr	r0, [pc, #24]	; (8008618 <backend_name_get+0x24>)
	entry->handler = NULL;
 80085fe:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 8008600:	604b      	str	r3, [r1, #4]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8008602:	4282      	cmp	r2, r0
	entry->syntax  = NULL;
 8008604:	600b      	str	r3, [r1, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8008606:	d300      	bcc.n	800860a <backend_name_get+0x16>
		entry->syntax = backend->name;
	}
}
 8008608:	4770      	bx	lr
		entry->syntax = backend->name;
 800860a:	6893      	ldr	r3, [r2, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 800860c:	3210      	adds	r2, #16
 800860e:	e7f8      	b.n	8008602 <backend_name_get+0xe>
 8008610:	0801a7b0 	.word	0x0801a7b0
 8008614:	0801a44c 	.word	0x0801a44c
 8008618:	0801a45c 	.word	0x0801a45c

0800861c <module_name_get>:
	entry->handler = NULL;
 800861c:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
 800861e:	4a06      	ldr	r2, [pc, #24]	; (8008638 <module_name_get+0x1c>)
{
 8008620:	b510      	push	{r4, lr}
 8008622:	460c      	mov	r4, r1
	entry->handler = NULL;
 8008624:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 8008626:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
 8008628:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, idx);
 800862a:	4601      	mov	r1, r0
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fc85 	bl	8007f3c <log_source_name_get>
 8008632:	6020      	str	r0, [r4, #0]
}
 8008634:	bd10      	pop	{r4, pc}
 8008636:	bf00      	nop
 8008638:	0801a4d8 	.word	0x0801a4d8

0800863c <cmd_log_backends_list>:
{
 800863c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8008640:	4c0e      	ldr	r4, [pc, #56]	; (800867c <cmd_log_backends_list+0x40>)
 8008642:	4e0f      	ldr	r6, [pc, #60]	; (8008680 <cmd_log_backends_list+0x44>)
		shell_fprintf(shell, SHELL_NORMAL,
 8008644:	4f0f      	ldr	r7, [pc, #60]	; (8008684 <cmd_log_backends_list+0x48>)
 8008646:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800868c <cmd_log_backends_list+0x50>
{
 800864a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 800864c:	42b4      	cmp	r4, r6
 800864e:	d303      	bcc.n	8008658 <cmd_log_backends_list+0x1c>
}
 8008650:	2000      	movs	r0, #0
 8008652:	b002      	add	sp, #8
 8008654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			      backend->cb->active ? "enabled" : "disabled",
 8008658:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
 800865a:	7959      	ldrb	r1, [r3, #5]
 800865c:	791b      	ldrb	r3, [r3, #4]
 800865e:	2900      	cmp	r1, #0
 8008660:	bf0c      	ite	eq
 8008662:	463a      	moveq	r2, r7
 8008664:	4642      	movne	r2, r8
 8008666:	e9cd 2300 	strd	r2, r3, [sp]
 800866a:	2108      	movs	r1, #8
 800866c:	68a3      	ldr	r3, [r4, #8]
 800866e:	4a06      	ldr	r2, [pc, #24]	; (8008688 <cmd_log_backends_list+0x4c>)
 8008670:	4628      	mov	r0, r5
 8008672:	f00c ff93 	bl	801559c <shell_fprintf>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8008676:	3410      	adds	r4, #16
 8008678:	e7e8      	b.n	800864c <cmd_log_backends_list+0x10>
 800867a:	bf00      	nop
 800867c:	0801a44c 	.word	0x0801a44c
 8008680:	0801a45c 	.word	0x0801a45c
 8008684:	0801b862 	.word	0x0801b862
 8008688:	0801b86b 	.word	0x0801b86b
 800868c:	0801b85a 	.word	0x0801b85a

08008690 <log_status>:
{
 8008690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	460d      	mov	r5, r1
 8008696:	4604      	mov	r4, r0
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
 8008698:	2000      	movs	r0, #0
 800869a:	f7ff fc45 	bl	8007f28 <log_src_cnt_get>
	return backend->cb->active;
 800869e:	686b      	ldr	r3, [r5, #4]
	if (!log_backend_is_active(backend)) {
 80086a0:	795b      	ldrb	r3, [r3, #5]
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
 80086a2:	4607      	mov	r7, r0
	if (!log_backend_is_active(backend)) {
 80086a4:	b923      	cbnz	r3, 80086b0 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
 80086a6:	4a1e      	ldr	r2, [pc, #120]	; (8008720 <log_status+0x90>)
 80086a8:	2103      	movs	r1, #3
 80086aa:	4620      	mov	r0, r4
 80086ac:	f00c ff76 	bl	801559c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 80086b0:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <log_status+0x94>)
 80086b2:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <log_status+0x98>)
			      severity_lvls[compiled_lvl]);
 80086b4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8008734 <log_status+0xa4>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 80086b8:	2108      	movs	r1, #8
 80086ba:	4620      	mov	r0, r4
 80086bc:	f00c ff6e 	bl	801559c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
 80086c0:	4a1a      	ldr	r2, [pc, #104]	; (800872c <log_status+0x9c>)
 80086c2:	2108      	movs	r1, #8
 80086c4:	4620      	mov	r0, r4
 80086c6:	f00c ff69 	bl	801559c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
 80086ca:	f04f 0800 	mov.w	r8, #0
 80086ce:	fa0f f688 	sxth.w	r6, r8
 80086d2:	42be      	cmp	r6, r7
 80086d4:	f108 0801 	add.w	r8, r8, #1
 80086d8:	d303      	bcc.n	80086e2 <log_status+0x52>
}
 80086da:	2000      	movs	r0, #0
 80086dc:	b003      	add	sp, #12
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
 80086e2:	4632      	mov	r2, r6
 80086e4:	2301      	movs	r3, #1
 80086e6:	2100      	movs	r1, #0
 80086e8:	4628      	mov	r0, r5
 80086ea:	f7ff fd0f 	bl	800810c <log_filter_get>
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
 80086ee:	2300      	movs	r3, #0
 80086f0:	4632      	mov	r2, r6
 80086f2:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
 80086f4:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
 80086f6:	4628      	mov	r0, r5
 80086f8:	f7ff fd08 	bl	800810c <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 80086fc:	4631      	mov	r1, r6
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
 80086fe:	4683      	mov	fp, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 8008700:	2000      	movs	r0, #0
 8008702:	f7ff fc1b 	bl	8007f3c <log_source_name_get>
 8008706:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
 800870a:	9201      	str	r2, [sp, #4]
 800870c:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
 8008710:	9200      	str	r2, [sp, #0]
 8008712:	4603      	mov	r3, r0
 8008714:	4a06      	ldr	r2, [pc, #24]	; (8008730 <log_status+0xa0>)
 8008716:	2108      	movs	r1, #8
 8008718:	4620      	mov	r0, r4
 800871a:	f00c ff3f 	bl	801559c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
 800871e:	e7d6      	b.n	80086ce <log_status+0x3e>
 8008720:	0801b88c 	.word	0x0801b88c
 8008724:	0801b89e 	.word	0x0801b89e
 8008728:	0801b8aa 	.word	0x0801b8aa
 800872c:	0801b8c8 	.word	0x0801b8c8
 8008730:	0801b905 	.word	0x0801b905
 8008734:	0801a840 	.word	0x0801a840

08008738 <shell_backend_cmd_execute>:
{
 8008738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
 800873c:	f852 8c04 	ldr.w	r8, [r2, #-4]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8008740:	4d13      	ldr	r5, [pc, #76]	; (8008790 <shell_backend_cmd_execute+0x58>)
{
 8008742:	4606      	mov	r6, r0
	size_t slen = strlen(name);
 8008744:	4640      	mov	r0, r8
{
 8008746:	469b      	mov	fp, r3
 8008748:	468a      	mov	sl, r1
 800874a:	4617      	mov	r7, r2
	size_t slen = strlen(name);
 800874c:	f7f7 fd38 	bl	80001c0 <strlen>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8008750:	4b10      	ldr	r3, [pc, #64]	; (8008794 <shell_backend_cmd_execute+0x5c>)
	size_t slen = strlen(name);
 8008752:	4681      	mov	r9, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8008754:	429d      	cmp	r5, r3
 8008756:	d308      	bcc.n	800876a <shell_backend_cmd_execute+0x32>
		shell_error(shell, "Invalid backend: %s", name);
 8008758:	4a0f      	ldr	r2, [pc, #60]	; (8008798 <shell_backend_cmd_execute+0x60>)
 800875a:	4643      	mov	r3, r8
 800875c:	2101      	movs	r1, #1
 800875e:	4630      	mov	r0, r6
 8008760:	f00c ff1c 	bl	801559c <shell_fprintf>
		return -ENOEXEC;
 8008764:	f06f 0407 	mvn.w	r4, #7
 8008768:	e00c      	b.n	8008784 <shell_backend_cmd_execute+0x4c>
		if (strncmp(name, backend->name, slen) == 0) {
 800876a:	68a9      	ldr	r1, [r5, #8]
 800876c:	464a      	mov	r2, r9
 800876e:	4640      	mov	r0, r8
 8008770:	f008 ff28 	bl	80115c4 <strncmp>
 8008774:	4b07      	ldr	r3, [pc, #28]	; (8008794 <shell_backend_cmd_execute+0x5c>)
 8008776:	4604      	mov	r4, r0
 8008778:	b938      	cbnz	r0, 800878a <shell_backend_cmd_execute+0x52>
		func(shell, backend, argc, argv);
 800877a:	463b      	mov	r3, r7
 800877c:	4652      	mov	r2, sl
 800877e:	4629      	mov	r1, r5
 8008780:	4630      	mov	r0, r6
 8008782:	47d8      	blx	fp
}
 8008784:	4620      	mov	r0, r4
 8008786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 800878a:	3510      	adds	r5, #16
 800878c:	e7e2      	b.n	8008754 <shell_backend_cmd_execute+0x1c>
 800878e:	bf00      	nop
 8008790:	0801a44c 	.word	0x0801a44c
 8008794:	0801a45c 	.word	0x0801a45c
 8008798:	0801b919 	.word	0x0801b919

0800879c <cmd_log_backend_status>:
{
 800879c:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
 800879e:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <cmd_log_backend_status+0xc>)
 80087a0:	f7ff ffca 	bl	8008738 <shell_backend_cmd_execute>
}
 80087a4:	2000      	movs	r0, #0
 80087a6:	bd08      	pop	{r3, pc}
 80087a8:	08008691 	.word	0x08008691

080087ac <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
 80087ac:	4b01      	ldr	r3, [pc, #4]	; (80087b4 <cmd_log_backend_halt+0x8>)
 80087ae:	f7ff bfc3 	b.w	8008738 <shell_backend_cmd_execute>
 80087b2:	bf00      	nop
 80087b4:	08015219 	.word	0x08015219

080087b8 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
 80087b8:	4b01      	ldr	r3, [pc, #4]	; (80087c0 <cmd_log_backend_go+0x8>)
 80087ba:	f7ff bfbd 	b.w	8008738 <shell_backend_cmd_execute>
 80087be:	bf00      	nop
 80087c0:	08015221 	.word	0x08015221

080087c4 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
 80087c4:	4b01      	ldr	r3, [pc, #4]	; (80087cc <cmd_log_backend_enable+0x8>)
 80087c6:	f7ff bfb7 	b.w	8008738 <shell_backend_cmd_execute>
 80087ca:	bf00      	nop
 80087cc:	08008955 	.word	0x08008955

080087d0 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
 80087d0:	4b01      	ldr	r3, [pc, #4]	; (80087d8 <cmd_log_backend_disable+0x8>)
 80087d2:	f7ff bfb1 	b.w	8008738 <shell_backend_cmd_execute>
 80087d6:	bf00      	nop
 80087d8:	0801526d 	.word	0x0801526d

080087dc <cmd_log_mem>:
{
 80087dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087de:	4604      	mov	r4, r0
	err = log_mem_get_usage(&size, &used);
 80087e0:	a902      	add	r1, sp, #8
 80087e2:	a801      	add	r0, sp, #4
 80087e4:	f7ff fb90 	bl	8007f08 <log_mem_get_usage>
	if (err < 0) {
 80087e8:	2800      	cmp	r0, #0
 80087ea:	da04      	bge.n	80087f6 <cmd_log_mem+0x1a>
		shell_error(sh, "Failed to get usage (mode does not support it?)");
 80087ec:	4a14      	ldr	r2, [pc, #80]	; (8008840 <cmd_log_mem+0x64>)
 80087ee:	2101      	movs	r1, #1
 80087f0:	4620      	mov	r0, r4
 80087f2:	f00c fed3 	bl	801559c <shell_fprintf>
	shell_print(sh, "Log message buffer utilization report:");
 80087f6:	4a13      	ldr	r2, [pc, #76]	; (8008844 <cmd_log_mem+0x68>)
 80087f8:	2108      	movs	r1, #8
 80087fa:	4620      	mov	r0, r4
 80087fc:	f00c fece 	bl	801559c <shell_fprintf>
	shell_print(sh, "\tCapacity: %u bytes", size);
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	4a11      	ldr	r2, [pc, #68]	; (8008848 <cmd_log_mem+0x6c>)
 8008804:	2108      	movs	r1, #8
 8008806:	4620      	mov	r0, r4
 8008808:	f00c fec8 	bl	801559c <shell_fprintf>
	shell_print(sh, "\tCurrently in use: %u bytes", used);
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	4a0f      	ldr	r2, [pc, #60]	; (800884c <cmd_log_mem+0x70>)
 8008810:	2108      	movs	r1, #8
 8008812:	4620      	mov	r0, r4
 8008814:	f00c fec2 	bl	801559c <shell_fprintf>
	err = log_mem_get_max_usage(&max);
 8008818:	a803      	add	r0, sp, #12
 800881a:	f7ff fb7f 	bl	8007f1c <log_mem_get_max_usage>
	if (err < 0) {
 800881e:	2800      	cmp	r0, #0
 8008820:	da04      	bge.n	800882c <cmd_log_mem+0x50>
		shell_print(sh, "Enable CONFIG_LOG_MEM_UTILIZATION to get maximum usage");
 8008822:	4a0b      	ldr	r2, [pc, #44]	; (8008850 <cmd_log_mem+0x74>)
 8008824:	2108      	movs	r1, #8
 8008826:	4620      	mov	r0, r4
 8008828:	f00c feb8 	bl	801559c <shell_fprintf>
	shell_print(sh, "\tMaximum usage: %u bytes", max);
 800882c:	4620      	mov	r0, r4
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	4a08      	ldr	r2, [pc, #32]	; (8008854 <cmd_log_mem+0x78>)
 8008832:	2108      	movs	r1, #8
 8008834:	f00c feb2 	bl	801559c <shell_fprintf>
}
 8008838:	2000      	movs	r0, #0
 800883a:	b004      	add	sp, #16
 800883c:	bd10      	pop	{r4, pc}
 800883e:	bf00      	nop
 8008840:	0801b92e 	.word	0x0801b92e
 8008844:	0801b95f 	.word	0x0801b95f
 8008848:	0801b987 	.word	0x0801b987
 800884c:	0801b99c 	.word	0x0801b99c
 8008850:	0801b9b9 	.word	0x0801b9b9
 8008854:	0801b9f1 	.word	0x0801b9f1

08008858 <shell_state_precheck>:
{
 8008858:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
 800885a:	69c3      	ldr	r3, [r0, #28]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	791c      	ldrb	r4, [r3, #4]
 8008860:	b92c      	cbnz	r4, 800886e <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
 8008862:	4a04      	ldr	r2, [pc, #16]	; (8008874 <shell_state_precheck+0x1c>)
 8008864:	2101      	movs	r1, #1
 8008866:	f00c fe99 	bl	801559c <shell_fprintf>
 800886a:	4620      	mov	r0, r4
}
 800886c:	bd10      	pop	{r4, pc}
	return true;
 800886e:	2001      	movs	r0, #1
 8008870:	e7fc      	b.n	800886c <shell_state_precheck+0x14>
 8008872:	bf00      	nop
 8008874:	0801ba0b 	.word	0x0801ba0b

08008878 <filters_set>:
{
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4607      	mov	r7, r0
 800887e:	b085      	sub	sp, #20
 8008880:	4689      	mov	r9, r1
 8008882:	4698      	mov	r8, r3
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
 8008884:	4615      	mov	r5, r2
 8008886:	bbb2      	cbnz	r2, 80088f6 <filters_set+0x7e>
 8008888:	4610      	mov	r0, r2
 800888a:	f7ff fb4d 	bl	8007f28 <log_src_cnt_get>
 800888e:	4606      	mov	r6, r0
	if (!backend->cb->active) {
 8008890:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008894:	795b      	ldrb	r3, [r3, #5]
 8008896:	b923      	cbnz	r3, 80088a2 <filters_set+0x2a>
		shell_warn(shell, "Backend not active.");
 8008898:	4a2a      	ldr	r2, [pc, #168]	; (8008944 <filters_set+0xcc>)
 800889a:	2103      	movs	r1, #3
 800889c:	4638      	mov	r0, r7
 800889e:	f00c fe7d 	bl	801559c <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
 80088a2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008950 <filters_set+0xd8>
 80088a6:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
 80088a8:	42b4      	cmp	r4, r6
 80088aa:	da21      	bge.n	80088f0 <filters_set+0x78>
		id = all ? i : module_id_get(argv[i]);
 80088ac:	b33d      	cbz	r5, 80088fe <filters_set+0x86>
 80088ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088b2:	9302      	str	r3, [sp, #8]
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
 80088b4:	2000      	movs	r0, #0
 80088b6:	f7ff fb37 	bl	8007f28 <log_src_cnt_get>
	for (i = 0U; i < modules_cnt; i++) {
 80088ba:	2300      	movs	r3, #0
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
 80088bc:	4682      	mov	sl, r0
	for (i = 0U; i < modules_cnt; i++) {
 80088be:	459a      	cmp	sl, r3
 80088c0:	d00c      	beq.n	80088dc <filters_set+0x64>
		tmp_name = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i);
 80088c2:	4619      	mov	r1, r3
 80088c4:	2000      	movs	r0, #0
 80088c6:	9303      	str	r3, [sp, #12]
 80088c8:	f7ff fb38 	bl	8007f3c <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
 80088cc:	9902      	ldr	r1, [sp, #8]
 80088ce:	2240      	movs	r2, #64	; 0x40
 80088d0:	f008 fe78 	bl	80115c4 <strncmp>
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	b980      	cbnz	r0, 80088fa <filters_set+0x82>
		if (id >= 0) {
 80088d8:	2b00      	cmp	r3, #0
 80088da:	da2c      	bge.n	8008936 <filters_set+0xbe>
			shell_error(shell, "%s: unknown source name.", argv[i]);
 80088dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088e0:	4a19      	ldr	r2, [pc, #100]	; (8008948 <filters_set+0xd0>)
 80088e2:	2101      	movs	r1, #1
 80088e4:	4638      	mov	r0, r7
	for (i = 0; i < cnt; i++) {
 80088e6:	3401      	adds	r4, #1
			shell_error(shell, "%s: unknown source name.", argv[i]);
 80088e8:	f00c fe58 	bl	801559c <shell_fprintf>
	for (i = 0; i < cnt; i++) {
 80088ec:	42a6      	cmp	r6, r4
 80088ee:	dcde      	bgt.n	80088ae <filters_set+0x36>
}
 80088f0:	b005      	add	sp, #20
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
 80088f6:	4616      	mov	r6, r2
 80088f8:	e7ca      	b.n	8008890 <filters_set+0x18>
	for (i = 0U; i < modules_cnt; i++) {
 80088fa:	3301      	adds	r3, #1
 80088fc:	e7df      	b.n	80088be <filters_set+0x46>
 80088fe:	46a2      	mov	sl, r4
 8008900:	2100      	movs	r1, #0
 8008902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008904:	b222      	sxth	r2, r4
 8008906:	4648      	mov	r0, r9
 8008908:	f7ff fb5e 	bl	8007fc8 <z_impl_log_filter_set>
			if (set_lvl != level) {
 800890c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800890e:	4283      	cmp	r3, r0
 8008910:	4604      	mov	r4, r0
 8008912:	d00d      	beq.n	8008930 <filters_set+0xb8>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
 8008914:	b995      	cbnz	r5, 800893c <filters_set+0xc4>
 8008916:	4651      	mov	r1, sl
 8008918:	4628      	mov	r0, r5
 800891a:	f7ff fb0f 	bl	8007f3c <log_source_name_get>
 800891e:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
 8008920:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
 8008924:	9200      	str	r2, [sp, #0]
 8008926:	2103      	movs	r1, #3
 8008928:	4a08      	ldr	r2, [pc, #32]	; (800894c <filters_set+0xd4>)
 800892a:	4638      	mov	r0, r7
 800892c:	f00c fe36 	bl	801559c <shell_fprintf>
	for (i = 0; i < cnt; i++) {
 8008930:	f10a 0401 	add.w	r4, sl, #1
 8008934:	e7b8      	b.n	80088a8 <filters_set+0x30>
 8008936:	46a2      	mov	sl, r4
			return i;
 8008938:	461c      	mov	r4, r3
 800893a:	e7e1      	b.n	8008900 <filters_set+0x88>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
 800893c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
 8008940:	e7ee      	b.n	8008920 <filters_set+0xa8>
 8008942:	bf00      	nop
 8008944:	0801ba2f 	.word	0x0801ba2f
 8008948:	0801ba5a 	.word	0x0801ba5a
 800894c:	0801ba44 	.word	0x0801ba44
 8008950:	0801a840 	.word	0x0801a840

08008954 <log_enable>:
{
 8008954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	f8df b054 	ldr.w	fp, [pc, #84]	; 80089b0 <log_enable+0x5c>
	severity_level = severity_level_get(argv[1]);
 800895c:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8008960:	4606      	mov	r6, r0
 8008962:	4688      	mov	r8, r1
 8008964:	4691      	mov	r9, r2
 8008966:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 8008968:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
 800896a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800896e:	2204      	movs	r2, #4
 8008970:	4650      	mov	r0, sl
 8008972:	f008 fe27 	bl	80115c4 <strncmp>
 8008976:	4604      	mov	r4, r0
 8008978:	b158      	cbz	r0, 8008992 <log_enable+0x3e>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 800897a:	3701      	adds	r7, #1
 800897c:	2f05      	cmp	r7, #5
 800897e:	d1f4      	bne.n	800896a <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
 8008980:	686b      	ldr	r3, [r5, #4]
 8008982:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <log_enable+0x58>)
 8008984:	2101      	movs	r1, #1
 8008986:	4630      	mov	r0, r6
 8008988:	f00c fe08 	bl	801559c <shell_fprintf>
 800898c:	f06f 0407 	mvn.w	r4, #7
 8008990:	e008      	b.n	80089a4 <log_enable+0x50>
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
 8008992:	9700      	str	r7, [sp, #0]
 8008994:	f105 0308 	add.w	r3, r5, #8
 8008998:	f1a9 0202 	sub.w	r2, r9, #2
 800899c:	4641      	mov	r1, r8
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ff6a 	bl	8008878 <filters_set>
}
 80089a4:	4620      	mov	r0, r4
 80089a6:	b003      	add	sp, #12
 80089a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ac:	0801ba74 	.word	0x0801ba74
 80089b0:	0801a840 	.word	0x0801a840

080089b4 <cmd_kernel_version>:
#define THREAD_MAX_NAM_LEN 10
#endif

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
 80089b4:	b513      	push	{r0, r1, r4, lr}
 80089b6:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
 80089b8:	f007 f822 	bl	800fa00 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
 80089bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	4a04      	ldr	r2, [pc, #16]	; (80089dc <cmd_kernel_version+0x28>)
 80089ca:	0e03      	lsrs	r3, r0, #24
 80089cc:	2108      	movs	r1, #8
 80089ce:	4620      	mov	r0, r4
 80089d0:	f00c fde4 	bl	801559c <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
 80089d4:	2000      	movs	r0, #0
 80089d6:	b002      	add	sp, #8
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	bf00      	nop
 80089dc:	0801bc2f 	.word	0x0801bc2f

080089e0 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
 80089e0:	b510      	push	{r4, lr}
 80089e2:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 80089e4:	f011 f81a 	bl	8019a1c <z_impl_k_uptime_ticks>
 80089e8:	220a      	movs	r2, #10
 80089ea:	2300      	movs	r3, #0
 80089ec:	f7f8 faae 	bl	8000f4c <__aeabi_uldivmod>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
 80089f0:	4a03      	ldr	r2, [pc, #12]	; (8008a00 <cmd_kernel_uptime+0x20>)
 80089f2:	4603      	mov	r3, r0
 80089f4:	2108      	movs	r1, #8
 80089f6:	4620      	mov	r0, r4
 80089f8:	f00c fdd0 	bl	801559c <shell_fprintf>
	return 0;
}
 80089fc:	2000      	movs	r0, #0
 80089fe:	bd10      	pop	{r4, pc}
 8008a00:	0801bc48 	.word	0x0801bc48

08008a04 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
 8008a04:	b510      	push	{r4, lr}
 8008a06:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
 8008a08:	f005 fe8a 	bl	800e720 <sys_clock_elapsed>
 8008a0c:	4a08      	ldr	r2, [pc, #32]	; (8008a30 <cmd_kernel_threads+0x2c>)
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2108      	movs	r1, #8
 8008a12:	4620      	mov	r0, r4
 8008a14:	f00c fdc2 	bl	801559c <shell_fprintf>
	shell_print(shell, "Threads:");
 8008a18:	4a06      	ldr	r2, [pc, #24]	; (8008a34 <cmd_kernel_threads+0x30>)
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	2108      	movs	r1, #8
 8008a1e:	f00c fdbd 	bl	801559c <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
 8008a22:	4805      	ldr	r0, [pc, #20]	; (8008a38 <cmd_kernel_threads+0x34>)
 8008a24:	4621      	mov	r1, r4
 8008a26:	f006 fe77 	bl	800f718 <k_thread_foreach>
	return 0;
}
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	0801bc57 	.word	0x0801bc57
 8008a34:	0801bc76 	.word	0x0801bc76
 8008a38:	08008a3d 	.word	0x08008a3d

08008a3c <shell_tdata_dump>:
{
 8008a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3e:	b08f      	sub	sp, #60	; 0x3c
	size_t size = thread->stack_info.size;
 8008a40:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
 8008a48:	f010 fe1a 	bl	8019680 <k_thread_name_get>
 8008a4c:	4606      	mov	r6, r0
	return z_impl_z_current_get();
 8008a4e:	f007 fc4d 	bl	80102ec <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
 8008a52:	4b24      	ldr	r3, [pc, #144]	; (8008ae4 <shell_tdata_dump+0xa8>)
 8008a54:	4a24      	ldr	r2, [pc, #144]	; (8008ae8 <shell_tdata_dump+0xac>)
 8008a56:	2e00      	cmp	r6, #0
 8008a58:	bf08      	it	eq
 8008a5a:	461e      	moveq	r6, r3
 8008a5c:	4b23      	ldr	r3, [pc, #140]	; (8008aec <shell_tdata_dump+0xb0>)
 8008a5e:	e9cd 4600 	strd	r4, r6, [sp]
 8008a62:	4284      	cmp	r4, r0
 8008a64:	bf18      	it	ne
 8008a66:	4613      	movne	r3, r2
 8008a68:	2108      	movs	r1, #8
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <shell_tdata_dump+0xb4>)
 8008a6e:	f00c fd95 	bl	801559c <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
 8008a72:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8008a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a7a:	f994 300e 	ldrsb.w	r3, [r4, #14]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	7b23      	ldrb	r3, [r4, #12]
 8008a82:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <shell_tdata_dump+0xb8>)
 8008a84:	4628      	mov	r0, r5
 8008a86:	2108      	movs	r1, #8
 8008a88:	f00c fd88 	bl	801559c <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p",
 8008a8c:	a906      	add	r1, sp, #24
 8008a8e:	2220      	movs	r2, #32
 8008a90:	4620      	mov	r0, r4
 8008a92:	f006 fe89 	bl	800f7a8 <k_thread_state_str>
 8008a96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a98:	9200      	str	r2, [sp, #0]
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4a16      	ldr	r2, [pc, #88]	; (8008af8 <shell_tdata_dump+0xbc>)
 8008a9e:	2108      	movs	r1, #8
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f00c fd7b 	bl	801559c <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
 8008aa6:	a905      	add	r1, sp, #20
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f010 fdf9 	bl	80196a0 <z_impl_k_thread_stack_space_get>
	if (ret) {
 8008aae:	4603      	mov	r3, r0
 8008ab0:	b130      	cbz	r0, 8008ac0 <shell_tdata_dump+0x84>
		shell_print(shell,
 8008ab2:	4a12      	ldr	r2, [pc, #72]	; (8008afc <shell_tdata_dump+0xc0>)
 8008ab4:	2108      	movs	r1, #8
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f00c fd70 	bl	801559c <shell_fprintf>
}
 8008abc:	b00f      	add	sp, #60	; 0x3c
 8008abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
 8008ac0:	9a05      	ldr	r2, [sp, #20]
 8008ac2:	2364      	movs	r3, #100	; 0x64
 8008ac4:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
 8008ac6:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
 8008aca:	434b      	muls	r3, r1
		shell_print(shell,
 8008acc:	4a0c      	ldr	r2, [pc, #48]	; (8008b00 <shell_tdata_dump+0xc4>)
		pcnt = ((size - unused) * 100U) / size;
 8008ace:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
 8008ad2:	2108      	movs	r1, #8
 8008ad4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008ad8:	4628      	mov	r0, r5
 8008ada:	463b      	mov	r3, r7
 8008adc:	f00c fd5e 	bl	801559c <shell_fprintf>
}
 8008ae0:	e7ec      	b.n	8008abc <shell_tdata_dump+0x80>
 8008ae2:	bf00      	nop
 8008ae4:	0801bc80 	.word	0x0801bc80
 8008ae8:	0801b819 	.word	0x0801b819
 8008aec:	0801ce55 	.word	0x0801ce55
 8008af0:	0801bc83 	.word	0x0801bc83
 8008af4:	0801bc8f 	.word	0x0801bc8f
 8008af8:	0801bcbb 	.word	0x0801bcbb
 8008afc:	0801bcd2 	.word	0x0801bcd2
 8008b00:	0801bcff 	.word	0x0801bcff

08008b04 <cmd_kernel_stacks>:
K_KERNEL_STACK_ARRAY_DECLARE(z_interrupt_stacks, CONFIG_MP_MAX_NUM_CPUS,
			     CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
 8008b04:	b530      	push	{r4, r5, lr}
 8008b06:	b093      	sub	sp, #76	; 0x4c
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
 8008b08:	2100      	movs	r1, #0
 8008b0a:	221c      	movs	r2, #28
{
 8008b0c:	4604      	mov	r4, r0
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
 8008b0e:	a80b      	add	r0, sp, #44	; 0x2c
 8008b10:	910a      	str	r1, [sp, #40]	; 0x28
 8008b12:	f008 fbc1 	bl	8011298 <memset>

	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
 8008b16:	481c      	ldr	r0, [pc, #112]	; (8008b88 <cmd_kernel_stacks+0x84>)
 8008b18:	f7f7 fb52 	bl	80001c0 <strlen>
 8008b1c:	f1c0 0020 	rsb	r0, r0, #32
 8008b20:	2801      	cmp	r0, #1
 8008b22:	d92e      	bls.n	8008b82 <cmd_kernel_stacks+0x7e>
 8008b24:	4818      	ldr	r0, [pc, #96]	; (8008b88 <cmd_kernel_stacks+0x84>)
 8008b26:	f7f7 fb4b 	bl	80001c0 <strlen>
 8008b2a:	f1c0 0220 	rsb	r2, r0, #32
 8008b2e:	2320      	movs	r3, #32
 8008b30:	ad0a      	add	r5, sp, #40	; 0x28
 8008b32:	4619      	mov	r1, r3
 8008b34:	4628      	mov	r0, r5
 8008b36:	f008 fc01 	bl	801133c <__memset_chk>

	k_thread_foreach(shell_stack_dump, (void *)shell);
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	4813      	ldr	r0, [pc, #76]	; (8008b8c <cmd_kernel_stacks+0x88>)
 8008b3e:	f006 fdeb 	bl	800f718 <k_thread_foreach>

	for (int i = 0; i < num_cpus; i++) {
		size_t unused;
		const uint8_t *buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size_t size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);
		int err = z_stack_space_get(buf, size, &unused);
 8008b42:	aa09      	add	r2, sp, #36	; 0x24
 8008b44:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8008b48:	4811      	ldr	r0, [pc, #68]	; (8008b90 <cmd_kernel_stacks+0x8c>)
 8008b4a:	f010 fd9d 	bl	8019688 <z_stack_space_get>

		(void)err;
		__ASSERT_NO_MSG(err == 0);

		shell_print(shell,
 8008b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b50:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8008b54:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8008b58:	f5c1 6004 	rsb	r0, r1, #2112	; 0x840
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	2364      	movs	r3, #100	; 0x64
 8008b60:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8008b64:	4343      	muls	r3, r0
 8008b66:	9500      	str	r5, [sp, #0]
 8008b68:	4620      	mov	r0, r4
 8008b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b6e:	2108      	movs	r1, #8
 8008b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b74:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <cmd_kernel_stacks+0x90>)
 8008b76:	4a08      	ldr	r2, [pc, #32]	; (8008b98 <cmd_kernel_stacks+0x94>)
 8008b78:	f00c fd10 	bl	801559c <shell_fprintf>
			    &z_interrupt_stacks[i], i, pad, size, unused, size - unused, size,
			    ((size - unused) * 100U) / size);
	}

	return 0;
}
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	b013      	add	sp, #76	; 0x4c
 8008b80:	bd30      	pop	{r4, r5, pc}
	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
 8008b82:	2201      	movs	r2, #1
 8008b84:	e7d3      	b.n	8008b2e <cmd_kernel_stacks+0x2a>
 8008b86:	bf00      	nop
 8008b88:	0801bd36 	.word	0x0801bd36
 8008b8c:	08008c79 	.word	0x08008c79
 8008b90:	20003040 	.word	0x20003040
 8008b94:	20003000 	.word	0x20003000
 8008b98:	0801bd3d 	.word	0x0801bd3d

08008b9c <cmd_kernel_cycles>:
{
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8008ba0:	f005 fddc 	bl	800e75c <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
 8008ba4:	4a03      	ldr	r2, [pc, #12]	; (8008bb4 <cmd_kernel_cycles+0x18>)
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2108      	movs	r1, #8
 8008baa:	4620      	mov	r0, r4
 8008bac:	f00c fcf6 	bl	801559c <shell_fprintf>
}
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	bd10      	pop	{r4, pc}
 8008bb4:	0801bd85 	.word	0x0801bd85

08008bb8 <cmd_kernel_log_level_set>:
}

#if defined(CONFIG_LOG_RUNTIME_FILTERING)
static int cmd_kernel_log_level_set(const struct shell *sh,
				    size_t argc, char **argv)
{
 8008bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008bbc:	4617      	mov	r7, r2
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	int err = 0;
 8008bbe:	2300      	movs	r3, #0
{
 8008bc0:	4604      	mov	r4, r0

	uint8_t severity = shell_strtoul(argv[2], 10, &err);
 8008bc2:	aa01      	add	r2, sp, #4
 8008bc4:	68b8      	ldr	r0, [r7, #8]
	int err = 0;
 8008bc6:	9301      	str	r3, [sp, #4]
	uint8_t severity = shell_strtoul(argv[2], 10, &err);
 8008bc8:	210a      	movs	r1, #10
 8008bca:	f00c fe38 	bl	801583e <shell_strtoul>

	if (err) {
 8008bce:	9d01      	ldr	r5, [sp, #4]
	uint8_t severity = shell_strtoul(argv[2], 10, &err);
 8008bd0:	b2c6      	uxtb	r6, r0
	if (err) {
 8008bd2:	b155      	cbz	r5, 8008bea <cmd_kernel_log_level_set+0x32>
		shell_error(sh, "Unable to parse log severity (err %d)", err);
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	4a15      	ldr	r2, [pc, #84]	; (8008c2c <cmd_kernel_log_level_set+0x74>)
 8008bd8:	2101      	movs	r1, #1
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f00c fcde 	bl	801559c <shell_fprintf>

		return err;
 8008be0:	9d01      	ldr	r5, [sp, #4]
	}

	log_filter_set(NULL, 0, (int16_t)source_id, severity);

	return 0;
}
 8008be2:	4628      	mov	r0, r5
 8008be4:	b002      	add	sp, #8
 8008be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (severity > LOG_LEVEL_DBG) {
 8008bea:	2e04      	cmp	r6, #4
 8008bec:	d90a      	bls.n	8008c04 <cmd_kernel_log_level_set+0x4c>
		shell_error(sh, "Invalid log level: %d", severity);
 8008bee:	4a10      	ldr	r2, [pc, #64]	; (8008c30 <cmd_kernel_log_level_set+0x78>)
 8008bf0:	4633      	mov	r3, r6
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f00c fcd1 	bl	801559c <shell_fprintf>
		shell_help(sh);
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f00c fcf3 	bl	80155e6 <shell_help>
		return SHELL_CMD_HELP_PRINTED;
 8008c00:	2501      	movs	r5, #1
 8008c02:	e7ee      	b.n	8008be2 <cmd_kernel_log_level_set+0x2a>
	int source_id = log_source_id_get(argv[1]);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff f9c5 	bl	8007f94 <log_source_id_get>
	if (source_id < 0) {
 8008c0a:	f1b0 0800 	subs.w	r8, r0, #0
 8008c0e:	da05      	bge.n	8008c1c <cmd_kernel_log_level_set+0x64>
		shell_error(sh, "Unable to find log source: %s", argv[1]);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a08      	ldr	r2, [pc, #32]	; (8008c34 <cmd_kernel_log_level_set+0x7c>)
 8008c14:	2101      	movs	r1, #1
 8008c16:	4620      	mov	r0, r4
 8008c18:	f00c fcc0 	bl	801559c <shell_fprintf>
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4633      	mov	r3, r6
 8008c20:	fa0f f288 	sxth.w	r2, r8
 8008c24:	4608      	mov	r0, r1
 8008c26:	f7ff f9cf 	bl	8007fc8 <z_impl_log_filter_set>
 8008c2a:	e7da      	b.n	8008be2 <cmd_kernel_log_level_set+0x2a>
 8008c2c:	0801bd9b 	.word	0x0801bd9b
 8008c30:	0801bdc2 	.word	0x0801bdc2
 8008c34:	0801bdd9 	.word	0x0801bdd9

08008c38 <cmd_kernel_sleep>:
{
 8008c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c3a:	4613      	mov	r3, r2
	int err = 0;
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	9201      	str	r2, [sp, #4]
{
 8008c40:	4605      	mov	r5, r0
	ms = shell_strtoul(argv[1], 10, &err);
 8008c42:	aa01      	add	r2, sp, #4
 8008c44:	6858      	ldr	r0, [r3, #4]
 8008c46:	210a      	movs	r1, #10
 8008c48:	f00c fdf9 	bl	801583e <shell_strtoul>
	if (!err) {
 8008c4c:	9c01      	ldr	r4, [sp, #4]
 8008c4e:	b94c      	cbnz	r4, 8008c64 <cmd_kernel_sleep+0x2c>
 8008c50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8008c54:	210a      	movs	r1, #10
 8008c56:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 8008c5a:	f007 fb2f 	bl	80102bc <z_impl_k_sleep>
}
 8008c5e:	4620      	mov	r0, r4
 8008c60:	b003      	add	sp, #12
 8008c62:	bd30      	pop	{r4, r5, pc}
		shell_error(sh, "Unable to parse input (err %d)", err);
 8008c64:	4623      	mov	r3, r4
 8008c66:	4a03      	ldr	r2, [pc, #12]	; (8008c74 <cmd_kernel_sleep+0x3c>)
 8008c68:	2101      	movs	r1, #1
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f00c fc96 	bl	801559c <shell_fprintf>
		return err;
 8008c70:	9c01      	ldr	r4, [sp, #4]
 8008c72:	e7f4      	b.n	8008c5e <cmd_kernel_sleep+0x26>
 8008c74:	0801bdf8 	.word	0x0801bdf8

08008c78 <shell_stack_dump>:
{
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	4604      	mov	r4, r0
	size_t size = thread->stack_info.size;
 8008c7c:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
 8008c80:	b089      	sub	sp, #36	; 0x24
 8008c82:	460d      	mov	r5, r1
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
 8008c84:	a907      	add	r1, sp, #28
 8008c86:	f010 fd0b 	bl	80196a0 <z_impl_k_thread_stack_space_get>
	if (ret) {
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	b130      	cbz	r0, 8008c9c <shell_stack_dump+0x24>
		shell_print(shell,
 8008c8e:	4a10      	ldr	r2, [pc, #64]	; (8008cd0 <shell_stack_dump+0x58>)
 8008c90:	2108      	movs	r1, #8
 8008c92:	4628      	mov	r0, r5
 8008c94:	f00c fc82 	bl	801559c <shell_fprintf>
}
 8008c98:	b009      	add	sp, #36	; 0x24
 8008c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f010 fcef 	bl	8019680 <k_thread_name_get>
	shell_print(
 8008ca2:	4f0c      	ldr	r7, [pc, #48]	; (8008cd4 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
 8008ca4:	9a07      	ldr	r2, [sp, #28]
	shell_print(
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	bf18      	it	ne
 8008caa:	4607      	movne	r7, r0
	pcnt = ((size - unused) * 100U) / size;
 8008cac:	1ab1      	subs	r1, r6, r2
 8008cae:	2364      	movs	r3, #100	; 0x64
	shell_print(
 8008cb0:	e9cd 2102 	strd	r2, r1, [sp, #8]
	pcnt = ((size - unused) * 100U) / size;
 8008cb4:	434b      	muls	r3, r1
	shell_print(
 8008cb6:	e9cd 7600 	strd	r7, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
 8008cba:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print(
 8008cbe:	4a06      	ldr	r2, [pc, #24]	; (8008cd8 <shell_stack_dump+0x60>)
 8008cc0:	e9cd 6304 	strd	r6, r3, [sp, #16]
 8008cc4:	2108      	movs	r1, #8
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f00c fc67 	bl	801559c <shell_fprintf>
 8008cce:	e7e3      	b.n	8008c98 <shell_stack_dump+0x20>
 8008cd0:	0801bcd2 	.word	0x0801bcd2
 8008cd4:	0801bc80 	.word	0x0801bc80
 8008cd8:	0801be18 	.word	0x0801be18

08008cdc <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	4603      	mov	r3, r0
	const char *name = dev->name;
 8008ce0:	6800      	ldr	r0, [r0, #0]
{
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
 8008ce6:	b108      	cbz	r0, 8008cec <get_device_name+0x10>
 8008ce8:	7802      	ldrb	r2, [r0, #0]
 8008cea:	b922      	cbnz	r2, 8008cf6 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
 8008cec:	4a02      	ldr	r2, [pc, #8]	; (8008cf8 <get_device_name+0x1c>)
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f008 fb5e 	bl	80113b0 <snprintf>
 8008cf4:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
 8008cf6:	bd10      	pop	{r4, pc}
 8008cf8:	0801bf25 	.word	0x0801bf25

08008cfc <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
 8008cfc:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
 8008cfe:	680c      	ldr	r4, [r1, #0]
 8008d00:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 8008d04:	f7ff ffea 	bl	8008cdc <get_device_name>
 8008d08:	4a03      	ldr	r2, [pc, #12]	; (8008d18 <cmd_device_list_visitor+0x1c>)
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2108      	movs	r1, #8
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f00c fc44 	bl	801559c <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
 8008d14:	2000      	movs	r0, #0
 8008d16:	bd10      	pop	{r4, pc}
 8008d18:	0801bf2a 	.word	0x0801bf2a

08008d1c <cmd_device_list>:

static int cmd_device_list(const struct shell *sh,
			   size_t argc, char **argv)
{
 8008d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d20:	b08a      	sub	sp, #40	; 0x28
 8008d22:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
 8008d24:	a801      	add	r0, sp, #4
 8008d26:	f006 fb1f 	bl	800f368 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
 8008d2a:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
 8008d2c:	4a1b      	ldr	r2, [pc, #108]	; (8008d9c <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
 8008d2e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008da8 <cmd_device_list+0x8c>
		const char *state = "READY";
 8008d32:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008dac <cmd_device_list+0x90>
 8008d36:	f8df a078 	ldr.w	sl, [pc, #120]	; 8008db0 <cmd_device_list+0x94>
	const struct device *devlist_end = devlist + devcnt;
 8008d3a:	2318      	movs	r3, #24
 8008d3c:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
 8008d40:	2108      	movs	r1, #8
 8008d42:	4628      	mov	r0, r5
 8008d44:	f00c fc2a 	bl	801559c <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
 8008d48:	9c01      	ldr	r4, [sp, #4]
 8008d4a:	42b4      	cmp	r4, r6
 8008d4c:	d303      	bcc.n	8008d56 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
 8008d4e:	2000      	movs	r0, #0
 8008d50:	b00a      	add	sp, #40	; 0x28
 8008d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
 8008d56:	af05      	add	r7, sp, #20
 8008d58:	4639      	mov	r1, r7
 8008d5a:	2214      	movs	r2, #20
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f7ff ffbd 	bl	8008cdc <get_device_name>
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
 8008d62:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
 8008d64:	4603      	mov	r3, r0
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
 8008d66:	2108      	movs	r1, #8
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f00c fc17 	bl	801559c <shell_fprintf>
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f010 fc50 	bl	8019614 <z_device_is_ready>
		shell_fprintf(sh, SHELL_NORMAL, " (%s)\n", state);
 8008d74:	4a0a      	ldr	r2, [pc, #40]	; (8008da0 <cmd_device_list+0x84>)
 8008d76:	2800      	cmp	r0, #0
 8008d78:	bf0c      	ite	eq
 8008d7a:	464b      	moveq	r3, r9
 8008d7c:	4653      	movne	r3, sl
 8008d7e:	2108      	movs	r1, #8
 8008d80:	4628      	mov	r0, r5
 8008d82:	f00c fc0b 	bl	801559c <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
 8008d86:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4906      	ldr	r1, [pc, #24]	; (8008da4 <cmd_device_list+0x88>)
			struct cmd_device_list_visitor_context ctx = {
 8008d8c:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8008d8e:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
 8008d90:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
 8008d94:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8008d96:	f010 fc48 	bl	801962a <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
 8008d9a:	e7d6      	b.n	8008d4a <cmd_device_list+0x2e>
 8008d9c:	0801bf49 	.word	0x0801bf49
 8008da0:	0801de1e 	.word	0x0801de1e
 8008da4:	08008cfd 	.word	0x08008cfd
 8008da8:	0801bf53 	.word	0x0801bf53
 8008dac:	0801bf40 	.word	0x0801bf40
 8008db0:	0801bf3a 	.word	0x0801bf3a

08008db4 <device_get_config_level>:
{
 8008db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8008db8:	4b11      	ldr	r3, [pc, #68]	; (8008e00 <device_get_config_level+0x4c>)
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
 8008dba:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8008e04 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8008dbe:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8008dc2:	3101      	adds	r1, #1
{
 8008dc4:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8008dc6:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
 8008dca:	4606      	mov	r6, r0
	bool devices = false;
 8008dcc:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8008dce:	45a0      	cmp	r8, r4
 8008dd0:	d803      	bhi.n	8008dda <device_get_config_level+0x26>
}
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	b007      	add	sp, #28
 8008dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f010 fc1a 	bl	8019614 <z_device_is_ready>
		if (device_is_ready(dev)) {
 8008de0:	4605      	mov	r5, r0
 8008de2:	b158      	cbz	r0, 8008dfc <device_get_config_level+0x48>
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
 8008de4:	2214      	movs	r2, #20
 8008de6:	a901      	add	r1, sp, #4
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7ff ff77 	bl	8008cdc <get_device_name>
 8008dee:	464a      	mov	r2, r9
 8008df0:	4603      	mov	r3, r0
 8008df2:	2108      	movs	r1, #8
 8008df4:	4630      	mov	r0, r6
 8008df6:	f00c fbd1 	bl	801559c <shell_fprintf>
			devices = true;
 8008dfa:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8008dfc:	3418      	adds	r4, #24
 8008dfe:	e7e6      	b.n	8008dce <device_get_config_level+0x1a>
 8008e00:	0801a960 	.word	0x0801a960
 8008e04:	0801bf58 	.word	0x0801bf58

08008e08 <cmd_device_levels>:
{
 8008e08:	b510      	push	{r4, lr}
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
 8008e0a:	2108      	movs	r1, #8
{
 8008e0c:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
 8008e0e:	4a25      	ldr	r2, [pc, #148]	; (8008ea4 <cmd_device_levels+0x9c>)
 8008e10:	f00c fbc4 	bl	801559c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_EARLY);
 8008e14:	2100      	movs	r1, #0
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff ffcc 	bl	8008db4 <device_get_config_level>
	if (ret == false) {
 8008e1c:	b920      	cbnz	r0, 8008e28 <cmd_device_levels+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
 8008e1e:	4a22      	ldr	r2, [pc, #136]	; (8008ea8 <cmd_device_levels+0xa0>)
 8008e20:	2108      	movs	r1, #8
 8008e22:	4620      	mov	r0, r4
 8008e24:	f00c fbba 	bl	801559c <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 1:\n");
 8008e28:	2108      	movs	r1, #8
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	; (8008eac <cmd_device_levels+0xa4>)
 8008e2e:	f00c fbb5 	bl	801559c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_1);
 8008e32:	2101      	movs	r1, #1
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7ff ffbd 	bl	8008db4 <device_get_config_level>
	if (ret == false) {
 8008e3a:	b920      	cbnz	r0, 8008e46 <cmd_device_levels+0x3e>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
 8008e3c:	4a1a      	ldr	r2, [pc, #104]	; (8008ea8 <cmd_device_levels+0xa0>)
 8008e3e:	2108      	movs	r1, #8
 8008e40:	4620      	mov	r0, r4
 8008e42:	f00c fbab 	bl	801559c <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 2:\n");
 8008e46:	2108      	movs	r1, #8
 8008e48:	4620      	mov	r0, r4
 8008e4a:	4a19      	ldr	r2, [pc, #100]	; (8008eb0 <cmd_device_levels+0xa8>)
 8008e4c:	f00c fba6 	bl	801559c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_2);
 8008e50:	2102      	movs	r1, #2
 8008e52:	4620      	mov	r0, r4
 8008e54:	f7ff ffae 	bl	8008db4 <device_get_config_level>
	if (ret == false) {
 8008e58:	b920      	cbnz	r0, 8008e64 <cmd_device_levels+0x5c>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
 8008e5a:	4a13      	ldr	r2, [pc, #76]	; (8008ea8 <cmd_device_levels+0xa0>)
 8008e5c:	2108      	movs	r1, #8
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f00c fb9c 	bl	801559c <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "POST_KERNEL:\n");
 8008e64:	2108      	movs	r1, #8
 8008e66:	4620      	mov	r0, r4
 8008e68:	4a12      	ldr	r2, [pc, #72]	; (8008eb4 <cmd_device_levels+0xac>)
 8008e6a:	f00c fb97 	bl	801559c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_POST_KERNEL);
 8008e6e:	2103      	movs	r1, #3
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7ff ff9f 	bl	8008db4 <device_get_config_level>
	if (ret == false) {
 8008e76:	b920      	cbnz	r0, 8008e82 <cmd_device_levels+0x7a>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
 8008e78:	4a0b      	ldr	r2, [pc, #44]	; (8008ea8 <cmd_device_levels+0xa0>)
 8008e7a:	2108      	movs	r1, #8
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f00c fb8d 	bl	801559c <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "APPLICATION:\n");
 8008e82:	2108      	movs	r1, #8
 8008e84:	4620      	mov	r0, r4
 8008e86:	4a0c      	ldr	r2, [pc, #48]	; (8008eb8 <cmd_device_levels+0xb0>)
 8008e88:	f00c fb88 	bl	801559c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_APPLICATION);
 8008e8c:	2104      	movs	r1, #4
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff ff90 	bl	8008db4 <device_get_config_level>
	if (ret == false) {
 8008e94:	b920      	cbnz	r0, 8008ea0 <cmd_device_levels+0x98>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
 8008e96:	4a04      	ldr	r2, [pc, #16]	; (8008ea8 <cmd_device_levels+0xa0>)
 8008e98:	2108      	movs	r1, #8
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f00c fb7e 	bl	801559c <shell_fprintf>
}
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	bd10      	pop	{r4, pc}
 8008ea4:	0801bf5e 	.word	0x0801bf5e
 8008ea8:	0801bf66 	.word	0x0801bf66
 8008eac:	0801bf6e 	.word	0x0801bf6e
 8008eb0:	0801bf7d 	.word	0x0801bf7d
 8008eb4:	0801bf8c 	.word	0x0801bf8c
 8008eb8:	0801bf9a 	.word	0x0801bf9a

08008ebc <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
 8008ebc:	1e8b      	subs	r3, r1, #2
 8008ebe:	2b02      	cmp	r3, #2
{
 8008ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	4688      	mov	r8, r1
 8008ec8:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
 8008eca:	d837      	bhi.n	8008f3c <cmd_devmem+0x80>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
 8008ecc:	6860      	ldr	r0, [r4, #4]
 8008ece:	2210      	movs	r2, #16
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f008 ff49 	bl	8011d68 <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
 8008ed6:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
 8008eda:	4606      	mov	r6, r0
	if (argc < 3) {
 8008edc:	d107      	bne.n	8008eee <cmd_devmem+0x32>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
 8008ede:	4a26      	ldr	r2, [pc, #152]	; (8008f78 <cmd_devmem+0xbc>)
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	2108      	movs	r1, #8
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	f00c fb59 	bl	801559c <shell_fprintf>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
 8008eea:	6833      	ldr	r3, [r6, #0]
	if (err == 0) {
 8008eec:	e016      	b.n	8008f1c <cmd_devmem+0x60>
		width = strtoul(argv[2], NULL, 10);
 8008eee:	220a      	movs	r2, #10
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	68a0      	ldr	r0, [r4, #8]
 8008ef4:	f008 ff38 	bl	8011d68 <strtoul>
 8008ef8:	b2c5      	uxtb	r5, r0
	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
 8008efa:	4a1f      	ldr	r2, [pc, #124]	; (8008f78 <cmd_devmem+0xbc>)
 8008efc:	462b      	mov	r3, r5
 8008efe:	2108      	movs	r1, #8
 8008f00:	4638      	mov	r0, r7
 8008f02:	f00c fb4b 	bl	801559c <shell_fprintf>

	if (argc <= 3) {
 8008f06:	f1b8 0f04 	cmp.w	r8, #4
 8008f0a:	d01a      	beq.n	8008f42 <cmd_devmem+0x86>
	switch (width) {
 8008f0c:	2d10      	cmp	r5, #16
 8008f0e:	d00d      	beq.n	8008f2c <cmd_devmem+0x70>
 8008f10:	2d20      	cmp	r5, #32
 8008f12:	d0ea      	beq.n	8008eea <cmd_devmem+0x2e>
 8008f14:	2d08      	cmp	r5, #8
 8008f16:	d10c      	bne.n	8008f32 <cmd_devmem+0x76>
	return *(volatile uint8_t *)addr;
 8008f18:	7833      	ldrb	r3, [r6, #0]
 8008f1a:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
 8008f1c:	4a17      	ldr	r2, [pc, #92]	; (8008f7c <cmd_devmem+0xc0>)
 8008f1e:	2108      	movs	r1, #8
 8008f20:	4638      	mov	r0, r7
 8008f22:	f00c fb3b 	bl	801559c <shell_fprintf>
		return -EINVAL;
 8008f26:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
 8008f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return *(volatile uint16_t *)addr;
 8008f2c:	8833      	ldrh	r3, [r6, #0]
 8008f2e:	b29b      	uxth	r3, r3
	if (err == 0) {
 8008f30:	e7f4      	b.n	8008f1c <cmd_devmem+0x60>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
 8008f32:	4a13      	ldr	r2, [pc, #76]	; (8008f80 <cmd_devmem+0xc4>)
 8008f34:	2108      	movs	r1, #8
 8008f36:	4638      	mov	r0, r7
 8008f38:	f00c fb30 	bl	801559c <shell_fprintf>
		return -EINVAL;
 8008f3c:	f06f 0015 	mvn.w	r0, #21
 8008f40:	e7f2      	b.n	8008f28 <cmd_devmem+0x6c>
	value = strtoul(argv[3], NULL, 16);
 8008f42:	68e0      	ldr	r0, [r4, #12]
 8008f44:	2210      	movs	r2, #16
 8008f46:	2100      	movs	r1, #0
 8008f48:	f008 ff0e 	bl	8011d68 <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
 8008f4c:	4a0d      	ldr	r2, [pc, #52]	; (8008f84 <cmd_devmem+0xc8>)
 8008f4e:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
 8008f50:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
 8008f52:	2108      	movs	r1, #8
 8008f54:	4638      	mov	r0, r7
 8008f56:	f00c fb21 	bl	801559c <shell_fprintf>
	switch (width) {
 8008f5a:	2d10      	cmp	r5, #16
 8008f5c:	d006      	beq.n	8008f6c <cmd_devmem+0xb0>
 8008f5e:	2d20      	cmp	r5, #32
 8008f60:	d007      	beq.n	8008f72 <cmd_devmem+0xb6>
 8008f62:	2d08      	cmp	r5, #8
 8008f64:	d1e5      	bne.n	8008f32 <cmd_devmem+0x76>
		sys_write8(value, addr);
 8008f66:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
 8008f68:	7034      	strb	r4, [r6, #0]
}
 8008f6a:	e7dc      	b.n	8008f26 <cmd_devmem+0x6a>
		sys_write16(value, addr);
 8008f6c:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
 8008f6e:	8034      	strh	r4, [r6, #0]
}
 8008f70:	e7d9      	b.n	8008f26 <cmd_devmem+0x6a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
 8008f72:	6034      	str	r4, [r6, #0]
}
 8008f74:	e7d7      	b.n	8008f26 <cmd_devmem+0x6a>
 8008f76:	bf00      	nop
 8008f78:	0801bffe 	.word	0x0801bffe
 8008f7c:	0801c029 	.word	0x0801c029
 8008f80:	0801c013 	.word	0x0801c013
 8008f84:	0801c03a 	.word	0x0801c03a

08008f88 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 8008f88:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
 8008f8a:	4e10      	ldr	r6, [pc, #64]	; (8008fcc <set_bypass.isra.0+0x44>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 8008f8c:	4604      	mov	r4, r0
	if (bypass && in_use) {
 8008f8e:	7833      	ldrb	r3, [r6, #0]
 8008f90:	460d      	mov	r5, r1
 8008f92:	b181      	cbz	r1, 8008fb6 <set_bypass.isra.0+0x2e>
 8008f94:	b12b      	cbz	r3, 8008fa2 <set_bypass.isra.0+0x1a>
}
 8008f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
 8008f9a:	4a0d      	ldr	r2, [pc, #52]	; (8008fd0 <set_bypass.isra.0+0x48>)
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	f00c bafd 	b.w	801559c <shell_fprintf>
	in_use = !in_use;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	7033      	strb	r3, [r6, #0]
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
 8008fa6:	4a0b      	ldr	r2, [pc, #44]	; (8008fd4 <set_bypass.isra.0+0x4c>)
 8008fa8:	2108      	movs	r1, #8
 8008faa:	4620      	mov	r0, r4
 8008fac:	f00c faf6 	bl	801559c <shell_fprintf>
		in_use = true;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	7033      	strb	r3, [r6, #0]
 8008fb4:	e004      	b.n	8008fc0 <set_bypass.isra.0+0x38>
	in_use = !in_use;
 8008fb6:	f083 0301 	eor.w	r3, r3, #1
 8008fba:	7033      	strb	r3, [r6, #0]
	if (in_use) {
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f2      	bne.n	8008fa6 <set_bypass.isra.0+0x1e>
	shell_set_bypass(sh, bypass);
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4620      	mov	r0, r4
}
 8008fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
 8008fc8:	f00c bb22 	b.w	8015610 <shell_set_bypass>
 8008fcc:	20002369 	.word	0x20002369
 8008fd0:	0801c04e 	.word	0x0801c04e
 8008fd4:	0801c089 	.word	0x0801c089

08008fd8 <bypass_cb>:
{
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
 8008fdc:	483c      	ldr	r0, [pc, #240]	; (80090d0 <bypass_cb+0xf8>)
 8008fde:	7803      	ldrb	r3, [r0, #0]
 8008fe0:	2b18      	cmp	r3, #24
 8008fe2:	d102      	bne.n	8008fea <bypass_cb+0x12>
 8008fe4:	780b      	ldrb	r3, [r1, #0]
 8008fe6:	2b11      	cmp	r3, #17
 8008fe8:	d031      	beq.n	800904e <bypass_cb+0x76>
 8008fea:	3a01      	subs	r2, #1
 8008fec:	460b      	mov	r3, r1
 8008fee:	188d      	adds	r5, r1, r2
		for (int i = 0; i < (len - 1); i++) {
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	d125      	bne.n	8009040 <bypass_cb+0x68>
	tail = recv[len - 1];
 8008ff4:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
 8008ff6:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
 8008ff8:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
 8008ffa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ffe:	2b09      	cmp	r3, #9
 8009000:	4c34      	ldr	r4, [pc, #208]	; (80090d4 <bypass_cb+0xfc>)
 8009002:	d904      	bls.n	800900e <bypass_cb+0x36>
 8009004:	f022 0320 	bic.w	r3, r2, #32
 8009008:	3b41      	subs	r3, #65	; 0x41
 800900a:	2b05      	cmp	r3, #5
 800900c:	d804      	bhi.n	8009018 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	4931      	ldr	r1, [pc, #196]	; (80090d8 <bypass_cb+0x100>)
 8009012:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
 8009014:	3301      	adds	r3, #1
 8009016:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d134      	bne.n	8009088 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 800901e:	2210      	movs	r2, #16
 8009020:	482d      	ldr	r0, [pc, #180]	; (80090d8 <bypass_cb+0x100>)
 8009022:	2100      	movs	r1, #0
 8009024:	f008 fea0 	bl	8011d68 <strtoul>
		*bytes = byte;
 8009028:	4a2c      	ldr	r2, [pc, #176]	; (80090dc <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
 8009030:	6013      	str	r3, [r2, #0]
		sum++;
 8009032:	4a2b      	ldr	r2, [pc, #172]	; (80090e0 <bypass_cb+0x108>)
 8009034:	6813      	ldr	r3, [r2, #0]
 8009036:	3301      	adds	r3, #1
 8009038:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	e023      	b.n	8009088 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
 8009040:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009044:	2e18      	cmp	r6, #24
 8009046:	d1d3      	bne.n	8008ff0 <bypass_cb+0x18>
 8009048:	781e      	ldrb	r6, [r3, #0]
 800904a:	2e11      	cmp	r6, #17
 800904c:	d1d0      	bne.n	8008ff0 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
 800904e:	4d24      	ldr	r5, [pc, #144]	; (80090e0 <bypass_cb+0x108>)
 8009050:	4a24      	ldr	r2, [pc, #144]	; (80090e4 <bypass_cb+0x10c>)
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	2108      	movs	r1, #8
 8009056:	4620      	mov	r0, r4
 8009058:	f00c faa0 	bl	801559c <shell_fprintf>
		set_bypass(sh, NULL);
 800905c:	4620      	mov	r0, r4
 800905e:	2100      	movs	r1, #0
 8009060:	f7ff ff92 	bl	8008f88 <set_bypass.isra.0>
		if (!littleendian) {
 8009064:	4b20      	ldr	r3, [pc, #128]	; (80090e8 <bypass_cb+0x110>)
 8009066:	7818      	ldrb	r0, [r3, #0]
 8009068:	b970      	cbnz	r0, 8009088 <bypass_cb+0xb0>
 800906a:	4a20      	ldr	r2, [pc, #128]	; (80090ec <bypass_cb+0x114>)
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
 8009070:	2b04      	cmp	r3, #4
 8009072:	dc0a      	bgt.n	800908a <bypass_cb+0xb2>
 8009074:	b108      	cbz	r0, 800907a <bypass_cb+0xa2>
 8009076:	6011      	str	r1, [r2, #0]
 8009078:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
 800907a:	f013 0103 	ands.w	r1, r3, #3
 800907e:	d10b      	bne.n	8009098 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	6813      	ldr	r3, [r2, #0]
 8009084:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
 8009086:	6013      	str	r3, [r2, #0]
}
 8009088:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
 800908a:	6808      	ldr	r0, [r1, #0]
 800908c:	ba00      	rev	r0, r0
 800908e:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
 8009092:	3b04      	subs	r3, #4
				data++;
 8009094:	2001      	movs	r0, #1
 8009096:	e7eb      	b.n	8009070 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
 8009098:	425b      	negs	r3, r3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	bf58      	it	pl
 80090a0:	4259      	negpl	r1, r3
 80090a2:	2902      	cmp	r1, #2
 80090a4:	d104      	bne.n	80090b0 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	8813      	ldrh	r3, [r2, #0]
 80090aa:	ba5b      	rev16	r3, r3
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	e7ea      	b.n	8009086 <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
 80090b0:	2903      	cmp	r1, #3
 80090b2:	d1e9      	bne.n	8009088 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
 80090b4:	6810      	ldr	r0, [r2, #0]
 80090b6:	6802      	ldr	r2, [r0, #0]
 80090b8:	0411      	lsls	r1, r2, #16
 80090ba:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80090be:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80090c2:	430b      	orrs	r3, r1
 80090c4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80090c8:	4313      	orrs	r3, r2
 80090ca:	6003      	str	r3, [r0, #0]
 80090cc:	e7dc      	b.n	8009088 <bypass_cb+0xb0>
 80090ce:	bf00      	nop
 80090d0:	2000236a 	.word	0x2000236a
 80090d4:	20001a38 	.word	0x20001a38
 80090d8:	2000236c 	.word	0x2000236c
 80090dc:	20001a44 	.word	0x20001a44
 80090e0:	20001a3c 	.word	0x20001a3c
 80090e4:	0801c0b3 	.word	0x0801c0b3
 80090e8:	2000236b 	.word	0x2000236b
 80090ec:	20001a40 	.word	0x20001a40

080090f0 <cmd_load>:
{
 80090f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	460d      	mov	r5, r1
	chunk_element = 0;
 80090f6:	492b      	ldr	r1, [pc, #172]	; (80091a4 <cmd_load+0xb4>)
	littleendian = false;
 80090f8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80091bc <cmd_load+0xcc>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 80090fc:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80091c0 <cmd_load+0xd0>
			shell_print(sh, "Unknown option \"%s\"", arg);
 8009100:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 80091c4 <cmd_load+0xd4>
	littleendian = false;
 8009104:	2300      	movs	r3, #0
	chunk_element = 0;
 8009106:	600b      	str	r3, [r1, #0]
	sum = 0;
 8009108:	4927      	ldr	r1, [pc, #156]	; (80091a8 <cmd_load+0xb8>)
	littleendian = false;
 800910a:	f888 3000 	strb.w	r3, [r8]
{
 800910e:	4606      	mov	r6, r0
	sum = 0;
 8009110:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
 8009112:	4614      	mov	r4, r2
 8009114:	2d01      	cmp	r5, #1
 8009116:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 8009118:	f854 af04 	ldr.w	sl, [r4, #4]!
	while (argc >= 2) {
 800911c:	d91e      	bls.n	800915c <cmd_load+0x6c>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 800911e:	2202      	movs	r2, #2
 8009120:	4649      	mov	r1, r9
 8009122:	4650      	mov	r0, sl
 8009124:	f008 fa4e 	bl	80115c4 <strncmp>
 8009128:	b980      	cbnz	r0, 800914c <cmd_load+0x5c>
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	7892      	ldrb	r2, [r2, #2]
 800912e:	3a00      	subs	r2, #0
 8009130:	bf18      	it	ne
 8009132:	2201      	movne	r2, #1
 8009134:	4492      	add	sl, r2
		if (!strncmp(arg, "-e", 2)) {
 8009136:	491d      	ldr	r1, [pc, #116]	; (80091ac <cmd_load+0xbc>)
 8009138:	2202      	movs	r2, #2
 800913a:	4650      	mov	r0, sl
 800913c:	f008 fa42 	bl	80115c4 <strncmp>
 8009140:	b930      	cbnz	r0, 8009150 <cmd_load+0x60>
			littleendian = true;
 8009142:	2301      	movs	r3, #1
 8009144:	f888 3000 	strb.w	r3, [r8]
		argc--;
 8009148:	3d01      	subs	r5, #1
 800914a:	e7e3      	b.n	8009114 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 800914c:	2200      	movs	r2, #0
 800914e:	e7f1      	b.n	8009134 <cmd_load+0x44>
		} else if (!strcmp(arg, "--")) {
 8009150:	4649      	mov	r1, r9
 8009152:	4650      	mov	r0, sl
 8009154:	f7f7 f8a8 	bl	80002a8 <strcmp>
 8009158:	b9a8      	cbnz	r0, 8009186 <cmd_load+0x96>
			argv++;
 800915a:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 800915c:	2200      	movs	r2, #0
 800915e:	4611      	mov	r1, r2
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f008 fd59 	bl	8011c18 <strtol>
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <cmd_load+0xc0>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8009168:	2200      	movs	r2, #0
 800916a:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 800916c:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f008 fd52 	bl	8011c18 <strtol>
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <cmd_load+0xc4>)
	set_bypass(sh, bypass_cb);
 8009176:	4910      	ldr	r1, [pc, #64]	; (80091b8 <cmd_load+0xc8>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8009178:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff ff04 	bl	8008f88 <set_bypass.isra.0>
}
 8009180:	2000      	movs	r0, #0
 8009182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
 8009186:	f89a 2000 	ldrb.w	r2, [sl]
 800918a:	2a2d      	cmp	r2, #45	; 0x2d
 800918c:	d1e6      	bne.n	800915c <cmd_load+0x6c>
 800918e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8009192:	2a00      	cmp	r2, #0
 8009194:	d0e2      	beq.n	800915c <cmd_load+0x6c>
			shell_print(sh, "Unknown option \"%s\"", arg);
 8009196:	4653      	mov	r3, sl
 8009198:	465a      	mov	r2, fp
 800919a:	2108      	movs	r1, #8
 800919c:	4630      	mov	r0, r6
 800919e:	f00c f9fd 	bl	801559c <shell_fprintf>
 80091a2:	e7d1      	b.n	8009148 <cmd_load+0x58>
 80091a4:	20001a38 	.word	0x20001a38
 80091a8:	20001a3c 	.word	0x20001a3c
 80091ac:	0801c0d0 	.word	0x0801c0d0
 80091b0:	20001a44 	.word	0x20001a44
 80091b4:	20001a40 	.word	0x20001a40
 80091b8:	08008fd9 	.word	0x08008fd9
 80091bc:	2000236b 	.word	0x2000236b
 80091c0:	0801c0cd 	.word	0x0801c0cd
 80091c4:	0801c0d3 	.word	0x0801c0d3

080091c8 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
 80091c8:	b507      	push	{r0, r1, r2, lr}
 80091ca:	480a      	ldr	r0, [pc, #40]	; (80091f4 <enable_shell_uart+0x2c>)
 80091cc:	f010 fa22 	bl	8019614 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
 80091d0:	b160      	cbz	r0, 80091ec <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
 80091d2:	4a09      	ldr	r2, [pc, #36]	; (80091f8 <enable_shell_uart+0x30>)
 80091d4:	4907      	ldr	r1, [pc, #28]	; (80091f4 <enable_shell_uart+0x2c>)
 80091d6:	6812      	ldr	r2, [r2, #0]
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <enable_shell_uart+0x34>)
 80091da:	2304      	movs	r3, #4
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	2301      	movs	r3, #1
 80091e0:	f000 fe1a 	bl	8009e18 <shell_init>

	return 0;
 80091e4:	2000      	movs	r0, #0
}
 80091e6:	b003      	add	sp, #12
 80091e8:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
 80091ec:	f06f 0012 	mvn.w	r0, #18
 80091f0:	e7f9      	b.n	80091e6 <enable_shell_uart+0x1e>
 80091f2:	bf00      	nop
 80091f4:	08019f28 	.word	0x08019f28
 80091f8:	0801a9b8 	.word	0x0801a9b8
 80091fc:	0801a45c 	.word	0x0801a45c

08009200 <init>:
{
 8009200:	b510      	push	{r4, lr}
 8009202:	4614      	mov	r4, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8009204:	6842      	ldr	r2, [r0, #4]
	sh_uart->ctrl_blk->dev = (const struct device *)config;
 8009206:	6810      	ldr	r0, [r2, #0]
 8009208:	6001      	str	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
 800920a:	6811      	ldr	r1, [r2, #0]
 800920c:	604c      	str	r4, [r1, #4]
	sh_uart->ctrl_blk->context = context;
 800920e:	6811      	ldr	r1, [r2, #0]
 8009210:	608b      	str	r3, [r1, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
 8009212:	6813      	ldr	r3, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
 8009214:	6891      	ldr	r1, [r2, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
 8009216:	681c      	ldr	r4, [r3, #0]
 *
 * Any value other than 0 makes sense only in validation testing context.
 */
static inline void ring_buf_internal_reset(struct ring_buf *buf, int32_t value)
{
	buf->put_head = buf->put_tail = buf->put_base = value;
 8009218:	2300      	movs	r3, #0
 800921a:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
 800921e:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
 8009222:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
 8009224:	610b      	str	r3, [r1, #16]
	ring_buf_reset(sh_uart->rx_ringbuf);
 8009226:	68d1      	ldr	r1, [r2, #12]
	buf->put_head = buf->put_tail = buf->put_base = value;
 8009228:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
 800922c:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
 8009230:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
 8009232:	610b      	str	r3, [r1, #16]
	sh_uart->ctrl_blk->tx_busy = 0;
 8009234:	6811      	ldr	r1, [r2, #0]
 8009236:	60cb      	str	r3, [r1, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8009238:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 800923a:	b123      	cbz	r3, 8009246 <init+0x46>
 800923c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923e:	b113      	cbz	r3, 8009246 <init+0x46>
		api->irq_callback_set(dev, cb, user_data);
 8009240:	4904      	ldr	r1, [pc, #16]	; (8009254 <init+0x54>)
 8009242:	4620      	mov	r0, r4
 8009244:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
 8009246:	68a3      	ldr	r3, [r4, #8]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	b10b      	cbz	r3, 8009250 <init+0x50>
		api->irq_rx_enable(dev);
 800924c:	4620      	mov	r0, r4
 800924e:	4798      	blx	r3
}
 8009250:	2000      	movs	r0, #0
 8009252:	bd10      	pop	{r4, pc}
 8009254:	08009259 	.word	0x08009259

08009258 <uart_callback>:
{
 8009258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800925c:	4604      	mov	r4, r0
 800925e:	b088      	sub	sp, #32
 8009260:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
 8009262:	6883      	ldr	r3, [r0, #8]
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	b103      	cbz	r3, 800926a <uart_callback+0x12>
	return api->irq_update(dev);
 8009268:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
 800926a:	68a3      	ldr	r3, [r4, #8]
 800926c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926e:	bb03      	cbnz	r3, 80092b2 <uart_callback+0x5a>
 8009270:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 8009274:	68e8      	ldr	r0, [r5, #12]
 8009276:	a901      	add	r1, sp, #4
 8009278:	69c2      	ldr	r2, [r0, #28]
 800927a:	f00b fb42 	bl	8014902 <ring_buf_put_claim>
		if (len > 0) {
 800927e:	4607      	mov	r7, r0
 8009280:	2800      	cmp	r0, #0
 8009282:	d037      	beq.n	80092f4 <uart_callback+0x9c>
	if (api->fifo_read == NULL) {
 8009284:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
 8009286:	9901      	ldr	r1, [sp, #4]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	b343      	cbz	r3, 80092de <uart_callback+0x86>
	return api->fifo_read(dev, rx_data, size);
 800928c:	4602      	mov	r2, r0
 800928e:	4620      	mov	r0, r4
 8009290:	4798      	blx	r3
			if (rd_len > 0) {
 8009292:	4606      	mov	r6, r0
 8009294:	b330      	cbz	r0, 80092e4 <uart_callback+0x8c>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8009296:	68e8      	ldr	r0, [r5, #12]
 8009298:	4631      	mov	r1, r6
 800929a:	f00b fb51 	bl	8014940 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
 800929e:	42b7      	cmp	r7, r6
				new_data = true;
 80092a0:	f04f 0801 	mov.w	r8, #1
	} while (rd_len && (rd_len == len));
 80092a4:	d0e6      	beq.n	8009274 <uart_callback+0x1c>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	2000      	movs	r0, #0
 80092aa:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 80092ae:	4790      	blx	r2
}
 80092b0:	e003      	b.n	80092ba <uart_callback+0x62>
	return api->irq_rx_ready(dev);
 80092b2:	4620      	mov	r0, r4
 80092b4:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d1da      	bne.n	8009270 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d130      	bne.n	8009324 <uart_callback+0xcc>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
 80092c2:	68a8      	ldr	r0, [r5, #8]
 80092c4:	a902      	add	r1, sp, #8
 80092c6:	69c2      	ldr	r2, [r0, #28]
 80092c8:	f00b fb6e 	bl	80149a8 <ring_buf_get_claim>
	if (len) {
 80092cc:	4606      	mov	r6, r0
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d12f      	bne.n	8009332 <uart_callback+0xda>
		uart_irq_tx_disable(dev);
 80092d2:	4620      	mov	r0, r4
 80092d4:	f00c f80e 	bl	80152f4 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	60de      	str	r6, [r3, #12]
 80092dc:	e034      	b.n	8009348 <uart_callback+0xf0>
			rd_len = uart_fifo_read(dev, data, len);
 80092de:	f06f 0657 	mvn.w	r6, #87	; 0x57
 80092e2:	e7d8      	b.n	8009296 <uart_callback+0x3e>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 80092e4:	4601      	mov	r1, r0
 80092e6:	68e8      	ldr	r0, [r5, #12]
 80092e8:	f00b fb2a 	bl	8014940 <ring_buf_put_finish>
	if (new_data) {
 80092ec:	f1b8 0f00 	cmp.w	r8, #0
 80092f0:	d0e3      	beq.n	80092ba <uart_callback+0x62>
 80092f2:	e7d8      	b.n	80092a6 <uart_callback+0x4e>
			LOG_WRN("RX ring buffer full.");
 80092f4:	4819      	ldr	r0, [pc, #100]	; (800935c <uart_callback+0x104>)
 80092f6:	6803      	ldr	r3, [r0, #0]
 80092f8:	f013 0f06 	tst.w	r3, #6
 80092fc:	d009      	beq.n	8009312 <uart_callback+0xba>
 80092fe:	4b18      	ldr	r3, [pc, #96]	; (8009360 <uart_callback+0x108>)
 8009300:	9307      	str	r3, [sp, #28]
 8009302:	2302      	movs	r3, #2
 8009304:	9306      	str	r3, [sp, #24]
 8009306:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800930a:	463b      	mov	r3, r7
 800930c:	aa06      	add	r2, sp, #24
 800930e:	f7fe ff1f 	bl	8008150 <z_impl_z_log_msg_static_create>
	if (api->fifo_read == NULL) {
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0e8      	beq.n	80092ec <uart_callback+0x94>
	return api->fifo_read(dev, rx_data, size);
 800931a:	2201      	movs	r2, #1
 800931c:	a902      	add	r1, sp, #8
 800931e:	4620      	mov	r0, r4
 8009320:	4798      	blx	r3
 8009322:	e7e3      	b.n	80092ec <uart_callback+0x94>
	return api->irq_tx_ready(dev);
 8009324:	4620      	mov	r0, r4
 8009326:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 8009328:	2800      	cmp	r0, #0
 800932a:	d1ca      	bne.n	80092c2 <uart_callback+0x6a>
}
 800932c:	b008      	add	sp, #32
 800932e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->fifo_fill == NULL) {
 8009332:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
 8009334:	9902      	ldr	r1, [sp, #8]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	b163      	cbz	r3, 8009354 <uart_callback+0xfc>
	return api->fifo_fill(dev, tx_data, size);
 800933a:	4602      	mov	r2, r0
 800933c:	4620      	mov	r0, r4
 800933e:	4798      	blx	r3
 8009340:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 8009342:	68a8      	ldr	r0, [r5, #8]
 8009344:	f00b fb50 	bl	80149e8 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	2001      	movs	r0, #1
 800934c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8009350:	4790      	blx	r2
}
 8009352:	e7eb      	b.n	800932c <uart_callback+0xd4>
		return -ENOSYS;
 8009354:	f06f 0157 	mvn.w	r1, #87	; 0x57
 8009358:	e7f3      	b.n	8009342 <uart_callback+0xea>
 800935a:	bf00      	nop
 800935c:	20000d68 	.word	0x20000d68
 8009360:	0801c1f7 	.word	0x0801c1f7

08009364 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
 8009364:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 8009366:	6881      	ldr	r1, [r0, #8]
{
 8009368:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 800936a:	3108      	adds	r1, #8
 800936c:	f001 fb22 	bl	800a9b4 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 8009370:	68a1      	ldr	r1, [r4, #8]
 8009372:	4a03      	ldr	r2, [pc, #12]	; (8009380 <shell_internal_help_print+0x1c>)
 8009374:	4620      	mov	r0, r4
 8009376:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
 8009378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 800937c:	f001 baaa 	b.w	800a8d4 <z_shell_help_subcmd_print>
 8009380:	0801c23a 	.word	0x0801c23a

08009384 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 8009384:	4901      	ldr	r1, [pc, #4]	; (800938c <z_cursor_next_line_move.isra.0+0x8>)
 8009386:	f00c b84d 	b.w	8015424 <z_shell_raw_fprintf>
 800938a:	bf00      	nop
 800938c:	0801bd34 	.word	0x0801bd34

08009390 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
 8009390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009392:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
 8009394:	6880      	ldr	r0, [r0, #8]
 8009396:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
 800939a:	075a      	lsls	r2, r3, #29
{
 800939c:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
 800939e:	d505      	bpl.n	80093ac <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
 80093a0:	2100      	movs	r1, #0
 80093a2:	f00c f880 	bl	80154a6 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
 80093a6:	68e0      	ldr	r0, [r4, #12]
 80093a8:	f00c fe0e 	bl	8015fc8 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
 80093ac:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	b973      	cbnz	r3, 80093d0 <history_handle+0x40>
		if (up) {
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	d039      	beq.n	800942a <history_handle+0x9a>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
 80093b6:	68a0      	ldr	r0, [r4, #8]
 80093b8:	3042      	adds	r0, #66	; 0x42
 80093ba:	f00c f82d 	bl	8015418 <z_shell_strlen>

			if (cmd_len) {
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d034      	beq.n	800942e <history_handle+0x9e>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 80093c4:	f103 0142 	add.w	r1, r3, #66	; 0x42
 80093c8:	f503 70a1 	add.w	r0, r3, #322	; 0x142
 80093cc:	f008 f89c 	bl	8011508 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
 80093d0:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
 80093d2:	68e0      	ldr	r0, [r4, #12]
 80093d4:	f10d 0306 	add.w	r3, sp, #6
 80093d8:	3242      	adds	r2, #66	; 0x42
 80093da:	4629      	mov	r1, r5
 80093dc:	f00c fdf7 	bl	8015fce <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 80093e0:	b958      	cbnz	r0, 80093fa <history_handle+0x6a>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
 80093e2:	68a0      	ldr	r0, [r4, #8]
 80093e4:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 80093e8:	3042      	adds	r0, #66	; 0x42
 80093ea:	f008 f88d 	bl	8011508 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
 80093ee:	68a0      	ldr	r0, [r4, #8]
 80093f0:	3042      	adds	r0, #66	; 0x42
 80093f2:	f00c f811 	bl	8015418 <z_shell_strlen>
 80093f6:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
 80093fa:	4620      	mov	r0, r4
 80093fc:	f00c fadd 	bl	80159ba <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8009400:	68a3      	ldr	r3, [r4, #8]
 8009402:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 8009406:	069b      	lsls	r3, r3, #26
 8009408:	d503      	bpl.n	8009412 <history_handle+0x82>
 800940a:	490a      	ldr	r1, [pc, #40]	; (8009434 <history_handle+0xa4>)
 800940c:	6960      	ldr	r0, [r4, #20]
 800940e:	f00c f809 	bl	8015424 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
 8009412:	4620      	mov	r0, r4
 8009414:	f001 f8b8 	bl	800a588 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
 8009418:	68a2      	ldr	r2, [r4, #8]
 800941a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800941e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
 8009420:	68a2      	ldr	r2, [r4, #8]
	z_shell_op_cond_next_line(shell);
 8009422:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_len = len;
 8009424:	8793      	strh	r3, [r2, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
 8009426:	f00c fa71 	bl	801590c <z_shell_op_cond_next_line>
}
 800942a:	b003      	add	sp, #12
 800942c:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
 800942e:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
 8009432:	e7cd      	b.n	80093d0 <history_handle+0x40>
 8009434:	0801a4f0 	.word	0x0801a4f0

08009438 <state_set.constprop.0>:
static inline void state_set(const struct shell *shell, enum shell_state state)
 8009438:	b510      	push	{r4, lr}
	shell->ctx->state = state;
 800943a:	6883      	ldr	r3, [r0, #8]
 800943c:	2202      	movs	r2, #2
 800943e:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
 8009440:	6882      	ldr	r2, [r0, #8]
 8009442:	6b93      	ldr	r3, [r2, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
 8009444:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
 8009446:	b9db      	cbnz	r3, 8009480 <state_set.constprop.0+0x48>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8009448:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_pos = 0;
 800944c:	6882      	ldr	r2, [r0, #8]
 800944e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
 8009450:	6882      	ldr	r2, [r0, #8]
 8009452:	8793      	strh	r3, [r2, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
 8009454:	6883      	ldr	r3, [r0, #8]
 8009456:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
 800945a:	04db      	lsls	r3, r3, #19
 800945c:	d50b      	bpl.n	8009476 <state_set.constprop.0+0x3e>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
 800945e:	2103      	movs	r1, #3
 8009460:	4b08      	ldr	r3, [pc, #32]	; (8009484 <state_set.constprop.0+0x4c>)
 8009462:	4a09      	ldr	r2, [pc, #36]	; (8009488 <state_set.constprop.0+0x50>)
 8009464:	f00c fb57 	bl	8015b16 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
 8009468:	68a0      	ldr	r0, [r4, #8]
 800946a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
 800946e:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8009472:	f00b ffac 	bl	80153ce <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
 8009476:	4620      	mov	r0, r4
}
 8009478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
 800947c:	f001 b99a 	b.w	800a7b4 <z_shell_print_prompt_and_cmd>
}
 8009480:	bd10      	pop	{r4, pc}
 8009482:	bf00      	nop
 8009484:	0801c248 	.word	0x0801c248
 8009488:	0801bf55 	.word	0x0801bf55

0800948c <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
 800948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	b0a7      	sub	sp, #156	; 0x9c
 8009492:	4604      	mov	r4, r0
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1] = {0}; /* +1 reserved for NULL */
 8009494:	2254      	movs	r2, #84	; 0x54
 8009496:	2100      	movs	r1, #0
 8009498:	a811      	add	r0, sp, #68	; 0x44
 800949a:	f007 fefd 	bl	8011298 <memset>
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
 800949e:	2300      	movs	r3, #0
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
 80094a0:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
 80094a4:	68a3      	ldr	r3, [r4, #8]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
 80094a6:	4620      	mov	r0, r4
	char *cmd_buf = shell->ctx->cmd_buff;
 80094a8:	3342      	adds	r3, #66	; 0x42
 80094aa:	9302      	str	r3, [sp, #8]
	z_shell_op_cursor_end_move(shell);
 80094ac:	f00c fa8b 	bl	80159c6 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
 80094b0:	4620      	mov	r0, r4
 80094b2:	f00c fa12 	bl	80158da <z_shell_cursor_in_empty_line>
 80094b6:	b910      	cbnz	r0, 80094be <execute+0x32>
		z_cursor_next_line_move(shell);
 80094b8:	6960      	ldr	r0, [r4, #20]
 80094ba:	f7ff ff63 	bl	8009384 <z_cursor_next_line_move.isra.0>
__ssp_bos_icheck3(memset, void *, int)
 80094be:	68a0      	ldr	r0, [r4, #8]
 80094c0:	2214      	movs	r2, #20
 80094c2:	2100      	movs	r1, #0
 80094c4:	3008      	adds	r0, #8
 80094c6:	f007 fee7 	bl	8011298 <memset>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 ffaa 	bl	800a424 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
 80094d0:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
 80094d2:	68e0      	ldr	r0, [r4, #12]
 80094d4:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
 80094d6:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
 80094d8:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
 80094da:	f00c fdaf 	bl	801603c <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
 80094de:	4620      	mov	r0, r4
 80094e0:	f00c fe2e 	bl	8016140 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
 80094e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
 80094e8:	46b2      	mov	sl, r6
		z_shell_wildcard_prepare(shell);
 80094ea:	9603      	str	r6, [sp, #12]
 80094ec:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80094f0:	46b3      	mov	fp, r6
 80094f2:	4635      	mov	r5, r6
 80094f4:	46b1      	mov	r9, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
		&& args_left > 0) {
 80094f6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80094fa:	2a01      	cmp	r2, #1
 80094fc:	d06d      	beq.n	80095da <execute+0x14e>
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
 80094fe:	2b13      	cmp	r3, #19
 8009500:	d86e      	bhi.n	80095e0 <execute+0x154>
		&& args_left > 0) {
 8009502:	bb5f      	cbnz	r7, 800955c <execute+0xd0>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
				SHELL_MSG_TOO_MANY_ARGS);
		return -ENOEXEC;
	}

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 8009504:	f1bb 0f00 	cmp.w	fp, #0
 8009508:	d00a      	beq.n	8009520 <execute+0x94>
		z_shell_wildcard_finalize(shell);
 800950a:	4620      	mov	r0, r4
 800950c:	f00c fe39 	bl	8016182 <z_shell_wildcard_finalize>
		 * with all expanded commands. Hence shell_make_argv needs to
		 * be called again.
		 */
		(void)z_shell_make_argv(&cmd_lvl,
					&argv[selected_cmd_get(shell) ? 1 : 0],
					shell->ctx->cmd_buff,
 8009510:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
 8009512:	2314      	movs	r3, #20
 8009514:	3242      	adds	r2, #66	; 0x42
 8009516:	a911      	add	r1, sp, #68	; 0x44
 8009518:	eb0d 0003 	add.w	r0, sp, r3
 800951c:	f000 fe36 	bl	800a18c <z_shell_make_argv>
			cmd_lvl++;
		}
	}

	/* If a command was found */
	if (parent != NULL) {
 8009520:	f1b9 0f00 	cmp.w	r9, #0
 8009524:	d00c      	beq.n	8009540 <execute+0xb4>
		/* If the found command uses a raw optional argument and
		 * we have a remaining unprocessed non-null string,
		 * then increment command level so handler receives raw string
		 */
		if (parent->args.optional == SHELL_OPT_ARG_RAW && argv[cmd_lvl] != NULL) {
 8009526:	f899 3011 	ldrb.w	r3, [r9, #17]
 800952a:	2bfe      	cmp	r3, #254	; 0xfe
 800952c:	d108      	bne.n	8009540 <execute+0xb4>
 800952e:	9b05      	ldr	r3, [sp, #20]
 8009530:	aa26      	add	r2, sp, #152	; 0x98
 8009532:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009536:	f852 2c54 	ldr.w	r2, [r2, #-84]
 800953a:	b10a      	cbz	r2, 8009540 <execute+0xb4>
			cmd_lvl++;
 800953c:	3301      	adds	r3, #1
 800953e:	9305      	str	r3, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
 8009540:	68a0      	ldr	r0, [r4, #8]
		}
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
 8009542:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
 8009544:	6943      	ldr	r3, [r0, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	f040 80b6 	bne.w	80096b8 <execute+0x22c>
			if (help_entry->help == NULL) {
 800954c:	b1ce      	cbz	r6, 8009582 <execute+0xf6>
			if (help_entry->help != shell->ctx->active_cmd.help) {
 800954e:	68c3      	ldr	r3, [r0, #12]
 8009550:	429e      	cmp	r6, r3
 8009552:	d02d      	beq.n	80095b0 <execute+0x124>
				shell->ctx->active_cmd = *help_entry;
 8009554:	960d      	str	r6, [sp, #52]	; 0x34
 8009556:	f100 0508 	add.w	r5, r0, #8
 800955a:	e024      	b.n	80095a6 <execute+0x11a>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 800955c:	9a02      	ldr	r2, [sp, #8]
 800955e:	2302      	movs	r3, #2
 8009560:	4641      	mov	r1, r8
 8009562:	a806      	add	r0, sp, #24
 8009564:	f000 fe12 	bl	800a18c <z_shell_make_argv>
		if (argc == 0) {
 8009568:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
 800956a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800956e:	9202      	str	r2, [sp, #8]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 8009570:	4603      	mov	r3, r0
		if (argc == 0) {
 8009572:	b131      	cbz	r1, 8009582 <execute+0xf6>
		} else if ((argc == 1) && (quote != 0)) {
 8009574:	2901      	cmp	r1, #1
 8009576:	d10a      	bne.n	800958e <execute+0x102>
 8009578:	b148      	cbz	r0, 800958e <execute+0x102>
			z_shell_fprintf(shell, SHELL_ERROR,
 800957a:	4a6f      	ldr	r2, [pc, #444]	; (8009738 <execute+0x2ac>)
 800957c:	4620      	mov	r0, r4
 800957e:	f00c faca 	bl	8015b16 <z_shell_fprintf>
			return -ENOEXEC;
 8009582:	f06f 0507 	mvn.w	r5, #7
			&argv[cmd_with_handler_lvl], &help_entry);
}
 8009586:	4628      	mov	r0, r5
 8009588:	b027      	add	sp, #156	; 0x9c
 800958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 800958e:	9b05      	ldr	r3, [sp, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d034      	beq.n	80095fe <execute+0x172>
		    z_shell_help_request(argvp[0])) {
 8009594:	f8d8 0000 	ldr.w	r0, [r8]
 8009598:	f001 fa30 	bl	800a9fc <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 800959c:	b198      	cbz	r0, 80095c6 <execute+0x13a>
			if (help_entry.help) {
 800959e:	b166      	cbz	r6, 80095ba <execute+0x12e>
				shell->ctx->active_cmd = help_entry;
 80095a0:	68a5      	ldr	r5, [r4, #8]
 80095a2:	960d      	str	r6, [sp, #52]	; 0x34
 80095a4:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
 80095a6:	ae0c      	add	r6, sp, #48	; 0x30
 80095a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80095aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095ac:	6833      	ldr	r3, [r6, #0]
 80095ae:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
 80095b0:	4620      	mov	r0, r4
 80095b2:	f7ff fed7 	bl	8009364 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 80095b6:	2501      	movs	r5, #1
 80095b8:	e7e5      	b.n	8009586 <execute+0xfa>
			z_shell_fprintf(shell, SHELL_ERROR,
 80095ba:	4a60      	ldr	r2, [pc, #384]	; (800973c <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
 80095bc:	2101      	movs	r1, #1
 80095be:	4620      	mov	r0, r4
 80095c0:	f00c faa9 	bl	8015b16 <z_shell_fprintf>
		return false;
 80095c4:	e7dd      	b.n	8009582 <execute+0xf6>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
 80095c6:	9b05      	ldr	r3, [sp, #20]
 80095c8:	b1cb      	cbz	r3, 80095fe <execute+0x172>
			status = z_shell_wildcard_process(shell, entry,
 80095ca:	f8d8 2000 	ldr.w	r2, [r8]
 80095ce:	4629      	mov	r1, r5
 80095d0:	4620      	mov	r0, r4
 80095d2:	f001 fbad 	bl	800ad30 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 80095d6:	2802      	cmp	r0, #2
 80095d8:	d109      	bne.n	80095ee <execute+0x162>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 80095da:	9b05      	ldr	r3, [sp, #20]
 80095dc:	2b13      	cmp	r3, #19
 80095de:	d991      	bls.n	8009504 <execute+0x78>
 80095e0:	9b06      	ldr	r3, [sp, #24]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d18e      	bne.n	8009504 <execute+0x78>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
 80095e6:	4b56      	ldr	r3, [pc, #344]	; (8009740 <execute+0x2b4>)
 80095e8:	4a56      	ldr	r2, [pc, #344]	; (8009744 <execute+0x2b8>)
 80095ea:	2101      	movs	r1, #1
 80095ec:	e7c6      	b.n	800957c <execute+0xf0>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 80095ee:	2803      	cmp	r0, #3
 80095f0:	d005      	beq.n	80095fe <execute+0x172>
				++cmd_lvl;
 80095f2:	9b05      	ldr	r3, [sp, #20]
 80095f4:	3301      	adds	r3, #1
 80095f6:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
 80095f8:	f04f 0b01 	mov.w	fp, #1
				continue;
 80095fc:	e77b      	b.n	80094f6 <execute+0x6a>
		if (has_last_handler == false) {
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	b933      	cbnz	r3, 8009610 <execute+0x184>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
 8009602:	f8d8 1000 	ldr.w	r1, [r8]
 8009606:	aa07      	add	r2, sp, #28
 8009608:	4648      	mov	r0, r9
 800960a:	f00c f88b 	bl	8015724 <z_shell_find_cmd>
 800960e:	4605      	mov	r5, r0
		argvp++;
 8009610:	f108 0804 	add.w	r8, r8, #4
		args_left--;
 8009614:	3f01      	subs	r7, #1
		if (entry) {
 8009616:	b39d      	cbz	r5, 8009680 <execute+0x1f4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
 8009618:	68eb      	ldr	r3, [r5, #12]
 800961a:	f1bb 0f00 	cmp.w	fp, #0
 800961e:	d008      	beq.n	8009632 <execute+0x1a6>
 8009620:	b1f3      	cbz	r3, 8009660 <execute+0x1d4>
		z_shell_op_cursor_end_move(shell);
 8009622:	4620      	mov	r0, r4
 8009624:	f00c f9cf 	bl	80159c6 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
 8009628:	4620      	mov	r0, r4
 800962a:	f00c f96f 	bl	801590c <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
 800962e:	4a46      	ldr	r2, [pc, #280]	; (8009748 <execute+0x2bc>)
 8009630:	e7c4      	b.n	80095bc <execute+0x130>
	if (entry->handler) {
 8009632:	b1ab      	cbz	r3, 8009660 <execute+0x1d4>
			active_cmd_prepare(entry, &shell->ctx->active_cmd,
 8009634:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
 8009636:	f8dd a014 	ldr.w	sl, [sp, #20]
		*active_cmd = *entry;
 800963a:	46ae      	mov	lr, r5
 800963c:	f103 0c08 	add.w	ip, r3, #8
 8009640:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009644:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009648:	f8de 3000 	ldr.w	r3, [lr]
 800964c:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
 8009650:	68ab      	ldr	r3, [r5, #8]
 8009652:	b92b      	cbnz	r3, 8009660 <execute+0x1d4>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
 8009654:	7c6b      	ldrb	r3, [r5, #17]
 8009656:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
 8009658:	bf04      	itt	eq
 800965a:	7c2f      	ldrbeq	r7, [r5, #16]
 800965c:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
	if (entry->help) {
 8009660:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8009664:	f1bc 0f00 	cmp.w	ip, #0
 8009668:	d008      	beq.n	800967c <execute+0x1f0>
		*help_entry = *entry;
 800966a:	46ae      	mov	lr, r5
 800966c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009670:	ae0c      	add	r6, sp, #48	; 0x30
 8009672:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009674:	f8de 3000 	ldr.w	r3, [lr]
 8009678:	6033      	str	r3, [r6, #0]
 800967a:	4666      	mov	r6, ip
 800967c:	46a9      	mov	r9, r5
 800967e:	e003      	b.n	8009688 <execute+0x1fc>
			if (cmd_lvl == 0 &&
 8009680:	9b05      	ldr	r3, [sp, #20]
 8009682:	b153      	cbz	r3, 800969a <execute+0x20e>
			has_last_handler = true;
 8009684:	2301      	movs	r3, #1
 8009686:	9303      	str	r3, [sp, #12]
		if (args_left || (argc == 2)) {
 8009688:	9b06      	ldr	r3, [sp, #24]
 800968a:	b917      	cbnz	r7, 8009692 <execute+0x206>
 800968c:	2b02      	cmp	r3, #2
 800968e:	f47f af32 	bne.w	80094f6 <execute+0x6a>
			cmd_lvl++;
 8009692:	9b05      	ldr	r3, [sp, #20]
 8009694:	3301      	adds	r3, #1
 8009696:	9305      	str	r3, [sp, #20]
 8009698:	e72d      	b.n	80094f6 <execute+0x6a>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	69db      	ldr	r3, [r3, #28]
			if (cmd_lvl == 0 &&
 800969e:	b113      	cbz	r3, 80096a6 <execute+0x21a>
				(!z_shell_in_select_mode(shell) ||
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1ee      	bne.n	8009684 <execute+0x1f8>
				z_shell_fprintf(shell, SHELL_ERROR,
 80096a6:	4b29      	ldr	r3, [pc, #164]	; (800974c <execute+0x2c0>)
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	4a29      	ldr	r2, [pc, #164]	; (8009750 <execute+0x2c4>)
 80096ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096ae:	2101      	movs	r1, #1
 80096b0:	4620      	mov	r0, r4
 80096b2:	f00c fa30 	bl	8015b16 <z_shell_fprintf>
 80096b6:	e7e5      	b.n	8009684 <execute+0x1f8>
	if (shell->ctx->active_cmd.args.mandatory) {
 80096b8:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
 80096ba:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
 80096be:	b1b3      	cbz	r3, 80096ee <execute+0x262>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
 80096c0:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
 80096c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096c6:	29ff      	cmp	r1, #255	; 0xff
 80096c8:	bf18      	it	ne
 80096ca:	460a      	movne	r2, r1
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
 80096cc:	429d      	cmp	r5, r3
 80096ce:	d302      	bcc.n	80096d6 <execute+0x24a>
 80096d0:	4413      	add	r3, r2
 80096d2:	429d      	cmp	r5, r3
 80096d4:	d90b      	bls.n	80096ee <execute+0x262>
		z_shell_fprintf(shell, SHELL_ERROR,
 80096d6:	6883      	ldr	r3, [r0, #8]
 80096d8:	4a1e      	ldr	r2, [pc, #120]	; (8009754 <execute+0x2c8>)
 80096da:	2101      	movs	r1, #1
 80096dc:	4620      	mov	r0, r4
 80096de:	f00c fa1a 	bl	8015b16 <z_shell_fprintf>
			shell_internal_help_print(shell);
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7ff fe3e 	bl	8009364 <shell_internal_help_print>
		return -EINVAL;
 80096e8:	f06f 0515 	mvn.w	r5, #21
 80096ec:	e74b      	b.n	8009586 <execute+0xfa>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
 80096ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096f2:	f500 7019 	add.w	r0, r0, #612	; 0x264
 80096f6:	f00b fe5b 	bl	80153b0 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 80096fa:	68a0      	ldr	r0, [r4, #8]
 80096fc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8009700:	f00b feea 	bl	80154d8 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
 8009704:	68a3      	ldr	r3, [r4, #8]
 8009706:	aa11      	add	r2, sp, #68	; 0x44
 8009708:	4629      	mov	r1, r5
 800970a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	4620      	mov	r0, r4
 8009712:	4798      	blx	r3
 8009714:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8009716:	68a0      	ldr	r0, [r4, #8]
 8009718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800971c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009720:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8009724:	f00b fe8b 	bl	801543e <k_mutex_lock.constprop.0.isra.0>
 8009728:	68a0      	ldr	r0, [r4, #8]
 800972a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
 800972e:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8009732:	f00b fe4c 	bl	80153ce <atomic_and>
	return ret;
 8009736:	e726      	b.n	8009586 <execute+0xfa>
 8009738:	0801c28c 	.word	0x0801c28c
 800973c:	0801c2a0 	.word	0x0801c2a0
 8009740:	0801c301 	.word	0x0801c301
 8009744:	0801bf5a 	.word	0x0801bf5a
 8009748:	0801c2be 	.word	0x0801c2be
 800974c:	0801c2ed 	.word	0x0801c2ed
 8009750:	0801c594 	.word	0x0801c594
 8009754:	0801c325 	.word	0x0801c325

08009758 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
 800975e:	6880      	ldr	r0, [r0, #8]
 8009760:	b0b1      	sub	sp, #196	; 0xc4
 8009762:	2101      	movs	r1, #1
 8009764:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8009768:	f00b fe22 	bl	80153b0 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
 800976c:	68a3      	ldr	r3, [r4, #8]
 800976e:	791b      	ldrb	r3, [r3, #4]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d117      	bne.n	80097a4 <shell_process+0x4c>
	size_t count = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	9309      	str	r3, [sp, #36]	; 0x24
		shell_bypass_cb_t bypass = shell->ctx->bypass;
 8009778:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
 800977a:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
 800977c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	691d      	ldr	r5, [r3, #16]
 8009782:	ab09      	add	r3, sp, #36	; 0x24
		if (bypass) {
 8009784:	b1c6      	cbz	r6, 80097b8 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
 8009786:	2210      	movs	r2, #16
 8009788:	a91b      	add	r1, sp, #108	; 0x6c
 800978a:	47a8      	blx	r5
			if (count) {
 800978c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978e:	b14a      	cbz	r2, 80097a4 <shell_process+0x4c>
				bypass(shell, buf, count);
 8009790:	a91b      	add	r1, sp, #108	; 0x6c
 8009792:	4620      	mov	r0, r4
 8009794:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1ec      	bne.n	8009778 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff fe4a 	bl	8009438 <state_set.constprop.0>
 80097a4:	68a0      	ldr	r0, [r4, #8]
 80097a6:	f06f 0101 	mvn.w	r1, #1
 80097aa:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
 80097ae:	b031      	add	sp, #196	; 0xc4
 80097b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	f00b be0b 	b.w	80153ce <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
 80097b8:	2201      	movs	r2, #1
 80097ba:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80097be:	47a8      	blx	r5
		if (count == 0) {
 80097c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0ee      	beq.n	80097a4 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 80097c6:	f99d 1023 	ldrsb.w	r1, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
 80097ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
		switch (shell->ctx->receive_state) {
 80097ce:	68a2      	ldr	r2, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 80097d0:	2900      	cmp	r1, #0
 80097d2:	dbd1      	blt.n	8009778 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
 80097d4:	7951      	ldrb	r1, [r2, #5]
 80097d6:	2903      	cmp	r1, #3
 80097d8:	f200 830f 	bhi.w	8009dfa <shell_process+0x6a2>
 80097dc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80097e0:	028f0004 	.word	0x028f0004
 80097e4:	030d02a7 	.word	0x030d02a7
	if ((data != '\r') && (data != '\n')) {
 80097e8:	2b0d      	cmp	r3, #13
 80097ea:	d054      	beq.n	8009896 <shell_process+0x13e>
 80097ec:	2b0a      	cmp	r3, #10
 80097ee:	d032      	beq.n	8009856 <shell_process+0xfe>
	sh->ctx->ctx.flags.last_nl = val;
 80097f0:	f8b2 1264 	ldrh.w	r1, [r2, #612]	; 0x264
 80097f4:	f36f 01ca 	bfc	r1, #3, #8
 80097f8:	f8a2 1264 	strh.w	r1, [r2, #612]	; 0x264
			switch (data) {
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	68a0      	ldr	r0, [r4, #8]
 8009800:	d05c      	beq.n	80098bc <shell_process+0x164>
 8009802:	d813      	bhi.n	800982c <shell_process+0xd4>
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0b7      	beq.n	8009778 <shell_process+0x20>
 8009808:	2b08      	cmp	r3, #8
 800980a:	f000 81d8 	beq.w	8009bbe <shell_process+0x466>
				if (isprint((int) data)) {
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	4986      	ldr	r1, [pc, #536]	; (8009a2c <shell_process+0x2d4>)
 8009812:	68a0      	ldr	r0, [r4, #8]
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	5c8a      	ldrb	r2, [r1, r2]
 8009818:	f012 0f97 	tst.w	r2, #151	; 0x97
 800981c:	f000 81db 	beq.w	8009bd6 <shell_process+0x47e>
					z_flag_history_exit_set(shell, true);
 8009820:	2101      	movs	r1, #1
 8009822:	f00b fe40 	bl	80154a6 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
 8009826:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 800982a:	e0f5      	b.n	8009a18 <shell_process+0x2c0>
 800982c:	2b1b      	cmp	r3, #27
 800982e:	d042      	beq.n	80098b6 <shell_process+0x15e>
 8009830:	2b7f      	cmp	r3, #127	; 0x7f
 8009832:	d1ec      	bne.n	800980e <shell_process+0xb6>
	return sh->ctx->cfg.flags.echo == 1;
 8009834:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 8009838:	079d      	lsls	r5, r3, #30
 800983a:	d59d      	bpl.n	8009778 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
 800983c:	2101      	movs	r1, #1
 800983e:	f00b fe32 	bl	80154a6 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
 8009842:	68a3      	ldr	r3, [r4, #8]
 8009844:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
 8009848:	0719      	lsls	r1, r3, #28
 800984a:	f100 81c0 	bmi.w	8009bce <shell_process+0x476>
		z_shell_op_char_delete(shell);
 800984e:	4620      	mov	r0, r4
 8009850:	f00c f9a3 	bl	8015b9a <z_shell_op_char_delete>
		break;
 8009854:	e790      	b.n	8009778 <shell_process+0x20>
	return sh->ctx->ctx.flags.last_nl;
 8009856:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
 800985a:	f3c1 01c7 	ubfx	r1, r1, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
 800985e:	b129      	cbz	r1, 800986c <shell_process+0x114>
 8009860:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
 8009864:	f3c1 01c7 	ubfx	r1, r1, #3, #8
 8009868:	290a      	cmp	r1, #10
 800986a:	d1d0      	bne.n	800980e <shell_process+0xb6>
	sh->ctx->ctx.flags.last_nl = val;
 800986c:	f8b2 1264 	ldrh.w	r1, [r2, #612]	; 0x264
 8009870:	f363 01ca 	bfi	r1, r3, #3, #8
 8009874:	f8a2 1264 	strh.w	r1, [r2, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
 8009878:	68a0      	ldr	r0, [r4, #8]
 800987a:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 800987c:	b9b9      	cbnz	r1, 80098ae <shell_process+0x156>
	z_flag_history_exit_set(shell, false);
 800987e:	f00b fe12 	bl	80154a6 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
 8009882:	68e0      	ldr	r0, [r4, #12]
 8009884:	f00c fba0 	bl	8015fc8 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
 8009888:	6960      	ldr	r0, [r4, #20]
 800988a:	f7ff fd7b 	bl	8009384 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
 800988e:	4620      	mov	r0, r4
 8009890:	f7ff fdd2 	bl	8009438 <state_set.constprop.0>
		break;
 8009894:	e770      	b.n	8009778 <shell_process+0x20>
	return sh->ctx->ctx.flags.last_nl;
 8009896:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
 800989a:	f3c1 01c7 	ubfx	r1, r1, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
 800989e:	2900      	cmp	r1, #0
 80098a0:	d0e4      	beq.n	800986c <shell_process+0x114>
 80098a2:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
 80098a6:	f3c1 01c7 	ubfx	r1, r1, #3, #8
 80098aa:	290d      	cmp	r1, #13
 80098ac:	e7dd      	b.n	800986a <shell_process+0x112>
					(void)execute(shell);
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff fdec 	bl	800948c <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
 80098b4:	e7eb      	b.n	800988e <shell_process+0x136>
	shell->ctx->receive_state = state;
 80098b6:	2301      	movs	r3, #1
 80098b8:	7143      	strb	r3, [r0, #5]
}
 80098ba:	e75d      	b.n	8009778 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 80098bc:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
 80098c0:	079a      	lsls	r2, r3, #30
 80098c2:	f57f af59 	bpl.w	8009778 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
 80098c6:	2101      	movs	r1, #1
 80098c8:	f00b fded 	bl	80154a6 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
 80098cc:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
 80098ce:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80098d0:	2bff      	cmp	r3, #255	; 0xff
 80098d2:	f43f af51 	beq.w	8009778 <shell_process+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80098d6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80098d8:	f100 0142 	add.w	r1, r0, #66	; 0x42
 80098dc:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 80098e0:	f7f7 fbd6 	bl	8001090 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80098e8:	4413      	add	r3, r2
 80098ea:	2500      	movs	r5, #0
 80098ec:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 80098f0:	68a2      	ldr	r2, [r4, #8]
 80098f2:	a91b      	add	r1, sp, #108	; 0x6c
 80098f4:	2314      	movs	r3, #20
 80098f6:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 80098fa:	a80b      	add	r0, sp, #44	; 0x2c
 80098fc:	f000 fc46 	bl	800a18c <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
 8009900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009902:	2914      	cmp	r1, #20
 8009904:	f63f af38 	bhi.w	8009778 <shell_process+0x20>
	(*argv)[*argc] = NULL;
 8009908:	ab30      	add	r3, sp, #192	; 0xc0
 800990a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	int space = isspace((int)shell->ctx->cmd_buff[
 800990e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8009a30 <shell_process+0x2d8>
	(*argv)[*argc] = NULL;
 8009912:	f843 5c54 	str.w	r5, [r3, #-84]
	int space = isspace((int)shell->ctx->cmd_buff[
 8009916:	68a3      	ldr	r3, [r4, #8]
 8009918:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800991a:	4413      	add	r3, r2
 800991c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009920:	f81a 3003 	ldrb.w	r3, [sl, r3]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8009924:	b119      	cbz	r1, 800992e <shell_process+0x1d6>
 8009926:	071b      	lsls	r3, r3, #28
 8009928:	d451      	bmi.n	80099ce <shell_process+0x276>
 800992a:	2901      	cmp	r1, #1
 800992c:	d14e      	bne.n	80099cc <shell_process+0x274>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
 800992e:	2500      	movs	r5, #0
 8009930:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8009932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009934:	aa30      	add	r2, sp, #192	; 0xc0
 8009936:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
 800993a:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 800993c:	f853 bc54 	ldr.w	fp, [r3, #-84]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 8009940:	4658      	mov	r0, fp
 8009942:	f00b fd69 	bl	8015418 <z_shell_strlen>
	size_t first = 0;
 8009946:	4637      	mov	r7, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 8009948:	9002      	str	r0, [sp, #8]
	*longest = 0U;
 800994a:	9603      	str	r6, [sp, #12]
	size_t idx = 0;
 800994c:	46b0      	mov	r8, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
 800994e:	aa16      	add	r2, sp, #88	; 0x58
 8009950:	4641      	mov	r1, r8
 8009952:	4628      	mov	r0, r5
 8009954:	f000 fcf6 	bl	800a344 <z_shell_cmd_get>
 8009958:	4681      	mov	r9, r0
 800995a:	2800      	cmp	r0, #0
 800995c:	d143      	bne.n	80099e6 <shell_process+0x28e>
	if (cnt == 1) {
 800995e:	2e01      	cmp	r6, #1
 8009960:	d168      	bne.n	8009a34 <shell_process+0x2dc>
		autocomplete(shell, cmd, argv[arg_idx], first);
 8009962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009964:	aa30      	add	r2, sp, #192	; 0xc0
 8009966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
 800996a:	f853 0c54 	ldr.w	r0, [r3, #-84]
 800996e:	f00b fd53 	bl	8015418 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 8009972:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
 8009974:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 8009976:	3208      	adds	r2, #8
 8009978:	4639      	mov	r1, r7
 800997a:	4628      	mov	r0, r5
 800997c:	f000 fce2 	bl	800a344 <z_shell_cmd_get>
 8009980:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
 8009982:	6800      	ldr	r0, [r0, #0]
 8009984:	f00b fd48 	bl	8015418 <z_shell_strlen>
	if (cmd_len != arg_len) {
 8009988:	4286      	cmp	r6, r0
 800998a:	d006      	beq.n	800999a <shell_process+0x242>
		z_shell_op_completion_insert(shell,
 800998c:	6829      	ldr	r1, [r5, #0]
 800998e:	1b82      	subs	r2, r0, r6
 8009990:	b292      	uxth	r2, r2
 8009992:	4431      	add	r1, r6
 8009994:	4620      	mov	r0, r4
 8009996:	f00c f8fe 	bl	8015b96 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
 800999a:	68a0      	ldr	r0, [r4, #8]
 800999c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800999e:	4403      	add	r3, r0
 80099a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099a4:	f81a 1003 	ldrb.w	r1, [sl, r3]
 80099a8:	f011 0108 	ands.w	r1, r1, #8
 80099ac:	d138      	bne.n	8009a20 <shell_process+0x2c8>
	return sh->ctx->cfg.flags.insert_mode == 1;
 80099ae:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
 80099b2:	07df      	lsls	r7, r3, #31
 80099b4:	d52f      	bpl.n	8009a16 <shell_process+0x2be>
			z_flag_insert_mode_set(shell, false);
 80099b6:	f00b fd80 	bl	80154ba <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
 80099ba:	2120      	movs	r1, #32
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fec3 	bl	800a748 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
 80099c2:	68a0      	ldr	r0, [r4, #8]
 80099c4:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
 80099c6:	f00b fd78 	bl	80154ba <z_flag_insert_mode_set.isra.0>
				break;
 80099ca:	e6d5      	b.n	8009778 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
 80099cc:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
 80099ce:	2000      	movs	r0, #0
 80099d0:	ab0c      	add	r3, sp, #48	; 0x30
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	9001      	str	r0, [sp, #4]
 80099d6:	ab0a      	add	r3, sp, #40	; 0x28
 80099d8:	aa1b      	add	r2, sp, #108	; 0x6c
 80099da:	f00b fece 	bl	801577a <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 80099de:	4605      	mov	r5, r0
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1a6      	bne.n	8009932 <shell_process+0x1da>
 80099e4:	e6c8      	b.n	8009778 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80099e6:	9a02      	ldr	r2, [sp, #8]
 80099e8:	f8d9 0000 	ldr.w	r0, [r9]
 80099ec:	4659      	mov	r1, fp
 80099ee:	f007 fde9 	bl	80115c4 <strncmp>
		if (is_candidate) {
 80099f2:	b968      	cbnz	r0, 8009a10 <shell_process+0x2b8>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 80099f4:	f8d9 0000 	ldr.w	r0, [r9]
 80099f8:	f7f6 fbe2 	bl	80001c0 <strlen>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	4283      	cmp	r3, r0
 8009a00:	bf38      	it	cc
 8009a02:	4603      	movcc	r3, r0
 8009a04:	b29b      	uxth	r3, r3
				*first_idx = idx;
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	bf08      	it	eq
 8009a0a:	4647      	moveq	r7, r8
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 8009a0c:	9303      	str	r3, [sp, #12]
			(*cnt)++;
 8009a0e:	3601      	adds	r6, #1
		idx++;
 8009a10:	f108 0801 	add.w	r8, r8, #1
 8009a14:	e79b      	b.n	800994e <shell_process+0x1f6>
			z_shell_op_char_insert(shell, ' ');
 8009a16:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 fe95 	bl	800a748 <z_shell_op_char_insert>
 8009a1e:	e6ab      	b.n	8009778 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
 8009a20:	2101      	movs	r1, #1
 8009a22:	4620      	mov	r0, r4
 8009a24:	f00b ffa5 	bl	8015972 <z_shell_op_cursor_move>
 8009a28:	e6a6      	b.n	8009778 <shell_process+0x20>
 8009a2a:	bf00      	nop
 8009a2c:	0801b2e8 	.word	0x0801b2e8
 8009a30:	0801b2e9 	.word	0x0801b2e9
	} else if (cnt > 1) {
 8009a34:	f67f aea0 	bls.w	8009778 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 8009a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a3a:	ab30      	add	r3, sp, #192	; 0xc0
 8009a3c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8009a40:	46ba      	mov	sl, r7
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 8009a42:	f852 3c54 	ldr.w	r3, [r2, #-84]
 8009a46:	9302      	str	r3, [sp, #8]
	size_t str_len = z_shell_strlen(str);
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f00b fce5 	bl	8015418 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8009a4e:	68a2      	ldr	r2, [r4, #8]
	size_t str_len = z_shell_strlen(str);
 8009a50:	9005      	str	r0, [sp, #20]
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8009a52:	f8a2 9030 	strh.w	r9, [r2, #48]	; 0x30
 8009a56:	9604      	str	r6, [sp, #16]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 8009a58:	68a2      	ldr	r2, [r4, #8]
 8009a5a:	4651      	mov	r1, sl
 8009a5c:	3208      	adds	r2, #8
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 fc70 	bl	800a344 <z_shell_cmd_get>
		if (str && match->syntax &&
 8009a64:	9b02      	ldr	r3, [sp, #8]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 8009a66:	4680      	mov	r8, r0
		idx++;
 8009a68:	f10a 0a01 	add.w	sl, sl, #1
		if (str && match->syntax &&
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d152      	bne.n	8009b16 <shell_process+0x3be>
		tab_item_print(shell, match->syntax, longest);
 8009a70:	f8d8 3000 	ldr.w	r3, [r8]
	if (option == NULL) {
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d158      	bne.n	8009b2a <shell_process+0x3d2>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8009a78:	68a2      	ldr	r2, [r4, #8]
 8009a7a:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
 8009a7c:	9b04      	ldr	r3, [sp, #16]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	d1e9      	bne.n	8009a58 <shell_process+0x300>
	z_cursor_next_line_move(shell);
 8009a84:	6960      	ldr	r0, [r4, #20]
 8009a86:	f7ff fc7d 	bl	8009384 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 fe92 	bl	800a7b4 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
 8009a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a92:	aa30      	add	r2, sp, #192	; 0xc0
 8009a94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
 8009a98:	f107 0901 	add.w	r9, r7, #1
	uint16_t arg_len = z_shell_strlen(arg);
 8009a9c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8009aa0:	f00b fcba 	bl	8015418 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	aa11      	add	r2, sp, #68	; 0x44
	uint16_t arg_len = z_shell_strlen(arg);
 8009aa8:	4680      	mov	r8, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 fc4a 	bl	800a344 <z_shell_cmd_get>
 8009ab0:	4607      	mov	r7, r0
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8009ab2:	68a0      	ldr	r0, [r4, #8]
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	22ff      	movs	r2, #255	; 0xff
 8009ab8:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8009abc:	f007 fdc4 	bl	8011648 <strncpy>
	*str = match->syntax;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	9302      	str	r3, [sp, #8]
	uint16_t common = UINT16_MAX;
 8009ac4:	f64f 77ff 	movw	r7, #65535	; 0xffff
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8009ac8:	46ba      	mov	sl, r7
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 8009aca:	aa16      	add	r2, sp, #88	; 0x58
 8009acc:	4649      	mov	r1, r9
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f109 0b01 	add.w	fp, r9, #1
 8009ad4:	f000 fc36 	bl	800a344 <z_shell_cmd_get>
		if (match2 == NULL) {
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d064      	beq.n	8009ba6 <shell_process+0x44e>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 8009adc:	68a1      	ldr	r1, [r4, #8]
 8009ade:	6803      	ldr	r3, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8009ae0:	f201 1141 	addw	r1, r1, #321	; 0x141
	size_t common = 0;
 8009ae4:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8009ae6:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8009aea:	5c98      	ldrb	r0, [r3, r2]
 8009aec:	4570      	cmp	r0, lr
 8009aee:	d103      	bne.n	8009af8 <shell_process+0x3a0>
 8009af0:	b110      	cbz	r0, 8009af8 <shell_process+0x3a0>
		common++;
 8009af2:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8009af4:	4552      	cmp	r2, sl
 8009af6:	d1f6      	bne.n	8009ae6 <shell_process+0x38e>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 8009af8:	f1b8 0f00 	cmp.w	r8, #0
 8009afc:	d001      	beq.n	8009b02 <shell_process+0x3aa>
 8009afe:	4542      	cmp	r2, r8
 8009b00:	db07      	blt.n	8009b12 <shell_process+0x3ba>
			common = (curr_common < common) ? curr_common : common;
 8009b02:	42ba      	cmp	r2, r7
			--cnt;
 8009b04:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
 8009b08:	bfa8      	it	ge
 8009b0a:	463a      	movge	r2, r7
	while (cnt > 1) {
 8009b0c:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 8009b0e:	b297      	uxth	r7, r2
	while (cnt > 1) {
 8009b10:	d049      	beq.n	8009ba6 <shell_process+0x44e>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 8009b12:	46d9      	mov	r9, fp
 8009b14:	e7d9      	b.n	8009aca <shell_process+0x372>
		if (str && match->syntax &&
 8009b16:	6800      	ldr	r0, [r0, #0]
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d0a9      	beq.n	8009a70 <shell_process+0x318>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 8009b1c:	9a05      	ldr	r2, [sp, #20]
 8009b1e:	9902      	ldr	r1, [sp, #8]
 8009b20:	f007 fd50 	bl	80115c4 <strncmp>
		if (str && match->syntax &&
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d0a3      	beq.n	8009a70 <shell_process+0x318>
 8009b28:	e796      	b.n	8009a58 <shell_process+0x300>
	longest_option += z_shell_strlen(tab);
 8009b2a:	48b5      	ldr	r0, [pc, #724]	; (8009e00 <shell_process+0x6a8>)
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	f00b fc73 	bl	8015418 <z_shell_strlen>
 8009b32:	9b03      	ldr	r3, [sp, #12]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8009b34:	68a2      	ldr	r2, [r4, #8]
	longest_option += z_shell_strlen(tab);
 8009b36:	eb00 0b03 	add.w	fp, r0, r3
			- z_shell_strlen(tab)) / longest_option;
 8009b3a:	48b1      	ldr	r0, [pc, #708]	; (8009e00 <shell_process+0x6a8>)
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8009b3c:	f8b2 802a 	ldrh.w	r8, [r2, #42]	; 0x2a
			- z_shell_strlen(tab)) / longest_option;
 8009b40:	f00b fc6a 	bl	8015418 <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
 8009b44:	9b06      	ldr	r3, [sp, #24]
			- z_shell_strlen(tab)) / longest_option;
 8009b46:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f00b fc65 	bl	8015418 <z_shell_strlen>
	longest_option += z_shell_strlen(tab);
 8009b4e:	fa1f fb8b 	uxth.w	fp, fp
	diff = longest_option - z_shell_strlen(option);
 8009b52:	ebab 0900 	sub.w	r9, fp, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8009b56:	68a0      	ldr	r0, [r4, #8]
			- z_shell_strlen(tab)) / longest_option;
 8009b58:	9a07      	ldr	r2, [sp, #28]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8009b5a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8009b5c:	9b06      	ldr	r3, [sp, #24]
			- z_shell_strlen(tab)) / longest_option;
 8009b5e:	eba8 0802 	sub.w	r8, r8, r2
 8009b62:	fb98 f8fb 	sdiv	r8, r8, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8009b66:	fa1f f888 	uxth.w	r8, r8
 8009b6a:	f101 0c01 	add.w	ip, r1, #1
 8009b6e:	fbb1 f2f8 	udiv	r2, r1, r8
 8009b72:	fb08 1112 	mls	r1, r8, r2, r1
 8009b76:	b289      	uxth	r1, r1
	diff = longest_option - z_shell_strlen(option);
 8009b78:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8009b7c:	f8a0 c030 	strh.w	ip, [r0, #48]	; 0x30
 8009b80:	b959      	cbnz	r1, 8009b9a <shell_process+0x442>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	4a9f      	ldr	r2, [pc, #636]	; (8009e04 <shell_process+0x6ac>)
 8009b86:	4b9e      	ldr	r3, [pc, #632]	; (8009e00 <shell_process+0x6a8>)
 8009b88:	2106      	movs	r1, #6
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f00b ffc3 	bl	8015b16 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
 8009b90:	4649      	mov	r1, r9
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 fca6 	bl	800a4e4 <z_shell_op_cursor_horiz_move>
 8009b98:	e770      	b.n	8009a7c <shell_process+0x324>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
 8009b9a:	4a9b      	ldr	r2, [pc, #620]	; (8009e08 <shell_process+0x6b0>)
 8009b9c:	2106      	movs	r1, #6
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f00b ffb9 	bl	8015b16 <z_shell_fprintf>
 8009ba4:	e7f4      	b.n	8009b90 <shell_process+0x438>
	if (common) {
 8009ba6:	2f00      	cmp	r7, #0
 8009ba8:	f43f ade6 	beq.w	8009778 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
 8009bac:	9902      	ldr	r1, [sp, #8]
 8009bae:	eba7 0208 	sub.w	r2, r7, r8
 8009bb2:	b292      	uxth	r2, r2
 8009bb4:	4441      	add	r1, r8
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f00b ffed 	bl	8015b96 <z_shell_op_completion_insert>
 8009bbc:	e5dc      	b.n	8009778 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 8009bbe:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 8009bc2:	079e      	lsls	r6, r3, #30
 8009bc4:	f57f add8 	bpl.w	8009778 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
 8009bc8:	2101      	movs	r1, #1
 8009bca:	f00b fc6c 	bl	80154a6 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f00b fffe 	bl	8015bd0 <z_shell_op_char_backspace>
 8009bd4:	e5d0      	b.n	8009778 <shell_process+0x20>
 8009bd6:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
 8009bda:	0792      	lsls	r2, r2, #30
 8009bdc:	f57f adcc 	bpl.w	8009778 <shell_process+0x20>
	switch (data) {
 8009be0:	3b01      	subs	r3, #1
 8009be2:	2b16      	cmp	r3, #22
 8009be4:	f63f adc8 	bhi.w	8009778 <shell_process+0x20>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <shell_process+0x498>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009dcd 	.word	0x08009dcd
 8009bf4:	08009c4d 	.word	0x08009c4d
 8009bf8:	08009c55 	.word	0x08009c55
 8009bfc:	0800984f 	.word	0x0800984f
 8009c00:	08009dc1 	.word	0x08009dc1
 8009c04:	08009c73 	.word	0x08009c73
 8009c08:	08009779 	.word	0x08009779
 8009c0c:	08009779 	.word	0x08009779
 8009c10:	08009779 	.word	0x08009779
 8009c14:	08009779 	.word	0x08009779
 8009c18:	08009c7b 	.word	0x08009c7b
 8009c1c:	08009c83 	.word	0x08009c83
 8009c20:	08009779 	.word	0x08009779
 8009c24:	08009cad 	.word	0x08009cad
 8009c28:	08009779 	.word	0x08009779
 8009c2c:	08009cb7 	.word	0x08009cb7
 8009c30:	08009779 	.word	0x08009779
 8009c34:	08009779 	.word	0x08009779
 8009c38:	08009779 	.word	0x08009779
 8009c3c:	08009779 	.word	0x08009779
 8009c40:	08009cbb 	.word	0x08009cbb
 8009c44:	08009779 	.word	0x08009779
 8009c48:	08009cef 	.word	0x08009cef
		z_shell_op_left_arrow(shell);
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f00b fec1 	bl	80159d4 <z_shell_op_left_arrow>
		break;
 8009c52:	e591      	b.n	8009778 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
 8009c54:	4620      	mov	r0, r4
 8009c56:	f00b feb6 	bl	80159c6 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f00b fe3d 	bl	80158da <z_shell_cursor_in_empty_line>
 8009c60:	b910      	cbnz	r0, 8009c68 <shell_process+0x510>
			z_cursor_next_line_move(shell);
 8009c62:	6960      	ldr	r0, [r4, #20]
 8009c64:	f7ff fb8e 	bl	8009384 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
 8009c68:	68a0      	ldr	r0, [r4, #8]
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	f00b fc1b 	bl	80154a6 <z_flag_history_exit_set.isra.0>
 8009c70:	e60d      	b.n	800988e <shell_process+0x136>
		z_shell_op_right_arrow(shell);
 8009c72:	4620      	mov	r0, r4
 8009c74:	f00b feb6 	bl	80159e4 <z_shell_op_right_arrow>
		break;
 8009c78:	e57e      	b.n	8009778 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f00b febb 	bl	80159f6 <z_shell_op_delete_from_cursor>
		break;
 8009c80:	e57a      	b.n	8009778 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8009c82:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8009c86:	069f      	lsls	r7, r3, #26
 8009c88:	d503      	bpl.n	8009c92 <shell_process+0x53a>
 8009c8a:	4960      	ldr	r1, [pc, #384]	; (8009e0c <shell_process+0x6b4>)
 8009c8c:	6960      	ldr	r0, [r4, #20]
 8009c8e:	f00b fbc9 	bl	8015424 <z_shell_raw_fprintf>
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8009c98:	069e      	lsls	r6, r3, #26
 8009c9a:	d503      	bpl.n	8009ca4 <shell_process+0x54c>
 8009c9c:	495c      	ldr	r1, [pc, #368]	; (8009e10 <shell_process+0x6b8>)
 8009c9e:	6960      	ldr	r0, [r4, #20]
 8009ca0:	f00b fbc0 	bl	8015424 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f000 fd85 	bl	800a7b4 <z_shell_print_prompt_and_cmd>
		break;
 8009caa:	e565      	b.n	8009778 <shell_process+0x20>
		history_handle(shell, false);
 8009cac:	2100      	movs	r1, #0
		history_handle(shell, true);
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff fb6e 	bl	8009390 <history_handle>
		break;
 8009cb4:	e560      	b.n	8009778 <shell_process+0x20>
		history_handle(shell, true);
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	e7f9      	b.n	8009cae <shell_process+0x556>
		z_shell_op_cursor_home_move(shell);
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f00b fe7d 	bl	80159ba <z_shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8009cc0:	68a2      	ldr	r2, [r4, #8]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_pos = 0;
 8009cc8:	68a2      	ldr	r2, [r4, #8]
 8009cca:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
 8009ccc:	68a2      	ldr	r2, [r4, #8]
 8009cce:	8793      	strh	r3, [r2, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
 8009cd0:	68a0      	ldr	r0, [r4, #8]
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	f00b fbe7 	bl	80154a6 <z_flag_history_exit_set.isra.0>
 8009cd8:	68a3      	ldr	r3, [r4, #8]
 8009cda:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 8009cde:	069d      	lsls	r5, r3, #26
 8009ce0:	f57f ad4a 	bpl.w	8009778 <shell_process+0x20>
 8009ce4:	494b      	ldr	r1, [pc, #300]	; (8009e14 <shell_process+0x6bc>)
 8009ce6:	6960      	ldr	r0, [r4, #20]
 8009ce8:	f00b fb9c 	bl	8015424 <z_shell_raw_fprintf>
 8009cec:	e544      	b.n	8009778 <shell_process+0x20>
		z_shell_op_word_remove(shell);
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fc90 	bl	800a614 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
 8009cf4:	68a0      	ldr	r0, [r4, #8]
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	f00b fbd5 	bl	80154a6 <z_flag_history_exit_set.isra.0>
		break;
 8009cfc:	e53c      	b.n	8009778 <shell_process+0x20>
			if (data == '[') {
 8009cfe:	2b5b      	cmp	r3, #91	; 0x5b
 8009d00:	d102      	bne.n	8009d08 <shell_process+0x5b0>
	shell->ctx->receive_state = state;
 8009d02:	2302      	movs	r3, #2
 8009d04:	7153      	strb	r3, [r2, #5]
}
 8009d06:	e537      	b.n	8009778 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 8009d08:	f8d2 2260 	ldr.w	r2, [r2, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
 8009d0c:	0790      	lsls	r0, r2, #30
 8009d0e:	d506      	bpl.n	8009d1e <shell_process+0x5c6>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 8009d10:	2b62      	cmp	r3, #98	; 0x62
 8009d12:	d108      	bne.n	8009d26 <shell_process+0x5ce>
		z_shell_op_cursor_word_move(shell, -1);
 8009d14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fbf9 	bl	800a510 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	2200      	movs	r2, #0
 8009d22:	715a      	strb	r2, [r3, #5]
}
 8009d24:	e528      	b.n	8009778 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 8009d26:	2b66      	cmp	r3, #102	; 0x66
 8009d28:	d1f9      	bne.n	8009d1e <shell_process+0x5c6>
		z_shell_op_cursor_word_move(shell, 1);
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	e7f4      	b.n	8009d18 <shell_process+0x5c0>
	shell->ctx->receive_state = state;
 8009d2e:	2100      	movs	r1, #0
 8009d30:	7151      	strb	r1, [r2, #5]
 8009d32:	68a2      	ldr	r2, [r4, #8]
 8009d34:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
 8009d38:	0789      	lsls	r1, r1, #30
 8009d3a:	f57f ad1d 	bpl.w	8009778 <shell_process+0x20>
			switch (data) {
 8009d3e:	3b31      	subs	r3, #49	; 0x31
 8009d40:	2b1b      	cmp	r3, #27
 8009d42:	f63f ad19 	bhi.w	8009778 <shell_process+0x20>
 8009d46:	a101      	add	r1, pc, #4	; (adr r1, 8009d4c <shell_process+0x5f4>)
 8009d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d4c:	08009dc9 	.word	0x08009dc9
 8009d50:	08009dd5 	.word	0x08009dd5
 8009d54:	08009de9 	.word	0x08009de9
 8009d58:	08009dbd 	.word	0x08009dbd
 8009d5c:	08009779 	.word	0x08009779
 8009d60:	08009779 	.word	0x08009779
 8009d64:	08009779 	.word	0x08009779
 8009d68:	08009779 	.word	0x08009779
 8009d6c:	08009779 	.word	0x08009779
 8009d70:	08009779 	.word	0x08009779
 8009d74:	08009779 	.word	0x08009779
 8009d78:	08009779 	.word	0x08009779
 8009d7c:	08009779 	.word	0x08009779
 8009d80:	08009779 	.word	0x08009779
 8009d84:	08009779 	.word	0x08009779
 8009d88:	08009779 	.word	0x08009779
 8009d8c:	08009cb7 	.word	0x08009cb7
 8009d90:	08009cad 	.word	0x08009cad
 8009d94:	08009c73 	.word	0x08009c73
 8009d98:	08009c4d 	.word	0x08009c4d
 8009d9c:	08009779 	.word	0x08009779
 8009da0:	08009dc1 	.word	0x08009dc1
 8009da4:	08009779 	.word	0x08009779
 8009da8:	08009dcd 	.word	0x08009dcd
 8009dac:	08009779 	.word	0x08009779
 8009db0:	08009779 	.word	0x08009779
 8009db4:	08009779 	.word	0x08009779
 8009db8:	08009dd9 	.word	0x08009dd9
	shell->ctx->receive_state = state;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f00b fe00 	bl	80159c6 <z_shell_op_cursor_end_move>
		break;
 8009dc6:	e4d7      	b.n	8009778 <shell_process+0x20>
	shell->ctx->receive_state = state;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f00b fdf4 	bl	80159ba <z_shell_op_cursor_home_move>
		break;
 8009dd2:	e4d1      	b.n	8009778 <shell_process+0x20>
	shell->ctx->receive_state = state;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
 8009dd8:	68a0      	ldr	r0, [r4, #8]
 8009dda:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
 8009dde:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
 8009de2:	f081 0101 	eor.w	r1, r1, #1
 8009de6:	e5ee      	b.n	80099c6 <shell_process+0x26e>
	shell->ctx->receive_state = state;
 8009de8:	2303      	movs	r3, #3
 8009dea:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.echo == 1;
 8009dec:	68a3      	ldr	r3, [r4, #8]
 8009dee:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 8009df2:	079b      	lsls	r3, r3, #30
 8009df4:	f57f acc0 	bpl.w	8009778 <shell_process+0x20>
 8009df8:	e529      	b.n	800984e <shell_process+0xf6>
	shell->ctx->receive_state = state;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e782      	b.n	8009d04 <shell_process+0x5ac>
 8009dfe:	bf00      	nop
 8009e00:	0801b818 	.word	0x0801b818
 8009e04:	0801c340 	.word	0x0801c340
 8009e08:	0801bf55 	.word	0x0801bf55
 8009e0c:	0801a4f5 	.word	0x0801a4f5
 8009e10:	0801a4fa 	.word	0x0801a4fa
 8009e14:	0801a4f0 	.word	0x0801a4f0

08009e18 <shell_init>:
{
 8009e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
 8009e1e:	6880      	ldr	r0, [r0, #8]
{
 8009e20:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
 8009e22:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
 8009e26:	b089      	sub	sp, #36	; 0x24
 8009e28:	4615      	mov	r5, r2
 8009e2a:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	d166      	bne.n	8009efe <shell_init+0xe6>
__ssp_bos_icheck3(memset, void *, int)
 8009e30:	f44f 7244 	mov.w	r2, #784	; 0x310
 8009e34:	f007 fa30 	bl	8011298 <memset>
	sh->ctx->prompt = sh->default_prompt;
 8009e38:	68a3      	ldr	r3, [r4, #8]
 8009e3a:	6822      	ldr	r2, [r4, #0]
 8009e3c:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
 8009e3e:	68e0      	ldr	r0, [r4, #12]
 8009e40:	f00c f964 	bl	801610c <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
 8009e44:	68a0      	ldr	r0, [r4, #8]
 8009e46:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
 8009e4a:	f00f fc42 	bl	80196d2 <z_impl_k_mutex_init>
 8009e4e:	f44f 792a 	mov.w	r9, #680	; 0x2a8
 8009e52:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
 8009e56:	68a0      	ldr	r0, [r4, #8]
 8009e58:	4430      	add	r0, r6
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
 8009e5a:	f00f ff58 	bl	8019d0e <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
 8009e5e:	68a0      	ldr	r0, [r4, #8]
 8009e60:	2200      	movs	r2, #0
 8009e62:	1983      	adds	r3, r0, r6
 8009e64:	2101      	movs	r1, #1
 8009e66:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8009e68:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
 8009e6a:	f00f ff33 	bl	8019cd4 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8009e6e:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
 8009e72:	f109 0914 	add.w	r9, r9, #20
 8009e76:	d1ee      	bne.n	8009e56 <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
 8009e78:	69a3      	ldr	r3, [r4, #24]
 8009e7a:	2600      	movs	r6, #0
 8009e7c:	601e      	str	r6, [r3, #0]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
 8009e7e:	68a0      	ldr	r0, [r4, #8]
 8009e80:	2102      	movs	r1, #2
 8009e82:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8009e86:	f00b fa93 	bl	80153b0 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	2250      	movs	r2, #80	; 0x50
 8009e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei =
 8009e90:	68a3      	ldr	r3, [r4, #8]
 8009e92:	2218      	movs	r2, #24
 8009e94:	851a      	strh	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
 8009e96:	68a3      	ldr	r3, [r4, #8]
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	f00b fabd 	bl	8015418 <z_shell_strlen>
 8009e9e:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
 8009ea0:	4a18      	ldr	r2, [pc, #96]	; (8009f04 <shell_init+0xec>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
 8009ea2:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	sh->ctx->cfg.flags = cfg_flags;
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	f366 0582 	bfi	r5, r6, #2, #1
 8009eac:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
 8009eb0:	6860      	ldr	r0, [r4, #4]
 8009eb2:	6803      	ldr	r3, [r0, #0]
 8009eb4:	4641      	mov	r1, r8
 8009eb6:	681d      	ldr	r5, [r3, #0]
 8009eb8:	4623      	mov	r3, r4
 8009eba:	47a8      	blx	r5
	if (ret == 0) {
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	b9d0      	cbnz	r0, 8009ef6 <shell_init+0xde>
	shell->ctx->state = state;
 8009ec0:	68a3      	ldr	r3, [r4, #8]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	711a      	strb	r2, [r3, #4]
				  shell->stack, CONFIG_SHELL_STACK_SIZE,
 8009ec6:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ed2:	230e      	movs	r3, #14
 8009ed4:	9303      	str	r3, [sp, #12]
 8009ed6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ed8:	9504      	str	r5, [sp, #16]
	k_tid_t tid = k_thread_create(shell->thread,
 8009eda:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8009ede:	9400      	str	r4, [sp, #0]
 8009ee0:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <shell_init+0xf0>)
 8009ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ee6:	f005 fd13 	bl	800f910 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	k_thread_name_set(tid, shell->thread_name);
 8009ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return z_impl_k_thread_name_set(thread, str);
 8009ef2:	f005 fc49 	bl	800f788 <z_impl_k_thread_name_set>
}
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	b009      	add	sp, #36	; 0x24
 8009efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
 8009efe:	f06f 0577 	mvn.w	r5, #119	; 0x77
 8009f02:	e7f8      	b.n	8009ef6 <shell_init+0xde>
 8009f04:	08015443 	.word	0x08015443
 8009f08:	08009f61 	.word	0x08009f61

08009f0c <shell_start>:
{
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	4604      	mov	r4, r0
	return shell->ctx->state;
 8009f10:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
 8009f12:	7903      	ldrb	r3, [r0, #4]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d11d      	bne.n	8009f54 <shell_start+0x48>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8009f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f20:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8009f24:	f00b fa8b 	bl	801543e <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
 8009f28:	4620      	mov	r0, r4
 8009f2a:	2108      	movs	r1, #8
 8009f2c:	f000 fb34 	bl	800a598 <z_shell_vt100_color_set>
	if (z_shell_strlen(shell->default_prompt) > 0) {
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	f00b fa71 	bl	8015418 <z_shell_strlen>
 8009f36:	b118      	cbz	r0, 8009f40 <shell_start+0x34>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
 8009f38:	4908      	ldr	r1, [pc, #32]	; (8009f5c <shell_start+0x50>)
 8009f3a:	6960      	ldr	r0, [r4, #20]
 8009f3c:	f00b fa72 	bl	8015424 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7ff fa79 	bl	8009438 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8009f46:	68a0      	ldr	r0, [r4, #8]
 8009f48:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8009f4c:	f00b fac4 	bl	80154d8 <k_mutex_unlock.isra.0>
	return 0;
 8009f50:	2000      	movs	r0, #0
}
 8009f52:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8009f54:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009f58:	e7fb      	b.n	8009f52 <shell_start+0x46>
 8009f5a:	bf00      	nop
 8009f5c:	0801bd33 	.word	0x0801bd33

08009f60 <shell_thread>:
{
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
 8009f66:	6840      	ldr	r0, [r0, #4]
 8009f68:	6803      	ldr	r3, [r0, #0]
{
 8009f6a:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	2100      	movs	r1, #0
{
 8009f70:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
 8009f72:	4798      	blx	r3
	if (err != 0) {
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d14c      	bne.n	800a012 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
 8009f78:	b126      	cbz	r6, 8009f84 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
 8009f7a:	69e0      	ldr	r0, [r4, #28]
 8009f7c:	462a      	mov	r2, r5
 8009f7e:	4621      	mov	r1, r4
 8009f80:	f00b ff01 	bl	8015d86 <z_shell_log_backend_enable>
	err = shell_start(shell);
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7ff ffc1 	bl	8009f0c <shell_start>
	if (err != 0) {
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d141      	bne.n	800a012 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 8009f8e:	4e22      	ldr	r6, [pc, #136]	; (800a018 <shell_thread+0xb8>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 8009f90:	4f22      	ldr	r7, [pc, #136]	; (800a01c <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 8009f92:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800a024 <shell_thread+0xc4>
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
 8009f96:	68a0      	ldr	r0, [r4, #8]
 8009f98:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
 8009f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fa4:	2103      	movs	r1, #3
 8009fa6:	f006 fc45 	bl	8010834 <z_impl_k_poll>
		if (err != 0) {
 8009faa:	4605      	mov	r5, r0
 8009fac:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8009fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fb6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
 8009fba:	b175      	cbz	r5, 8009fda <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8009fbc:	f00b fa3f 	bl	801543e <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	4a16      	ldr	r2, [pc, #88]	; (800a020 <shell_thread+0xc0>)
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	f00b fda5 	bl	8015b16 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
 8009fcc:	68a0      	ldr	r0, [r4, #8]
}
 8009fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
 8009fd2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8009fd6:	f00b ba7f 	b.w	80154d8 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8009fda:	f00b fa30 	bl	801543e <k_mutex_lock.constprop.0.isra.0>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 8009fde:	4632      	mov	r2, r6
 8009fe0:	2102      	movs	r1, #2
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f00b fa02 	bl	80153ec <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 8009fe8:	463a      	mov	r2, r7
 8009fea:	4629      	mov	r1, r5
 8009fec:	4620      	mov	r0, r4
 8009fee:	f00b f9fd 	bl	80153ec <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4642      	mov	r2, r8
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	f00b f9f8 	bl	80153ec <shell_signal_handle>
		if (shell->iface->api->update) {
 8009ffc:	6860      	ldr	r0, [r4, #4]
 8009ffe:	6803      	ldr	r3, [r0, #0]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	b103      	cbz	r3, 800a006 <shell_thread+0xa6>
			shell->iface->api->update(shell->iface);
 800a004:	4798      	blx	r3
		k_mutex_unlock(&shell->ctx->wr_mtx);
 800a006:	68a0      	ldr	r0, [r4, #8]
 800a008:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 800a00c:	f00b fa64 	bl	80154d8 <k_mutex_unlock.isra.0>
	while (true) {
 800a010:	e7c1      	b.n	8009f96 <shell_thread+0x36>
}
 800a012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a016:	bf00      	nop
 800a018:	08015457 	.word	0x08015457
 800a01c:	08009759 	.word	0x08009759
 800a020:	0801c346 	.word	0x0801c346
 800a024:	080154dd 	.word	0x080154dd

0800a028 <cmd_help>:

	return state_get(sh) ==	SHELL_STATE_ACTIVE;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
 800a028:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
 800a02a:	4a0d      	ldr	r2, [pc, #52]	; (800a060 <cmd_help+0x38>)
{
 800a02c:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
 800a02e:	2108      	movs	r1, #8
 800a030:	f00b fab4 	bl	801559c <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
 800a034:	4620      	mov	r0, r4
 800a036:	4a0b      	ldr	r2, [pc, #44]	; (800a064 <cmd_help+0x3c>)
 800a038:	2108      	movs	r1, #8
 800a03a:	f00b faaf 	bl	801559c <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
 800a03e:	4620      	mov	r0, r4
 800a040:	4a09      	ldr	r2, [pc, #36]	; (800a068 <cmd_help+0x40>)
 800a042:	2108      	movs	r1, #8
 800a044:	f00b faaa 	bl	801559c <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
 800a048:	4620      	mov	r0, r4
 800a04a:	4a08      	ldr	r2, [pc, #32]	; (800a06c <cmd_help+0x44>)
 800a04c:	2108      	movs	r1, #8
 800a04e:	f00b faa5 	bl	801559c <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
 800a052:	4620      	mov	r0, r4
 800a054:	4a06      	ldr	r2, [pc, #24]	; (800a070 <cmd_help+0x48>)
 800a056:	2100      	movs	r1, #0
 800a058:	f000 fc3c 	bl	800a8d4 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
 800a05c:	2000      	movs	r0, #0
 800a05e:	bd10      	pop	{r4, pc}
 800a060:	0801c35d 	.word	0x0801c35d
 800a064:	0801c39b 	.word	0x0801c39b
 800a068:	0801c3fa 	.word	0x0801c3fa
 800a06c:	0801c44e 	.word	0x0801c44e
 800a070:	0801c4e8 	.word	0x0801c4e8

0800a074 <shell_hexdump_line>:
{
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	461e      	mov	r6, r3
 800a078:	4617      	mov	r7, r2
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 800a07a:	460b      	mov	r3, r1
 800a07c:	4a2f      	ldr	r2, [pc, #188]	; (800a13c <shell_hexdump_line+0xc8>)
 800a07e:	2108      	movs	r1, #8
{
 800a080:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 800a082:	f00b fa8b 	bl	801559c <shell_fprintf>
		if (i < len) {
 800a086:	b36e      	cbz	r6, 800a0e4 <shell_hexdump_line+0x70>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 800a088:	783b      	ldrb	r3, [r7, #0]
 800a08a:	4a2d      	ldr	r2, [pc, #180]	; (800a140 <shell_hexdump_line+0xcc>)
 800a08c:	2108      	movs	r1, #8
 800a08e:	4620      	mov	r0, r4
 800a090:	f00b fa84 	bl	801559c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 800a094:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
 800a096:	076a      	lsls	r2, r5, #29
 800a098:	d104      	bne.n	800a0a4 <shell_hexdump_line+0x30>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 800a09a:	4a2a      	ldr	r2, [pc, #168]	; (800a144 <shell_hexdump_line+0xd0>)
 800a09c:	2108      	movs	r1, #8
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f00b fa7c 	bl	801559c <shell_fprintf>
		if (i < len) {
 800a0a4:	42ae      	cmp	r6, r5
 800a0a6:	d923      	bls.n	800a0f0 <shell_hexdump_line+0x7c>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 800a0a8:	5d7b      	ldrb	r3, [r7, r5]
 800a0aa:	4a25      	ldr	r2, [pc, #148]	; (800a140 <shell_hexdump_line+0xcc>)
 800a0ac:	2108      	movs	r1, #8
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f00b fa74 	bl	801559c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 800a0b4:	3501      	adds	r5, #1
 800a0b6:	2d10      	cmp	r5, #16
 800a0b8:	d1ed      	bne.n	800a096 <shell_hexdump_line+0x22>
	shell_fprintf(shell, SHELL_NORMAL, "|");
 800a0ba:	4a23      	ldr	r2, [pc, #140]	; (800a148 <shell_hexdump_line+0xd4>)
 800a0bc:	2108      	movs	r1, #8
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f00b fa6c 	bl	801559c <shell_fprintf>
		if (i < len) {
 800a0c4:	b9d6      	cbnz	r6, 800a0fc <shell_hexdump_line+0x88>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 800a0c6:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <shell_hexdump_line+0xd0>)
 800a0c8:	2108      	movs	r1, #8
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f00b fa66 	bl	801559c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 800a0d0:	2501      	movs	r5, #1
		if (i < len) {
 800a0d2:	42ae      	cmp	r6, r5
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	d813      	bhi.n	800a100 <shell_hexdump_line+0x8c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 800a0d8:	4a1a      	ldr	r2, [pc, #104]	; (800a144 <shell_hexdump_line+0xd0>)
 800a0da:	2108      	movs	r1, #8
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f00b fa5d 	bl	801559c <shell_fprintf>
 800a0e2:	e019      	b.n	800a118 <shell_hexdump_line+0xa4>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 800a0e4:	4a19      	ldr	r2, [pc, #100]	; (800a14c <shell_hexdump_line+0xd8>)
 800a0e6:	2108      	movs	r1, #8
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f00b fa57 	bl	801559c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 800a0ee:	2501      	movs	r5, #1
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 800a0f0:	4a16      	ldr	r2, [pc, #88]	; (800a14c <shell_hexdump_line+0xd8>)
 800a0f2:	2108      	movs	r1, #8
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f00b fa51 	bl	801559c <shell_fprintf>
 800a0fa:	e7db      	b.n	800a0b4 <shell_hexdump_line+0x40>
		if (i < len) {
 800a0fc:	2500      	movs	r5, #0
 800a0fe:	462b      	mov	r3, r5
			char c = data[i];
 800a100:	5cfb      	ldrb	r3, [r7, r3]
				      isprint((int)c) ? c : '.');
 800a102:	4a13      	ldr	r2, [pc, #76]	; (800a150 <shell_hexdump_line+0xdc>)
			shell_fprintf(shell, SHELL_NORMAL, "%c",
 800a104:	5cd2      	ldrb	r2, [r2, r3]
 800a106:	f012 0f97 	tst.w	r2, #151	; 0x97
 800a10a:	bf08      	it	eq
 800a10c:	232e      	moveq	r3, #46	; 0x2e
 800a10e:	4a11      	ldr	r2, [pc, #68]	; (800a154 <shell_hexdump_line+0xe0>)
 800a110:	2108      	movs	r1, #8
 800a112:	4620      	mov	r0, r4
 800a114:	f00b fa42 	bl	801559c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 800a118:	3501      	adds	r5, #1
 800a11a:	2d10      	cmp	r5, #16
 800a11c:	d007      	beq.n	800a12e <shell_hexdump_line+0xba>
		if (i > 0 && !(i % 8)) {
 800a11e:	076b      	lsls	r3, r5, #29
 800a120:	d1d7      	bne.n	800a0d2 <shell_hexdump_line+0x5e>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 800a122:	4a08      	ldr	r2, [pc, #32]	; (800a144 <shell_hexdump_line+0xd0>)
 800a124:	2108      	movs	r1, #8
 800a126:	4620      	mov	r0, r4
 800a128:	f00b fa38 	bl	801559c <shell_fprintf>
 800a12c:	e7d1      	b.n	800a0d2 <shell_hexdump_line+0x5e>
	shell_print(shell, "|");
 800a12e:	4620      	mov	r0, r4
 800a130:	4a09      	ldr	r2, [pc, #36]	; (800a158 <shell_hexdump_line+0xe4>)
}
 800a132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	shell_print(shell, "|");
 800a136:	2108      	movs	r1, #8
 800a138:	f00b ba30 	b.w	801559c <shell_fprintf>
 800a13c:	0801c4fe 	.word	0x0801c4fe
 800a140:	0801b811 	.word	0x0801b811
 800a144:	0801b819 	.word	0x0801b819
 800a148:	0801b81b 	.word	0x0801b81b
 800a14c:	0801b817 	.word	0x0801b817
 800a150:	0801b2e9 	.word	0x0801b2e9
 800a154:	0801c525 	.word	0x0801c525
 800a158:	0801c505 	.word	0x0801c505

0800a15c <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
 800a15c:	b513      	push	{r0, r1, r4, lr}
 800a15e:	4613      	mov	r3, r2
 800a160:	4604      	mov	r4, r0
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 800a162:	2200      	movs	r2, #0
 800a164:	9200      	str	r2, [sp, #0]
 800a166:	460a      	mov	r2, r1
 800a168:	4601      	mov	r1, r0
 800a16a:	4807      	ldr	r0, [pc, #28]	; (800a188 <z_shell_fprintf_fmt+0x2c>)
 800a16c:	f7f7 fc98 	bl	8001aa0 <z_cbvprintf_impl>
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);

	if (sh_fprintf->ctrl_blk->autoflush) {
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	791b      	ldrb	r3, [r3, #4]
 800a174:	b12b      	cbz	r3, 800a182 <z_shell_fprintf_fmt+0x26>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 800a176:	4620      	mov	r0, r4
	}
}
 800a178:	b002      	add	sp, #8
 800a17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
 800a17e:	f00b ba4a 	b.w	8015616 <z_shell_fprintf_buffer_flush>
}
 800a182:	b002      	add	sp, #8
 800a184:	bd10      	pop	{r4, pc}
 800a186:	bf00      	nop
 800a188:	0801562f 	.word	0x0801562f

0800a18c <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
 800a18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a190:	b085      	sub	sp, #20
	char quote = 0;
	char c;

	*argc = 0;
 800a192:	2600      	movs	r6, #0
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
 800a194:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 800a340 <z_shell_make_argv+0x1b4>
{
 800a198:	9101      	str	r1, [sp, #4]
 800a19a:	4607      	mov	r7, r0
 800a19c:	4614      	mov	r4, r2
 800a19e:	4699      	mov	r9, r3
	*argc = 0;
 800a1a0:	6006      	str	r6, [r0, #0]
	char quote = 0;
 800a1a2:	46b3      	mov	fp, r6
		c = *cmd;
 800a1a4:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80c6 	beq.w	800a338 <z_shell_make_argv+0x1ac>
		if (isspace((int) c)) {
 800a1ac:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800a1b0:	f013 0308 	ands.w	r3, r3, #8
 800a1b4:	d004      	beq.n	800a1c0 <z_shell_make_argv+0x34>
			*cmd++ = '\0';
 800a1b6:	f804 bb01 	strb.w	fp, [r4], #1
			continue;
 800a1ba:	e7f3      	b.n	800a1a4 <z_shell_make_argv+0x18>
 800a1bc:	2600      	movs	r6, #0
 800a1be:	e7f1      	b.n	800a1a4 <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	1c51      	adds	r1, r2, #1
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	9901      	ldr	r1, [sp, #4]
 800a1c8:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
		if (*argc == max_argc) {
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	454a      	cmp	r2, r9
 800a1d0:	f000 80b2 	beq.w	800a338 <z_shell_make_argv+0x1ac>
	char quote = 0;
 800a1d4:	461e      	mov	r6, r3
		c = *cmd;
 800a1d6:	7821      	ldrb	r1, [r4, #0]
		if (c == '\0') {
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d0e3      	beq.n	800a1a4 <z_shell_make_argv+0x18>
		if (!quote) {
 800a1dc:	b9a6      	cbnz	r6, 800a208 <z_shell_make_argv+0x7c>
		c = *cmd;
 800a1de:	460e      	mov	r6, r1
		if (c == '\0') {
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	461c      	mov	r4, r3
			switch (c) {
 800a1e4:	2e27      	cmp	r6, #39	; 0x27
 800a1e6:	d004      	beq.n	800a1f2 <z_shell_make_argv+0x66>
 800a1e8:	2e5c      	cmp	r6, #92	; 0x5c
 800a1ea:	d020      	beq.n	800a22e <z_shell_make_argv+0xa2>
 800a1ec:	2e22      	cmp	r6, #34	; 0x22
 800a1ee:	f040 8097 	bne.w	800a320 <z_shell_make_argv+0x194>
				memmove(cmd, cmd + 1,
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f00b fa39 	bl	801566a <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
 800a1f8:	1c61      	adds	r1, r4, #1
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f006 ffcb 	bl	8011198 <memmove>
		c = *cmd;
 800a202:	7821      	ldrb	r1, [r4, #0]
		if (c == '\0') {
 800a204:	2900      	cmp	r1, #0
 800a206:	d0cd      	beq.n	800a1a4 <z_shell_make_argv+0x18>
		if (quote == c) {
 800a208:	42b1      	cmp	r1, r6
		if (c == '\0') {
 800a20a:	46a0      	mov	r8, r4
				memmove(cmd, cmd + 1,
 800a20c:	f104 0401 	add.w	r4, r4, #1
		if (quote == c) {
 800a210:	d11b      	bne.n	800a24a <z_shell_make_argv+0xbe>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
 800a212:	4640      	mov	r0, r8
 800a214:	f00b fa29 	bl	801566a <z_shell_strlen>
 800a218:	4621      	mov	r1, r4
 800a21a:	4602      	mov	r2, r0
 800a21c:	4640      	mov	r0, r8
 800a21e:	f006 ffbb 	bl	8011198 <memmove>
		c = *cmd;
 800a222:	f898 6000 	ldrb.w	r6, [r8]
		if (c == '\0') {
 800a226:	4644      	mov	r4, r8
 800a228:	2e00      	cmp	r6, #0
 800a22a:	d1d9      	bne.n	800a1e0 <z_shell_make_argv+0x54>
 800a22c:	e7ba      	b.n	800a1a4 <z_shell_make_argv+0x18>
				memmove(cmd, cmd + 1,
 800a22e:	4620      	mov	r0, r4
 800a230:	f00b fa1b 	bl	801566a <z_shell_strlen>
 800a234:	1c65      	adds	r5, r4, #1
 800a236:	4602      	mov	r2, r0
 800a238:	4629      	mov	r1, r5
 800a23a:	4620      	mov	r0, r4
 800a23c:	f006 ffac 	bl	8011198 <memmove>
		c = *cmd;
 800a240:	7866      	ldrb	r6, [r4, #1]
		if (c == '\0') {
 800a242:	462c      	mov	r4, r5
 800a244:	2e00      	cmp	r6, #0
 800a246:	d1cd      	bne.n	800a1e4 <z_shell_make_argv+0x58>
 800a248:	e7ac      	b.n	800a1a4 <z_shell_make_argv+0x18>
		if (quote && c == '\\') {
 800a24a:	295c      	cmp	r1, #92	; 0x5c
 800a24c:	f898 1001 	ldrb.w	r1, [r8, #1]
 800a250:	d1d8      	bne.n	800a204 <z_shell_make_argv+0x78>
			if (t == quote) {
 800a252:	42b1      	cmp	r1, r6
			char t = *(cmd + 1);
 800a254:	468c      	mov	ip, r1
			if (t == quote) {
 800a256:	d108      	bne.n	800a26a <z_shell_make_argv+0xde>
				memmove(cmd, cmd + 1,
 800a258:	4640      	mov	r0, r8
 800a25a:	f00b fa06 	bl	801566a <z_shell_strlen>
 800a25e:	4621      	mov	r1, r4
 800a260:	4602      	mov	r2, r0
 800a262:	4640      	mov	r0, r8
 800a264:	f006 ff98 	bl	8011198 <memmove>
				continue;
 800a268:	e7b5      	b.n	800a1d6 <z_shell_make_argv+0x4a>
			if (t == '0') {
 800a26a:	2930      	cmp	r1, #48	; 0x30
 800a26c:	d125      	bne.n	800a2ba <z_shell_make_argv+0x12e>
				uint8_t v = 0U;
 800a26e:	2500      	movs	r5, #0
 800a270:	2202      	movs	r2, #2
					t = *(cmd + i);
 800a272:	f818 c002 	ldrb.w	ip, [r8, r2]
					if (t >= '0' && t <= '7') {
 800a276:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 800a27a:	b2c0      	uxtb	r0, r0
 800a27c:	2807      	cmp	r0, #7
 800a27e:	d819      	bhi.n	800a2b4 <z_shell_make_argv+0x128>
						v = (v << 3) | (t - '0');
 800a280:	00ed      	lsls	r5, r5, #3
				for (i = 2U; i < (2 + 3); i++) {
 800a282:	3201      	adds	r2, #1
 800a284:	b2ed      	uxtb	r5, r5
 800a286:	2a05      	cmp	r2, #5
						v = (v << 3) | (t - '0');
 800a288:	ea45 0500 	orr.w	r5, r5, r0
				for (i = 2U; i < (2 + 3); i++) {
 800a28c:	d1f1      	bne.n	800a272 <z_shell_make_argv+0xe6>
					memmove(cmd, cmd + (i - 1),
 800a28e:	1e51      	subs	r1, r2, #1
 800a290:	4441      	add	r1, r8
 800a292:	4640      	mov	r0, r8
 800a294:	9203      	str	r2, [sp, #12]
 800a296:	9102      	str	r1, [sp, #8]
 800a298:	f00b f9e7 	bl	801566a <z_shell_strlen>
 800a29c:	9a03      	ldr	r2, [sp, #12]
 800a29e:	9902      	ldr	r1, [sp, #8]
 800a2a0:	3a02      	subs	r2, #2
 800a2a2:	1a82      	subs	r2, r0, r2
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	f006 ff77 	bl	8011198 <memmove>
		c = *cmd;
 800a2aa:	f898 1001 	ldrb.w	r1, [r8, #1]
					*cmd++ = v;
 800a2ae:	f888 5000 	strb.w	r5, [r8]
		if (c == '\0') {
 800a2b2:	e7a7      	b.n	800a204 <z_shell_make_argv+0x78>
 800a2b4:	b2d2      	uxtb	r2, r2
				if (i > 2) {
 800a2b6:	2a02      	cmp	r2, #2
 800a2b8:	d1e9      	bne.n	800a28e <z_shell_make_argv+0x102>
			if (t == 'x') {
 800a2ba:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
 800a2be:	d12a      	bne.n	800a316 <z_shell_make_argv+0x18a>
				uint8_t v = 0U;
 800a2c0:	2500      	movs	r5, #0
 800a2c2:	2002      	movs	r0, #2
					t = *(cmd + i);
 800a2c4:	f818 2000 	ldrb.w	r2, [r8, r0]
					if (t >= '0' && t <= '9') {
 800a2c8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a2cc:	fa5f fc8c 	uxtb.w	ip, ip
 800a2d0:	f1bc 0f09 	cmp.w	ip, #9
 800a2d4:	d809      	bhi.n	800a2ea <z_shell_make_argv+0x15e>
						v = (v << 4) | (t - '0');
 800a2d6:	012d      	lsls	r5, r5, #4
 800a2d8:	b2ed      	uxtb	r5, r5
 800a2da:	ea4c 0505 	orr.w	r5, ip, r5
				for (i = 2U; i < (2 + 2); i++) {
 800a2de:	2802      	cmp	r0, #2
 800a2e0:	d001      	beq.n	800a2e6 <z_shell_make_argv+0x15a>
 800a2e2:	2204      	movs	r2, #4
 800a2e4:	e7d3      	b.n	800a28e <z_shell_make_argv+0x102>
 800a2e6:	2003      	movs	r0, #3
 800a2e8:	e7ec      	b.n	800a2c4 <z_shell_make_argv+0x138>
					} else if ((t >= 'a') &&
 800a2ea:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
 800a2ee:	f1bc 0f05 	cmp.w	ip, #5
 800a2f2:	d805      	bhi.n	800a300 <z_shell_make_argv+0x174>
						v = (v << 4) | (t - 'a' + 10);
 800a2f4:	012d      	lsls	r5, r5, #4
 800a2f6:	b2ed      	uxtb	r5, r5
 800a2f8:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 800a2fa:	4315      	orrs	r5, r2
 800a2fc:	b2ed      	uxtb	r5, r5
 800a2fe:	e7ee      	b.n	800a2de <z_shell_make_argv+0x152>
					} else if ((t >= 'A') && (t <= 'F')) {
 800a300:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 800a304:	f1bc 0f05 	cmp.w	ip, #5
 800a308:	d803      	bhi.n	800a312 <z_shell_make_argv+0x186>
						v = (v << 4) | (t - 'A' + 10);
 800a30a:	012d      	lsls	r5, r5, #4
 800a30c:	b2ed      	uxtb	r5, r5
 800a30e:	3a37      	subs	r2, #55	; 0x37
 800a310:	e7f3      	b.n	800a2fa <z_shell_make_argv+0x16e>
				if (i > 2) {
 800a312:	2802      	cmp	r0, #2
 800a314:	d102      	bne.n	800a31c <z_shell_make_argv+0x190>
		cmd += 1;
 800a316:	f108 0401 	add.w	r4, r8, #1
		c = *cmd;
 800a31a:	e773      	b.n	800a204 <z_shell_make_argv+0x78>
 800a31c:	2203      	movs	r2, #3
 800a31e:	e7b6      	b.n	800a28e <z_shell_make_argv+0x102>
		if (!quote && isspace((int) c)) {
 800a320:	f81a 3006 	ldrb.w	r3, [sl, r6]
 800a324:	071b      	lsls	r3, r3, #28
 800a326:	f53f af49 	bmi.w	800a1bc <z_shell_make_argv+0x30>
		c = *cmd;
 800a32a:	7866      	ldrb	r6, [r4, #1]
		cmd += 1;
 800a32c:	1c63      	adds	r3, r4, #1
		if (c == '\0') {
 800a32e:	2e00      	cmp	r6, #0
 800a330:	f47f af57 	bne.w	800a1e2 <z_shell_make_argv+0x56>
		cmd += 1;
 800a334:	461c      	mov	r4, r3
 800a336:	e735      	b.n	800a1a4 <z_shell_make_argv+0x18>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
 800a338:	4630      	mov	r0, r6
 800a33a:	b005      	add	sp, #20
 800a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a340:	0801b2e9 	.word	0x0801b2e9

0800a344 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	460b      	mov	r3, r1
 800a348:	4615      	mov	r5, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
 800a34a:	b948      	cbnz	r0, 800a360 <z_shell_cmd_get+0x1c>
	return ((uint8_t *)__shell_root_cmds_end -
 800a34c:	4914      	ldr	r1, [pc, #80]	; (800a3a0 <z_shell_cmd_get+0x5c>)
 800a34e:	4a15      	ldr	r2, [pc, #84]	; (800a3a4 <z_shell_cmd_get+0x60>)
 800a350:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->entry : NULL;
 800a352:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
 800a356:	d205      	bcs.n	800a364 <z_shell_cmd_get+0x20>
 800a358:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			}
		}
	}

	return res;
}
 800a35c:	4628      	mov	r0, r5
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
	if (parent->subcmd) {
 800a360:	6884      	ldr	r4, [r0, #8]
 800a362:	b90c      	cbnz	r4, 800a368 <z_shell_cmd_get+0x24>
	const struct shell_static_entry *res = NULL;
 800a364:	2500      	movs	r5, #0
 800a366:	e7f9      	b.n	800a35c <z_shell_cmd_get+0x18>
	return (entry >= __shell_dynamic_subcmds_start) &&
 800a368:	4a0f      	ldr	r2, [pc, #60]	; (800a3a8 <z_shell_cmd_get+0x64>)
 800a36a:	4294      	cmp	r4, r2
 800a36c:	d30a      	bcc.n	800a384 <z_shell_cmd_get+0x40>
 800a36e:	4a0f      	ldr	r2, [pc, #60]	; (800a3ac <z_shell_cmd_get+0x68>)
 800a370:	4294      	cmp	r4, r2
 800a372:	d207      	bcs.n	800a384 <z_shell_cmd_get+0x40>
			parent->subcmd->dynamic_get(idx, dloc);
 800a374:	4618      	mov	r0, r3
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	4629      	mov	r1, r5
 800a37a:	4790      	blx	r2
			if (dloc->syntax != NULL) {
 800a37c:	682b      	ldr	r3, [r5, #0]
			if (entry_list[idx].syntax != NULL) {
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1ec      	bne.n	800a35c <z_shell_cmd_get+0x18>
 800a382:	e7ef      	b.n	800a364 <z_shell_cmd_get+0x20>
	return (entry >= __shell_subcmds_start) &&
 800a384:	4a0a      	ldr	r2, [pc, #40]	; (800a3b0 <z_shell_cmd_get+0x6c>)
 800a386:	4294      	cmp	r4, r2
 800a388:	d302      	bcc.n	800a390 <z_shell_cmd_get+0x4c>
 800a38a:	4a0a      	ldr	r2, [pc, #40]	; (800a3b4 <z_shell_cmd_get+0x70>)
 800a38c:	4294      	cmp	r4, r2
 800a38e:	d305      	bcc.n	800a39c <z_shell_cmd_get+0x58>
				entry_list = parent->subcmd->entry;
 800a390:	6824      	ldr	r4, [r4, #0]
			if (entry_list[idx].syntax != NULL) {
 800a392:	2214      	movs	r2, #20
 800a394:	4353      	muls	r3, r2
 800a396:	18e5      	adds	r5, r4, r3
 800a398:	58e3      	ldr	r3, [r4, r3]
 800a39a:	e7f0      	b.n	800a37e <z_shell_cmd_get+0x3a>
				idx++;
 800a39c:	3301      	adds	r3, #1
 800a39e:	e7f8      	b.n	800a392 <z_shell_cmd_get+0x4e>
 800a3a0:	0801a48c 	.word	0x0801a48c
 800a3a4:	0801a4bc 	.word	0x0801a4bc
 800a3a8:	0801a4d0 	.word	0x0801a4d0
 800a3ac:	0801a4e8 	.word	0x0801a4e8
 800a3b0:	0801a4bc 	.word	0x0801a4bc
 800a3b4:	0801a4d0 	.word	0x0801a4d0

0800a3b8 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
 800a3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3bc:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
 800a3be:	f00b f954 	bl	801566a <z_shell_strlen>
 800a3c2:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
 800a3c4:	bb37      	cbnz	r7, 800a414 <z_shell_spaces_trim+0x5c>

				break;
			}
		}
	}
}
 800a3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
 800a3ca:	b154      	cbz	r4, 800a3e2 <z_shell_spaces_trim+0x2a>
					memmove(&str[i + 1],
 800a3cc:	b28a      	uxth	r2, r1
 800a3ce:	1ab2      	subs	r2, r6, r2
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	3201      	adds	r2, #1
 800a3d4:	4439      	add	r1, r7
 800a3d6:	4438      	add	r0, r7
 800a3d8:	f006 fede 	bl	8011198 <memmove>
					len -= shift;
 800a3dc:	1b34      	subs	r4, r6, r4
 800a3de:	b2a6      	uxth	r6, r4
					shift = 0U;
 800a3e0:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
 800a3e2:	1e73      	subs	r3, r6, #1
 800a3e4:	429d      	cmp	r5, r3
 800a3e6:	daee      	bge.n	800a3c6 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
 800a3e8:	4628      	mov	r0, r5
			for (uint16_t j = i + 1; j < len; j++) {
 800a3ea:	3501      	adds	r5, #1
		if (isspace((int)str[i])) {
 800a3ec:	5c3b      	ldrb	r3, [r7, r0]
 800a3ee:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a3f2:	071b      	lsls	r3, r3, #28
			for (uint16_t j = i + 1; j < len; j++) {
 800a3f4:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
 800a3f6:	d5f4      	bpl.n	800a3e2 <z_shell_spaces_trim+0x2a>
 800a3f8:	4629      	mov	r1, r5
			for (uint16_t j = i + 1; j < len; j++) {
 800a3fa:	b28b      	uxth	r3, r1
 800a3fc:	429e      	cmp	r6, r3
 800a3fe:	d9f0      	bls.n	800a3e2 <z_shell_spaces_trim+0x2a>
				if (isspace((int)str[j])) {
 800a400:	5c7b      	ldrb	r3, [r7, r1]
 800a402:	f819 8003 	ldrb.w	r8, [r9, r3]
 800a406:	f018 0808 	ands.w	r8, r8, #8
 800a40a:	d0de      	beq.n	800a3ca <z_shell_spaces_trim+0x12>
					shift++;
 800a40c:	3401      	adds	r4, #1
				if (isspace((int)str[j])) {
 800a40e:	3101      	adds	r1, #1
					shift++;
 800a410:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
 800a412:	e7f2      	b.n	800a3fa <z_shell_spaces_trim+0x42>
	for (uint16_t i = 0; i < len - 1; i++) {
 800a414:	2500      	movs	r5, #0
		if (isspace((int)str[i])) {
 800a416:	f8df 9008 	ldr.w	r9, [pc, #8]	; 800a420 <z_shell_spaces_trim+0x68>
	uint16_t shift = 0U;
 800a41a:	462c      	mov	r4, r5
 800a41c:	e7e1      	b.n	800a3e2 <z_shell_spaces_trim+0x2a>
 800a41e:	bf00      	nop
 800a420:	0801b2e9 	.word	0x0801b2e9

0800a424 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 800a426:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
 800a428:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
 800a42c:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
 800a42e:	b953      	cbnz	r3, 800a446 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 800a430:	68ab      	ldr	r3, [r5, #8]
 800a432:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a434:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 800a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
 800a438:	3a01      	subs	r2, #1
 800a43a:	b292      	uxth	r2, r2
 800a43c:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
 800a43e:	b92a      	cbnz	r2, 800a44c <z_shell_cmd_trim+0x28>
			buff[0] = '\0';
 800a440:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
 800a444:	e7f4      	b.n	800a430 <z_shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
 800a446:	4e12      	ldr	r6, [pc, #72]	; (800a490 <z_shell_cmd_trim+0x6c>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 800a448:	f104 0042 	add.w	r0, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
 800a44c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800a44e:	1883      	adds	r3, r0, r2
 800a450:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a454:	5cf3      	ldrb	r3, [r6, r3]
 800a456:	f013 0308 	ands.w	r3, r3, #8
 800a45a:	d1ed      	bne.n	800a438 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
 800a45c:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
 800a45e:	b29a      	uxth	r2, r3
 800a460:	fa10 f183 	uxtah	r1, r0, r3
 800a464:	f810 c002 	ldrb.w	ip, [r0, r2]
 800a468:	f816 c00c 	ldrb.w	ip, [r6, ip]
 800a46c:	f01c 0f08 	tst.w	ip, #8
 800a470:	461f      	mov	r7, r3
 800a472:	f103 0301 	add.w	r3, r3, #1
 800a476:	d1f2      	bne.n	800a45e <z_shell_cmd_trim+0x3a>
 800a478:	b2bf      	uxth	r7, r7
	if (--i > 0) {
 800a47a:	2f00      	cmp	r7, #0
 800a47c:	d0d8      	beq.n	800a430 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 800a47e:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
 800a480:	1c73      	adds	r3, r6, #1
 800a482:	1a9a      	subs	r2, r3, r2
		*buff_len = *buff_len - i;
 800a484:	1bf6      	subs	r6, r6, r7
 800a486:	f006 fe87 	bl	8011198 <memmove>
 800a48a:	87a6      	strh	r6, [r4, #60]	; 0x3c
 800a48c:	e7d0      	b.n	800a430 <z_shell_cmd_trim+0xc>
 800a48e:	bf00      	nop
 800a490:	0801b2e9 	.word	0x0801b2e9

0800a494 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
 800a494:	6883      	ldr	r3, [r0, #8]
 800a496:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 800a49a:	069b      	lsls	r3, r3, #26
 800a49c:	d503      	bpl.n	800a4a6 <z_clear_eos+0x12>
 800a49e:	4902      	ldr	r1, [pc, #8]	; (800a4a8 <z_clear_eos+0x14>)
 800a4a0:	6940      	ldr	r0, [r0, #20]
 800a4a2:	f00b b9f9 	b.w	8015898 <z_shell_raw_fprintf>
}
 800a4a6:	4770      	bx	lr
 800a4a8:	0801a500 	.word	0x0801a500

0800a4ac <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 800a4ac:	4901      	ldr	r1, [pc, #4]	; (800a4b4 <z_cursor_next_line_move.isra.0+0x8>)
 800a4ae:	f00b b9f3 	b.w	8015898 <z_shell_raw_fprintf>
 800a4b2:	bf00      	nop
 800a4b4:	0801bd34 	.word	0x0801bd34

0800a4b8 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
 800a4b8:	1e0a      	subs	r2, r1, #0
 800a4ba:	dc0d      	bgt.n	800a4d8 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
 800a4bc:	d00e      	beq.n	800a4dc <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
 800a4be:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
 800a4c0:	6881      	ldr	r1, [r0, #8]
 800a4c2:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
 800a4c6:	0689      	lsls	r1, r1, #26
 800a4c8:	d508      	bpl.n	800a4dc <z_shell_op_cursor_vert_move+0x24>
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	4904      	ldr	r1, [pc, #16]	; (800a4e0 <z_shell_op_cursor_vert_move+0x28>)
 800a4ce:	6940      	ldr	r0, [r0, #20]
 800a4d0:	bfb8      	it	lt
 800a4d2:	4252      	neglt	r2, r2
 800a4d4:	f00b b9e0 	b.w	8015898 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
 800a4d8:	2341      	movs	r3, #65	; 0x41
 800a4da:	e7f1      	b.n	800a4c0 <z_shell_op_cursor_vert_move+0x8>
}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	0801c521 	.word	0x0801c521

0800a4e4 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
 800a4e4:	1e0a      	subs	r2, r1, #0
 800a4e6:	dc0d      	bgt.n	800a504 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
 800a4e8:	d00e      	beq.n	800a508 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
 800a4ea:	2344      	movs	r3, #68	; 0x44
 800a4ec:	6881      	ldr	r1, [r0, #8]
 800a4ee:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
 800a4f2:	0689      	lsls	r1, r1, #26
 800a4f4:	d508      	bpl.n	800a508 <z_shell_op_cursor_horiz_move+0x24>
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	4904      	ldr	r1, [pc, #16]	; (800a50c <z_shell_op_cursor_horiz_move+0x28>)
 800a4fa:	6940      	ldr	r0, [r0, #20]
 800a4fc:	bfb8      	it	lt
 800a4fe:	4252      	neglt	r2, r2
 800a500:	f00b b9ca 	b.w	8015898 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
 800a504:	2343      	movs	r3, #67	; 0x43
 800a506:	e7f1      	b.n	800a4ec <z_shell_op_cursor_horiz_move+0x8>
}
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	0801c521 	.word	0x0801c521

0800a510 <z_shell_op_cursor_word_move>:

	return ret;
}

void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
 800a510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int16_t shift;
	int16_t sign;

	if (val < 0) {
 800a514:	1e0c      	subs	r4, r1, #0
{
 800a516:	4606      	mov	r6, r0
	if (val < 0) {
 800a518:	da31      	bge.n	800a57e <z_shell_op_cursor_word_move+0x6e>
		val = -val;
 800a51a:	4264      	negs	r4, r4
 800a51c:	b224      	sxth	r4, r4
		sign = -1;
 800a51e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		if (isalnum((int)str[idx]) != 0) {
 800a522:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800a584 <z_shell_op_cursor_word_move+0x74>
 800a526:	b2a4      	uxth	r4, r4
 800a528:	b2af      	uxth	r7, r5
 800a52a:	e012      	b.n	800a552 <z_shell_op_cursor_word_move+0x42>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
 800a52c:	68b3      	ldr	r3, [r6, #8]
 800a52e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800a530:	f103 0c42 	add.w	ip, r3, #66	; 0x42
 800a534:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a536:	4611      	mov	r1, r2
	bool found = false;
 800a538:	2000      	movs	r0, #0
		if (((idx == 0U) && (sign < 0)) ||
 800a53a:	b971      	cbnz	r1, 800a55a <z_shell_op_cursor_word_move+0x4a>
 800a53c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a540:	d000      	beq.n	800a544 <z_shell_op_cursor_word_move+0x34>
 800a542:	b973      	cbnz	r3, 800a562 <z_shell_op_cursor_word_move+0x52>
		idx = pos + ret * sign;
 800a544:	1a89      	subs	r1, r1, r2
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
 800a546:	b209      	sxth	r1, r1
 800a548:	4630      	mov	r0, r6
 800a54a:	f00b fa12 	bl	8015972 <z_shell_op_cursor_move>
 800a54e:	3c01      	subs	r4, #1
 800a550:	b2a4      	uxth	r4, r4
	while (val--) {
 800a552:	2c00      	cmp	r4, #0
 800a554:	d1ea      	bne.n	800a52c <z_shell_op_cursor_word_move+0x1c>
	}
}
 800a556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (((idx == 0U) && (sign < 0)) ||
 800a55a:	428b      	cmp	r3, r1
 800a55c:	d101      	bne.n	800a562 <z_shell_op_cursor_word_move+0x52>
		    ((idx == len) && (sign > 0))) {
 800a55e:	2d01      	cmp	r5, #1
 800a560:	d0f0      	beq.n	800a544 <z_shell_op_cursor_word_move+0x34>
		if (isalnum((int)str[idx]) != 0) {
 800a562:	f81c e001 	ldrb.w	lr, [ip, r1]
 800a566:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800a56a:	f01e 0f07 	tst.w	lr, #7
 800a56e:	d104      	bne.n	800a57a <z_shell_op_cursor_word_move+0x6a>
			if (found) {
 800a570:	2800      	cmp	r0, #0
 800a572:	d1e7      	bne.n	800a544 <z_shell_op_cursor_word_move+0x34>
	while (1) {
 800a574:	4439      	add	r1, r7
 800a576:	b289      	uxth	r1, r1
		idx = pos + ret * sign;
 800a578:	e7df      	b.n	800a53a <z_shell_op_cursor_word_move+0x2a>
			found = true;
 800a57a:	2001      	movs	r0, #1
 800a57c:	e7fa      	b.n	800a574 <z_shell_op_cursor_word_move+0x64>
		sign = 1;
 800a57e:	2501      	movs	r5, #1
 800a580:	e7cf      	b.n	800a522 <z_shell_op_cursor_word_move+0x12>
 800a582:	bf00      	nop
 800a584:	0801b2e9 	.word	0x0801b2e9

0800a588 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
 800a588:	6882      	ldr	r2, [r0, #8]
 800a58a:	4902      	ldr	r1, [pc, #8]	; (800a594 <z_shell_print_cmd+0xc>)
 800a58c:	6940      	ldr	r0, [r0, #20]
 800a58e:	3242      	adds	r2, #66	; 0x42
 800a590:	f00b b982 	b.w	8015898 <z_shell_raw_fprintf>
 800a594:	0801bf55 	.word	0x0801bf55

0800a598 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
 800a598:	2908      	cmp	r1, #8
{
 800a59a:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
 800a59c:	d817      	bhi.n	800a5ce <z_shell_vt100_color_set+0x36>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
 800a59e:	6883      	ldr	r3, [r0, #8]
 800a5a0:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 800a5a4:	4291      	cmp	r1, r2
 800a5a6:	d012      	beq.n	800a5ce <z_shell_vt100_color_set+0x36>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
 800a5a8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
 800a5ac:	6883      	ldr	r3, [r0, #8]
 800a5ae:	2a08      	cmp	r2, #8
 800a5b0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800a5b4:	d005      	beq.n	800a5c2 <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
 800a5b6:	0699      	lsls	r1, r3, #26
 800a5b8:	d509      	bpl.n	800a5ce <z_shell_vt100_color_set+0x36>
 800a5ba:	4905      	ldr	r1, [pc, #20]	; (800a5d0 <z_shell_vt100_color_set+0x38>)
 800a5bc:	6940      	ldr	r0, [r0, #20]
 800a5be:	f00b b96b 	b.w	8015898 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
 800a5c2:	069b      	lsls	r3, r3, #26
 800a5c4:	d503      	bpl.n	800a5ce <z_shell_vt100_color_set+0x36>
 800a5c6:	4903      	ldr	r1, [pc, #12]	; (800a5d4 <z_shell_vt100_color_set+0x3c>)
 800a5c8:	6940      	ldr	r0, [r0, #20]
 800a5ca:	f00b b965 	b.w	8015898 <z_shell_raw_fprintf>
	}
}
 800a5ce:	4770      	bx	lr
 800a5d0:	0801c528 	.word	0x0801c528
 800a5d4:	0801a505 	.word	0x0801a505

0800a5d8 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
 800a5dc:	7809      	ldrb	r1, [r1, #0]
{
 800a5de:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
 800a5e0:	f7ff ffda 	bl	800a598 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
 800a5e4:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 800a5e6:	2a07      	cmp	r2, #7
 800a5e8:	d811      	bhi.n	800a60e <z_shell_vt100_colors_restore+0x36>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 800a5ea:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 800a5ec:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800a5f0:	4291      	cmp	r1, r2
 800a5f2:	d00c      	beq.n	800a60e <z_shell_vt100_colors_restore+0x36>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
 800a5f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800a5f8:	68a3      	ldr	r3, [r4, #8]
 800a5fa:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
 800a5fe:	069b      	lsls	r3, r3, #26
 800a600:	d505      	bpl.n	800a60e <z_shell_vt100_colors_restore+0x36>
 800a602:	6960      	ldr	r0, [r4, #20]
 800a604:	4902      	ldr	r1, [pc, #8]	; (800a610 <z_shell_vt100_colors_restore+0x38>)
}
 800a606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
 800a60a:	f00b b945 	b.w	8015898 <z_shell_raw_fprintf>
}
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	0801c531 	.word	0x0801c531

0800a614 <z_shell_op_word_remove>:
{
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 800a616:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
 800a618:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 800a61a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
{
 800a61c:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 800a61e:	2a00      	cmp	r2, #0
 800a620:	d050      	beq.n	800a6c4 <z_shell_op_word_remove+0xb0>
 800a622:	2900      	cmp	r1, #0
 800a624:	d04e      	beq.n	800a6c4 <z_shell_op_word_remove+0xb0>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 800a626:	3141      	adds	r1, #65	; 0x41
	char *str_start = &shell->ctx->cmd_buff[0];
 800a628:	f103 0542 	add.w	r5, r3, #66	; 0x42
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 800a62c:	440b      	add	r3, r1
	char *str_start = &shell->ctx->cmd_buff[0];
 800a62e:	4618      	mov	r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 800a630:	42a8      	cmp	r0, r5
 800a632:	d306      	bcc.n	800a642 <z_shell_op_word_remove+0x2e>
 800a634:	4601      	mov	r1, r0
 800a636:	f811 6901 	ldrb.w	r6, [r1], #-1
 800a63a:	2e20      	cmp	r6, #32
 800a63c:	d039      	beq.n	800a6b2 <z_shell_op_word_remove+0x9e>
	while ((str >= str_start) && (*str != ' ')) {
 800a63e:	42a8      	cmp	r0, r5
 800a640:	d239      	bcs.n	800a6b6 <z_shell_op_word_remove+0xa2>
 800a642:	b286      	uxth	r6, r0
 800a644:	b29d      	uxth	r5, r3
 800a646:	1bab      	subs	r3, r5, r6
 800a648:	b29b      	uxth	r3, r3
	memmove(str + 1, str + 1 + chars_to_delete,
 800a64a:	1c59      	adds	r1, r3, #1
 800a64c:	1c47      	adds	r7, r0, #1
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	4401      	add	r1, r0
 800a652:	4638      	mov	r0, r7
 800a654:	f006 fda0 	bl	8011198 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
 800a658:	68a2      	ldr	r2, [r4, #8]
 800a65a:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 800a65c:	1b71      	subs	r1, r6, r5
 800a65e:	fa13 f381 	uxtah	r3, r3, r1
 800a662:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a668:	4413      	add	r3, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
 800a670:	b209      	sxth	r1, r1
 800a672:	4620      	mov	r0, r4
 800a674:	f00b f97d 	bl	8015972 <z_shell_op_cursor_move>
 800a678:	68a3      	ldr	r3, [r4, #8]
 800a67a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
 800a67e:	069a      	lsls	r2, r3, #26
 800a680:	d503      	bpl.n	800a68a <z_shell_op_word_remove+0x76>
 800a682:	4911      	ldr	r1, [pc, #68]	; (800a6c8 <z_shell_op_word_remove+0xb4>)
 800a684:	6960      	ldr	r0, [r4, #20]
 800a686:	f00b f907 	bl	8015898 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
 800a68a:	463b      	mov	r3, r7
 800a68c:	4a0f      	ldr	r2, [pc, #60]	; (800a6cc <z_shell_op_word_remove+0xb8>)
 800a68e:	2108      	movs	r1, #8
 800a690:	4620      	mov	r0, r4
 800a692:	f00b fa40 	bl	8015b16 <z_shell_fprintf>
	z_clear_eos(shell);
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff fefc 	bl	800a494 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 800a69c:	68a3      	ldr	r3, [r4, #8]
 800a69e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
 800a6a2:	069b      	lsls	r3, r3, #26
 800a6a4:	d50e      	bpl.n	800a6c4 <z_shell_op_word_remove+0xb0>
 800a6a6:	6960      	ldr	r0, [r4, #20]
 800a6a8:	4909      	ldr	r1, [pc, #36]	; (800a6d0 <z_shell_op_word_remove+0xbc>)
}
 800a6aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6ae:	f00b b8f3 	b.w	8015898 <z_shell_raw_fprintf>
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	e7bc      	b.n	800a630 <z_shell_op_word_remove+0x1c>
 800a6b6:	4601      	mov	r1, r0
	while ((str >= str_start) && (*str != ' ')) {
 800a6b8:	f811 6901 	ldrb.w	r6, [r1], #-1
 800a6bc:	2e20      	cmp	r6, #32
 800a6be:	d0c0      	beq.n	800a642 <z_shell_op_word_remove+0x2e>
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	e7bc      	b.n	800a63e <z_shell_op_word_remove+0x2a>
}
 800a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0801a50a 	.word	0x0801a50a
 800a6cc:	0801bf55 	.word	0x0801bf55
 800a6d0:	0801a50e 	.word	0x0801a50e

0800a6d4 <reprint_from_cursor>:
{
 800a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d8:	4604      	mov	r4, r0
 800a6da:	460d      	mov	r5, r1
	if (data_removed) {
 800a6dc:	4617      	mov	r7, r2
 800a6de:	b10a      	cbz	r2, 800a6e4 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
 800a6e0:	f7ff fed8 	bl	800a494 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
 800a6e4:	68a3      	ldr	r3, [r4, #8]
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 800a6e6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800a6e8:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 800a6ec:	3242      	adds	r2, #66	; 0x42
 800a6ee:	4413      	add	r3, r2
	if (z_flag_obscure_get(shell)) {
 800a6f0:	074a      	lsls	r2, r1, #29
 800a6f2:	d51f      	bpl.n	800a734 <reprint_from_cursor+0x60>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f5 fd63 	bl	80001c0 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 800a6fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800a744 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 800a6fe:	4606      	mov	r6, r0
		while (len--) {
 800a700:	b996      	cbnz	r6, 800a728 <reprint_from_cursor+0x54>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 800a702:	68a3      	ldr	r3, [r4, #8]
 800a704:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a706:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
 800a708:	4620      	mov	r0, r4
 800a70a:	f00b f8d2 	bl	80158b2 <full_line_cmd>
 800a70e:	b120      	cbz	r0, 800a71a <reprint_from_cursor+0x46>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 800a710:	b107      	cbz	r7, 800a714 <reprint_from_cursor+0x40>
 800a712:	b115      	cbz	r5, 800a71a <reprint_from_cursor+0x46>
			z_cursor_next_line_move(shell);
 800a714:	6960      	ldr	r0, [r4, #20]
 800a716:	f7ff fec9 	bl	800a4ac <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
 800a71a:	4269      	negs	r1, r5
 800a71c:	4620      	mov	r0, r4
 800a71e:	b209      	sxth	r1, r1
}
 800a720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
 800a724:	f00b b925 	b.w	8015972 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 800a728:	6960      	ldr	r0, [r4, #20]
 800a72a:	4641      	mov	r1, r8
 800a72c:	f00b f8b4 	bl	8015898 <z_shell_raw_fprintf>
 800a730:	3e01      	subs	r6, #1
 800a732:	e7e5      	b.n	800a700 <reprint_from_cursor+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
 800a734:	4a02      	ldr	r2, [pc, #8]	; (800a740 <reprint_from_cursor+0x6c>)
 800a736:	2108      	movs	r1, #8
 800a738:	4620      	mov	r0, r4
 800a73a:	f00b f9ec 	bl	8015b16 <z_shell_fprintf>
 800a73e:	e7e0      	b.n	800a702 <reprint_from_cursor+0x2e>
 800a740:	0801bf55 	.word	0x0801bf55
 800a744:	0801ce55 	.word	0x0801ce55

0800a748 <z_shell_op_char_insert>:
{
 800a748:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
 800a74a:	6883      	ldr	r3, [r0, #8]
 800a74c:	f88d 1007 	strb.w	r1, [sp, #7]
 800a750:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 800a754:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
 800a756:	07d0      	lsls	r0, r2, #31
 800a758:	d522      	bpl.n	800a7a0 <z_shell_op_char_insert+0x58>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
 800a75a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
 800a75c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a75e:	428a      	cmp	r2, r1
 800a760:	d01e      	beq.n	800a7a0 <z_shell_op_char_insert+0x58>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 800a762:	1c48      	adds	r0, r1, #1
 800a764:	87d8      	strh	r0, [r3, #62]	; 0x3e
 800a766:	440b      	add	r3, r1
		char_replace(shell, data);
 800a768:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 800a76c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
 800a770:	68a3      	ldr	r3, [r4, #8]
 800a772:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
 800a776:	0789      	lsls	r1, r1, #30
 800a778:	d510      	bpl.n	800a79c <z_shell_op_char_insert+0x54>
	return sh->ctx->cfg.flags.obscure == 1;
 800a77a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 800a77e:	6960      	ldr	r0, [r4, #20]
 800a780:	490b      	ldr	r1, [pc, #44]	; (800a7b0 <z_shell_op_char_insert+0x68>)
		data = '*';
 800a782:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 800a786:	bf18      	it	ne
 800a788:	222a      	movne	r2, #42	; 0x2a
 800a78a:	f00b f885 	bl	8015898 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
 800a78e:	4620      	mov	r0, r4
 800a790:	f00b f8a3 	bl	80158da <z_shell_cursor_in_empty_line>
 800a794:	b110      	cbz	r0, 800a79c <z_shell_op_char_insert+0x54>
		z_cursor_next_line_move(shell);
 800a796:	6960      	ldr	r0, [r4, #20]
 800a798:	f7ff fe88 	bl	800a4ac <z_cursor_next_line_move.isra.0>
}
 800a79c:	b002      	add	sp, #8
 800a79e:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f10d 0107 	add.w	r1, sp, #7
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f00b f9c2 	bl	8015b30 <data_insert>
}
 800a7ac:	e7f6      	b.n	800a79c <z_shell_op_char_insert+0x54>
 800a7ae:	bf00      	nop
 800a7b0:	0801c525 	.word	0x0801c525

0800a7b4 <z_shell_print_prompt_and_cmd>:
{
 800a7b4:	b510      	push	{r4, lr}
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 800a7b6:	6883      	ldr	r3, [r0, #8]
 800a7b8:	4a09      	ldr	r2, [pc, #36]	; (800a7e0 <z_shell_print_prompt_and_cmd+0x2c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
{
 800a7bc:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 800a7be:	2102      	movs	r1, #2
 800a7c0:	f00b f9a9 	bl	8015b16 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
 800a7c4:	68a3      	ldr	r3, [r4, #8]
 800a7c6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
 800a7ca:	079b      	lsls	r3, r3, #30
 800a7cc:	d507      	bpl.n	800a7de <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff feda 	bl	800a588 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
 800a7d4:	4620      	mov	r0, r4
}
 800a7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
 800a7da:	f00b b8a7 	b.w	801592c <z_shell_op_cursor_position_synchronize>
}
 800a7de:	bd10      	pop	{r4, pc}
 800a7e0:	0801bf55 	.word	0x0801bf55

0800a7e4 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 800a7e4:	4901      	ldr	r1, [pc, #4]	; (800a7ec <z_cursor_next_line_move.isra.0+0x8>)
 800a7e6:	f00b bb59 	b.w	8015e9c <z_shell_raw_fprintf>
 800a7ea:	bf00      	nop
 800a7ec:	0801bd34 	.word	0x0801bd34

0800a7f0 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
 800a7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
 800a7f8:	460e      	mov	r6, r1
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	d065      	beq.n	800a8ca <formatted_text_print.constprop.0+0xda>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
 800a7fe:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800a8d0 <formatted_text_print.constprop.0+0xe0>
 800a802:	2400      	movs	r4, #0
 800a804:	5d33      	ldrb	r3, [r6, r4]
 800a806:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a80a:	071a      	lsls	r2, r3, #28
 800a80c:	d41e      	bmi.n	800a84c <formatted_text_print.constprop.0+0x5c>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800a80e:	4630      	mov	r0, r6
 800a810:	f7f5 fcd6 	bl	80001c0 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 800a814:	68ab      	ldr	r3, [r5, #8]
 800a816:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
 800a818:	b280      	uxth	r0, r0
 800a81a:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 800a81c:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
 800a820:	4298      	cmp	r0, r3
 800a822:	eb06 0a04 	add.w	sl, r6, r4
 800a826:	d913      	bls.n	800a850 <formatted_text_print.constprop.0+0x60>
 800a828:	4651      	mov	r1, sl
		size_t idx = 0;
 800a82a:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
 800a82c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a830:	f819 c000 	ldrb.w	ip, [r9, r0]
 800a834:	f01c 0f08 	tst.w	ip, #8
 800a838:	d002      	beq.n	800a840 <formatted_text_print.constprop.0+0x50>
				length = idx;
				if (*(str + offset + idx) == '\n') {
 800a83a:	280a      	cmp	r0, #10
 800a83c:	d02d      	beq.n	800a89a <formatted_text_print.constprop.0+0xaa>
 800a83e:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
 800a840:	eb08 0007 	add.w	r0, r8, r7
 800a844:	4282      	cmp	r2, r0
 800a846:	d927      	bls.n	800a898 <formatted_text_print.constprop.0+0xa8>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
 800a848:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
 800a84a:	e7ef      	b.n	800a82c <formatted_text_print.constprop.0+0x3c>
		++offset;
 800a84c:	3401      	adds	r4, #1
 800a84e:	e7d9      	b.n	800a804 <formatted_text_print.constprop.0+0x14>
 800a850:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
 800a852:	2700      	movs	r7, #0
 800a854:	42b8      	cmp	r0, r7
 800a856:	d014      	beq.n	800a882 <formatted_text_print.constprop.0+0x92>
				if (*(str + offset + idx) == '\n') {
 800a858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a85c:	2a0a      	cmp	r2, #10
 800a85e:	d119      	bne.n	800a894 <formatted_text_print.constprop.0+0xa4>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 800a860:	6968      	ldr	r0, [r5, #20]
 800a862:	f00a fed8 	bl	8015616 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
 800a866:	4651      	mov	r1, sl
 800a868:	463a      	mov	r2, r7
 800a86a:	4628      	mov	r0, r5
 800a86c:	f00b f8e8 	bl	8015a40 <z_shell_write>
					z_cursor_next_line_move(shell);
 800a870:	6968      	ldr	r0, [r5, #20]
 800a872:	f7ff ffb7 	bl	800a7e4 <z_cursor_next_line_move.isra.0>
 800a876:	3401      	adds	r4, #1
					z_shell_op_cursor_horiz_move(shell,
 800a878:	4641      	mov	r1, r8
 800a87a:	4628      	mov	r0, r5
					offset += idx + 1;
 800a87c:	443c      	add	r4, r7
					z_shell_op_cursor_horiz_move(shell,
 800a87e:	f7ff fe31 	bl	800a4e4 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
 800a882:	6968      	ldr	r0, [r5, #20]
 800a884:	1931      	adds	r1, r6, r4
 800a886:	f00b fb09 	bl	8015e9c <z_shell_raw_fprintf>

		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
 800a88a:	6968      	ldr	r0, [r5, #20]
}
 800a88c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
 800a890:	f7ff bfa8 	b.w	800a7e4 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
 800a894:	3701      	adds	r7, #1
 800a896:	e7dd      	b.n	800a854 <formatted_text_print.constprop.0+0x64>
 800a898:	461f      	mov	r7, r3
 800a89a:	6968      	ldr	r0, [r5, #20]
 800a89c:	f00a febb 	bl	8015616 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
 800a8a0:	463a      	mov	r2, r7
 800a8a2:	4651      	mov	r1, sl
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f00b f8cb 	bl	8015a40 <z_shell_write>
		offset += length;
 800a8aa:	443c      	add	r4, r7
		while (isspace((int) (*(str + offset)))) {
 800a8ac:	5d33      	ldrb	r3, [r6, r4]
 800a8ae:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a8b2:	071b      	lsls	r3, r3, #28
 800a8b4:	d407      	bmi.n	800a8c6 <formatted_text_print.constprop.0+0xd6>
		z_cursor_next_line_move(shell);
 800a8b6:	6968      	ldr	r0, [r5, #20]
 800a8b8:	f7ff ff94 	bl	800a7e4 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
 800a8bc:	4641      	mov	r1, r8
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f7ff fe10 	bl	800a4e4 <z_shell_op_cursor_horiz_move>
	while (true) {
 800a8c4:	e7a3      	b.n	800a80e <formatted_text_print.constprop.0+0x1e>
			++offset;
 800a8c6:	3401      	adds	r4, #1
 800a8c8:	e7f0      	b.n	800a8ac <formatted_text_print.constprop.0+0xbc>
}
 800a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ce:	bf00      	nop
 800a8d0:	0801b2e9 	.word	0x0801b2e9

0800a8d4 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	b08b      	sub	sp, #44	; 0x2c
 800a8da:	4604      	mov	r4, r0
 800a8dc:	9102      	str	r1, [sp, #8]
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
 800a8de:	2100      	movs	r1, #0
{
 800a8e0:	4616      	mov	r6, r2
	uint16_t longest = 0U;
 800a8e2:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 800a8e4:	9802      	ldr	r0, [sp, #8]
 800a8e6:	aa05      	add	r2, sp, #20
 800a8e8:	f101 0801 	add.w	r8, r1, #1
 800a8ec:	f7ff fd2a 	bl	800a344 <z_shell_cmd_get>
 800a8f0:	b998      	cbnz	r0, 800a91a <z_shell_help_subcmd_print+0x46>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
 800a8f2:	b17d      	cbz	r5, 800a914 <z_shell_help_subcmd_print+0x40>
		return;
	}

	if (description != NULL) {
 800a8f4:	b126      	cbz	r6, 800a900 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	2108      	movs	r1, #8
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f00b f90b 	bl	8015b16 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 800a900:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800a9b0 <z_shell_help_subcmd_print+0xdc>
 800a904:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 800a906:	9802      	ldr	r0, [sp, #8]
 800a908:	aa05      	add	r2, sp, #20
 800a90a:	f101 0b01 	add.w	fp, r1, #1
 800a90e:	f7ff fd19 	bl	800a344 <z_shell_cmd_get>
 800a912:	b960      	cbnz	r0, 800a92e <z_shell_help_subcmd_print+0x5a>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
 800a914:	b00b      	add	sp, #44	; 0x2c
 800a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
 800a91a:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800a91c:	b110      	cbz	r0, 800a924 <z_shell_help_subcmd_print+0x50>
 800a91e:	f7f5 fc4f 	bl	80001c0 <strlen>
 800a922:	b280      	uxth	r0, r0
 800a924:	4285      	cmp	r5, r0
 800a926:	bf38      	it	cc
 800a928:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 800a92a:	4641      	mov	r1, r8
 800a92c:	e7da      	b.n	800a8e4 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
 800a92e:	e9d0 7a00 	ldrd	r7, sl, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 800a932:	4640      	mov	r0, r8
 800a934:	f7f5 fc44 	bl	80001c0 <strlen>
 800a938:	4681      	mov	r9, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
 800a93a:	b1b7      	cbz	r7, 800a96a <z_shell_help_subcmd_print+0x96>
 800a93c:	783a      	ldrb	r2, [r7, #0]
 800a93e:	b1a2      	cbz	r2, 800a96a <z_shell_help_subcmd_print+0x96>
		uint16_t tmp = item_name_width - strlen(item_name);
 800a940:	4638      	mov	r0, r7
 800a942:	f7f5 fc3d 	bl	80001c0 <strlen>
		char space = ' ';
 800a946:	2220      	movs	r2, #32
		uint16_t tmp = item_name_width - strlen(item_name);
 800a948:	1a2e      	subs	r6, r5, r0
		char space = ' ';
 800a94a:	f88d 2013 	strb.w	r2, [sp, #19]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 800a94e:	9700      	str	r7, [sp, #0]
 800a950:	4a15      	ldr	r2, [pc, #84]	; (800a9a8 <z_shell_help_subcmd_print+0xd4>)
 800a952:	4643      	mov	r3, r8
 800a954:	2108      	movs	r1, #8
 800a956:	4620      	mov	r0, r4
		uint16_t tmp = item_name_width - strlen(item_name);
 800a958:	b2b6      	uxth	r6, r6
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 800a95a:	f00b f8dc 	bl	8015b16 <z_shell_fprintf>
		if (item_help) {
 800a95e:	f1ba 0f00 	cmp.w	sl, #0
 800a962:	d11f      	bne.n	800a9a4 <z_shell_help_subcmd_print+0xd0>
		z_cursor_next_line_move(shell);
 800a964:	6960      	ldr	r0, [r4, #20]
 800a966:	f7ff ff3d 	bl	800a7e4 <z_cursor_next_line_move.isra.0>
		return;
 800a96a:	4659      	mov	r1, fp
 800a96c:	e7cb      	b.n	800a906 <z_shell_help_subcmd_print+0x32>
				z_shell_write(shell, &space, 1);
 800a96e:	2201      	movs	r2, #1
 800a970:	f10d 0113 	add.w	r1, sp, #19
 800a974:	4620      	mov	r0, r4
 800a976:	9303      	str	r3, [sp, #12]
 800a978:	f00b f862 	bl	8015a40 <z_shell_write>
			for (uint16_t i = 0; i < tmp; i++) {
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	3301      	adds	r3, #1
 800a980:	b29a      	uxth	r2, r3
 800a982:	4296      	cmp	r6, r2
 800a984:	d8f3      	bhi.n	800a96e <z_shell_help_subcmd_print+0x9a>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 800a986:	4620      	mov	r0, r4
 800a988:	4a08      	ldr	r2, [pc, #32]	; (800a9ac <z_shell_help_subcmd_print+0xd8>)
 800a98a:	4643      	mov	r3, r8
 800a98c:	2108      	movs	r1, #8
 800a98e:	f00b f8c2 	bl	8015b16 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 800a992:	1c6a      	adds	r2, r5, #1
 800a994:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	formatted_text_print(shell, item_help, offset, false);
 800a998:	b292      	uxth	r2, r2
 800a99a:	4651      	mov	r1, sl
 800a99c:	4620      	mov	r0, r4
 800a99e:	f7ff ff27 	bl	800a7f0 <formatted_text_print.constprop.0>
 800a9a2:	e7e2      	b.n	800a96a <z_shell_help_subcmd_print+0x96>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e7eb      	b.n	800a980 <z_shell_help_subcmd_print+0xac>
 800a9a8:	0801c341 	.word	0x0801c341
 800a9ac:	0801c53a 	.word	0x0801c53a
 800a9b0:	0801c54c 	.word	0x0801c54c

0800a9b4 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
 800a9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9b6:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 800a9b8:	6808      	ldr	r0, [r1, #0]
{
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	b1b8      	cbz	r0, 800a9ee <z_shell_help_cmd_print+0x3a>
 800a9be:	f7f5 fbff 	bl	80001c0 <strlen>
 800a9c2:	b284      	uxth	r4, r0
 800a9c4:	4f0b      	ldr	r7, [pc, #44]	; (800a9f4 <z_shell_help_cmd_print+0x40>)
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	f7f5 fbfa 	bl	80001c0 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 800a9cc:	9700      	str	r7, [sp, #0]
 800a9ce:	682b      	ldr	r3, [r5, #0]
 800a9d0:	4a09      	ldr	r2, [pc, #36]	; (800a9f8 <z_shell_help_cmd_print+0x44>)
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 800a9d2:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 800a9d4:	2108      	movs	r1, #8
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f00b f89d 	bl	8015b16 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 800a9dc:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
 800a9de:	6869      	ldr	r1, [r5, #4]
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	4630      	mov	r0, r6
}
 800a9e4:	b003      	add	sp, #12
 800a9e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
 800a9ea:	f7ff bf01 	b.w	800a7f0 <formatted_text_print.constprop.0>
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	e7e8      	b.n	800a9c4 <z_shell_help_cmd_print+0x10>
 800a9f2:	bf00      	nop
 800a9f4:	0801c548 	.word	0x0801c548
 800a9f8:	0801c341 	.word	0x0801c341

0800a9fc <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
 800a9fc:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 800a9fe:	4907      	ldr	r1, [pc, #28]	; (800aa1c <z_shell_help_request+0x20>)
{
 800aa00:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 800aa02:	f7f5 fc51 	bl	80002a8 <strcmp>
 800aa06:	b138      	cbz	r0, 800aa18 <z_shell_help_request+0x1c>
 800aa08:	4905      	ldr	r1, [pc, #20]	; (800aa20 <z_shell_help_request+0x24>)
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f7f5 fc4c 	bl	80002a8 <strcmp>
 800aa10:	fab0 f080 	clz	r0, r0
 800aa14:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
 800aa16:	bd10      	pop	{r4, pc}
		return true;
 800aa18:	2001      	movs	r0, #1
 800aa1a:	e7fc      	b.n	800aa16 <z_shell_help_request+0x1a>
 800aa1c:	0801c53e 	.word	0x0801c53e
 800aa20:	0801c541 	.word	0x0801c541

0800aa24 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
 800aa24:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
 800aa26:	6883      	ldr	r3, [r0, #8]
 800aa28:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 800aa2c:	069b      	lsls	r3, r3, #26
{
 800aa2e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 800aa30:	d503      	bpl.n	800aa3a <cmd_resize_default+0x16>
 800aa32:	4906      	ldr	r1, [pc, #24]	; (800aa4c <cmd_resize_default+0x28>)
 800aa34:	6940      	ldr	r0, [r0, #20]
 800aa36:	f00b fa42 	bl	8015ebe <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	2250      	movs	r2, #80	; 0x50
 800aa3e:	855a      	strh	r2, [r3, #42]	; 0x2a
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 800aa40:	68a3      	ldr	r3, [r4, #8]
 800aa42:	2218      	movs	r2, #24
 800aa44:	851a      	strh	r2, [r3, #40]	; 0x28

	return 0;
}
 800aa46:	2000      	movs	r0, #0
 800aa48:	bd10      	pop	{r4, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0801a512 	.word	0x0801a512

0800aa50 <cmd_shell_stats_show>:
{
 800aa50:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
 800aa52:	6983      	ldr	r3, [r0, #24]
 800aa54:	4a03      	ldr	r2, [pc, #12]	; (800aa64 <cmd_shell_stats_show+0x14>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2108      	movs	r1, #8
 800aa5a:	f00a fd9f 	bl	801559c <shell_fprintf>
}
 800aa5e:	2000      	movs	r0, #0
 800aa60:	bd08      	pop	{r3, pc}
 800aa62:	bf00      	nop
 800aa64:	0801c54f 	.word	0x0801c54f

0800aa68 <cmd_backends>:
{
 800aa68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	shell_print(sh, "Active shell backends:");
 800aa6c:	4a0e      	ldr	r2, [pc, #56]	; (800aaa8 <cmd_backends+0x40>)
	STRUCT_SECTION_FOREACH(shell, obj) {
 800aa6e:	4c0f      	ldr	r4, [pc, #60]	; (800aaac <cmd_backends+0x44>)
 800aa70:	4e0f      	ldr	r6, [pc, #60]	; (800aab0 <cmd_backends+0x48>)
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
 800aa72:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800aab4 <cmd_backends+0x4c>
	shell_print(sh, "Active shell backends:");
 800aa76:	2108      	movs	r1, #8
{
 800aa78:	4605      	mov	r5, r0
	shell_print(sh, "Active shell backends:");
 800aa7a:	f00a fd8f 	bl	801559c <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
 800aa7e:	2300      	movs	r3, #0
 800aa80:	42b4      	cmp	r4, r6
 800aa82:	f103 0701 	add.w	r7, r3, #1
 800aa86:	d303      	bcc.n	800aa90 <cmd_backends+0x28>
}
 800aa88:	2000      	movs	r0, #0
 800aa8a:	b002      	add	sp, #8
 800aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
 800aa90:	68a2      	ldr	r2, [r4, #8]
 800aa92:	6812      	ldr	r2, [r2, #0]
 800aa94:	9200      	str	r2, [sp, #0]
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	4642      	mov	r2, r8
 800aa9a:	2108      	movs	r1, #8
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f00a fd7d 	bl	801559c <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
 800aaa2:	3430      	adds	r4, #48	; 0x30
 800aaa4:	463b      	mov	r3, r7
 800aaa6:	e7eb      	b.n	800aa80 <cmd_backends+0x18>
 800aaa8:	0801c55f 	.word	0x0801c55f
 800aaac:	0801a45c 	.word	0x0801a45c
 800aab0:	0801a48c 	.word	0x0801a48c
 800aab4:	0801c577 	.word	0x0801c577

0800aab8 <cmd_history>:
{
 800aab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
 800aaba:	4e0f      	ldr	r6, [pc, #60]	; (800aaf8 <cmd_history+0x40>)
{
 800aabc:	4604      	mov	r4, r0
 800aabe:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
 800aac0:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
 800aac2:	68e0      	ldr	r0, [r4, #12]
 800aac4:	f10d 030e 	add.w	r3, sp, #14
 800aac8:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 800aacc:	2101      	movs	r1, #1
 800aace:	f00b fa7e 	bl	8015fce <z_shell_history_get>
		if (len) {
 800aad2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800aad6:	68a3      	ldr	r3, [r4, #8]
 800aad8:	b150      	cbz	r0, 800aaf0 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
 800aada:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	4632      	mov	r2, r6
 800aae2:	462b      	mov	r3, r5
 800aae4:	2108      	movs	r1, #8
 800aae6:	4620      	mov	r0, r4
 800aae8:	f00a fd58 	bl	801559c <shell_fprintf>
	while (1) {
 800aaec:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
 800aaee:	e7e7      	b.n	800aac0 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
 800aaf0:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
 800aaf4:	b004      	add	sp, #16
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	0801c583 	.word	0x0801c583

0800aafc <cmd_echo>:
	if (argc == 2) {
 800aafc:	2902      	cmp	r1, #2
{
 800aafe:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 800ab00:	d10d      	bne.n	800ab1e <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
 800ab02:	6853      	ldr	r3, [r2, #4]
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	4b0e      	ldr	r3, [pc, #56]	; (800ab40 <cmd_echo+0x44>)
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	6813      	ldr	r3, [r2, #0]
 800ab0c:	4a0d      	ldr	r2, [pc, #52]	; (800ab44 <cmd_echo+0x48>)
 800ab0e:	2101      	movs	r1, #1
 800ab10:	f00a fd44 	bl	801559c <shell_fprintf>
 800ab14:	f06f 0015 	mvn.w	r0, #21
}
 800ab18:	b003      	add	sp, #12
 800ab1a:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
 800ab1e:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
 800ab20:	4a09      	ldr	r2, [pc, #36]	; (800ab48 <cmd_echo+0x4c>)
 800ab22:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800ab26:	f013 0f02 	tst.w	r3, #2
 800ab2a:	f04f 0108 	mov.w	r1, #8
 800ab2e:	4b07      	ldr	r3, [pc, #28]	; (800ab4c <cmd_echo+0x50>)
 800ab30:	bf08      	it	eq
 800ab32:	4613      	moveq	r3, r2
 800ab34:	4a06      	ldr	r2, [pc, #24]	; (800ab50 <cmd_echo+0x54>)
 800ab36:	f00a fd31 	bl	801559c <shell_fprintf>
	return 0;
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e7ec      	b.n	800ab18 <cmd_echo+0x1c>
 800ab3e:	bf00      	nop
 800ab40:	0801c59a 	.word	0x0801c59a
 800ab44:	0801c591 	.word	0x0801c591
 800ab48:	0801c58d 	.word	0x0801c58d
 800ab4c:	0801bee0 	.word	0x0801bee0
 800ab50:	0801c5af 	.word	0x0801c5af

0800ab54 <cmd_clear>:
{
 800ab54:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
 800ab56:	6883      	ldr	r3, [r0, #8]
 800ab58:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 800ab5c:	069a      	lsls	r2, r3, #26
{
 800ab5e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 800ab60:	d503      	bpl.n	800ab6a <cmd_clear+0x16>
 800ab62:	4907      	ldr	r1, [pc, #28]	; (800ab80 <cmd_clear+0x2c>)
 800ab64:	6940      	ldr	r0, [r0, #20]
 800ab66:	f00b f9aa 	bl	8015ebe <z_shell_raw_fprintf>
 800ab6a:	68a3      	ldr	r3, [r4, #8]
 800ab6c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 800ab70:	069b      	lsls	r3, r3, #26
 800ab72:	d503      	bpl.n	800ab7c <cmd_clear+0x28>
 800ab74:	4903      	ldr	r1, [pc, #12]	; (800ab84 <cmd_clear+0x30>)
 800ab76:	6960      	ldr	r0, [r4, #20]
 800ab78:	f00b f9a1 	bl	8015ebe <z_shell_raw_fprintf>
}
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	bd10      	pop	{r4, pc}
 800ab80:	0801a519 	.word	0x0801a519
 800ab84:	0801a51e 	.word	0x0801a51e

0800ab88 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
 800ab88:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
 800ab8a:	2901      	cmp	r1, #1
{
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	4604      	mov	r4, r0
	if (argc != 1) {
 800ab90:	d00c      	beq.n	800abac <cmd_resize+0x24>
		shell_error(shell, "%s:%s%s", argv[0],
 800ab92:	6853      	ldr	r3, [r2, #4]
 800ab94:	9301      	str	r3, [sp, #4]
 800ab96:	4b60      	ldr	r3, [pc, #384]	; (800ad18 <cmd_resize+0x190>)
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	6813      	ldr	r3, [r2, #0]
 800ab9c:	4a5f      	ldr	r2, [pc, #380]	; (800ad1c <cmd_resize+0x194>)
 800ab9e:	2101      	movs	r1, #1
 800aba0:	f00a fcfc 	bl	801559c <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
 800aba4:	f06f 0015 	mvn.w	r0, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
 800aba8:	b005      	add	sp, #20
 800abaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abac:	6883      	ldr	r3, [r0, #8]
 800abae:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
 800abb2:	0699      	lsls	r1, r3, #26
 800abb4:	d503      	bpl.n	800abbe <cmd_resize+0x36>
 800abb6:	495a      	ldr	r1, [pc, #360]	; (800ad20 <cmd_resize+0x198>)
 800abb8:	6940      	ldr	r0, [r0, #20]
 800abba:	f00b f980 	bl	8015ebe <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
 800abbe:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 800abc2:	4620      	mov	r0, r4
 800abc4:	f7ff fc78 	bl	800a4b8 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
 800abc8:	21fa      	movs	r1, #250	; 0xfa
 800abca:	4620      	mov	r0, r4
 800abcc:	f7ff fc8a 	bl	800a4e4 <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
 800abd0:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
 800abd2:	2500      	movs	r5, #0
 800abd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abd8:	4629      	mov	r1, r5
 800abda:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 800abde:	f88d 500b 	strb.w	r5, [sp, #11]
 800abe2:	f006 fb59 	bl	8011298 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
 800abe6:	494f      	ldr	r1, [pc, #316]	; (800ad24 <cmd_resize+0x19c>)
 800abe8:	6960      	ldr	r0, [r4, #20]
 800abea:	f00b f968 	bl	8015ebe <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 800abee:	6960      	ldr	r0, [r4, #20]
 800abf0:	f00a fd11 	bl	8015616 <z_shell_fprintf_buffer_flush>
 800abf4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
 800abf8:	6860      	ldr	r0, [r4, #4]
 800abfa:	6803      	ldr	r3, [r0, #0]
 800abfc:	2201      	movs	r2, #1
 800abfe:	691f      	ldr	r7, [r3, #16]
 800ac00:	f10d 010b 	add.w	r1, sp, #11
 800ac04:	ab03      	add	r3, sp, #12
 800ac06:	47b8      	blx	r7
			if (cnt == 0) {
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	b9f3      	cbnz	r3, 800ac4a <cmd_resize+0xc2>
	for (uint16_t i = 0; i < 1000; i++) {
 800ac0c:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
 800ac0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac12:	b2b6      	uxth	r6, r6
 800ac14:	f005 fd40 	bl	8010698 <z_impl_k_busy_wait>
 800ac18:	2e00      	cmp	r6, #0
 800ac1a:	d1ed      	bne.n	800abf8 <cmd_resize+0x70>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 800ac1c:	68a3      	ldr	r3, [r4, #8]
 800ac1e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
 800ac22:	069b      	lsls	r3, r3, #26
 800ac24:	d503      	bpl.n	800ac2e <cmd_resize+0xa6>
 800ac26:	4940      	ldr	r1, [pc, #256]	; (800ad28 <cmd_resize+0x1a0>)
 800ac28:	6960      	ldr	r0, [r4, #20]
 800ac2a:	f00b f948 	bl	8015ebe <z_shell_raw_fprintf>
		shell->ctx->vt100_ctx.cons.terminal_wid =
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	2250      	movs	r2, #80	; 0x50
 800ac32:	855a      	strh	r2, [r3, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei =
 800ac34:	68a3      	ldr	r3, [r4, #8]
 800ac36:	2218      	movs	r2, #24
 800ac38:	851a      	strh	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	4a3b      	ldr	r2, [pc, #236]	; (800ad2c <cmd_resize+0x1a4>)
 800ac3e:	2103      	movs	r1, #3
 800ac40:	f00a fcac 	bl	801559c <shell_fprintf>
 800ac44:	f06f 0007 	mvn.w	r0, #7
 800ac48:	e7ae      	b.n	800aba8 <cmd_resize+0x20>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 800ac4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
 800ac4e:	68a3      	ldr	r3, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
 800ac50:	2a1b      	cmp	r2, #27
 800ac52:	d053      	beq.n	800acfc <cmd_resize+0x174>
 800ac54:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
 800ac58:	291b      	cmp	r1, #27
 800ac5a:	d1cd      	bne.n	800abf8 <cmd_resize+0x70>
			if (c == 'R') { /* End of response from the terminal. */
 800ac5c:	2a52      	cmp	r2, #82	; 0x52
 800ac5e:	d14d      	bne.n	800acfc <cmd_resize+0x174>
				shell->ctx->temp_buff[buff_idx] = '\0';
 800ac60:	195a      	adds	r2, r3, r5
 800ac62:	2300      	movs	r3, #0
 800ac64:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
 800ac68:	68a6      	ldr	r6, [r4, #8]
 800ac6a:	f896 2143 	ldrb.w	r2, [r6, #323]	; 0x143
 800ac6e:	2a5b      	cmp	r2, #91	; 0x5b
 800ac70:	d12b      	bne.n	800acca <cmd_resize+0x142>
 800ac72:	f206 1043 	addw	r0, r6, #323	; 0x143
				buff_idx = 2U;
 800ac76:	2502      	movs	r5, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 800ac78:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800ac7c:	462a      	mov	r2, r5
 800ac7e:	293b      	cmp	r1, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
 800ac80:	f105 0501 	add.w	r5, r5, #1
 800ac84:	b2ad      	uxth	r5, r5
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 800ac86:	d123      	bne.n	800acd0 <cmd_resize+0x148>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 800ac88:	2aff      	cmp	r2, #255	; 0xff
 800ac8a:	d0c7      	beq.n	800ac1c <cmd_resize+0x94>
 800ac8c:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 800ac90:	fa16 f182 	uxtah	r1, r6, r2
	*x = 0U;
 800ac94:	2200      	movs	r2, #0
				while (shell->ctx->temp_buff[buff_idx]
 800ac96:	f811 0f01 	ldrb.w	r0, [r1, #1]!
							     != '\0') {
 800ac9a:	bb18      	cbnz	r0, 800ace4 <cmd_resize+0x15c>
				shell->ctx->temp_buff[0] = 0;
 800ac9c:	f886 0142 	strb.w	r0, [r6, #322]	; 0x142
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
 800aca0:	2afa      	cmp	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 800aca2:	68a1      	ldr	r1, [r4, #8]
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
 800aca4:	bf28      	it	cs
 800aca6:	22fa      	movcs	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 800aca8:	854a      	strh	r2, [r1, #42]	; 0x2a
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
 800acaa:	2bfa      	cmp	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 800acac:	68a2      	ldr	r2, [r4, #8]
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
 800acae:	bf28      	it	cs
 800acb0:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 800acb2:	8513      	strh	r3, [r2, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
 800acb4:	68a3      	ldr	r3, [r4, #8]
 800acb6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
 800acba:	069a      	lsls	r2, r3, #26
 800acbc:	d503      	bpl.n	800acc6 <cmd_resize+0x13e>
 800acbe:	491a      	ldr	r1, [pc, #104]	; (800ad28 <cmd_resize+0x1a0>)
 800acc0:	6960      	ldr	r0, [r4, #20]
 800acc2:	f00b f8fc 	bl	8015ebe <z_shell_raw_fprintf>
	return 0;
 800acc6:	2000      	movs	r0, #0
 800acc8:	e76e      	b.n	800aba8 <cmd_resize+0x20>
					shell->ctx->temp_buff[0] = 0;
 800acca:	f886 3142 	strb.w	r3, [r6, #322]	; 0x142
					return -EIO;
 800acce:	e7a5      	b.n	800ac1c <cmd_resize+0x94>
					*y = *y * 10U +
 800acd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800acd4:	3930      	subs	r1, #48	; 0x30
 800acd6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
					if (buff_idx >=
 800acda:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*y = *y * 10U +
 800acde:	b28b      	uxth	r3, r1
					if (buff_idx >=
 800ace0:	d1ca      	bne.n	800ac78 <cmd_resize+0xf0>
 800ace2:	e79b      	b.n	800ac1c <cmd_resize+0x94>
					(shell->ctx->temp_buff[buff_idx++] -
 800ace4:	3501      	adds	r5, #1
					*x = *x * 10U +
 800ace6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
 800acea:	b2ad      	uxth	r5, r5
					*x = *x * 10U +
 800acec:	3830      	subs	r0, #48	; 0x30
 800acee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
					if (buff_idx >=
 800acf2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*x = *x * 10U +
 800acf6:	b282      	uxth	r2, r0
					if (buff_idx >=
 800acf8:	d1cd      	bne.n	800ac96 <cmd_resize+0x10e>
 800acfa:	e78f      	b.n	800ac1c <cmd_resize+0x94>
			shell->ctx->temp_buff[buff_idx] = c;
 800acfc:	442b      	add	r3, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 800acfe:	3501      	adds	r5, #1
 800ad00:	b2ad      	uxth	r5, r5
 800ad02:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
 800ad04:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 800ad08:	f67f af76 	bls.w	800abf8 <cmd_resize+0x70>
				shell->ctx->temp_buff[0] = 0;
 800ad0c:	68a3      	ldr	r3, [r4, #8]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
				return -ENOMEM;
 800ad14:	e782      	b.n	800ac1c <cmd_resize+0x94>
 800ad16:	bf00      	nop
 800ad18:	0801c59a 	.word	0x0801c59a
 800ad1c:	0801c591 	.word	0x0801c591
 800ad20:	0801a524 	.word	0x0801a524
 800ad24:	0801c5fa 	.word	0x0801c5fa
 800ad28:	0801a528 	.word	0x0801a528
 800ad2c:	0801c5c0 	.word	0x0801c5c0

0800ad30 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	4607      	mov	r7, r0
 800ad36:	b089      	sub	sp, #36	; 0x24
 800ad38:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 800ad3a:	4689      	mov	r9, r1
 800ad3c:	b921      	cbnz	r1, 800ad48 <z_shell_wildcard_process+0x18>
		return ret_val;
 800ad3e:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
 800ad40:	4620      	mov	r0, r4
 800ad42:	b009      	add	sp, #36	; 0x24
 800ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
 800ad48:	4610      	mov	r0, r2
 800ad4a:	f00b f9e5 	bl	8016118 <z_shell_has_wildcard>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d0f5      	beq.n	800ad3e <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
 800ad52:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
 800ad56:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 800ad58:	2402      	movs	r4, #2
 800ad5a:	e024      	b.n	800ada6 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800ad5c:	465c      	mov	r4, fp
 800ad5e:	e03c      	b.n	800adda <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
 800ad60:	4629      	mov	r1, r5
 800ad62:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
 800ad66:	f006 fe05 	bl	8011974 <strstr>
	if (!completion_addr) {
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d04c      	beq.n	800ae0a <z_shell_wildcard_process+0xda>
 800ad70:	f7f5 fa26 	bl	80001c0 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 800ad74:	b282      	uxth	r2, r0
 800ad76:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
 800ad78:	3201      	adds	r2, #1
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4430      	add	r0, r6
 800ad7e:	f006 fa0b 	bl	8011198 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800ad82:	4622      	mov	r2, r4
 800ad84:	4659      	mov	r1, fp
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7f6 f982 	bl	8001090 <memcpy>
	completion_addr[cmd_len] = ' ';
 800ad8c:	f04f 0320 	mov.w	r3, #32
 800ad90:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 800ad92:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
 800ad96:	3301      	adds	r3, #1
 800ad98:	441c      	add	r4, r3
 800ad9a:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
 800ad9e:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
 800ada2:	2400      	movs	r4, #0
 800ada4:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
 800ada6:	1c4b      	adds	r3, r1, #1
 800ada8:	aa03      	add	r2, sp, #12
 800adaa:	4648      	mov	r0, r9
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	f7ff fac9 	bl	800a344 <z_shell_cmd_get>
 800adb2:	4606      	mov	r6, r0
 800adb4:	b1e8      	cbz	r0, 800adf2 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
 800adb6:	6831      	ldr	r1, [r6, #0]
 800adb8:	2200      	movs	r2, #0
 800adba:	4628      	mov	r0, r5
 800adbc:	f00a f97f 	bl	80150be <fnmatch>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d1ef      	bne.n	800ada4 <z_shell_wildcard_process+0x74>
					      entry->syntax, pattern);
 800adc4:	f8d6 b000 	ldr.w	fp, [r6]
			ret_val = command_add(shell->ctx->temp_buff,
 800adc8:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	d0c4      	beq.n	800ad5c <z_shell_wildcard_process+0x2c>
 800add2:	4658      	mov	r0, fp
 800add4:	f7f5 f9f4 	bl	80001c0 <strlen>
 800add8:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 800adda:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
 800adde:	4423      	add	r3, r4
 800ade0:	2bff      	cmp	r3, #255	; 0xff
 800ade2:	ddbd      	ble.n	800ad60 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
 800ade4:	4a0a      	ldr	r2, [pc, #40]	; (800ae10 <z_shell_wildcard_process+0xe0>)
 800ade6:	462b      	mov	r3, r5
 800ade8:	2103      	movs	r1, #3
 800adea:	4638      	mov	r0, r7
 800adec:	f00a fe93 	bl	8015b16 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
 800adf0:	2401      	movs	r4, #1
	if (cnt > 0) {
 800adf2:	f1b8 0f00 	cmp.w	r8, #0
 800adf6:	d0a3      	beq.n	800ad40 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
 800adf8:	68b8      	ldr	r0, [r7, #8]
 800adfa:	462a      	mov	r2, r5
 800adfc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800ae00:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 800ae04:	f00a fc67 	bl	80156d6 <z_shell_pattern_remove>
	return ret_val;
 800ae08:	e79a      	b.n	800ad40 <z_shell_wildcard_process+0x10>
 800ae0a:	2402      	movs	r4, #2
 800ae0c:	e7f1      	b.n	800adf2 <z_shell_wildcard_process+0xc2>
 800ae0e:	bf00      	nop
 800ae10:	0801c9da 	.word	0x0801c9da

0800ae14 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 800ae14:	4901      	ldr	r1, [pc, #4]	; (800ae1c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800ae16:	2210      	movs	r2, #16
	str	r2, [r1]
 800ae18:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800ae1a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 800ae1c:	e000ed10 	.word	0xe000ed10

0800ae20 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800ae20:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800ae22:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 800ae24:	f380 8811 	msr	BASEPRI, r0
	isb
 800ae28:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 800ae2c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 800ae30:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800ae32:	b662      	cpsie	i
	isb
 800ae34:	f3bf 8f6f 	isb	sy

	bx	lr
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop

0800ae3c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	b083      	sub	sp, #12
 800ae42:	4681      	mov	r9, r0
 800ae44:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 800ae46:	460c      	mov	r4, r1
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	f000 80aa 	beq.w	800afa2 <z_arm_fatal_error+0x166>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800ae4e:	4d59      	ldr	r5, [pc, #356]	; (800afb4 <z_arm_fatal_error+0x178>)
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	075a      	lsls	r2, r3, #29
 800ae54:	d040      	beq.n	800aed8 <z_arm_fatal_error+0x9c>
 800ae56:	466e      	mov	r6, sp
 800ae58:	b08a      	sub	sp, #40	; 0x28
 800ae5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5e:	68a3      	ldr	r3, [r4, #8]
 800ae60:	466a      	mov	r2, sp
 800ae62:	f8df c160 	ldr.w	ip, [pc, #352]	; 800afc4 <z_arm_fatal_error+0x188>
 800ae66:	f04f 0805 	mov.w	r8, #5
 800ae6a:	e9c2 c005 	strd	ip, r0, [r2, #20]
 800ae6e:	e9c2 1307 	strd	r1, r3, [r2, #28]
 800ae72:	f842 8f10 	str.w	r8, [r2, #16]!
 800ae76:	2300      	movs	r3, #0
 800ae78:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f7fd f967 	bl	8008150 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	075b      	lsls	r3, r3, #29
 800ae86:	46b5      	mov	sp, r6
 800ae88:	d026      	beq.n	800aed8 <z_arm_fatal_error+0x9c>
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800ae90:	6963      	ldr	r3, [r4, #20]
 800ae92:	466a      	mov	r2, sp
 800ae94:	f8df c130 	ldr.w	ip, [pc, #304]	; 800afc8 <z_arm_fatal_error+0x18c>
 800ae98:	e9c2 1307 	strd	r1, r3, [r2, #28]
 800ae9c:	e9c2 c005 	strd	ip, r0, [r2, #20]
 800aea0:	f842 8f10 	str.w	r8, [r2, #16]!
 800aea4:	2300      	movs	r3, #0
 800aea6:	4628      	mov	r0, r5
 800aea8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800aeac:	f7fd f950 	bl	8008150 <z_impl_z_log_msg_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	0758      	lsls	r0, r3, #29
 800aeb4:	46b5      	mov	sp, r6
 800aeb6:	d00f      	beq.n	800aed8 <z_arm_fatal_error+0x9c>
 800aeb8:	b088      	sub	sp, #32
 800aeba:	69e3      	ldr	r3, [r4, #28]
 800aebc:	466a      	mov	r2, sp
 800aebe:	493e      	ldr	r1, [pc, #248]	; (800afb8 <z_arm_fatal_error+0x17c>)
 800aec0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800aec4:	2303      	movs	r3, #3
 800aec6:	f842 3f10 	str.w	r3, [r2, #16]!
 800aeca:	2300      	movs	r3, #0
 800aecc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800aed0:	4628      	mov	r0, r5
 800aed2:	f7fd f93d 	bl	8008150 <z_impl_z_log_msg_static_create>
 800aed6:	46b5      	mov	sp, r6
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 800aed8:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 800afcc <z_arm_fatal_error+0x190>
 800aedc:	46a0      	mov	r8, r4
{
 800aede:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 800aee0:	f04f 0b0a 	mov.w	fp, #10
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	0759      	lsls	r1, r3, #29
 800aee8:	d02f      	beq.n	800af4a <z_arm_fatal_error+0x10e>
 800aeea:	edd8 7a08 	vldr	s15, [r8, #32]
 800aeee:	f8c7 d004 	str.w	sp, [r7, #4]
 800aef2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800aef6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 800aefa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aefe:	b08e      	sub	sp, #56	; 0x38
 800af00:	ee17 1a90 	vmov	r1, s15
 800af04:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 800af08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af0c:	466a      	mov	r2, sp
 800af0e:	ee17 3a90 	vmov	r3, s15
 800af12:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 800af16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af1a:	1c70      	adds	r0, r6, #1
 800af1c:	e9c2 0108 	strd	r0, r1, [r2, #32]
 800af20:	1cb1      	adds	r1, r6, #2
 800af22:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
 800af26:	1cf3      	adds	r3, r6, #3
 800af28:	e9c2 a605 	strd	sl, r6, [r2, #20]
 800af2c:	ed82 7a07 	vstr	s14, [r2, #28]
 800af30:	6313      	str	r3, [r2, #48]	; 0x30
 800af32:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
 800af36:	f842 bf10 	str.w	fp, [r2, #16]!
 800af3a:	481e      	ldr	r0, [pc, #120]	; (800afb4 <z_arm_fatal_error+0x178>)
 800af3c:	2300      	movs	r3, #0
 800af3e:	f245 0140 	movw	r1, #20544	; 0x5040
 800af42:	f7fd f905 	bl	8008150 <z_impl_z_log_msg_static_create>
 800af46:	f8d7 d004 	ldr.w	sp, [r7, #4]
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
 800af4a:	3604      	adds	r6, #4
 800af4c:	2e10      	cmp	r6, #16
 800af4e:	f108 0810 	add.w	r8, r8, #16
 800af52:	d1c7      	bne.n	800aee4 <z_arm_fatal_error+0xa8>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	075a      	lsls	r2, r3, #29
 800af58:	d023      	beq.n	800afa2 <z_arm_fatal_error+0x166>
 800af5a:	466e      	mov	r6, sp
 800af5c:	b088      	sub	sp, #32
 800af5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800af60:	466a      	mov	r2, sp
 800af62:	4916      	ldr	r1, [pc, #88]	; (800afbc <z_arm_fatal_error+0x180>)
 800af64:	f04f 0803 	mov.w	r8, #3
 800af68:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800af6c:	f842 8f10 	str.w	r8, [r2, #16]!
 800af70:	2300      	movs	r3, #0
 800af72:	4810      	ldr	r0, [pc, #64]	; (800afb4 <z_arm_fatal_error+0x178>)
 800af74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800af78:	f7fd f8ea 	bl	8008150 <z_impl_z_log_msg_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	075b      	lsls	r3, r3, #29
 800af80:	46b5      	mov	sp, r6
 800af82:	d00e      	beq.n	800afa2 <z_arm_fatal_error+0x166>
 800af84:	b088      	sub	sp, #32
 800af86:	69a3      	ldr	r3, [r4, #24]
 800af88:	466a      	mov	r2, sp
 800af8a:	490d      	ldr	r1, [pc, #52]	; (800afc0 <z_arm_fatal_error+0x184>)
 800af8c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800af90:	f842 8f10 	str.w	r8, [r2, #16]!
 800af94:	4807      	ldr	r0, [pc, #28]	; (800afb4 <z_arm_fatal_error+0x178>)
 800af96:	2300      	movs	r3, #0
 800af98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800af9c:	f7fd f8d8 	bl	8008150 <z_impl_z_log_msg_static_create>
 800afa0:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 800afa2:	4621      	mov	r1, r4
 800afa4:	4648      	mov	r0, r9
 800afa6:	f004 fa37 	bl	800f418 <z_fatal_error>
}
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb2:	bf00      	nop
 800afb4:	20000d60 	.word	0x20000d60
 800afb8:	0801ca8a 	.word	0x0801ca8a
 800afbc:	0801cadc 	.word	0x0801cadc
 800afc0:	0801caeb 	.word	0x0801caeb
 800afc4:	0801ca2c 	.word	0x0801ca2c
 800afc8:	0801ca5b 	.word	0x0801ca5b
 800afcc:	0801ca99 	.word	0x0801ca99

0800afd0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800afd0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800afd2:	2800      	cmp	r0, #0
 800afd4:	db07      	blt.n	800afe6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afd6:	4a04      	ldr	r2, [pc, #16]	; (800afe8 <arch_irq_enable+0x18>)
 800afd8:	0941      	lsrs	r1, r0, #5
 800afda:	2301      	movs	r3, #1
 800afdc:	f000 001f 	and.w	r0, r0, #31
 800afe0:	4083      	lsls	r3, r0
 800afe2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800afe6:	4770      	bx	lr
 800afe8:	e000e100 	.word	0xe000e100

0800afec <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800afec:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800afee:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aff0:	bfa8      	it	ge
 800aff2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 800aff6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800affa:	bfb8      	it	lt
 800affc:	4b06      	ldrlt	r3, [pc, #24]	; (800b018 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800affe:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800b002:	bfac      	ite	ge
 800b004:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b008:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b00c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b00e:	bfb4      	ite	lt
 800b010:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b012:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 800b016:	4770      	bx	lr
 800b018:	e000ed14 	.word	0xe000ed14

0800b01c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 800b01c:	bf30      	wfi
    b z_SysNmiOnReset
 800b01e:	f7ff bffd 	b.w	800b01c <z_SysNmiOnReset>
 800b022:	bf00      	nop

0800b024 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800b024:	4a14      	ldr	r2, [pc, #80]	; (800b078 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800b026:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800b028:	4b14      	ldr	r3, [pc, #80]	; (800b07c <z_arm_prep_c+0x58>)
 800b02a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800b02e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b034:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 800b038:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b03c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 800b044:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b048:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800b04c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800b050:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800b054:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 800b058:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b05c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 800b060:	2300      	movs	r3, #0
 800b062:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800b066:	f004 faa1 	bl	800f5ac <z_bss_zero>
	z_data_copy();
 800b06a:	f005 f9bb 	bl	80103e4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800b06e:	f000 fca7 	bl	800b9c0 <z_arm_interrupt_init>
	z_cstart();
 800b072:	f004 fae3 	bl	800f63c <z_cstart>
 800b076:	bf00      	nop
 800b078:	08000000 	.word	0x08000000
 800b07c:	e000ed00 	.word	0xe000ed00

0800b080 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 800b080:	4a0a      	ldr	r2, [pc, #40]	; (800b0ac <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800b082:	490b      	ldr	r1, [pc, #44]	; (800b0b0 <arch_swap+0x30>)
	_current->arch.basepri = key;
 800b084:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800b086:	6809      	ldr	r1, [r1, #0]
 800b088:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800b08c:	4909      	ldr	r1, [pc, #36]	; (800b0b4 <arch_swap+0x34>)
	_current->arch.basepri = key;
 800b08e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800b092:	684b      	ldr	r3, [r1, #4]
 800b094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b098:	604b      	str	r3, [r1, #4]
 800b09a:	2300      	movs	r3, #0
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800b0a4:	6893      	ldr	r3, [r2, #8]
}
 800b0a6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800b0aa:	4770      	bx	lr
 800b0ac:	20002200 	.word	0x20002200
 800b0b0:	0801b278 	.word	0x0801b278
 800b0b4:	e000ed00 	.word	0xe000ed00

0800b0b8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 800b0b8:	4922      	ldr	r1, [pc, #136]	; (800b144 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800b0ba:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 800b0bc:	f882 e0f5 	strb.w	lr, [r2, #245]	; 0xf5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800b0c0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800b0c4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800b0c6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800b0ca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 800b0ce:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 800b0d2:	d103      	bne.n	800b0dc <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 800b0d4:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vstmia r0, {s16-s31}
 800b0d8:	ec80 8a10 	vstmia	r0, {s16-s31}

0800b0dc <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800b0dc:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 800b0de:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800b0e2:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800b0e6:	4f18      	ldr	r7, [pc, #96]	; (800b148 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800b0e8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800b0ec:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
 800b0ee:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800b0f0:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 800b0f2:	f992 e0f5 	ldrsb.w	lr, [r2, #245]	; 0xf5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800b0f6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
 800b0fa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 800b0fc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 800b100:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 800b104:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 800b108:	d003      	beq.n	800b112 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 800b10a:	2300      	movs	r3, #0
    vmsr fpscr, r3
 800b10c:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 800b110:	e003      	b.n	800b11a <in_fp_endif>

0800b112 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 800b112:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vldmia r0, {s16-s31}
 800b116:	ec90 8a10 	vldmia	r0, {s16-s31}

0800b11a <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 800b11a:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 800b11e:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 800b122:	f383 8814 	msr	CONTROL, r3
    isb
 800b126:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800b12a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 800b12c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800b12e:	f000 fc91 	bl	800ba54 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800b132:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800b136:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 800b13a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800b13e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800b142:	4770      	bx	lr
    ldr r1, =_kernel
 800b144:	20002200 	.word	0x20002200
    ldr v4, =_SCS_ICSR
 800b148:	e000ed04 	.word	0xe000ed04

0800b14c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 800b14c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 800b150:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800b152:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800b156:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800b15a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800b15c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 800b160:	2902      	cmp	r1, #2
    beq _oops
 800b162:	d0ff      	beq.n	800b164 <_oops>

0800b164 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 800b164:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 800b166:	f00b f81b 	bl	80161a0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 800b16a:	bd01      	pop	{r0, pc}

0800b16c <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 800b16c:	7b01      	ldrb	r1, [r0, #12]
 800b16e:	0789      	lsls	r1, r1, #30
 800b170:	d509      	bpl.n	800b186 <arch_new_thread+0x1a>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 800b172:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 800b176:	3140      	adds	r1, #64	; 0x40
 800b178:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 800b17c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 800b180:	3940      	subs	r1, #64	; 0x40
 800b182:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 800b186:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 800b190:	490f      	ldr	r1, [pc, #60]	; (800b1d0 <arch_new_thread+0x64>)
	iframe->a3 = (uint32_t)p2;
 800b192:	9b01      	ldr	r3, [sp, #4]
 800b194:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 800b19e:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 800b1a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1a6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 800b1aa:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 800b1b4:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800b1b6:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800b1ba:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800b1be:	f64f 5308 	movw	r3, #64776	; 0xfd08
 800b1c2:	bf08      	it	eq
 800b1c4:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
 800b1c8:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 800b1ca:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800b1ce:	4770      	bx	lr
 800b1d0:	08014863 	.word	0x08014863

0800b1d4 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 800b1d4:	7b03      	ldrb	r3, [r0, #12]
 800b1d6:	f013 0f02 	tst.w	r3, #2
 800b1da:	4b1d      	ldr	r3, [pc, #116]	; (800b250 <z_arm_mpu_stack_guard_and_fpu_adjust+0x7c>)
 800b1dc:	d103      	bne.n	800b1e6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
 800b1de:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 800b1e2:	06d2      	lsls	r2, r2, #27
 800b1e4:	d41b      	bmi.n	800b21e <z_arm_mpu_stack_guard_and_fpu_adjust+0x4a>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 800b1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b1ec:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
 800b1ee:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 800b1f2:	0719      	lsls	r1, r3, #28
 800b1f4:	d40d      	bmi.n	800b212 <z_arm_mpu_stack_guard_and_fpu_adjust+0x3e>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800b1f6:	f043 0308 	orr.w	r3, r3, #8
 800b1fa:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start +=
 800b1fe:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800b202:	3340      	adds	r3, #64	; 0x40
 800b204:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size -=
 800b208:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800b20c:	3b40      	subs	r3, #64	; 0x40
 800b20e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 800b212:	7b03      	ldrb	r3, [r0, #12]
 800b214:	f043 0302 	orr.w	r3, r3, #2
 800b218:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 800b21a:	2080      	movs	r0, #128	; 0x80
 800b21c:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 800b21e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b220:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800b224:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
 800b226:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 800b22a:	071a      	lsls	r2, r3, #28
 800b22c:	d401      	bmi.n	800b232 <z_arm_mpu_stack_guard_and_fpu_adjust+0x5e>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
 800b22e:	2040      	movs	r0, #64	; 0x40
}
 800b230:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800b232:	f023 0308 	bic.w	r3, r3, #8
 800b236:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start -=
 800b23a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800b23e:	3b40      	subs	r3, #64	; 0x40
 800b240:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size +=
 800b244:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800b248:	3340      	adds	r3, #64	; 0x40
 800b24a:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 800b24e:	e7ee      	b.n	800b22e <z_arm_mpu_stack_guard_and_fpu_adjust+0x5a>
 800b250:	e000ef00 	.word	0xe000ef00

0800b254 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 800b254:	4a0d      	ldr	r2, [pc, #52]	; (800b28c <z_check_thread_stack_fail+0x38>)
{
 800b256:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 800b258:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800b25a:	b1a8      	cbz	r0, 800b288 <z_check_thread_stack_fail+0x34>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 800b25c:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800b260:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 800b264:	f012 0f08 	tst.w	r2, #8
 800b268:	bf0c      	ite	eq
 800b26a:	2240      	moveq	r2, #64	; 0x40
 800b26c:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800b26e:	f113 0f16 	cmn.w	r3, #22
 800b272:	d004      	beq.n	800b27e <z_check_thread_stack_fail+0x2a>
 800b274:	1a82      	subs	r2, r0, r2
 800b276:	429a      	cmp	r2, r3
 800b278:	d805      	bhi.n	800b286 <z_check_thread_stack_fail+0x32>
 800b27a:	4283      	cmp	r3, r0
 800b27c:	d203      	bcs.n	800b286 <z_check_thread_stack_fail+0x32>
		return 0;
 800b27e:	4281      	cmp	r1, r0
 800b280:	bf28      	it	cs
 800b282:	2000      	movcs	r0, #0
 800b284:	4770      	bx	lr
 800b286:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20002200 	.word	0x20002200

0800b290 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 800b290:	b508      	push	{r3, lr}
 800b292:	4614      	mov	r4, r2
 800b294:	460d      	mov	r5, r1
 800b296:	2200      	movs	r2, #0
 800b298:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800b29c:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 800b2a0:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800b2a4:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 800b2b0:	4a08      	ldr	r2, [pc, #32]	; (800b2d4 <arch_switch_to_main_thread+0x44>)
 800b2b2:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800b2b4:	f000 fbce 	bl	800ba54 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f385 8809 	msr	PSP, r5
 800b2be:	2100      	movs	r1, #0
 800b2c0:	b663      	cpsie	if
 800b2c2:	f381 8811 	msr	BASEPRI, r1
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f009 fac8 	bl	8014862 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800b2d2:	bf00      	nop
 800b2d4:	20002200 	.word	0x20002200

0800b2d8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800b2d8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800b2da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800b2de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800b2e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800b2e6:	4904      	ldr	r1, [pc, #16]	; (800b2f8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800b2e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800b2ea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 800b2ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800b2ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800b2f2:	4902      	ldr	r1, [pc, #8]	; (800b2fc <_isr_wrapper+0x24>)
	bx r1
 800b2f4:	4708      	bx	r1
 800b2f6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800b2f8:	0801a030 	.word	0x0801a030
	ldr r1, =z_arm_int_exit
 800b2fc:	0800b301 	.word	0x0800b301

0800b300 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 800b300:	4b04      	ldr	r3, [pc, #16]	; (800b314 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800b302:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800b304:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
 800b306:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800b308:	d003      	beq.n	800b312 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800b30a:	4903      	ldr	r1, [pc, #12]	; (800b318 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 800b30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 800b310:	600a      	str	r2, [r1, #0]

0800b312 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800b312:	4770      	bx	lr
	ldr r3, =_kernel
 800b314:	20002200 	.word	0x20002200
	ldr r1, =_SCS_ICSR
 800b318:	e000ed04 	.word	0xe000ed04

0800b31c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 800b320:	4c4e      	ldr	r4, [pc, #312]	; (800b45c <bus_fault.constprop.0+0x140>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800b322:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** BUS FAULT *****");
 800b324:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800b326:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 800b328:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
 800b32e:	d00a      	beq.n	800b346 <bus_fault.constprop.0+0x2a>
 800b330:	4b4b      	ldr	r3, [pc, #300]	; (800b460 <bus_fault.constprop.0+0x144>)
 800b332:	617b      	str	r3, [r7, #20]
 800b334:	2302      	movs	r3, #2
 800b336:	613b      	str	r3, [r7, #16]
 800b338:	f107 0210 	add.w	r2, r7, #16
 800b33c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b340:	4620      	mov	r0, r4
 800b342:	f00a ff3c 	bl	80161be <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800b346:	4b47      	ldr	r3, [pc, #284]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	04da      	lsls	r2, r3, #19
 800b34c:	d50d      	bpl.n	800b36a <bus_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error");
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	075b      	lsls	r3, r3, #29
 800b352:	d00a      	beq.n	800b36a <bus_fault.constprop.0+0x4e>
 800b354:	4b44      	ldr	r3, [pc, #272]	; (800b468 <bus_fault.constprop.0+0x14c>)
 800b356:	617b      	str	r3, [r7, #20]
 800b358:	2302      	movs	r3, #2
 800b35a:	4840      	ldr	r0, [pc, #256]	; (800b45c <bus_fault.constprop.0+0x140>)
 800b35c:	613b      	str	r3, [r7, #16]
 800b35e:	f107 0210 	add.w	r2, r7, #16
 800b362:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b366:	f00a ff2a 	bl	80161be <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800b36a:	4b3e      	ldr	r3, [pc, #248]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36e:	0518      	lsls	r0, r3, #20
 800b370:	d50d      	bpl.n	800b38e <bus_fault.constprop.0+0x72>
		PR_FAULT_INFO("  Unstacking error");
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	0759      	lsls	r1, r3, #29
 800b376:	d00a      	beq.n	800b38e <bus_fault.constprop.0+0x72>
 800b378:	4b3c      	ldr	r3, [pc, #240]	; (800b46c <bus_fault.constprop.0+0x150>)
 800b37a:	617b      	str	r3, [r7, #20]
 800b37c:	2302      	movs	r3, #2
 800b37e:	4837      	ldr	r0, [pc, #220]	; (800b45c <bus_fault.constprop.0+0x140>)
 800b380:	613b      	str	r3, [r7, #16]
 800b382:	f107 0210 	add.w	r2, r7, #16
 800b386:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b38a:	f00a ff18 	bl	80161be <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800b38e:	4b35      	ldr	r3, [pc, #212]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b392:	059a      	lsls	r2, r3, #22
 800b394:	d52a      	bpl.n	800b3ec <bus_fault.constprop.0+0xd0>
		PR_FAULT_INFO("  Precise data bus error");
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	075b      	lsls	r3, r3, #29
 800b39a:	d00a      	beq.n	800b3b2 <bus_fault.constprop.0+0x96>
 800b39c:	4b34      	ldr	r3, [pc, #208]	; (800b470 <bus_fault.constprop.0+0x154>)
 800b39e:	617b      	str	r3, [r7, #20]
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	482e      	ldr	r0, [pc, #184]	; (800b45c <bus_fault.constprop.0+0x140>)
 800b3a4:	613b      	str	r3, [r7, #16]
 800b3a6:	f107 0210 	add.w	r2, r7, #16
 800b3aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b3ae:	f00a ff06 	bl	80161be <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 800b3b2:	4b2c      	ldr	r3, [pc, #176]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b3b4:	6b99      	ldr	r1, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b8:	0418      	lsls	r0, r3, #16
 800b3ba:	d517      	bpl.n	800b3ec <bus_fault.constprop.0+0xd0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	075a      	lsls	r2, r3, #29
 800b3c0:	d00e      	beq.n	800b3e0 <bus_fault.constprop.0+0xc4>
 800b3c2:	46e8      	mov	r8, sp
 800b3c4:	b088      	sub	sp, #32
 800b3c6:	466a      	mov	r2, sp
 800b3c8:	4b2a      	ldr	r3, [pc, #168]	; (800b474 <bus_fault.constprop.0+0x158>)
 800b3ca:	4824      	ldr	r0, [pc, #144]	; (800b45c <bus_fault.constprop.0+0x140>)
 800b3cc:	e9c2 3105 	strd	r3, r1, [r2, #20]
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	f842 3f10 	str.w	r3, [r2, #16]!
 800b3d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800b3da:	f00a fef0 	bl	80161be <z_log_msg_static_create.constprop.0>
 800b3de:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
 800b3e0:	b126      	cbz	r6, 800b3ec <bus_fault.constprop.0+0xd0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800b3e2:	4a20      	ldr	r2, [pc, #128]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b3e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b3e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3ea:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800b3ec:	4b1d      	ldr	r3, [pc, #116]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f0:	055b      	lsls	r3, r3, #21
 800b3f2:	d50d      	bpl.n	800b410 <bus_fault.constprop.0+0xf4>
		PR_FAULT_INFO("  Imprecise data bus error");
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	075e      	lsls	r6, r3, #29
 800b3f8:	d00a      	beq.n	800b410 <bus_fault.constprop.0+0xf4>
 800b3fa:	4b1f      	ldr	r3, [pc, #124]	; (800b478 <bus_fault.constprop.0+0x15c>)
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	2302      	movs	r3, #2
 800b400:	4816      	ldr	r0, [pc, #88]	; (800b45c <bus_fault.constprop.0+0x140>)
 800b402:	613b      	str	r3, [r7, #16]
 800b404:	f107 0210 	add.w	r2, r7, #16
 800b408:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b40c:	f00a fed7 	bl	80161be <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800b410:	4b14      	ldr	r3, [pc, #80]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b414:	05d0      	lsls	r0, r2, #23
 800b416:	d518      	bpl.n	800b44a <bus_fault.constprop.0+0x12e>
		PR_FAULT_INFO("  Instruction bus error");
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	0759      	lsls	r1, r3, #29
 800b41c:	d00a      	beq.n	800b434 <bus_fault.constprop.0+0x118>
 800b41e:	4b17      	ldr	r3, [pc, #92]	; (800b47c <bus_fault.constprop.0+0x160>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	2302      	movs	r3, #2
 800b424:	480d      	ldr	r0, [pc, #52]	; (800b45c <bus_fault.constprop.0+0x140>)
 800b426:	613b      	str	r3, [r7, #16]
 800b428:	f107 0210 	add.w	r2, r7, #16
 800b42c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b430:	f00a fec5 	bl	80161be <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800b434:	4a0b      	ldr	r2, [pc, #44]	; (800b464 <bus_fault.constprop.0+0x148>)
 800b436:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 800b438:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800b43a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
 800b43e:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800b440:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800b442:	7028      	strb	r0, [r5, #0]
}
 800b444:	46bd      	mov	sp, r7
 800b446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800b44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44c:	049a      	lsls	r2, r3, #18
 800b44e:	d5f1      	bpl.n	800b434 <bus_fault.constprop.0+0x118>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	075b      	lsls	r3, r3, #29
 800b454:	d0ee      	beq.n	800b434 <bus_fault.constprop.0+0x118>
 800b456:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <bus_fault.constprop.0+0x164>)
 800b458:	e7e2      	b.n	800b420 <bus_fault.constprop.0+0x104>
 800b45a:	bf00      	nop
 800b45c:	20000d60 	.word	0x20000d60
 800b460:	0801cb19 	.word	0x0801cb19
 800b464:	e000ed00 	.word	0xe000ed00
 800b468:	0801cb2f 	.word	0x0801cb2f
 800b46c:	0801cb40 	.word	0x0801cb40
 800b470:	0801cb53 	.word	0x0801cb53
 800b474:	0801cb6c 	.word	0x0801cb6c
 800b478:	0801cb81 	.word	0x0801cb81
 800b47c:	0801cb9c 	.word	0x0801cb9c
 800b480:	0801cbb4 	.word	0x0801cbb4

0800b484 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 800b484:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 800b486:	4c3f      	ldr	r4, [pc, #252]	; (800b584 <usage_fault.constprop.0+0x100>)
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
 800b48c:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** USAGE FAULT *****");
 800b48e:	d009      	beq.n	800b4a4 <usage_fault.constprop.0+0x20>
 800b490:	4b3d      	ldr	r3, [pc, #244]	; (800b588 <usage_fault.constprop.0+0x104>)
 800b492:	9305      	str	r3, [sp, #20]
 800b494:	aa04      	add	r2, sp, #16
 800b496:	2302      	movs	r3, #2
 800b498:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b49c:	4620      	mov	r0, r4
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	f00a fe8d 	bl	80161be <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800b4a4:	4b39      	ldr	r3, [pc, #228]	; (800b58c <usage_fault.constprop.0+0x108>)
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a8:	0198      	lsls	r0, r3, #6
 800b4aa:	d50c      	bpl.n	800b4c6 <usage_fault.constprop.0+0x42>
		PR_FAULT_INFO("  Division by zero");
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	0759      	lsls	r1, r3, #29
 800b4b0:	d009      	beq.n	800b4c6 <usage_fault.constprop.0+0x42>
 800b4b2:	4b37      	ldr	r3, [pc, #220]	; (800b590 <usage_fault.constprop.0+0x10c>)
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	4833      	ldr	r0, [pc, #204]	; (800b584 <usage_fault.constprop.0+0x100>)
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	aa04      	add	r2, sp, #16
 800b4bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	f00a fe7c 	bl	80161be <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800b4c6:	4b31      	ldr	r3, [pc, #196]	; (800b58c <usage_fault.constprop.0+0x108>)
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	01da      	lsls	r2, r3, #7
 800b4cc:	d50c      	bpl.n	800b4e8 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Unaligned memory access");
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	075b      	lsls	r3, r3, #29
 800b4d2:	d009      	beq.n	800b4e8 <usage_fault.constprop.0+0x64>
 800b4d4:	4b2f      	ldr	r3, [pc, #188]	; (800b594 <usage_fault.constprop.0+0x110>)
 800b4d6:	9305      	str	r3, [sp, #20]
 800b4d8:	482a      	ldr	r0, [pc, #168]	; (800b584 <usage_fault.constprop.0+0x100>)
 800b4da:	2302      	movs	r3, #2
 800b4dc:	aa04      	add	r2, sp, #16
 800b4de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	f00a fe6b 	bl	80161be <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800b4e8:	4b28      	ldr	r3, [pc, #160]	; (800b58c <usage_fault.constprop.0+0x108>)
 800b4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ec:	0318      	lsls	r0, r3, #12
 800b4ee:	d50c      	bpl.n	800b50a <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  No coprocessor instructions");
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	0759      	lsls	r1, r3, #29
 800b4f4:	d009      	beq.n	800b50a <usage_fault.constprop.0+0x86>
 800b4f6:	4b28      	ldr	r3, [pc, #160]	; (800b598 <usage_fault.constprop.0+0x114>)
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	4822      	ldr	r0, [pc, #136]	; (800b584 <usage_fault.constprop.0+0x100>)
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	aa04      	add	r2, sp, #16
 800b500:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	f00a fe5a 	bl	80161be <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800b50a:	4b20      	ldr	r3, [pc, #128]	; (800b58c <usage_fault.constprop.0+0x108>)
 800b50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50e:	035a      	lsls	r2, r3, #13
 800b510:	d50c      	bpl.n	800b52c <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	075b      	lsls	r3, r3, #29
 800b516:	d009      	beq.n	800b52c <usage_fault.constprop.0+0xa8>
 800b518:	4b20      	ldr	r3, [pc, #128]	; (800b59c <usage_fault.constprop.0+0x118>)
 800b51a:	9305      	str	r3, [sp, #20]
 800b51c:	4819      	ldr	r0, [pc, #100]	; (800b584 <usage_fault.constprop.0+0x100>)
 800b51e:	2302      	movs	r3, #2
 800b520:	aa04      	add	r2, sp, #16
 800b522:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b526:	9304      	str	r3, [sp, #16]
 800b528:	f00a fe49 	bl	80161be <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800b52c:	4b17      	ldr	r3, [pc, #92]	; (800b58c <usage_fault.constprop.0+0x108>)
 800b52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b530:	0398      	lsls	r0, r3, #14
 800b532:	d50c      	bpl.n	800b54e <usage_fault.constprop.0+0xca>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	0759      	lsls	r1, r3, #29
 800b538:	d009      	beq.n	800b54e <usage_fault.constprop.0+0xca>
 800b53a:	4b19      	ldr	r3, [pc, #100]	; (800b5a0 <usage_fault.constprop.0+0x11c>)
 800b53c:	9305      	str	r3, [sp, #20]
 800b53e:	4811      	ldr	r0, [pc, #68]	; (800b584 <usage_fault.constprop.0+0x100>)
 800b540:	2302      	movs	r3, #2
 800b542:	aa04      	add	r2, sp, #16
 800b544:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	f00a fe38 	bl	80161be <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800b54e:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <usage_fault.constprop.0+0x108>)
 800b550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b552:	03da      	lsls	r2, r3, #15
 800b554:	d50c      	bpl.n	800b570 <usage_fault.constprop.0+0xec>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	075b      	lsls	r3, r3, #29
 800b55a:	d009      	beq.n	800b570 <usage_fault.constprop.0+0xec>
 800b55c:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <usage_fault.constprop.0+0x120>)
 800b55e:	9305      	str	r3, [sp, #20]
 800b560:	4808      	ldr	r0, [pc, #32]	; (800b584 <usage_fault.constprop.0+0x100>)
 800b562:	2302      	movs	r3, #2
 800b564:	aa04      	add	r2, sp, #16
 800b566:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	f00a fe27 	bl	80161be <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800b570:	4a06      	ldr	r2, [pc, #24]	; (800b58c <usage_fault.constprop.0+0x108>)
 800b572:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b574:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800b578:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 800b57c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800b57e:	6293      	str	r3, [r2, #40]	; 0x28
}
 800b580:	b006      	add	sp, #24
 800b582:	bd10      	pop	{r4, pc}
 800b584:	20000d60 	.word	0x20000d60
 800b588:	0801cbe3 	.word	0x0801cbe3
 800b58c:	e000ed00 	.word	0xe000ed00
 800b590:	0801cbfb 	.word	0x0801cbfb
 800b594:	0801cc0e 	.word	0x0801cc0e
 800b598:	0801cc28 	.word	0x0801cc28
 800b59c:	0801cc46 	.word	0x0801cc46
 800b5a0:	0801cc6b 	.word	0x0801cc6b
 800b5a4:	0801cc85 	.word	0x0801cc85

0800b5a8 <mem_manage_fault>:
{
 800b5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
 800b5ac:	4c5b      	ldr	r4, [pc, #364]	; (800b71c <mem_manage_fault+0x174>)
{
 800b5ae:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** MPU FAULT *****");
 800b5b0:	6823      	ldr	r3, [r4, #0]
{
 800b5b2:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 800b5b4:	0759      	lsls	r1, r3, #29
{
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	4680      	mov	r8, r0
 800b5ba:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 800b5bc:	d00a      	beq.n	800b5d4 <mem_manage_fault+0x2c>
 800b5be:	4b58      	ldr	r3, [pc, #352]	; (800b720 <mem_manage_fault+0x178>)
 800b5c0:	617b      	str	r3, [r7, #20]
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	f107 0210 	add.w	r2, r7, #16
 800b5ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f00a fdf5 	bl	80161be <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800b5d4:	4b53      	ldr	r3, [pc, #332]	; (800b724 <mem_manage_fault+0x17c>)
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d8:	06da      	lsls	r2, r3, #27
 800b5da:	d50d      	bpl.n	800b5f8 <mem_manage_fault+0x50>
		PR_FAULT_INFO("  Stacking error (context area might be"
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	075b      	lsls	r3, r3, #29
 800b5e0:	d00a      	beq.n	800b5f8 <mem_manage_fault+0x50>
 800b5e2:	4b51      	ldr	r3, [pc, #324]	; (800b728 <mem_manage_fault+0x180>)
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	484c      	ldr	r0, [pc, #304]	; (800b71c <mem_manage_fault+0x174>)
 800b5ea:	613b      	str	r3, [r7, #16]
 800b5ec:	f107 0210 	add.w	r2, r7, #16
 800b5f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b5f4:	f00a fde3 	bl	80161be <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800b5f8:	4b4a      	ldr	r3, [pc, #296]	; (800b724 <mem_manage_fault+0x17c>)
 800b5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fc:	071e      	lsls	r6, r3, #28
 800b5fe:	d50d      	bpl.n	800b61c <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Unstacking error");
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	0758      	lsls	r0, r3, #29
 800b604:	d00a      	beq.n	800b61c <mem_manage_fault+0x74>
 800b606:	4b49      	ldr	r3, [pc, #292]	; (800b72c <mem_manage_fault+0x184>)
 800b608:	617b      	str	r3, [r7, #20]
 800b60a:	2302      	movs	r3, #2
 800b60c:	4843      	ldr	r0, [pc, #268]	; (800b71c <mem_manage_fault+0x174>)
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	f107 0210 	add.w	r2, r7, #16
 800b614:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b618:	f00a fdd1 	bl	80161be <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800b61c:	4b41      	ldr	r3, [pc, #260]	; (800b724 <mem_manage_fault+0x17c>)
 800b61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b620:	0799      	lsls	r1, r3, #30
 800b622:	d43f      	bmi.n	800b6a4 <mem_manage_fault+0xfc>
	uint32_t mmfar = -EINVAL;
 800b624:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800b628:	4b3e      	ldr	r3, [pc, #248]	; (800b724 <mem_manage_fault+0x17c>)
 800b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62c:	07d9      	lsls	r1, r3, #31
 800b62e:	d50d      	bpl.n	800b64c <mem_manage_fault+0xa4>
		PR_FAULT_INFO("  Instruction Access Violation");
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	075a      	lsls	r2, r3, #29
 800b634:	d00a      	beq.n	800b64c <mem_manage_fault+0xa4>
 800b636:	4b3e      	ldr	r3, [pc, #248]	; (800b730 <mem_manage_fault+0x188>)
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	2302      	movs	r3, #2
 800b63c:	4837      	ldr	r0, [pc, #220]	; (800b71c <mem_manage_fault+0x174>)
 800b63e:	613b      	str	r3, [r7, #16]
 800b640:	f107 0210 	add.w	r2, r7, #16
 800b644:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b648:	f00a fdb9 	bl	80161be <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800b64c:	4b35      	ldr	r3, [pc, #212]	; (800b724 <mem_manage_fault+0x17c>)
 800b64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b650:	069b      	lsls	r3, r3, #26
 800b652:	d50d      	bpl.n	800b670 <mem_manage_fault+0xc8>
		PR_FAULT_INFO(
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	075c      	lsls	r4, r3, #29
 800b658:	d00a      	beq.n	800b670 <mem_manage_fault+0xc8>
 800b65a:	4b36      	ldr	r3, [pc, #216]	; (800b734 <mem_manage_fault+0x18c>)
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	2302      	movs	r3, #2
 800b660:	482e      	ldr	r0, [pc, #184]	; (800b71c <mem_manage_fault+0x174>)
 800b662:	613b      	str	r3, [r7, #16]
 800b664:	f107 0210 	add.w	r2, r7, #16
 800b668:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b66c:	f00a fda7 	bl	80161be <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800b670:	4c2c      	ldr	r4, [pc, #176]	; (800b724 <mem_manage_fault+0x17c>)
 800b672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b674:	06d8      	lsls	r0, r3, #27
 800b676:	d443      	bmi.n	800b700 <mem_manage_fault+0x158>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800b678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800b67a:	0799      	lsls	r1, r3, #30
 800b67c:	d440      	bmi.n	800b700 <mem_manage_fault+0x158>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800b67e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800b680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800b682:	4a28      	ldr	r2, [pc, #160]	; (800b724 <mem_manage_fault+0x17c>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800b684:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 800b686:	bf42      	ittt	mi
 800b688:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
 800b68a:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
 800b68e:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800b690:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b692:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800b696:	6293      	str	r3, [r2, #40]	; 0x28
}
 800b698:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
 800b69a:	2300      	movs	r3, #0
 800b69c:	702b      	strb	r3, [r5, #0]
}
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	075a      	lsls	r2, r3, #29
 800b6a8:	d00a      	beq.n	800b6c0 <mem_manage_fault+0x118>
 800b6aa:	4b23      	ldr	r3, [pc, #140]	; (800b738 <mem_manage_fault+0x190>)
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	481a      	ldr	r0, [pc, #104]	; (800b71c <mem_manage_fault+0x174>)
 800b6b2:	613b      	str	r3, [r7, #16]
 800b6b4:	f107 0210 	add.w	r2, r7, #16
 800b6b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b6bc:	f00a fd7f 	bl	80161be <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 800b6c0:	4b18      	ldr	r3, [pc, #96]	; (800b724 <mem_manage_fault+0x17c>)
 800b6c2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800b6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c6:	061b      	lsls	r3, r3, #24
 800b6c8:	d5ac      	bpl.n	800b624 <mem_manage_fault+0x7c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	0758      	lsls	r0, r3, #29
 800b6ce:	d00e      	beq.n	800b6ee <mem_manage_fault+0x146>
 800b6d0:	46ea      	mov	sl, sp
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	466a      	mov	r2, sp
 800b6d6:	4b19      	ldr	r3, [pc, #100]	; (800b73c <mem_manage_fault+0x194>)
 800b6d8:	4810      	ldr	r0, [pc, #64]	; (800b71c <mem_manage_fault+0x174>)
 800b6da:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800b6de:	2303      	movs	r3, #3
 800b6e0:	f842 3f10 	str.w	r3, [r2, #16]!
 800b6e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800b6e8:	f00a fd69 	bl	80161be <z_log_msg_static_create.constprop.0>
 800b6ec:	46d5      	mov	sp, sl
			if (from_hard_fault != 0) {
 800b6ee:	f1b9 0f00 	cmp.w	r9, #0
 800b6f2:	d099      	beq.n	800b628 <mem_manage_fault+0x80>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800b6f4:	4a0b      	ldr	r2, [pc, #44]	; (800b724 <mem_manage_fault+0x17c>)
 800b6f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b6f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6fc:	6293      	str	r3, [r2, #40]	; 0x28
 800b6fe:	e793      	b.n	800b628 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800b700:	6863      	ldr	r3, [r4, #4]
 800b702:	051a      	lsls	r2, r3, #20
 800b704:	d5bb      	bpl.n	800b67e <mem_manage_fault+0xd6>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800b706:	4641      	mov	r1, r8
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff fda3 	bl	800b254 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800b70e:	2800      	cmp	r0, #0
 800b710:	d0b5      	beq.n	800b67e <mem_manage_fault+0xd6>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800b712:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800b716:	2002      	movs	r0, #2
 800b718:	e7b2      	b.n	800b680 <mem_manage_fault+0xd8>
 800b71a:	bf00      	nop
 800b71c:	20000d60 	.word	0x20000d60
 800b720:	0801ccb0 	.word	0x0801ccb0
 800b724:	e000ed00 	.word	0xe000ed00
 800b728:	0801ccc6 	.word	0x0801ccc6
 800b72c:	0801cb40 	.word	0x0801cb40
 800b730:	0801cd27 	.word	0x0801cd27
 800b734:	0801cbb4 	.word	0x0801cbb4
 800b738:	0801ccf9 	.word	0x0801ccf9
 800b73c:	0801cd11 	.word	0x0801cd11

0800b740 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800b740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800b744:	4b88      	ldr	r3, [pc, #544]	; (800b968 <z_arm_fault+0x228>)
{
 800b746:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800b748:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800b750:	f3c8 0408 	ubfx	r4, r8, #0, #9
 800b754:	2600      	movs	r6, #0
 800b756:	f386 8811 	msr	BASEPRI, r6
 800b75a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800b75e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800b762:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800b766:	d111      	bne.n	800b78c <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800b768:	f002 030c 	and.w	r3, r2, #12
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d11c      	bne.n	800b7aa <z_arm_fault+0x6a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 800b770:	487e      	ldr	r0, [pc, #504]	; (800b96c <z_arm_fault+0x22c>)
 800b772:	6803      	ldr	r3, [r0, #0]
 800b774:	0759      	lsls	r1, r3, #29
 800b776:	d009      	beq.n	800b78c <z_arm_fault+0x4c>
 800b778:	4b7d      	ldr	r3, [pc, #500]	; (800b970 <z_arm_fault+0x230>)
 800b77a:	61fb      	str	r3, [r7, #28]
 800b77c:	2302      	movs	r3, #2
 800b77e:	61bb      	str	r3, [r7, #24]
 800b780:	f107 0218 	add.w	r2, r7, #24
 800b784:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b788:	f00a fd19 	bl	80161be <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
 800b78c:	2600      	movs	r6, #0
		return NULL;
 800b78e:	4635      	mov	r5, r6
	*recoverable = false;
 800b790:	2300      	movs	r3, #0
 800b792:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
 800b794:	1ee3      	subs	r3, r4, #3
 800b796:	2b09      	cmp	r3, #9
 800b798:	f200 80c1 	bhi.w	800b91e <z_arm_fault+0x1de>
 800b79c:	e8df f003 	tbb	[pc, r3]
 800b7a0:	a7aeab0a 	.word	0xa7aeab0a
 800b7a4:	bfbfbfbf 	.word	0xbfbfbfbf
 800b7a8:	b1bf      	.short	0xb1bf
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800b7aa:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 800b7ac:	bf4c      	ite	mi
 800b7ae:	460d      	movmi	r5, r1
			*nested_exc = true;
 800b7b0:	2601      	movpl	r6, #1
 800b7b2:	e7ed      	b.n	800b790 <z_arm_fault+0x50>
	PR_FAULT_INFO("***** HARD FAULT *****");
 800b7b4:	4c6d      	ldr	r4, [pc, #436]	; (800b96c <z_arm_fault+0x22c>)
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	075b      	lsls	r3, r3, #29
 800b7ba:	d00a      	beq.n	800b7d2 <z_arm_fault+0x92>
 800b7bc:	4b6d      	ldr	r3, [pc, #436]	; (800b974 <z_arm_fault+0x234>)
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	61bb      	str	r3, [r7, #24]
 800b7c4:	f107 0218 	add.w	r2, r7, #24
 800b7c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f00a fcf6 	bl	80161be <z_log_msg_static_create.constprop.0>
	*recoverable = false;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800b7d6:	4b64      	ldr	r3, [pc, #400]	; (800b968 <z_arm_fault+0x228>)
 800b7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7da:	0790      	lsls	r0, r2, #30
 800b7dc:	d50f      	bpl.n	800b7fe <z_arm_fault+0xbe>
		PR_EXC("  Bus fault on vector table read");
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	0759      	lsls	r1, r3, #29
 800b7e2:	d00a      	beq.n	800b7fa <z_arm_fault+0xba>
 800b7e4:	4b64      	ldr	r3, [pc, #400]	; (800b978 <z_arm_fault+0x238>)
		PR_EXC("  Debug event");
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	4860      	ldr	r0, [pc, #384]	; (800b96c <z_arm_fault+0x22c>)
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	61bb      	str	r3, [r7, #24]
 800b7ee:	f107 0218 	add.w	r2, r7, #24
 800b7f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
 800b7f6:	f00a fce2 	bl	80161be <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800b7fa:	2400      	movs	r4, #0
 800b7fc:	e04e      	b.n	800b89c <z_arm_fault+0x15c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800b7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b800:	2a00      	cmp	r2, #0
 800b802:	da04      	bge.n	800b80e <z_arm_fault+0xce>
		PR_EXC("  Debug event");
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	075a      	lsls	r2, r3, #29
 800b808:	d0f7      	beq.n	800b7fa <z_arm_fault+0xba>
 800b80a:	4b5c      	ldr	r3, [pc, #368]	; (800b97c <z_arm_fault+0x23c>)
 800b80c:	e7eb      	b.n	800b7e6 <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800b80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	d5f2      	bpl.n	800b7fa <z_arm_fault+0xba>
		PR_EXC("  Fault escalation (see below)");
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	0758      	lsls	r0, r3, #29
 800b818:	d00a      	beq.n	800b830 <z_arm_fault+0xf0>
 800b81a:	4b59      	ldr	r3, [pc, #356]	; (800b980 <z_arm_fault+0x240>)
 800b81c:	61fb      	str	r3, [r7, #28]
 800b81e:	2302      	movs	r3, #2
 800b820:	4852      	ldr	r0, [pc, #328]	; (800b96c <z_arm_fault+0x22c>)
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	f107 0218 	add.w	r2, r7, #24
 800b828:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b82c:	f00a fcc7 	bl	80161be <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 800b830:	4b4d      	ldr	r3, [pc, #308]	; (800b968 <z_arm_fault+0x228>)
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 800b832:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 800b834:	695a      	ldr	r2, [r3, #20]
 800b836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b83a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b83c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b840:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800b844:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 800b846:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800b84a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b84e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b850:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b854:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800b858:	f64d 7202 	movw	r2, #57090	; 0xdf02
 800b85c:	4291      	cmp	r1, r2
 800b85e:	d009      	beq.n	800b874 <z_arm_fault+0x134>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 800b860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	2a00      	cmp	r2, #0
 800b866:	d035      	beq.n	800b8d4 <z_arm_fault+0x194>
			reason = mem_manage_fault(esf, 1, recoverable);
 800b868:	1dfa      	adds	r2, r7, #7
 800b86a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800b86c:	4628      	mov	r0, r5
 800b86e:	f7ff fe9b 	bl	800b5a8 <mem_manage_fault>
 800b872:	e03e      	b.n	800b8f2 <z_arm_fault+0x1b2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	0759      	lsls	r1, r3, #29
 800b878:	d00f      	beq.n	800b89a <z_arm_fault+0x15a>
 800b87a:	466c      	mov	r4, sp
 800b87c:	b088      	sub	sp, #32
 800b87e:	682b      	ldr	r3, [r5, #0]
 800b880:	466a      	mov	r2, sp
 800b882:	4940      	ldr	r1, [pc, #256]	; (800b984 <z_arm_fault+0x244>)
 800b884:	4839      	ldr	r0, [pc, #228]	; (800b96c <z_arm_fault+0x22c>)
 800b886:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800b88a:	2303      	movs	r3, #3
 800b88c:	f842 3f10 	str.w	r3, [r2, #16]!
 800b890:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800b894:	f00a fc93 	bl	80161be <z_log_msg_static_create.constprop.0>
 800b898:	46a5      	mov	sp, r4
			reason = esf->basic.r0;
 800b89a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	b9ab      	cbnz	r3, 800b8cc <z_arm_fault+0x18c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800b8a0:	2268      	movs	r2, #104	; 0x68
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f107 0008 	add.w	r0, r7, #8
 800b8a8:	f7f5 fbf2 	bl	8001090 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	2e00      	cmp	r6, #0
 800b8b0:	d054      	beq.n	800b95c <z_arm_fault+0x21c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800b8b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8b6:	b922      	cbnz	r2, 800b8c2 <z_arm_fault+0x182>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800b8b8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800b8bc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 800b8c2:	f107 0108 	add.w	r1, r7, #8
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7ff fab8 	bl	800ae3c <z_arm_fatal_error>
}
 800b8cc:	3770      	adds	r7, #112	; 0x70
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 800b8d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8d6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800b8da:	d004      	beq.n	800b8e6 <z_arm_fault+0x1a6>
			reason = bus_fault(esf, 1, recoverable);
 800b8dc:	1df9      	adds	r1, r7, #7
 800b8de:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 800b8e0:	f7ff fd1c 	bl	800b31c <bus_fault.constprop.0>
 800b8e4:	e005      	b.n	800b8f2 <z_arm_fault+0x1b2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 800b8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ec:	d385      	bcc.n	800b7fa <z_arm_fault+0xba>
			reason = usage_fault(esf);
 800b8ee:	f7ff fdc9 	bl	800b484 <usage_fault.constprop.0>
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	e7d2      	b.n	800b89c <z_arm_fault+0x15c>
		reason = mem_manage_fault(esf, 0, recoverable);
 800b8f6:	1dfa      	adds	r2, r7, #7
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	e7b7      	b.n	800b86c <z_arm_fault+0x12c>
		reason = bus_fault(esf, 0, recoverable);
 800b8fc:	1df9      	adds	r1, r7, #7
 800b8fe:	2000      	movs	r0, #0
 800b900:	e7ee      	b.n	800b8e0 <z_arm_fault+0x1a0>
	PR_FAULT_INFO(
 800b902:	481a      	ldr	r0, [pc, #104]	; (800b96c <z_arm_fault+0x22c>)
 800b904:	6803      	ldr	r3, [r0, #0]
 800b906:	075a      	lsls	r2, r3, #29
 800b908:	f43f af77 	beq.w	800b7fa <z_arm_fault+0xba>
 800b90c:	4b1e      	ldr	r3, [pc, #120]	; (800b988 <z_arm_fault+0x248>)
 800b90e:	61fb      	str	r3, [r7, #28]
 800b910:	2302      	movs	r3, #2
 800b912:	61bb      	str	r3, [r7, #24]
 800b914:	f107 0218 	add.w	r2, r7, #24
 800b918:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b91c:	e76b      	b.n	800b7f6 <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
 800b91e:	4813      	ldr	r0, [pc, #76]	; (800b96c <z_arm_fault+0x22c>)
 800b920:	6803      	ldr	r3, [r0, #0]
 800b922:	075b      	lsls	r3, r3, #29
 800b924:	f43f af69 	beq.w	800b7fa <z_arm_fault+0xba>
 800b928:	4a18      	ldr	r2, [pc, #96]	; (800b98c <z_arm_fault+0x24c>)
 800b92a:	4b19      	ldr	r3, [pc, #100]	; (800b990 <z_arm_fault+0x250>)
 800b92c:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
 800b930:	46e8      	mov	r8, sp
 800b932:	b08a      	sub	sp, #40	; 0x28
 800b934:	bf18      	it	ne
 800b936:	4613      	movne	r3, r2
 800b938:	466a      	mov	r2, sp
 800b93a:	4916      	ldr	r1, [pc, #88]	; (800b994 <z_arm_fault+0x254>)
 800b93c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800b940:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b944:	8413      	strh	r3, [r2, #32]
 800b946:	3c10      	subs	r4, #16
 800b948:	4b13      	ldr	r3, [pc, #76]	; (800b998 <z_arm_fault+0x258>)
 800b94a:	61d4      	str	r4, [r2, #28]
 800b94c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 800b950:	f842 3f10 	str.w	r3, [r2, #16]!
 800b954:	f00a fc33 	bl	80161be <z_log_msg_static_create.constprop.0>
 800b958:	46c5      	mov	sp, r8
 800b95a:	e74e      	b.n	800b7fa <z_arm_fault+0xba>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800b95c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b960:	f023 0301 	bic.w	r3, r3, #1
 800b964:	e7ac      	b.n	800b8c0 <z_arm_fault+0x180>
 800b966:	bf00      	nop
 800b968:	e000ed00 	.word	0xe000ed00
 800b96c:	20000d60 	.word	0x20000d60
 800b970:	0801cd74 	.word	0x0801cd74
 800b974:	0801cd9f 	.word	0x0801cd9f
 800b978:	0801cdb6 	.word	0x0801cdb6
 800b97c:	0801cdd7 	.word	0x0801cdd7
 800b980:	0801cde5 	.word	0x0801cde5
 800b984:	0801ce04 	.word	0x0801ce04
 800b988:	0801ce20 	.word	0x0801ce20
 800b98c:	0801cd5b 	.word	0x0801cd5b
 800b990:	0801cd46 	.word	0x0801cd46
 800b994:	0801ce44 	.word	0x0801ce44
 800b998:	01000004 	.word	0x01000004

0800b99c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800b99c:	4a02      	ldr	r2, [pc, #8]	; (800b9a8 <z_arm_fault_init+0xc>)
 800b99e:	6953      	ldr	r3, [r2, #20]
 800b9a0:	f043 0310 	orr.w	r3, r3, #16
 800b9a4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 800b9a6:	4770      	bx	lr
 800b9a8:	e000ed00 	.word	0xe000ed00

0800b9ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 800b9ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 800b9b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800b9b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800b9b6:	4672      	mov	r2, lr
	bl z_arm_fault
 800b9b8:	f7ff fec2 	bl	800b740 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800b9bc:	bd01      	pop	{r0, pc}
 800b9be:	bf00      	nop

0800b9c0 <z_arm_interrupt_init>:
 800b9c0:	4804      	ldr	r0, [pc, #16]	; (800b9d4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2110      	movs	r1, #16
 800b9c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	2b52      	cmp	r3, #82	; 0x52
 800b9cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800b9d0:	d1f9      	bne.n	800b9c6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800b9d2:	4770      	bx	lr
 800b9d4:	e000e100 	.word	0xe000e100

0800b9d8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800b9d8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800b9da:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
 800b9de:	480b      	ldr	r0, [pc, #44]	; (800ba0c <__start+0x34>)
    ldr r1, =0xaa
 800b9e0:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800b9e4:	f44f 6204 	mov.w	r2, #2112	; 0x840
    bl z_early_memset
 800b9e8:	f00d fe40 	bl	801966c <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800b9ec:	4807      	ldr	r0, [pc, #28]	; (800ba0c <__start+0x34>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800b9ee:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 800b9f2:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800b9f4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800b9f8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800b9fc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800b9fe:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800ba00:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800ba04:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800ba08:	f7ff fb0c 	bl	800b024 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
 800ba0c:	20003000 	.word	0x20003000

0800ba10 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800ba10:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <z_impl_k_thread_abort+0x24>)
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	4283      	cmp	r3, r0
 800ba16:	d10b      	bne.n	800ba30 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba18:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800ba1c:	b143      	cbz	r3, 800ba30 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800ba1e:	4b06      	ldr	r3, [pc, #24]	; (800ba38 <z_impl_k_thread_abort+0x28>)
 800ba20:	685a      	ldr	r2, [r3, #4]
 800ba22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ba26:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 800ba28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba2e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800ba30:	f004 bc62 	b.w	80102f8 <z_thread_abort>
 800ba34:	20002200 	.word	0x20002200
 800ba38:	e000ed00 	.word	0xe000ed00

0800ba3c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 800ba3c:	4b02      	ldr	r3, [pc, #8]	; (800ba48 <z_arm_configure_static_mpu_regions+0xc>)
 800ba3e:	4a03      	ldr	r2, [pc, #12]	; (800ba4c <z_arm_configure_static_mpu_regions+0x10>)
 800ba40:	4803      	ldr	r0, [pc, #12]	; (800ba50 <z_arm_configure_static_mpu_regions+0x14>)
 800ba42:	2101      	movs	r1, #1
 800ba44:	f000 b8a0 	b.w	800bb88 <arm_core_mpu_configure_static_mpu_regions>
 800ba48:	20018000 	.word	0x20018000
 800ba4c:	20000000 	.word	0x20000000
 800ba50:	0801ac5c 	.word	0x0801ac5c

0800ba54 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 800ba54:	b510      	push	{r4, lr}
 800ba56:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 800ba58:	f7ff fbbc 	bl	800b1d4 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 800ba5c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 800ba60:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800ba62:	4805      	ldr	r0, [pc, #20]	; (800ba78 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
 800ba64:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
 800ba66:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800ba6a:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <z_arm_configure_dynamic_mpu_regions+0x28>)
 800ba6c:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
 800ba6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800ba72:	2101      	movs	r1, #1
 800ba74:	f000 b892 	b.w	800bb9c <arm_core_mpu_configure_dynamic_mpu_regions>
 800ba78:	20001dcc 	.word	0x20001dcc
 800ba7c:	150b0000 	.word	0x150b0000

0800ba80 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 800ba84:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 800bb58 <mpu_configure_regions+0xd8>
 800ba88:	469c      	mov	ip, r3
 800ba8a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
 800ba8c:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
 800ba8e:	2300      	movs	r3, #0
 800ba90:	428b      	cmp	r3, r1
 800ba92:	da1d      	bge.n	800bad0 <mpu_configure_regions+0x50>
		if (regions[i].size == 0U) {
 800ba94:	6844      	ldr	r4, [r0, #4]
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	d054      	beq.n	800bb44 <mpu_configure_regions+0xc4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800ba9a:	f1bc 0f00 	cmp.w	ip, #0
 800ba9e:	d020      	beq.n	800bae2 <mpu_configure_regions+0x62>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 800baa0:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800baa2:	4234      	tst	r4, r6
 800baa4:	d018      	beq.n	800bad8 <mpu_configure_regions+0x58>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 800baa6:	4829      	ldr	r0, [pc, #164]	; (800bb4c <mpu_configure_regions+0xcc>)
 800baa8:	6802      	ldr	r2, [r0, #0]
 800baaa:	0752      	lsls	r2, r2, #29
 800baac:	d00e      	beq.n	800bacc <mpu_configure_regions+0x4c>
 800baae:	466c      	mov	r4, sp
 800bab0:	b088      	sub	sp, #32
 800bab2:	466a      	mov	r2, sp
 800bab4:	4926      	ldr	r1, [pc, #152]	; (800bb50 <mpu_configure_regions+0xd0>)
 800bab6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800baba:	2303      	movs	r3, #3
 800babc:	f842 3f10 	str.w	r3, [r2, #16]!
 800bac0:	2300      	movs	r3, #0
 800bac2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bac6:	f7fc fb43 	bl	8008150 <z_impl_z_log_msg_static_create>
 800baca:	46a5      	mov	sp, r4
			return -EINVAL;
 800bacc:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800bad0:	4628      	mov	r0, r5
 800bad2:	46bd      	mov	sp, r7
 800bad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
 800bad8:	2c1f      	cmp	r4, #31
 800bada:	d9e4      	bls.n	800baa6 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
 800badc:	6802      	ldr	r2, [r0, #0]
		&&
 800bade:	4216      	tst	r6, r2
 800bae0:	d1e1      	bne.n	800baa6 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800bae2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 800bae4:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800bae6:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800bae8:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
 800baec:	d918      	bls.n	800bb20 <mpu_configure_regions+0xa0>
	if (size > (1UL << 31)) {
 800baee:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800baf2:	d817      	bhi.n	800bb24 <mpu_configure_regions+0xa4>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800baf4:	3c01      	subs	r4, #1
 800baf6:	fab4 f484 	clz	r4, r4
 800bafa:	f1c4 041f 	rsb	r4, r4, #31
 800bafe:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800bb00:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800bb04:	ea46 0604 	orr.w	r6, r6, r4
 800bb08:	d90e      	bls.n	800bb28 <mpu_configure_regions+0xa8>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800bb0a:	4810      	ldr	r0, [pc, #64]	; (800bb4c <mpu_configure_regions+0xcc>)
 800bb0c:	6803      	ldr	r3, [r0, #0]
 800bb0e:	075b      	lsls	r3, r3, #29
 800bb10:	d0dc      	beq.n	800bacc <mpu_configure_regions+0x4c>
 800bb12:	466c      	mov	r4, sp
 800bb14:	b088      	sub	sp, #32
 800bb16:	466a      	mov	r2, sp
 800bb18:	4b0e      	ldr	r3, [pc, #56]	; (800bb54 <mpu_configure_regions+0xd4>)
 800bb1a:	e9c2 3505 	strd	r3, r5, [r2, #20]
 800bb1e:	e7cc      	b.n	800baba <mpu_configure_regions+0x3a>
		return REGION_32B;
 800bb20:	2408      	movs	r4, #8
 800bb22:	e7ed      	b.n	800bb00 <mpu_configure_regions+0x80>
		return REGION_4G;
 800bb24:	243e      	movs	r4, #62	; 0x3e
 800bb26:	e7eb      	b.n	800bb00 <mpu_configure_regions+0x80>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800bb28:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 800bb2c:	432a      	orrs	r2, r5
 800bb2e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800bb32:	f046 0601 	orr.w	r6, r6, #1
 800bb36:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800bb3a:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
 800bb3e:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800bb40:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 800bb44:	3301      	adds	r3, #1
 800bb46:	300c      	adds	r0, #12
 800bb48:	e7a2      	b.n	800ba90 <mpu_configure_regions+0x10>
 800bb4a:	bf00      	nop
 800bb4c:	20000d5c 	.word	0x20000d5c
 800bb50:	0801ce5b 	.word	0x0801ce5b
 800bb54:	0801ce7e 	.word	0x0801ce7e
 800bb58:	e000ed00 	.word	0xe000ed00

0800bb5c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800bb5c:	4b04      	ldr	r3, [pc, #16]	; (800bb70 <arm_core_mpu_enable+0x14>)
 800bb5e:	2205      	movs	r2, #5
 800bb60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800bb64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bb68:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	e000ed00 	.word	0xe000ed00

0800bb74 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800bb74:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 800bb78:	4b02      	ldr	r3, [pc, #8]	; (800bb84 <arm_core_mpu_disable+0x10>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	e000ed00 	.word	0xe000ed00

0800bb88 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 800bb88:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800bb8a:	4c03      	ldr	r4, [pc, #12]	; (800bb98 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	7822      	ldrb	r2, [r4, #0]
 800bb90:	f7ff ff76 	bl	800ba80 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800bb94:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800bb96:	bd10      	pop	{r4, pc}
 800bb98:	2000238c 	.word	0x2000238c

0800bb9c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 800bb9c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800bb9e:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	7812      	ldrb	r2, [r2, #0]
 800bba4:	f7ff ff6c 	bl	800ba80 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 800bba8:	f110 0f16 	cmn.w	r0, #22
 800bbac:	d003      	beq.n	800bbb6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800bbae:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 800bbb0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800bbb2:	2807      	cmp	r0, #7
 800bbb4:	dd00      	ble.n	800bbb8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 800bbb6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 800bbb8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 800bbbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	e7f6      	b.n	800bbb2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 800bbc4:	2000238c 	.word	0x2000238c
 800bbc8:	e000ed00 	.word	0xe000ed00

0800bbcc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800bbcc:	4914      	ldr	r1, [pc, #80]	; (800bc20 <z_arm_mpu_init+0x54>)
 800bbce:	6808      	ldr	r0, [r1, #0]
 800bbd0:	2808      	cmp	r0, #8
{
 800bbd2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 800bbd4:	d821      	bhi.n	800bc1a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800bbd6:	f7ff ffcd 	bl	800bb74 <arm_core_mpu_disable>
 800bbda:	4c12      	ldr	r4, [pc, #72]	; (800bc24 <z_arm_mpu_init+0x58>)
 800bbdc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4290      	cmp	r0, r2
 800bbe2:	f101 010c 	add.w	r1, r1, #12
 800bbe6:	d105      	bne.n	800bbf4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800bbe8:	4b0f      	ldr	r3, [pc, #60]	; (800bc28 <z_arm_mpu_init+0x5c>)
 800bbea:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 800bbec:	f7ff ffb6 	bl	800bb5c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800bbf0:	2000      	movs	r0, #0
}
 800bbf2:	bd10      	pop	{r4, pc}
 800bbf4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800bbf8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800bbfc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800bc00:	4313      	orrs	r3, r2
 800bc02:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800bc06:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800bc0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0e:	f043 0301 	orr.w	r3, r3, #1
 800bc12:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800bc16:	3201      	adds	r2, #1
 800bc18:	e7e2      	b.n	800bbe0 <z_arm_mpu_init+0x14>
		return -1;
 800bc1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc1e:	e7e8      	b.n	800bbf2 <z_arm_mpu_init+0x26>
 800bc20:	0801ac68 	.word	0x0801ac68
 800bc24:	e000ed00 	.word	0xe000ed00
 800bc28:	2000238c 	.word	0x2000238c

0800bc2c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800bc2c:	4b01      	ldr	r3, [pc, #4]	; (800bc34 <__stdout_hook_install+0x8>)
 800bc2e:	6018      	str	r0, [r3, #0]
}
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	2000072c 	.word	0x2000072c

0800bc38 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 800bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 800bc3a:	4f08      	ldr	r7, [pc, #32]	; (800bc5c <z_impl_zephyr_read_stdin+0x24>)
{
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 800bc40:	2400      	movs	r4, #0
 800bc42:	42ac      	cmp	r4, r5
 800bc44:	da08      	bge.n	800bc58 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800bc4a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 800bc4c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 800bc4e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800bc52:	d001      	beq.n	800bc58 <z_impl_zephyr_read_stdin+0x20>
 800bc54:	280d      	cmp	r0, #13
 800bc56:	d1f4      	bne.n	800bc42 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 800bc58:	4620      	mov	r0, r4
 800bc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc5c:	20000728 	.word	0x20000728

0800bc60 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	4f0a      	ldr	r7, [pc, #40]	; (800bc8c <z_impl_zephyr_write_stdout+0x2c>)
 800bc64:	460d      	mov	r5, r1
 800bc66:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800bc68:	f1c0 0401 	rsb	r4, r0, #1
 800bc6c:	19a3      	adds	r3, r4, r6
 800bc6e:	429d      	cmp	r5, r3
 800bc70:	dc01      	bgt.n	800bc76 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 800bc72:	4628      	mov	r0, r5
 800bc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 800bc76:	7873      	ldrb	r3, [r6, #1]
 800bc78:	2b0a      	cmp	r3, #10
 800bc7a:	d102      	bne.n	800bc82 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	200d      	movs	r0, #13
 800bc80:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 800bc88:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 800bc8a:	e7ef      	b.n	800bc6c <z_impl_zephyr_write_stdout+0xc>
 800bc8c:	2000072c 	.word	0x2000072c

0800bc90 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 800bc90:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800bc92:	4802      	ldr	r0, [pc, #8]	; (800bc9c <_exit+0xc>)
 800bc94:	2105      	movs	r1, #5
 800bc96:	f7ff ffe3 	bl	800bc60 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
 800bc9a:	e7fe      	b.n	800bc9a <_exit+0xa>
 800bc9c:	0801cea4 	.word	0x0801cea4

0800bca0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 800bca0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 800bca2:	4c07      	ldr	r4, [pc, #28]	; (800bcc0 <_sbrk+0x20>)
 800bca4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 800bca6:	18c2      	adds	r2, r0, r3
 800bca8:	4806      	ldr	r0, [pc, #24]	; (800bcc4 <_sbrk+0x24>)
 800bcaa:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 800bcae:	f501 31c0 	add.w	r1, r1, #98304	; 0x18000
 800bcb2:	428a      	cmp	r2, r1
		heap_sz += count;
 800bcb4:	bf3a      	itte	cc
 800bcb6:	6022      	strcc	r2, [r4, #0]
	ptr = ((char *)HEAP_BASE) + heap_sz;
 800bcb8:	18c0      	addcc	r0, r0, r3

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 800bcba:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 800bcbe:	bd10      	pop	{r4, pc}
 800bcc0:	20001dd8 	.word	0x20001dd8
 800bcc4:	20004508 	.word	0x20004508

0800bcc8 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 800bcc8:	b508      	push	{r3, lr}
 800bcca:	211d      	movs	r1, #29
 800bccc:	4804      	ldr	r0, [pc, #16]	; (800bce0 <__chk_fail+0x18>)
 800bcce:	f7ff ffc7 	bl	800bc60 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 800bcd2:	4040      	eors	r0, r0
 800bcd4:	f380 8811 	msr	BASEPRI, r0
 800bcd8:	f04f 0003 	mov.w	r0, #3
 800bcdc:	df02      	svc	2
	CODE_UNREACHABLE;
 800bcde:	bf00      	nop
 800bce0:	0801ceaa 	.word	0x0801ceaa

0800bce4 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 800bce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800bce8:	4f0d      	ldr	r7, [pc, #52]	; (800bd20 <__stm32_exti_isr.isra.0+0x3c>)
 800bcea:	4604      	mov	r4, r0
 800bcec:	460e      	mov	r6, r1
 800bcee:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800bcf0:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800bcf4:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 800bcf8:	42b4      	cmp	r4, r6
 800bcfa:	db01      	blt.n	800bd00 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800bcfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd00:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800bd02:	fa08 f304 	lsl.w	r3, r8, r4
 800bd06:	ea33 0202 	bics.w	r2, r3, r2
 800bd0a:	d107      	bne.n	800bd1c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800bd0c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800bd0e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800bd12:	b11b      	cbz	r3, 800bd1c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800bd14:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800bd1c:	3401      	adds	r4, #1
 800bd1e:	e7eb      	b.n	800bcf8 <__stm32_exti_isr.isra.0+0x14>
 800bd20:	40010400 	.word	0x40010400

0800bd24 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 800bd24:	4a04      	ldr	r2, [pc, #16]	; (800bd38 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 800bd26:	2301      	movs	r3, #1
 800bd28:	6811      	ldr	r1, [r2, #0]
 800bd2a:	4083      	lsls	r3, r0
 800bd2c:	430b      	orrs	r3, r1
 800bd2e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800bd30:	4b02      	ldr	r3, [pc, #8]	; (800bd3c <stm32_exti_enable+0x18>)
 800bd32:	5618      	ldrsb	r0, [r3, r0]
 800bd34:	f7ff b94c 	b.w	800afd0 <arch_irq_enable>
 800bd38:	40010400 	.word	0x40010400
 800bd3c:	0801cef5 	.word	0x0801cef5

0800bd40 <stm32_exti_disable>:
	if (line < 32) {
 800bd40:	281f      	cmp	r0, #31
 800bd42:	dc06      	bgt.n	800bd52 <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800bd44:	4903      	ldr	r1, [pc, #12]	; (800bd54 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800bd46:	2201      	movs	r2, #1
 800bd48:	680b      	ldr	r3, [r1, #0]
 800bd4a:	4082      	lsls	r2, r0
 800bd4c:	ea23 0302 	bic.w	r3, r3, r2
 800bd50:	600b      	str	r3, [r1, #0]
}
 800bd52:	4770      	bx	lr
 800bd54:	40010400 	.word	0x40010400

0800bd58 <stm32_exti_trigger>:
	switch (trigger) {
 800bd58:	2903      	cmp	r1, #3
 800bd5a:	d82a      	bhi.n	800bdb2 <stm32_exti_trigger+0x5a>
 800bd5c:	e8df f001 	tbb	[pc, r1]
 800bd60:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800bd64:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800bd66:	2201      	movs	r2, #1
 800bd68:	6899      	ldr	r1, [r3, #8]
 800bd6a:	4082      	lsls	r2, r0
 800bd6c:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800bd70:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800bd72:	68d9      	ldr	r1, [r3, #12]
 800bd74:	ea21 0202 	bic.w	r2, r1, r2
 800bd78:	60da      	str	r2, [r3, #12]
}
 800bd7a:	4770      	bx	lr
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800bd7c:	4b0d      	ldr	r3, [pc, #52]	; (800bdb4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800bd7e:	2201      	movs	r2, #1
 800bd80:	6899      	ldr	r1, [r3, #8]
 800bd82:	4082      	lsls	r2, r0
 800bd84:	4311      	orrs	r1, r2
 800bd86:	e7f3      	b.n	800bd70 <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	68d9      	ldr	r1, [r3, #12]
 800bd8e:	4082      	lsls	r2, r0
 800bd90:	4311      	orrs	r1, r2
 800bd92:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800bd94:	6899      	ldr	r1, [r3, #8]
 800bd96:	ea21 0202 	bic.w	r2, r1, r2
 800bd9a:	609a      	str	r2, [r3, #8]
}
 800bd9c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800bd9e:	2301      	movs	r3, #1
 800bda0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800bda4:	4b03      	ldr	r3, [pc, #12]	; (800bdb4 <stm32_exti_trigger+0x5c>)
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	4302      	orrs	r2, r0
 800bdaa:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	4310      	orrs	r0, r2
 800bdb0:	60d8      	str	r0, [r3, #12]
}
 800bdb2:	4770      	bx	lr
 800bdb4:	40010400 	.word	0x40010400

0800bdb8 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 800bdb8:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800bdba:	4b07      	ldr	r3, [pc, #28]	; (800bdd8 <stm32_exti_set_callback+0x20>)
{
 800bdbc:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800bdbe:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800bdc2:	b928      	cbnz	r0, 800bdd0 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800bdc4:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 800bdc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdcc:	605a      	str	r2, [r3, #4]

	return 0;
}
 800bdce:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800bdd0:	f06f 000f 	mvn.w	r0, #15
 800bdd4:	e7fb      	b.n	800bdce <stm32_exti_set_callback+0x16>
 800bdd6:	bf00      	nop
 800bdd8:	20001ddc 	.word	0x20001ddc

0800bddc <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800bddc:	4b03      	ldr	r3, [pc, #12]	; (800bdec <stm32_exti_unset_callback+0x10>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800bde4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800bde8:	605a      	str	r2, [r3, #4]
}
 800bdea:	4770      	bx	lr
 800bdec:	20001ddc 	.word	0x20001ddc

0800bdf0 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800bdf0:	4b02      	ldr	r3, [pc, #8]	; (800bdfc <LL_RCC_HSI_IsReady+0xc>)
 800bdf2:	6818      	ldr	r0, [r3, #0]
}
 800bdf4:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	40021000 	.word	0x40021000

0800be00 <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 800be00:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800be02:	4b20      	ldr	r3, [pc, #128]	; (800be84 <stm32_clock_control_get_subsys_rate+0x84>)
 800be04:	6818      	ldr	r0, [r3, #0]
	/* AHB3 bus exists, but w/o dedicated prescaler */
	uint32_t ahb3_clock = ahb_clock;
#endif

#if defined(STM32_SRC_PCLK)
	if (pclken->bus == STM32_SRC_PCLK) {
 800be06:	680b      	ldr	r3, [r1, #0]
 800be08:	2b07      	cmp	r3, #7
{
 800be0a:	4614      	mov	r4, r2
	if (pclken->bus == STM32_SRC_PCLK) {
 800be0c:	d015      	beq.n	800be3a <stm32_clock_control_get_subsys_rate+0x3a>
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800be0e:	2b0a      	cmp	r3, #10
 800be10:	d80a      	bhi.n	800be28 <stm32_clock_control_get_subsys_rate+0x28>
 800be12:	b193      	cbz	r3, 800be3a <stm32_clock_control_get_subsys_rate+0x3a>
 800be14:	3b01      	subs	r3, #1
 800be16:	2b09      	cmp	r3, #9
 800be18:	d80f      	bhi.n	800be3a <stm32_clock_control_get_subsys_rate+0x3a>
 800be1a:	e8df f003 	tbb	[pc, r3]
 800be1e:	0e30      	.short	0x0e30
 800be20:	170e2e15 	.word	0x170e2e15
 800be24:	28221a0e 	.word	0x28221a0e
 800be28:	2b58      	cmp	r3, #88	; 0x58
 800be2a:	d00f      	beq.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
 800be2c:	d808      	bhi.n	800be40 <stm32_clock_control_get_subsys_rate+0x40>
 800be2e:	2b4c      	cmp	r3, #76	; 0x4c
 800be30:	d00c      	beq.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
 800be32:	2b50      	cmp	r3, #80	; 0x50
 800be34:	d00a      	beq.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
 800be36:	2b48      	cmp	r3, #72	; 0x48
 800be38:	d008      	beq.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
 800be3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800be3e:	e007      	b.n	800be50 <stm32_clock_control_get_subsys_rate+0x50>
 800be40:	2b5c      	cmp	r3, #92	; 0x5c
 800be42:	d003      	beq.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
 800be44:	2b60      	cmp	r3, #96	; 0x60
 800be46:	e7f7      	b.n	800be38 <stm32_clock_control_get_subsys_rate+0x38>
 800be48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	case STM32_CLOCK_BUS_AHB2:
#endif
#if defined(STM32_CLOCK_BUS_IOP)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 800be4c:	6020      	str	r0, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800be4e:	2000      	movs	r0, #0
}
 800be50:	bd10      	pop	{r4, pc}
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 800be52:	f000 f8b9 	bl	800bfc8 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 800be56:	2314      	movs	r3, #20
 800be58:	4358      	muls	r0, r3
 800be5a:	2307      	movs	r3, #7
 800be5c:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 800be60:	e7f4      	b.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 800be62:	f000 f8b1 	bl	800bfc8 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 800be66:	2314      	movs	r3, #20
 800be68:	4358      	muls	r0, r3
 800be6a:	0840      	lsrs	r0, r0, #1
		break;
 800be6c:	e7ee      	b.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 800be6e:	f000 f8ab 	bl	800bfc8 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 800be72:	2314      	movs	r3, #20
 800be74:	4358      	muls	r0, r3
 800be76:	0880      	lsrs	r0, r0, #2
		break;
 800be78:	e7e8      	b.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
		break;
 800be7a:	2000      	movs	r0, #0
 800be7c:	e7e6      	b.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
		break;
 800be7e:	4802      	ldr	r0, [pc, #8]	; (800be88 <stm32_clock_control_get_subsys_rate+0x88>)
 800be80:	e7e4      	b.n	800be4c <stm32_clock_control_get_subsys_rate+0x4c>
 800be82:	bf00      	nop
 800be84:	20000878 	.word	0x20000878
 800be88:	00f42400 	.word	0x00f42400

0800be8c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 800be8c:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800be8e:	4c48      	ldr	r4, [pc, #288]	; (800bfb0 <stm32_clock_control_init+0x124>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800be90:	4e48      	ldr	r6, [pc, #288]	; (800bfb4 <stm32_clock_control_init+0x128>)
	config_enable_default_clocks();
 800be92:	f000 f8af 	bl	800bff4 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800be96:	f003 f8b7 	bl	800f008 <HAL_RCC_GetSysClockFreq>
 800be9a:	68a3      	ldr	r3, [r4, #8]
 800be9c:	4a46      	ldr	r2, [pc, #280]	; (800bfb8 <stm32_clock_control_init+0x12c>)
 800be9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bea2:	5cd3      	ldrb	r3, [r2, r3]
 800bea4:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800bea8:	42b5      	cmp	r5, r6
 800beaa:	d802      	bhi.n	800beb2 <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 800beac:	4843      	ldr	r0, [pc, #268]	; (800bfbc <stm32_clock_control_init+0x130>)
 800beae:	f003 f8f9 	bl	800f0a4 <LL_SetFlashLatency>
		if (LL_RCC_HSI_IsReady() != 1) {
 800beb2:	f7ff ff9d 	bl	800bdf0 <LL_RCC_HSI_IsReady>
 800beb6:	2801      	cmp	r0, #1
 800beb8:	d007      	beq.n	800beca <stm32_clock_control_init+0x3e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bec0:	6023      	str	r3, [r4, #0]
			while (LL_RCC_HSI_IsReady() != 1) {
 800bec2:	f7ff ff95 	bl	800bdf0 <LL_RCC_HSI_IsReady>
 800bec6:	2801      	cmp	r0, #1
 800bec8:	d1fb      	bne.n	800bec2 <stm32_clock_control_init+0x36>
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800beca:	4b3d      	ldr	r3, [pc, #244]	; (800bfc0 <stm32_clock_control_init+0x134>)
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bed2:	601a      	str	r2, [r3, #0]
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	05d1      	lsls	r1, r2, #23
 800bed8:	d5fc      	bpl.n	800bed4 <stm32_clock_control_init+0x48>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800beda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bede:	f043 0301 	orr.w	r3, r3, #1
 800bee2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800bee6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800beea:	079a      	lsls	r2, r3, #30
 800beec:	d5fb      	bpl.n	800bee6 <stm32_clock_control_init+0x5a>
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 800beee:	4a34      	ldr	r2, [pc, #208]	; (800bfc0 <stm32_clock_control_init+0x134>)
 800bef0:	6813      	ldr	r3, [r2, #0]
 800bef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bef6:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bef8:	68a3      	ldr	r3, [r4, #8]
 800befa:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800befe:	2b0c      	cmp	r3, #12
 800bf00:	d11a      	bne.n	800bf38 <stm32_clock_control_init+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf08:	60a3      	str	r3, [r4, #8]
	if (LL_RCC_HSI_IsReady() != 1) {
 800bf0a:	f7ff ff71 	bl	800bdf0 <LL_RCC_HSI_IsReady>
 800bf0e:	2801      	cmp	r0, #1
 800bf10:	d007      	beq.n	800bf22 <stm32_clock_control_init+0x96>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf18:	6023      	str	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 800bf1a:	f7ff ff69 	bl	800bdf0 <LL_RCC_HSI_IsReady>
 800bf1e:	2801      	cmp	r0, #1
 800bf20:	d1fb      	bne.n	800bf1a <stm32_clock_control_init+0x8e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	f043 0301 	orr.w	r3, r3, #1
 800bf2c:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d1fa      	bne.n	800bf2e <stm32_clock_control_init+0xa2>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf3e:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 800bf40:	68e3      	ldr	r3, [r4, #12]
 800bf42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bf46:	60e3      	str	r3, [r4, #12]
	RCC_PLLP_ENABLE();
 800bf48:	68e3      	ldr	r3, [r4, #12]
 800bf4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf4e:	60e3      	str	r3, [r4, #12]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 800bf50:	68e3      	ldr	r3, [r4, #12]
 800bf52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bf56:	60e3      	str	r3, [r4, #12]
	RCC_PLLQ_ENABLE();
 800bf58:	68e3      	ldr	r3, [r4, #12]
 800bf5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf5e:	60e3      	str	r3, [r4, #12]
	config_pll_sysclock();
 800bf60:	f000 f836 	bl	800bfd0 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf6a:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	019b      	lsls	r3, r3, #6
 800bf70:	d5fc      	bpl.n	800bf6c <stm32_clock_control_init+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bf72:	68a3      	ldr	r3, [r4, #8]
 800bf74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf78:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	f043 0303 	orr.w	r3, r3, #3
 800bf80:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bf82:	68a3      	ldr	r3, [r4, #8]
 800bf84:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800bf88:	2b0c      	cmp	r3, #12
 800bf8a:	d1fa      	bne.n	800bf82 <stm32_clock_control_init+0xf6>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800bf8c:	42b5      	cmp	r5, r6
 800bf8e:	d902      	bls.n	800bf96 <stm32_clock_control_init+0x10a>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 800bf90:	480a      	ldr	r0, [pc, #40]	; (800bfbc <stm32_clock_control_init+0x130>)
 800bf92:	f003 f887 	bl	800f0a4 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800bf96:	4b0b      	ldr	r3, [pc, #44]	; (800bfc4 <stm32_clock_control_init+0x138>)
 800bf98:	4a08      	ldr	r2, [pc, #32]	; (800bfbc <stm32_clock_control_init+0x130>)
 800bf9a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bf9c:	68a3      	ldr	r3, [r4, #8]
 800bf9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bfa2:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bfa4:	68a3      	ldr	r3, [r4, #8]
 800bfa6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800bfaa:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800bfac:	2000      	movs	r0, #0
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	40021000 	.word	0x40021000
 800bfb4:	04c4b3ff 	.word	0x04c4b3ff
 800bfb8:	0801e2c6 	.word	0x0801e2c6
 800bfbc:	04c4b400 	.word	0x04c4b400
 800bfc0:	40007000 	.word	0x40007000
 800bfc4:	20000878 	.word	0x20000878

0800bfc8 <get_pllsrc_frequency>:
#endif
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 800bfc8:	4800      	ldr	r0, [pc, #0]	; (800bfcc <get_pllsrc_frequency+0x4>)
 800bfca:	4770      	bx	lr
 800bfcc:	00f42400 	.word	0x00f42400

0800bfd0 <config_pll_sysclock>:
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800bfd0:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <config_pll_sysclock+0x18>)
 800bfd2:	4906      	ldr	r1, [pc, #24]	; (800bfec <config_pll_sysclock+0x1c>)
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	4011      	ands	r1, r2
 800bfd8:	4a05      	ldr	r2, [pc, #20]	; (800bff0 <config_pll_sysclock+0x20>)
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	60da      	str	r2, [r3, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800bfde:	68da      	ldr	r2, [r3, #12]
 800bfe0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800bfe4:	60da      	str	r2, [r3, #12]
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllr(STM32_PLL_R_DIVISOR));

	LL_RCC_PLL_EnableDomain_SYS();
}
 800bfe6:	4770      	bx	lr
 800bfe8:	40021000 	.word	0x40021000
 800bfec:	f9ff808c 	.word	0xf9ff808c
 800bff0:	02001402 	.word	0x02001402

0800bff4 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800bff4:	4b06      	ldr	r3, [pc, #24]	; (800c010 <config_enable_default_clocks+0x1c>)
 800bff6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bff8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bffc:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800bffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 800c000:	b082      	sub	sp, #8
 800c002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c006:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800c008:	9b01      	ldr	r3, [sp, #4]
#endif
#if defined(CONFIG_SOC_SERIES_STM32WBX)
	/* HW semaphore Clock enable */
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif
}
 800c00a:	b002      	add	sp, #8
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	40021000 	.word	0x40021000

0800c014 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800c014:	b508      	push	{r3, lr}
 800c016:	4807      	ldr	r0, [pc, #28]	; (800c034 <uart_console_init+0x20>)
 800c018:	f00d fafc 	bl	8019614 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 800c01c:	b138      	cbz	r0, 800c02e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 800c01e:	4806      	ldr	r0, [pc, #24]	; (800c038 <uart_console_init+0x24>)
 800c020:	f7ff fe04 	bl	800bc2c <__stdout_hook_install>
	__printk_hook_install(console_out);
 800c024:	4804      	ldr	r0, [pc, #16]	; (800c038 <uart_console_init+0x24>)
 800c026:	f7fb fc43 	bl	80078b0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800c02a:	2000      	movs	r0, #0
}
 800c02c:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800c02e:	f06f 0012 	mvn.w	r0, #18
 800c032:	e7fb      	b.n	800c02c <uart_console_init+0x18>
 800c034:	08019f28 	.word	0x08019f28
 800c038:	0800c03d 	.word	0x0800c03d

0800c03c <console_out>:
	if ('\n' == c) {
 800c03c:	280a      	cmp	r0, #10
{
 800c03e:	b538      	push	{r3, r4, r5, lr}
 800c040:	4d07      	ldr	r5, [pc, #28]	; (800c060 <console_out+0x24>)
 800c042:	4604      	mov	r4, r0
	if ('\n' == c) {
 800c044:	d104      	bne.n	800c050 <console_out+0x14>
	api->poll_out(dev, out_char);
 800c046:	68ab      	ldr	r3, [r5, #8]
 800c048:	210d      	movs	r1, #13
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	4628      	mov	r0, r5
 800c04e:	4798      	blx	r3
 800c050:	68ab      	ldr	r3, [r5, #8]
 800c052:	4803      	ldr	r0, [pc, #12]	; (800c060 <console_out+0x24>)
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	b2e1      	uxtb	r1, r4
 800c058:	4798      	blx	r3
}
 800c05a:	4620      	mov	r0, r4
 800c05c:	bd38      	pop	{r3, r4, r5, pc}
 800c05e:	bf00      	nop
 800c060:	08019f28 	.word	0x08019f28

0800c064 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800c064:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 800c066:	6903      	ldr	r3, [r0, #16]
{
 800c068:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 800c06a:	6058      	str	r0, [r3, #4]
 800c06c:	4d0a      	ldr	r5, [pc, #40]	; (800c098 <gpio_stm32_init+0x34>)
 800c06e:	4628      	mov	r0, r5
 800c070:	f00d fad0 	bl	8019614 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 800c074:	b168      	cbz	r0, 800c092 <gpio_stm32_init+0x2e>
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800c076:	4a09      	ldr	r2, [pc, #36]	; (800c09c <gpio_stm32_init+0x38>)
 800c078:	6853      	ldr	r3, [r2, #4]
 800c07a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c07e:	6053      	str	r3, [r2, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 800c080:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800c082:	68ab      	ldr	r3, [r5, #8]
 800c084:	310c      	adds	r1, #12
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4628      	mov	r0, r5
 800c08a:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800c08c:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800c090:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800c092:	f06f 0012 	mvn.w	r0, #18
 800c096:	e7fb      	b.n	800c090 <gpio_stm32_init+0x2c>
 800c098:	08019e20 	.word	0x08019e20
 800c09c:	40007000 	.word	0x40007000

0800c0a0 <gpio_stm32_pin_interrupt_configure>:
{
 800c0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0a2:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 800c0a4:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800c0a8:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800c0aa:	6902      	ldr	r2, [r0, #16]
{
 800c0ac:	460c      	mov	r4, r1
 800c0ae:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800c0b0:	d124      	bne.n	800c0fc <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800c0b2:	f001 0203 	and.w	r2, r1, #3
 800c0b6:	3204      	adds	r2, #4
 800c0b8:	0092      	lsls	r2, r2, #2
 800c0ba:	230f      	movs	r3, #15
 800c0bc:	4093      	lsls	r3, r2
 800c0be:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	4933      	ldr	r1, [pc, #204]	; (800c194 <gpio_stm32_pin_interrupt_configure+0xf4>)
 800c0c6:	3202      	adds	r2, #2
 800c0c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c0cc:	0c19      	lsrs	r1, r3, #16
 800c0ce:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c0d2:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800c0d6:	fab2 f282 	clz	r2, r2
 800c0da:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800c0dc:	68b2      	ldr	r2, [r6, #8]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d109      	bne.n	800c0f6 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f7ff fe2c 	bl	800bd40 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f7ff fe77 	bl	800bddc <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7ff fe31 	bl	800bd58 <stm32_exti_trigger>
	int err = 0;
 800c0f6:	2000      	movs	r0, #0
}
 800c0f8:	b003      	add	sp, #12
 800c0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 800c0fc:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 800c100:	d041      	beq.n	800c186 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800c102:	4925      	ldr	r1, [pc, #148]	; (800c198 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800c104:	4620      	mov	r0, r4
 800c106:	f7ff fe57 	bl	800bdb8 <stm32_exti_set_callback>
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d13e      	bne.n	800c18c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 800c10e:	4a23      	ldr	r2, [pc, #140]	; (800c19c <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 800c110:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 800c112:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c116:	466b      	mov	r3, sp
 800c118:	e883 0003 	stmia.w	r3, {r0, r1}
 800c11c:	4820      	ldr	r0, [pc, #128]	; (800c1a0 <gpio_stm32_pin_interrupt_configure+0x100>)
 800c11e:	6882      	ldr	r2, [r0, #8]
 800c120:	4619      	mov	r1, r3
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	4790      	blx	r2
	if (ret != 0) {
 800c126:	b9c0      	cbnz	r0, 800c15a <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800c128:	f004 0303 	and.w	r3, r4, #3
 800c12c:	3304      	adds	r3, #4
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	220f      	movs	r2, #15
 800c132:	409a      	lsls	r2, r3
 800c134:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800c138:	b2d3      	uxtb	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c140:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c144:	0c11      	lsrs	r1, r2, #16
 800c146:	6898      	ldr	r0, [r3, #8]
 800c148:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c14c:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800c150:	fab2 f282 	clz	r2, r2
 800c154:	4096      	lsls	r6, r2
 800c156:	4306      	orrs	r6, r0
 800c158:	609e      	str	r6, [r3, #8]
	switch (trig) {
 800c15a:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 800c15e:	d00e      	beq.n	800c17e <gpio_stm32_pin_interrupt_configure+0xde>
 800c160:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 800c164:	d00d      	beq.n	800c182 <gpio_stm32_pin_interrupt_configure+0xe2>
 800c166:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800c16a:	4259      	negs	r1, r3
 800c16c:	4159      	adcs	r1, r3
 800c16e:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 800c170:	4620      	mov	r0, r4
 800c172:	f7ff fdf1 	bl	800bd58 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800c176:	4620      	mov	r0, r4
 800c178:	f7ff fdd4 	bl	800bd24 <stm32_exti_enable>
 800c17c:	e7bb      	b.n	800c0f6 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 800c17e:	2101      	movs	r1, #1
 800c180:	e7f6      	b.n	800c170 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 800c182:	2103      	movs	r1, #3
 800c184:	e7f4      	b.n	800c170 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 800c186:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800c18a:	e7b5      	b.n	800c0f8 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 800c18c:	f06f 000f 	mvn.w	r0, #15
	return err;
 800c190:	e7b2      	b.n	800c0f8 <gpio_stm32_pin_interrupt_configure+0x58>
 800c192:	bf00      	nop
 800c194:	40010000 	.word	0x40010000
 800c198:	0801655f 	.word	0x0801655f
 800c19c:	0801a4e8 	.word	0x0801a4e8
 800c1a0:	08019e20 	.word	0x08019e20

0800c1a4 <cmd_i2c_speed>:

/* i2c speed <device> <speed>
 * For: speed see constants like I2C_SPEED_STANDARD
 */
static int cmd_i2c_speed(const struct shell *shell_ctx, size_t argc, char **argv)
{
 800c1a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	char *s_dev_name = argv[ARGV_DEV];
	const struct device *dev;
	uint32_t dev_config = 0;
 800c1a8:	f04f 0800 	mov.w	r8, #0
	char *s_dev_name = argv[ARGV_DEV];
 800c1ac:	6856      	ldr	r6, [r2, #4]
	uint32_t dev_config = 0;
 800c1ae:	f8cd 8004 	str.w	r8, [sp, #4]
{
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	4614      	mov	r4, r2
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f003 f8e4 	bl	800f384 <z_impl_device_get_binding>
	uint32_t speed;
	int ret;

	dev = device_get_binding(s_dev_name);
	if (!dev) {
 800c1bc:	4607      	mov	r7, r0
 800c1be:	b950      	cbnz	r0, 800c1d6 <cmd_i2c_speed+0x32>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	4a1a      	ldr	r2, [pc, #104]	; (800c22c <cmd_i2c_speed+0x88>)
 800c1c4:	4633      	mov	r3, r6
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	f009 f9e8 	bl	801559c <shell_fprintf>
			    s_dev_name);
		return -ENODEV;
 800c1cc:	f06f 0012 	mvn.w	r0, #18
		shell_error(shell_ctx, "I2C: Failed to configure device: %s",
			    s_dev_name);
		return -EIO;
	}
	return 0;
}
 800c1d0:	b002      	add	sp, #8
 800c1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	speed = strtol(argv[ARGV_DEV + 1], NULL, 10);
 800c1d6:	68a0      	ldr	r0, [r4, #8]
 800c1d8:	220a      	movs	r2, #10
 800c1da:	4641      	mov	r1, r8
 800c1dc:	f005 fd1c 	bl	8011c18 <strtol>
	if (api->get_config == NULL) {
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	0044      	lsls	r4, r0, #1
 800c1e6:	b1cb      	cbz	r3, 800c21c <cmd_i2c_speed+0x78>
	return api->get_config(dev, dev_config);
 800c1e8:	a901      	add	r1, sp, #4
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	4798      	blx	r3
	if (ret == 0) {
 800c1ee:	b9a8      	cbnz	r0, 800c21c <cmd_i2c_speed+0x78>
		dev_config &= ~I2C_SPEED_MASK;
 800c1f0:	9b01      	ldr	r3, [sp, #4]
		dev_config |= I2C_SPEED_SET(speed);
 800c1f2:	f004 010e 	and.w	r1, r4, #14
		dev_config &= ~I2C_SPEED_MASK;
 800c1f6:	f023 030e 	bic.w	r3, r3, #14
		dev_config |= I2C_SPEED_SET(speed);
 800c1fa:	4319      	orrs	r1, r3
 800c1fc:	9101      	str	r1, [sp, #4]
	return api->configure(dev, dev_config);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	4638      	mov	r0, r7
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4798      	blx	r3
	if (ret < 0) {
 800c206:	2800      	cmp	r0, #0
 800c208:	da0d      	bge.n	800c226 <cmd_i2c_speed+0x82>
		shell_error(shell_ctx, "I2C: Failed to configure device: %s",
 800c20a:	4628      	mov	r0, r5
 800c20c:	4a08      	ldr	r2, [pc, #32]	; (800c230 <cmd_i2c_speed+0x8c>)
 800c20e:	4633      	mov	r3, r6
 800c210:	2101      	movs	r1, #1
 800c212:	f009 f9c3 	bl	801559c <shell_fprintf>
		return -EIO;
 800c216:	f06f 0004 	mvn.w	r0, #4
 800c21a:	e7d9      	b.n	800c1d0 <cmd_i2c_speed+0x2c>
		dev_config = I2C_MODE_CONTROLLER | I2C_SPEED_SET(speed);
 800c21c:	f004 010e 	and.w	r1, r4, #14
 800c220:	f041 0110 	orr.w	r1, r1, #16
 800c224:	e7ea      	b.n	800c1fc <cmd_i2c_speed+0x58>
	return 0;
 800c226:	2000      	movs	r0, #0
 800c228:	e7d2      	b.n	800c1d0 <cmd_i2c_speed+0x2c>
 800c22a:	bf00      	nop
 800c22c:	0801cf86 	.word	0x0801cf86
 800c230:	0801cfa8 	.word	0x0801cfa8

0800c234 <i2c_read_to_buffer>:
{
 800c234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c238:	4605      	mov	r5, r0
 800c23a:	b089      	sub	sp, #36	; 0x24
 800c23c:	460c      	mov	r4, r1
 800c23e:	4616      	mov	r6, r2
 800c240:	4699      	mov	r9, r3
 800c242:	4608      	mov	r0, r1
 800c244:	f003 f89e 	bl	800f384 <z_impl_device_get_binding>
	if (!dev) {
 800c248:	4607      	mov	r7, r0
 800c24a:	b950      	cbnz	r0, 800c262 <i2c_read_to_buffer+0x2e>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
 800c24c:	4628      	mov	r0, r5
 800c24e:	4a1f      	ldr	r2, [pc, #124]	; (800c2cc <i2c_read_to_buffer+0x98>)
 800c250:	4623      	mov	r3, r4
 800c252:	2101      	movs	r1, #1
 800c254:	f009 f9a2 	bl	801559c <shell_fprintf>
		return -ENODEV;
 800c258:	f06f 0012 	mvn.w	r0, #18
}
 800c25c:	b009      	add	sp, #36	; 0x24
 800c25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	dev_addr = strtol(s_dev_addr, NULL, 16);
 800c262:	2210      	movs	r2, #16
 800c264:	2100      	movs	r1, #0
 800c266:	4630      	mov	r0, r6
 800c268:	f005 fcd6 	bl	8011c18 <strtol>
	reg_addr = strtol(s_reg_addr, NULL, 16);
 800c26c:	2210      	movs	r2, #16
 800c26e:	2100      	movs	r1, #0
	dev_addr = strtol(s_dev_addr, NULL, 16);
 800c270:	4680      	mov	r8, r0
	reg_addr = strtol(s_reg_addr, NULL, 16);
 800c272:	4648      	mov	r0, r9
 800c274:	f005 fcd0 	bl	8011c18 <strtol>
 800c278:	4604      	mov	r4, r0
	reg_addr_bytes = get_bytes_count_for_hex(s_reg_addr);
 800c27a:	4648      	mov	r0, r9
 800c27c:	f00a f9af 	bl	80165de <get_bytes_count_for_hex>
			       MAX_BYTES_FOR_REGISTER_INDEX - reg_addr_bytes,
 800c280:	ab08      	add	r3, sp, #32
 800c282:	1a1b      	subs	r3, r3, r0
	ret = i2c_write_read(dev, dev_addr,
 800c284:	3b18      	subs	r3, #24
	msg[0].len = num_write;
 800c286:	e9cd 3002 	strd	r3, r0, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
 800c28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c28c:	9305      	str	r3, [sp, #20]
 800c28e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800c292:	9306      	str	r3, [sp, #24]
 800c294:	ba24      	rev	r4, r4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 800c296:	2307      	movs	r3, #7
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val >> 8;
 800c298:	9401      	str	r4, [sp, #4]
 800c29a:	f88d 301c 	strb.w	r3, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
 800c29e:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
 800c2a0:	fa1f f388 	uxth.w	r3, r8
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	a902      	add	r1, sp, #8
 800c2a8:	4638      	mov	r0, r7
	msg[0].flags = I2C_MSG_WRITE;
 800c2aa:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
 800c2ae:	f00a f982 	bl	80165b6 <i2c_transfer>
	if (ret < 0) {
 800c2b2:	42a0      	cmp	r0, r4
 800c2b4:	da08      	bge.n	800c2c8 <i2c_read_to_buffer+0x94>
		shell_error(shell_ctx, "Failed to read from device: %s",
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	4a05      	ldr	r2, [pc, #20]	; (800c2d0 <i2c_read_to_buffer+0x9c>)
 800c2ba:	4633      	mov	r3, r6
 800c2bc:	2101      	movs	r1, #1
 800c2be:	f009 f96d 	bl	801559c <shell_fprintf>
		return -EIO;
 800c2c2:	f06f 0004 	mvn.w	r0, #4
 800c2c6:	e7c9      	b.n	800c25c <i2c_read_to_buffer+0x28>
	return 0;
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	e7c7      	b.n	800c25c <i2c_read_to_buffer+0x28>
 800c2cc:	0801cf86 	.word	0x0801cf86
 800c2d0:	0801cfcd 	.word	0x0801cfcd

0800c2d4 <cmd_i2c_read_byte>:
{
 800c2d4:	b530      	push	{r4, r5, lr}
 800c2d6:	b085      	sub	sp, #20
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
 800c2d8:	2301      	movs	r3, #1
 800c2da:	9301      	str	r3, [sp, #4]
{
 800c2dc:	4611      	mov	r1, r2
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
 800c2de:	f10d 030f 	add.w	r3, sp, #15
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 800c2e8:	6849      	ldr	r1, [r1, #4]
{
 800c2ea:	4605      	mov	r5, r0
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
 800c2ec:	f7ff ffa2 	bl	800c234 <i2c_read_to_buffer>
	if (ret == 0) {
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	b930      	cbnz	r0, 800c302 <cmd_i2c_read_byte+0x2e>
		shell_print(shell_ctx, "Output: 0x%x", out);
 800c2f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c2f8:	4a03      	ldr	r2, [pc, #12]	; (800c308 <cmd_i2c_read_byte+0x34>)
 800c2fa:	2108      	movs	r1, #8
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f009 f94d 	bl	801559c <shell_fprintf>
}
 800c302:	4620      	mov	r0, r4
 800c304:	b005      	add	sp, #20
 800c306:	bd30      	pop	{r4, r5, pc}
 800c308:	0801cfed 	.word	0x0801cfed

0800c30c <i2c_write_from_buffer>:
{
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	b089      	sub	sp, #36	; 0x24
 800c312:	4606      	mov	r6, r0
 800c314:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800c318:	468a      	mov	sl, r1
 800c31a:	4690      	mov	r8, r2
 800c31c:	461d      	mov	r5, r3
 800c31e:	4608      	mov	r0, r1
 800c320:	f003 f830 	bl	800f384 <z_impl_device_get_binding>
	if (!dev) {
 800c324:	4607      	mov	r7, r0
 800c326:	b950      	cbnz	r0, 800c33e <i2c_write_from_buffer+0x32>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
 800c328:	4630      	mov	r0, r6
 800c32a:	4a2b      	ldr	r2, [pc, #172]	; (800c3d8 <i2c_write_from_buffer+0xcc>)
 800c32c:	4653      	mov	r3, sl
 800c32e:	2101      	movs	r1, #1
 800c330:	f009 f934 	bl	801559c <shell_fprintf>
		return -ENODEV;
 800c334:	f06f 0012 	mvn.w	r0, #18
}
 800c338:	b009      	add	sp, #36	; 0x24
 800c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(s_dev_addr, NULL, 16);
 800c33e:	2210      	movs	r2, #16
 800c340:	2100      	movs	r1, #0
 800c342:	4640      	mov	r0, r8
 800c344:	f005 fc68 	bl	8011c18 <strtol>
	reg_addr = strtol(s_reg_addr, NULL, 16);
 800c348:	2210      	movs	r2, #16
 800c34a:	2100      	movs	r1, #0
	dev_addr = strtol(s_dev_addr, NULL, 16);
 800c34c:	4682      	mov	sl, r0
	reg_addr = strtol(s_reg_addr, NULL, 16);
 800c34e:	4628      	mov	r0, r5
 800c350:	f005 fc62 	bl	8011c18 <strtol>
 800c354:	4683      	mov	fp, r0
	reg_addr_bytes = get_bytes_count_for_hex(s_reg_addr);
 800c356:	4628      	mov	r0, r5
 800c358:	f00a f941 	bl	80165de <get_bytes_count_for_hex>
 800c35c:	4605      	mov	r5, r0
	if (data_length + reg_addr_bytes > MAX_I2C_BYTES) {
 800c35e:	1963      	adds	r3, r4, r5
 800c360:	fa9b f08b 	rev.w	r0, fp
 800c364:	2b10      	cmp	r3, #16
 800c366:	9003      	str	r0, [sp, #12]
 800c368:	dd07      	ble.n	800c37a <i2c_write_from_buffer+0x6e>
		data_length = MAX_I2C_BYTES - reg_addr_bytes;
 800c36a:	f1c5 0310 	rsb	r3, r5, #16
		shell_info(shell_ctx, "Too many bytes provided, limit is %d",
 800c36e:	4a1b      	ldr	r2, [pc, #108]	; (800c3dc <i2c_write_from_buffer+0xd0>)
 800c370:	2102      	movs	r1, #2
 800c372:	4630      	mov	r0, r6
		data_length = MAX_I2C_BYTES - reg_addr_bytes;
 800c374:	b2dc      	uxtb	r4, r3
		shell_info(shell_ctx, "Too many bytes provided, limit is %d",
 800c376:	f009 f911 	bl	801559c <shell_fprintf>
	for (i = 0; i < data_length; i++) {
 800c37a:	f10d 090f 	add.w	r9, sp, #15
 800c37e:	f04f 0b00 	mov.w	fp, #0
 800c382:	455c      	cmp	r4, fp
 800c384:	dc1a      	bgt.n	800c3bc <i2c_write_from_buffer+0xb0>
			buf + MAX_BYTES_FOR_REGISTER_INDEX - reg_addr_bytes,
 800c386:	ab08      	add	r3, sp, #32
 800c388:	1b5b      	subs	r3, r3, r5
	ret = i2c_write(dev,
 800c38a:	3b10      	subs	r3, #16
	msg.buf = (uint8_t *)buf;
 800c38c:	9300      	str	r3, [sp, #0]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800c38e:	2302      	movs	r3, #2
 800c390:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_addr_bytes + data_length, dev_addr);
 800c394:	442c      	add	r4, r5
	return i2c_transfer(dev, &msg, 1, addr);
 800c396:	fa1f f38a 	uxth.w	r3, sl
 800c39a:	2201      	movs	r2, #1
 800c39c:	4669      	mov	r1, sp
 800c39e:	4638      	mov	r0, r7
	msg.len = num_bytes;
 800c3a0:	9401      	str	r4, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
 800c3a2:	f00a f908 	bl	80165b6 <i2c_transfer>
	if (ret < 0) {
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	da14      	bge.n	800c3d4 <i2c_write_from_buffer+0xc8>
		shell_error(shell_ctx, "Failed to read from device: %s",
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	4a0c      	ldr	r2, [pc, #48]	; (800c3e0 <i2c_write_from_buffer+0xd4>)
 800c3ae:	4643      	mov	r3, r8
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	f009 f8f3 	bl	801559c <shell_fprintf>
		return -EIO;
 800c3b6:	f06f 0004 	mvn.w	r0, #4
 800c3ba:	e7bd      	b.n	800c338 <i2c_write_from_buffer+0x2c>
			(uint8_t)strtol(data[i], NULL, 16);
 800c3bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3be:	2210      	movs	r2, #16
 800c3c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	f005 fc27 	bl	8011c18 <strtol>
	for (i = 0; i < data_length; i++) {
 800c3ca:	f10b 0b01 	add.w	fp, fp, #1
			(uint8_t)strtol(data[i], NULL, 16);
 800c3ce:	f809 0f01 	strb.w	r0, [r9, #1]!
	for (i = 0; i < data_length; i++) {
 800c3d2:	e7d6      	b.n	800c382 <i2c_write_from_buffer+0x76>
	return 0;
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e7af      	b.n	800c338 <i2c_write_from_buffer+0x2c>
 800c3d8:	0801cf86 	.word	0x0801cf86
 800c3dc:	0801cffb 	.word	0x0801cffb
 800c3e0:	0801cfcd 	.word	0x0801cfcd

0800c3e4 <cmd_i2c_scan>:
{
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	b087      	sub	sp, #28
	dev = device_get_binding(argv[ARGV_DEV]);
 800c3ec:	6850      	ldr	r0, [r2, #4]
{
 800c3ee:	4617      	mov	r7, r2
 800c3f0:	f002 ffc8 	bl	800f384 <z_impl_device_get_binding>
	if (!dev) {
 800c3f4:	4681      	mov	r9, r0
 800c3f6:	b950      	cbnz	r0, 800c40e <cmd_i2c_scan+0x2a>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a2a      	ldr	r2, [pc, #168]	; (800c4a8 <cmd_i2c_scan+0xc4>)
 800c3fe:	2101      	movs	r1, #1
 800c400:	f009 f8cc 	bl	801559c <shell_fprintf>
		return -ENODEV;
 800c404:	f06f 0012 	mvn.w	r0, #18
}
 800c408:	b007      	add	sp, #28
 800c40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell_ctx,
 800c40e:	4a27      	ldr	r2, [pc, #156]	; (800c4ac <cmd_i2c_scan+0xc8>)
 800c410:	2108      	movs	r1, #8
 800c412:	4620      	mov	r0, r4
 800c414:	f009 f8c2 	bl	801559c <shell_fprintf>
 800c418:	f04f 0800 	mov.w	r8, #0
	uint8_t cnt = 0, first = 0x04, last = 0x77;
 800c41c:	4646      	mov	r6, r8
		shell_fprintf(shell_ctx, SHELL_NORMAL, "%02x: ", i);
 800c41e:	4a24      	ldr	r2, [pc, #144]	; (800c4b0 <cmd_i2c_scan+0xcc>)
				shell_fprintf(shell_ctx, SHELL_NORMAL,
 800c420:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800c4c0 <cmd_i2c_scan+0xdc>
				shell_fprintf(shell_ctx, SHELL_NORMAL, "   ");
 800c424:	f8df b09c 	ldr.w	fp, [pc, #156]	; 800c4c4 <cmd_i2c_scan+0xe0>
		shell_fprintf(shell_ctx, SHELL_NORMAL, "%02x: ", i);
 800c428:	4643      	mov	r3, r8
 800c42a:	2108      	movs	r1, #8
 800c42c:	4620      	mov	r0, r4
 800c42e:	f009 f8b5 	bl	801559c <shell_fprintf>
 800c432:	4645      	mov	r5, r8
			if (i + j < first || i + j > last) {
 800c434:	1f2b      	subs	r3, r5, #4
 800c436:	2b73      	cmp	r3, #115	; 0x73
 800c438:	d907      	bls.n	800c44a <cmd_i2c_scan+0x66>
				shell_fprintf(shell_ctx, SHELL_NORMAL, "   ");
 800c43a:	465a      	mov	r2, fp
				shell_fprintf(shell_ctx, SHELL_NORMAL, "-- ");
 800c43c:	2108      	movs	r1, #8
 800c43e:	4620      	mov	r0, r4
 800c440:	f009 f8ac 	bl	801559c <shell_fprintf>
 800c444:	e018      	b.n	800c478 <cmd_i2c_scan+0x94>
 800c446:	46a8      	mov	r8, r5
 800c448:	e7e9      	b.n	800c41e <cmd_i2c_scan+0x3a>
			msgs[0].buf = &dst;
 800c44a:	f10d 030b 	add.w	r3, sp, #11
 800c44e:	9303      	str	r3, [sp, #12]
			msgs[0].len = 0U;
 800c450:	2300      	movs	r3, #0
 800c452:	9304      	str	r3, [sp, #16]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800c454:	2302      	movs	r3, #2
 800c456:	f88d 3014 	strb.w	r3, [sp, #20]
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
 800c45a:	2201      	movs	r2, #1
 800c45c:	b2ab      	uxth	r3, r5
 800c45e:	a903      	add	r1, sp, #12
 800c460:	4648      	mov	r0, r9
 800c462:	f00a f8a8 	bl	80165b6 <i2c_transfer>
 800c466:	b9e8      	cbnz	r0, 800c4a4 <cmd_i2c_scan+0xc0>
				shell_fprintf(shell_ctx, SHELL_NORMAL,
 800c468:	462b      	mov	r3, r5
 800c46a:	4652      	mov	r2, sl
 800c46c:	2108      	movs	r1, #8
 800c46e:	4620      	mov	r0, r4
 800c470:	f009 f894 	bl	801559c <shell_fprintf>
				++cnt;
 800c474:	3601      	adds	r6, #1
 800c476:	b2f6      	uxtb	r6, r6
		for (uint8_t j = 0; j < 16; j++) {
 800c478:	3501      	adds	r5, #1
 800c47a:	f108 0310 	add.w	r3, r8, #16
 800c47e:	42ab      	cmp	r3, r5
 800c480:	d1d8      	bne.n	800c434 <cmd_i2c_scan+0x50>
		shell_print(shell_ctx, "");
 800c482:	4a0c      	ldr	r2, [pc, #48]	; (800c4b4 <cmd_i2c_scan+0xd0>)
 800c484:	2108      	movs	r1, #8
 800c486:	4620      	mov	r0, r4
 800c488:	f009 f888 	bl	801559c <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
 800c48c:	2d80      	cmp	r5, #128	; 0x80
 800c48e:	d1da      	bne.n	800c446 <cmd_i2c_scan+0x62>
	shell_print(shell_ctx, "%u devices found on %s",
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	4620      	mov	r0, r4
 800c496:	4a08      	ldr	r2, [pc, #32]	; (800c4b8 <cmd_i2c_scan+0xd4>)
 800c498:	4633      	mov	r3, r6
 800c49a:	2108      	movs	r1, #8
 800c49c:	f009 f87e 	bl	801559c <shell_fprintf>
	return 0;
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	e7b1      	b.n	800c408 <cmd_i2c_scan+0x24>
				shell_fprintf(shell_ctx, SHELL_NORMAL, "-- ");
 800c4a4:	4a05      	ldr	r2, [pc, #20]	; (800c4bc <cmd_i2c_scan+0xd8>)
 800c4a6:	e7c9      	b.n	800c43c <cmd_i2c_scan+0x58>
 800c4a8:	0801cf86 	.word	0x0801cf86
 800c4ac:	0801d021 	.word	0x0801d021
 800c4b0:	0801d056 	.word	0x0801d056
 800c4b4:	0801bd34 	.word	0x0801bd34
 800c4b8:	0801d061 	.word	0x0801d061
 800c4bc:	0801d05d 	.word	0x0801d05d
 800c4c0:	0801b811 	.word	0x0801b811
 800c4c4:	0801b817 	.word	0x0801b817

0800c4c8 <cmd_i2c_recover>:
{
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	4614      	mov	r4, r2
	dev = device_get_binding(argv[ARGV_DEV]);
 800c4ce:	6850      	ldr	r0, [r2, #4]
 800c4d0:	f002 ff58 	bl	800f384 <z_impl_device_get_binding>
	if (!dev) {
 800c4d4:	b948      	cbnz	r0, 800c4ea <cmd_i2c_recover+0x22>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
 800c4d6:	6863      	ldr	r3, [r4, #4]
 800c4d8:	4a0c      	ldr	r2, [pc, #48]	; (800c50c <cmd_i2c_recover+0x44>)
 800c4da:	2101      	movs	r1, #1
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f009 f85d 	bl	801559c <shell_fprintf>
 800c4e2:	f06f 0412 	mvn.w	r4, #18
}
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
	if (api->recover_bus == NULL) {
 800c4ea:	6883      	ldr	r3, [r0, #8]
 800c4ec:	695b      	ldr	r3, [r3, #20]
 800c4ee:	b153      	cbz	r3, 800c506 <cmd_i2c_recover+0x3e>
	return api->recover_bus(dev);
 800c4f0:	4798      	blx	r3
	if (err) {
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d0f6      	beq.n	800c4e6 <cmd_i2c_recover+0x1e>
		shell_error(shell_ctx, "I2C: Bus recovery failed (err %d)",
 800c4f8:	4a05      	ldr	r2, [pc, #20]	; (800c510 <cmd_i2c_recover+0x48>)
 800c4fa:	4623      	mov	r3, r4
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	4628      	mov	r0, r5
 800c500:	f009 f84c 	bl	801559c <shell_fprintf>
		return err;
 800c504:	e7ef      	b.n	800c4e6 <cmd_i2c_recover+0x1e>
		return -ENOSYS;
 800c506:	f06f 0457 	mvn.w	r4, #87	; 0x57
 800c50a:	e7f5      	b.n	800c4f8 <cmd_i2c_recover+0x30>
 800c50c:	0801cf86 	.word	0x0801cf86
 800c510:	0801d079 	.word	0x0801d079

0800c514 <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 800c514:	b530      	push	{r4, r5, lr}
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
 800c516:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c518:	6840      	ldr	r0, [r0, #4]
 800c51a:	68c0      	ldr	r0, [r0, #12]
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledReloadMode(I2C_TypeDef *I2Cx)
{
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800c51c:	6845      	ldr	r5, [r0, #4]
 800c51e:	01ed      	lsls	r5, r5, #7
 800c520:	d507      	bpl.n	800c532 <msg_init+0x1e>
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800c522:	6843      	ldr	r3, [r0, #4]
 800c524:	684a      	ldr	r2, [r1, #4]
 800c526:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800c52a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800c52e:	6043      	str	r3, [r0, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 800c530:	bd30      	pop	{r4, r5, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 800c532:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800c534:	4d1d      	ldr	r5, [pc, #116]	; (800c5ac <msg_init+0x98>)
 800c536:	f014 0f01 	tst.w	r4, #1
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800c53a:	6844      	ldr	r4, [r0, #4]
 800c53c:	d02a      	beq.n	800c594 <msg_init+0x80>
 800c53e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800c542:	6044      	str	r4, [r0, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800c544:	6844      	ldr	r4, [r0, #4]
 800c546:	402c      	ands	r4, r5
 800c548:	4323      	orrs	r3, r4
 800c54a:	6043      	str	r3, [r0, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 800c54c:	7a0b      	ldrb	r3, [r1, #8]
 800c54e:	079c      	lsls	r4, r3, #30
 800c550:	d428      	bmi.n	800c5a4 <msg_init+0x90>
 800c552:	b33a      	cbz	r2, 800c5a4 <msg_init+0x90>
 800c554:	7813      	ldrb	r3, [r2, #0]
 800c556:	075b      	lsls	r3, r3, #29
 800c558:	d424      	bmi.n	800c5a4 <msg_init+0x90>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800c55a:	6843      	ldr	r3, [r0, #4]
 800c55c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800c560:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800c562:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800c564:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800c566:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c56a:	6043      	str	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800c56c:	6843      	ldr	r3, [r0, #4]
 800c56e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c572:	4313      	orrs	r3, r2
 800c574:	6043      	str	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800c576:	6843      	ldr	r3, [r0, #4]
 800c578:	684a      	ldr	r2, [r1, #4]
 800c57a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800c57e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c582:	6043      	str	r3, [r0, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800c584:	6803      	ldr	r3, [r0, #0]
 800c586:	f043 0301 	orr.w	r3, r3, #1
 800c58a:	6003      	str	r3, [r0, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800c58c:	6843      	ldr	r3, [r0, #4]
 800c58e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c592:	e7cc      	b.n	800c52e <msg_init+0x1a>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800c594:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800c598:	6044      	str	r4, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800c59a:	6844      	ldr	r4, [r0, #4]
 800c59c:	402c      	ands	r4, r5
 800c59e:	ea44 0343 	orr.w	r3, r4, r3, lsl #1
 800c5a2:	e7d2      	b.n	800c54a <msg_init+0x36>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800c5a4:	6843      	ldr	r3, [r0, #4]
 800c5a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5aa:	e7d9      	b.n	800c560 <msg_init+0x4c>
 800c5ac:	fffffc00 	.word	0xfffffc00

0800c5b0 <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 800c5b4:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800c5b6:	f8d0 8010 	ldr.w	r8, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 800c5bc:	f8df b144 	ldr.w	fp, [pc, #324]	; 800c704 <stm32_i2c_configure_timing+0x154>
{
 800c5c0:	b089      	sub	sp, #36	; 0x24
 800c5c2:	460c      	mov	r4, r1
	I2C_TypeDef *i2c = cfg->i2c;
 800c5c4:	9301      	str	r3, [sp, #4]
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800c5c6:	2500      	movs	r5, #0
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	42ab      	cmp	r3, r5
 800c5cc:	d837      	bhi.n	800c63e <stm32_i2c_configure_timing+0x8e>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 800c5ce:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800c5d2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d07b      	beq.n	800c6d2 <stm32_i2c_configure_timing+0x122>
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	f040 8085 	bne.w	800c6ea <stm32_i2c_configure_timing+0x13a>
 800c5e0:	f240 5614 	movw	r6, #1300	; 0x514
 800c5e4:	f44f 7516 	mov.w	r5, #600	; 0x258
 800c5e8:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800c5ec:	f240 1c77 	movw	ip, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800c5f0:	4b3f      	ldr	r3, [pc, #252]	; (800c6f0 <stm32_i2c_configure_timing+0x140>)
	switch (I2C_SPEED_GET(data->dev_config)) {
 800c5f2:	2102      	movs	r1, #2
		uint32_t t_presc = clock / presc;
 800c5f4:	1e4a      	subs	r2, r1, #1
 800c5f6:	fbb4 f2f2 	udiv	r2, r4, r2
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800c5fa:	fbb3 f2f2 	udiv	r2, r3, r2
		uint32_t sclh = i2c_h_min_time / ns_presc;
 800c5fe:	fbb5 f0f2 	udiv	r0, r5, r2
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800c602:	3801      	subs	r0, #1
 800c604:	28ff      	cmp	r0, #255	; 0xff
 800c606:	d86d      	bhi.n	800c6e4 <stm32_i2c_configure_timing+0x134>
		uint32_t scll = i2c_l_min_time / ns_presc;
 800c608:	fbb6 fef2 	udiv	lr, r6, r2
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800c60c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800c610:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800c614:	d866      	bhi.n	800c6e4 <stm32_i2c_configure_timing+0x134>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 800c616:	fbbc f8f2 	udiv	r8, ip, r2
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 800c61a:	f1b8 0f0f 	cmp.w	r8, #15
 800c61e:	d861      	bhi.n	800c6e4 <stm32_i2c_configure_timing+0x134>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 800c620:	fbb7 f2f2 	udiv	r2, r7, r2
		if (sdadel > 15 || (scldel - 1) > 15) {
 800c624:	3a01      	subs	r2, #1
 800c626:	2a0f      	cmp	r2, #15
 800c628:	d85c      	bhi.n	800c6e4 <stm32_i2c_configure_timing+0x134>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 800c62a:	3902      	subs	r1, #2
 800c62c:	ea4e 4308 	orr.w	r3, lr, r8, lsl #16
 800c630:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c634:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800c638:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c63c:	e02e      	b.n	800c69c <stm32_i2c_configure_timing+0xec>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 800c63e:	f8d7 a018 	ldr.w	sl, [r7, #24]
	switch (bitrate) {
 800c642:	4a2c      	ldr	r2, [pc, #176]	; (800c6f4 <stm32_i2c_configure_timing+0x144>)
 800c644:	260c      	movs	r6, #12
 800c646:	436e      	muls	r6, r5
 800c648:	eb0a 0906 	add.w	r9, sl, r6
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 800c64c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c650:	4293      	cmp	r3, r2
 800c652:	d034      	beq.n	800c6be <stm32_i2c_configure_timing+0x10e>
 800c654:	d828      	bhi.n	800c6a8 <stm32_i2c_configure_timing+0xf8>
 800c656:	4a28      	ldr	r2, [pc, #160]	; (800c6f8 <stm32_i2c_configure_timing+0x148>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d032      	beq.n	800c6c2 <stm32_i2c_configure_timing+0x112>
 800c65c:	4a27      	ldr	r2, [pc, #156]	; (800c6fc <stm32_i2c_configure_timing+0x14c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d031      	beq.n	800c6c6 <stm32_i2c_configure_timing+0x116>
	LOG_ERR("Invalid I2C bit rate value");
 800c662:	f8db 3000 	ldr.w	r3, [fp]
 800c666:	075b      	lsls	r3, r3, #29
 800c668:	d00a      	beq.n	800c680 <stm32_i2c_configure_timing+0xd0>
 800c66a:	4b25      	ldr	r3, [pc, #148]	; (800c700 <stm32_i2c_configure_timing+0x150>)
 800c66c:	9307      	str	r3, [sp, #28]
 800c66e:	2302      	movs	r3, #2
 800c670:	9306      	str	r3, [sp, #24]
 800c672:	4824      	ldr	r0, [pc, #144]	; (800c704 <stm32_i2c_configure_timing+0x154>)
 800c674:	2300      	movs	r3, #0
 800c676:	aa06      	add	r2, sp, #24
 800c678:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c67c:	f7fb fd68 	bl	8008150 <z_impl_z_log_msg_static_create>

	return 0;
 800c680:	2300      	movs	r3, #0
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 800c682:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 800c686:	f3c2 0242 	ubfx	r2, r2, #1, #3
 800c68a:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 800c68e:	d11e      	bne.n	800c6ce <stm32_i2c_configure_timing+0x11e>
		   && (preset->periph_clock == clock)) {
 800c690:	f85a 3006 	ldr.w	r3, [sl, r6]
 800c694:	42a3      	cmp	r3, r4
 800c696:	d11a      	bne.n	800c6ce <stm32_i2c_configure_timing+0x11e>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 800c698:	f8d9 3008 	ldr.w	r3, [r9, #8]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800c69c:	9a01      	ldr	r2, [sp, #4]
			return 0;
 800c69e:	2000      	movs	r0, #0
 800c6a0:	6113      	str	r3, [r2, #16]
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
}
 800c6a2:	b009      	add	sp, #36	; 0x24
 800c6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bitrate) {
 800c6a8:	4a17      	ldr	r2, [pc, #92]	; (800c708 <stm32_i2c_configure_timing+0x158>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d00d      	beq.n	800c6ca <stm32_i2c_configure_timing+0x11a>
 800c6ae:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800c6b2:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d1d3      	bne.n	800c662 <stm32_i2c_configure_timing+0xb2>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800c6ba:	230a      	movs	r3, #10
 800c6bc:	e7e1      	b.n	800c682 <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800c6be:	2306      	movs	r3, #6
 800c6c0:	e7df      	b.n	800c682 <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	e7dd      	b.n	800c682 <stm32_i2c_configure_timing+0xd2>
	switch (bitrate) {
 800c6c6:	2304      	movs	r3, #4
 800c6c8:	e7db      	b.n	800c682 <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800c6ca:	2308      	movs	r3, #8
 800c6cc:	e7d9      	b.n	800c682 <stm32_i2c_configure_timing+0xd2>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800c6ce:	3501      	adds	r5, #1
 800c6d0:	e77a      	b.n	800c5c8 <stm32_i2c_configure_timing+0x18>
		i2c_l_min_time = 4700U;
 800c6d2:	f241 265c 	movw	r6, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 800c6d6:	f44f 657a 	mov.w	r5, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 800c6da:	f240 47e2 	movw	r7, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 800c6de:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
 800c6e2:	e785      	b.n	800c5f0 <stm32_i2c_configure_timing+0x40>
	} while (presc < 16);
 800c6e4:	3101      	adds	r1, #1
 800c6e6:	2911      	cmp	r1, #17
 800c6e8:	d184      	bne.n	800c5f4 <stm32_i2c_configure_timing+0x44>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800c6ea:	f06f 0015 	mvn.w	r0, #21
 800c6ee:	e7d8      	b.n	800c6a2 <stm32_i2c_configure_timing+0xf2>
 800c6f0:	3b9aca00 	.word	0x3b9aca00
 800c6f4:	000f4240 	.word	0x000f4240
 800c6f8:	000186a0 	.word	0x000186a0
 800c6fc:	00061a80 	.word	0x00061a80
 800c700:	0801d28c 	.word	0x0801d28c
 800c704:	20000d44 	.word	0x20000d44
 800c708:	0033e140 	.word	0x0033e140

0800c70c <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 800c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c70e:	4605      	mov	r5, r0
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
 800c710:	6904      	ldr	r4, [r0, #16]
{
 800c712:	460f      	mov	r7, r1
	const struct i2c_stm32_config *cfg = dev->config;
 800c714:	6841      	ldr	r1, [r0, #4]
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
 800c716:	481d      	ldr	r0, [pc, #116]	; (800c78c <i2c_stm32_runtime_configure+0x80>)
	I2C_TypeDef *i2c = cfg->i2c;
 800c718:	68ce      	ldr	r6, [r1, #12]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800c71a:	6883      	ldr	r3, [r0, #8]
{
 800c71c:	b089      	sub	sp, #36	; 0x24
 800c71e:	68db      	ldr	r3, [r3, #12]
	uint32_t clock = 0U;
 800c720:	2200      	movs	r2, #0
 800c722:	9201      	str	r2, [sp, #4]
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 800c724:	3104      	adds	r1, #4
 800c726:	b943      	cbnz	r3, 800c73a <i2c_stm32_runtime_configure+0x2e>
		LOG_ERR("Failed call clock_control_get_rate");
 800c728:	4819      	ldr	r0, [pc, #100]	; (800c790 <i2c_stm32_runtime_configure+0x84>)
 800c72a:	6803      	ldr	r3, [r0, #0]
 800c72c:	075b      	lsls	r3, r3, #29
 800c72e:	d122      	bne.n	800c776 <i2c_stm32_runtime_configure+0x6a>
		return -EIO;
 800c730:	f06f 0504 	mvn.w	r5, #4
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
	k_sem_give(&data->bus_mutex);

	return ret;
}
 800c734:	4628      	mov	r0, r5
 800c736:	b009      	add	sp, #36	; 0x24
 800c738:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800c73a:	aa01      	add	r2, sp, #4
 800c73c:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800c73e:	2800      	cmp	r0, #0
 800c740:	dbf2      	blt.n	800c728 <i2c_stm32_runtime_configure+0x1c>
	data->dev_config = config;
 800c742:	6327      	str	r7, [r4, #48]	; 0x30
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800c744:	3418      	adds	r4, #24
	return z_impl_k_sem_take(sem, timeout);
 800c746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c74a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c74e:	4620      	mov	r0, r4
 800c750:	f003 fa38 	bl	800fbc4 <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800c754:	6833      	ldr	r3, [r6, #0]
 800c756:	f023 0301 	bic.w	r3, r3, #1
 800c75a:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800c75c:	6833      	ldr	r3, [r6, #0]
 800c75e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c762:	6033      	str	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 800c764:	9901      	ldr	r1, [sp, #4]
 800c766:	4628      	mov	r0, r5
 800c768:	f7ff ff22 	bl	800c5b0 <stm32_i2c_configure_timing>
 800c76c:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800c76e:	4620      	mov	r0, r4
 800c770:	f003 fa02 	bl	800fb78 <z_impl_k_sem_give>
}
 800c774:	e7de      	b.n	800c734 <i2c_stm32_runtime_configure+0x28>
		LOG_ERR("Failed call clock_control_get_rate");
 800c776:	4b07      	ldr	r3, [pc, #28]	; (800c794 <i2c_stm32_runtime_configure+0x88>)
 800c778:	9307      	str	r3, [sp, #28]
 800c77a:	2302      	movs	r3, #2
 800c77c:	9306      	str	r3, [sp, #24]
 800c77e:	2300      	movs	r3, #0
 800c780:	aa06      	add	r2, sp, #24
 800c782:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c786:	f7fb fce3 	bl	8008150 <z_impl_z_log_msg_static_create>
 800c78a:	e7d1      	b.n	800c730 <i2c_stm32_runtime_configure+0x24>
 800c78c:	08019e20 	.word	0x08019e20
 800c790:	20000d40 	.word	0x20000d40
 800c794:	0801d2b7 	.word	0x0801d2b7

0800c798 <i2c_stm32_init>:
	.target_unregister = i2c_stm32_target_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 800c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	b086      	sub	sp, #24
	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 800c79e:	6846      	ldr	r6, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 800c7a0:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4605      	mov	r5, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 800c7a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	f00c ff96 	bl	80196e0 <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	4798      	blx	r3
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800c7ba:	6970      	ldr	r0, [r6, #20]
 800c7bc:	463a      	mov	r2, r7
 800c7be:	2100      	movs	r1, #0
 800c7c0:	f00a fe53 	bl	801746a <pinctrl_lookup_state>
	if (ret < 0) {
 800c7c4:	1e04      	subs	r4, r0, #0
 800c7c6:	db07      	blt.n	800c7d8 <i2c_stm32_init+0x40>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800c7c8:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	7919      	ldrb	r1, [r3, #4]
 800c7ce:	6818      	ldr	r0, [r3, #0]
 800c7d0:	f001 ffda 	bl	800e788 <pinctrl_configure_pins>
#endif

	/* Configure dt provided device signals when available */
	ret = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 800c7d4:	1e04      	subs	r4, r0, #0
 800c7d6:	da17      	bge.n	800c808 <i2c_stm32_init+0x70>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 800c7d8:	484a      	ldr	r0, [pc, #296]	; (800c904 <i2c_stm32_init+0x16c>)
 800c7da:	6803      	ldr	r3, [r0, #0]
 800c7dc:	075d      	lsls	r5, r3, #29
 800c7de:	d00e      	beq.n	800c7fe <i2c_stm32_init+0x66>
 800c7e0:	466d      	mov	r5, sp
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	466a      	mov	r2, sp
 800c7e6:	4b48      	ldr	r3, [pc, #288]	; (800c908 <i2c_stm32_init+0x170>)
 800c7e8:	e9c2 3405 	strd	r3, r4, [r2, #20]
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	f842 3f10 	str.w	r3, [r2, #16]!
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800c7f8:	f7fb fcaa 	bl	8008150 <z_impl_z_log_msg_static_create>
 800c7fc:	46ad      	mov	sp, r5
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 800c7fe:	4620      	mov	r0, r4
 800c800:	3718      	adds	r7, #24
 800c802:	46bd      	mov	sp, r7
 800c804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c808:	2201      	movs	r2, #1
 800c80a:	4611      	mov	r1, r2
 800c80c:	f108 0018 	add.w	r0, r8, #24
 800c810:	f00c ff66 	bl	80196e0 <z_impl_k_sem_init>
 800c814:	4c3d      	ldr	r4, [pc, #244]	; (800c90c <i2c_stm32_init+0x174>)
 800c816:	4620      	mov	r0, r4
 800c818:	f00c fefc 	bl	8019614 <z_device_is_ready>
	if (!device_is_ready(clk)) {
 800c81c:	4603      	mov	r3, r0
 800c81e:	b988      	cbnz	r0, 800c844 <i2c_stm32_init+0xac>
		LOG_ERR("clock control device not ready");
 800c820:	4838      	ldr	r0, [pc, #224]	; (800c904 <i2c_stm32_init+0x16c>)
 800c822:	6802      	ldr	r2, [r0, #0]
 800c824:	0754      	lsls	r4, r2, #29
 800c826:	d102      	bne.n	800c82e <i2c_stm32_init+0x96>
		return -ENODEV;
 800c828:	f06f 0412 	mvn.w	r4, #18
 800c82c:	e7e7      	b.n	800c7fe <i2c_stm32_init+0x66>
		LOG_ERR("clock control device not ready");
 800c82e:	4a38      	ldr	r2, [pc, #224]	; (800c910 <i2c_stm32_init+0x178>)
 800c830:	617a      	str	r2, [r7, #20]
 800c832:	2202      	movs	r2, #2
 800c834:	613a      	str	r2, [r7, #16]
 800c836:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c83a:	f107 0210 	add.w	r2, r7, #16
 800c83e:	f7fb fc87 	bl	8008150 <z_impl_z_log_msg_static_create>
 800c842:	e7f1      	b.n	800c828 <i2c_stm32_init+0x90>
	return api->on(dev, sys);
 800c844:	68a3      	ldr	r3, [r4, #8]
 800c846:	4620      	mov	r0, r4
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	1d31      	adds	r1, r6, #4
 800c84c:	4798      	blx	r3
	if (clock_control_on(clk,
 800c84e:	4604      	mov	r4, r0
 800c850:	b188      	cbz	r0, 800c876 <i2c_stm32_init+0xde>
		LOG_ERR("i2c: failure enabling clock");
 800c852:	482c      	ldr	r0, [pc, #176]	; (800c904 <i2c_stm32_init+0x16c>)
 800c854:	6803      	ldr	r3, [r0, #0]
 800c856:	0759      	lsls	r1, r3, #29
 800c858:	d00a      	beq.n	800c870 <i2c_stm32_init+0xd8>
 800c85a:	4b2e      	ldr	r3, [pc, #184]	; (800c914 <i2c_stm32_init+0x17c>)
 800c85c:	617b      	str	r3, [r7, #20]
 800c85e:	2302      	movs	r3, #2
 800c860:	613b      	str	r3, [r7, #16]
 800c862:	2300      	movs	r3, #0
 800c864:	f107 0210 	add.w	r2, r7, #16
 800c868:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c86c:	f7fb fc70 	bl	8008150 <z_impl_z_log_msg_static_create>
		return -EIO;
 800c870:	f06f 0404 	mvn.w	r4, #4
 800c874:	e7c3      	b.n	800c7fe <i2c_stm32_init+0x66>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 800c876:	6933      	ldr	r3, [r6, #16]
	switch (bitrate) {
 800c878:	4a27      	ldr	r2, [pc, #156]	; (800c918 <i2c_stm32_init+0x180>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d02e      	beq.n	800c8dc <i2c_stm32_init+0x144>
 800c87e:	d822      	bhi.n	800c8c6 <i2c_stm32_init+0x12e>
 800c880:	4a26      	ldr	r2, [pc, #152]	; (800c91c <i2c_stm32_init+0x184>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d02c      	beq.n	800c8e0 <i2c_stm32_init+0x148>
 800c886:	4a26      	ldr	r2, [pc, #152]	; (800c920 <i2c_stm32_init+0x188>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d02b      	beq.n	800c8e4 <i2c_stm32_init+0x14c>
	LOG_ERR("Invalid I2C bit rate value");
 800c88c:	481d      	ldr	r0, [pc, #116]	; (800c904 <i2c_stm32_init+0x16c>)
 800c88e:	6803      	ldr	r3, [r0, #0]
 800c890:	075a      	lsls	r2, r3, #29
 800c892:	d00a      	beq.n	800c8aa <i2c_stm32_init+0x112>
 800c894:	4b23      	ldr	r3, [pc, #140]	; (800c924 <i2c_stm32_init+0x18c>)
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	2302      	movs	r3, #2
 800c89a:	613b      	str	r3, [r7, #16]
 800c89c:	2300      	movs	r3, #0
 800c89e:	f107 0210 	add.w	r2, r7, #16
 800c8a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c8a6:	f7fb fc53 	bl	8008150 <z_impl_z_log_msg_static_create>
	return 0;
 800c8aa:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_CONTROLLER | bitrate_cfg);
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	f041 0110 	orr.w	r1, r1, #16
 800c8b2:	f7ff ff2b 	bl	800c70c <i2c_stm32_runtime_configure>
	if (ret < 0) {
 800c8b6:	1e05      	subs	r5, r0, #0
 800c8b8:	daa1      	bge.n	800c7fe <i2c_stm32_init+0x66>
		LOG_ERR("i2c: failure initializing");
 800c8ba:	4812      	ldr	r0, [pc, #72]	; (800c904 <i2c_stm32_init+0x16c>)
 800c8bc:	6803      	ldr	r3, [r0, #0]
 800c8be:	075b      	lsls	r3, r3, #29
 800c8c0:	d114      	bne.n	800c8ec <i2c_stm32_init+0x154>
		return -EIO;
 800c8c2:	462c      	mov	r4, r5
 800c8c4:	e79b      	b.n	800c7fe <i2c_stm32_init+0x66>
	switch (bitrate) {
 800c8c6:	4a18      	ldr	r2, [pc, #96]	; (800c928 <i2c_stm32_init+0x190>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d00d      	beq.n	800c8e8 <i2c_stm32_init+0x150>
 800c8cc:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800c8d0:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d1d9      	bne.n	800c88c <i2c_stm32_init+0xf4>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800c8d8:	210a      	movs	r1, #10
 800c8da:	e7e7      	b.n	800c8ac <i2c_stm32_init+0x114>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800c8dc:	2106      	movs	r1, #6
 800c8de:	e7e5      	b.n	800c8ac <i2c_stm32_init+0x114>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800c8e0:	2102      	movs	r1, #2
 800c8e2:	e7e3      	b.n	800c8ac <i2c_stm32_init+0x114>
	switch (bitrate) {
 800c8e4:	2104      	movs	r1, #4
 800c8e6:	e7e1      	b.n	800c8ac <i2c_stm32_init+0x114>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800c8e8:	2108      	movs	r1, #8
 800c8ea:	e7df      	b.n	800c8ac <i2c_stm32_init+0x114>
		LOG_ERR("i2c: failure initializing");
 800c8ec:	4b0f      	ldr	r3, [pc, #60]	; (800c92c <i2c_stm32_init+0x194>)
 800c8ee:	617b      	str	r3, [r7, #20]
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	613b      	str	r3, [r7, #16]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f107 0210 	add.w	r2, r7, #16
 800c8fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c8fe:	f7fb fc27 	bl	8008150 <z_impl_z_log_msg_static_create>
 800c902:	e7de      	b.n	800c8c2 <i2c_stm32_init+0x12a>
 800c904:	20000d40 	.word	0x20000d40
 800c908:	0801d2da 	.word	0x0801d2da
 800c90c:	08019e20 	.word	0x08019e20
 800c910:	0801d2f8 	.word	0x0801d2f8
 800c914:	0801d317 	.word	0x0801d317
 800c918:	000f4240 	.word	0x000f4240
 800c91c:	000186a0 	.word	0x000186a0
 800c920:	00061a80 	.word	0x00061a80
 800c924:	0801d28c 	.word	0x0801d28c
 800c928:	0033e140 	.word	0x0033e140
 800c92c:	0801d333 	.word	0x0801d333

0800c930 <led_gpio_init>:
{
	return led_gpio_set_brightness(dev, led, 0);
}

static int led_gpio_init(const struct device *dev)
{
 800c930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct led_gpio_config *config = dev->config;
 800c934:	6846      	ldr	r6, [r0, #4]
	int err = 0;

	if (!config->num_leds) {
 800c936:	6833      	ldr	r3, [r6, #0]
{
 800c938:	af00      	add	r7, sp, #0
 800c93a:	4605      	mov	r5, r0
	if (!config->num_leds) {
 800c93c:	bb03      	cbnz	r3, 800c980 <led_gpio_init+0x50>
		LOG_ERR("%s: no LEDs found (DT child nodes missing)", dev->name);
 800c93e:	4844      	ldr	r0, [pc, #272]	; (800ca50 <led_gpio_init+0x120>)
 800c940:	6802      	ldr	r2, [r0, #0]
 800c942:	0751      	lsls	r1, r2, #29
 800c944:	d108      	bne.n	800c958 <led_gpio_init+0x28>
		err = -ENODEV;
 800c946:	f06f 0412 	mvn.w	r4, #18
	}

	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
 800c94a:	6833      	ldr	r3, [r6, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d138      	bne.n	800c9c2 <led_gpio_init+0x92>
			err = -ENODEV;
		}
	}

	return err;
}
 800c950:	4620      	mov	r0, r4
 800c952:	46bd      	mov	sp, r7
 800c954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("%s: no LEDs found (DT child nodes missing)", dev->name);
 800c958:	466c      	mov	r4, sp
 800c95a:	b088      	sub	sp, #32
 800c95c:	6829      	ldr	r1, [r5, #0]
 800c95e:	466a      	mov	r2, sp
 800c960:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800ca60 <led_gpio_init+0x130>
 800c964:	e9c2 c105 	strd	ip, r1, [r2, #20]
 800c968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c96c:	8391      	strh	r1, [r2, #28]
 800c96e:	4939      	ldr	r1, [pc, #228]	; (800ca54 <led_gpio_init+0x124>)
 800c970:	f842 1f10 	str.w	r1, [r2, #16]!
 800c974:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800c978:	f7fb fbea 	bl	8008150 <z_impl_z_log_msg_static_create>
 800c97c:	46a5      	mov	sp, r4
 800c97e:	e7e2      	b.n	800c946 <led_gpio_init+0x16>
	int err = 0;
 800c980:	2400      	movs	r4, #0
 800c982:	e7e2      	b.n	800c94a <led_gpio_init+0x1a>
			LOG_ERR("%s: GPIO device not ready", dev->name);
 800c984:	4832      	ldr	r0, [pc, #200]	; (800ca50 <led_gpio_init+0x120>)
 800c986:	6802      	ldr	r2, [r0, #0]
 800c988:	0752      	lsls	r2, r2, #29
 800c98a:	d011      	beq.n	800c9b0 <led_gpio_init+0x80>
 800c98c:	466c      	mov	r4, sp
 800c98e:	b088      	sub	sp, #32
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	466a      	mov	r2, sp
 800c994:	4d30      	ldr	r5, [pc, #192]	; (800ca58 <led_gpio_init+0x128>)
 800c996:	e9c2 5105 	strd	r5, r1, [r2, #20]
 800c99a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c99e:	8391      	strh	r1, [r2, #28]
 800c9a0:	492c      	ldr	r1, [pc, #176]	; (800ca54 <led_gpio_init+0x124>)
 800c9a2:	f842 1f10 	str.w	r1, [r2, #16]!
 800c9a6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800c9aa:	f7fb fbd1 	bl	8008150 <z_impl_z_log_msg_static_create>
 800c9ae:	46a5      	mov	sp, r4
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
 800c9b0:	f06f 0412 	mvn.w	r4, #18
	return err;
 800c9b4:	e7cc      	b.n	800c950 <led_gpio_init+0x20>
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
 800c9b6:	6833      	ldr	r3, [r6, #0]
 800c9b8:	f108 0801 	add.w	r8, r8, #1
 800c9bc:	4543      	cmp	r3, r8
 800c9be:	d805      	bhi.n	800c9cc <led_gpio_init+0x9c>
 800c9c0:	e7c6      	b.n	800c950 <led_gpio_init+0x20>
 800c9c2:	2c00      	cmp	r4, #0
 800c9c4:	d1f4      	bne.n	800c9b0 <led_gpio_init+0x80>
 800c9c6:	46a0      	mov	r8, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800c9c8:	f04f 0901 	mov.w	r9, #1
		const struct gpio_dt_spec *led = &config->led[i];
 800c9cc:	6874      	ldr	r4, [r6, #4]
		if (device_is_ready(led->port)) {
 800c9ce:	f854 0038 	ldr.w	r0, [r4, r8, lsl #3]
		const struct gpio_dt_spec *led = &config->led[i];
 800c9d2:	eb04 0ac8 	add.w	sl, r4, r8, lsl #3
 800c9d6:	f00c fe1d 	bl	8019614 <z_device_is_ready>
		if (device_is_ready(led->port)) {
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d0d1      	beq.n	800c984 <led_gpio_init+0x54>
	return gpio_pin_configure(spec->port,
 800c9e0:	f854 0038 	ldr.w	r0, [r4, r8, lsl #3]
				  spec->pin,
 800c9e4:	f89a 1004 	ldrb.w	r1, [sl, #4]
				  spec->dt_flags | extra_flags);
 800c9e8:	f8ba 3006 	ldrh.w	r3, [sl, #6]
	struct gpio_driver_data *data =
 800c9ec:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 800c9f0:	f8d0 a008 	ldr.w	sl, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800c9f4:	f8dc 4000 	ldr.w	r4, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800c9f8:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 800c9fa:	bf54      	ite	pl
 800c9fc:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800ca00:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800ca04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800ca08:	fa09 fe01 	lsl.w	lr, r9, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800ca0c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800ca0e:	bf4c      	ite	mi
 800ca10:	ea44 040e 	orrmi.w	r4, r4, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800ca14:	ea24 040e 	bicpl.w	r4, r4, lr
 800ca18:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
 800ca1c:	f8da 3000 	ldr.w	r3, [sl]
 800ca20:	4798      	blx	r3
			if (err) {
 800ca22:	4604      	mov	r4, r0
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d0c6      	beq.n	800c9b6 <led_gpio_init+0x86>
				LOG_ERR("Cannot configure GPIO (err %d)", err);
 800ca28:	4809      	ldr	r0, [pc, #36]	; (800ca50 <led_gpio_init+0x120>)
 800ca2a:	6803      	ldr	r3, [r0, #0]
 800ca2c:	0759      	lsls	r1, r3, #29
 800ca2e:	d08f      	beq.n	800c950 <led_gpio_init+0x20>
 800ca30:	466d      	mov	r5, sp
 800ca32:	b088      	sub	sp, #32
 800ca34:	466a      	mov	r2, sp
 800ca36:	4b09      	ldr	r3, [pc, #36]	; (800ca5c <led_gpio_init+0x12c>)
 800ca38:	e9c2 3405 	strd	r3, r4, [r2, #20]
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	f842 3f10 	str.w	r3, [r2, #16]!
 800ca42:	2300      	movs	r3, #0
 800ca44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800ca48:	f7fb fb82 	bl	8008150 <z_impl_z_log_msg_static_create>
 800ca4c:	46ad      	mov	sp, r5
 800ca4e:	e77f      	b.n	800c950 <led_gpio_init+0x20>
 800ca50:	20000d4c 	.word	0x20000d4c
 800ca54:	01000003 	.word	0x01000003
 800ca58:	0801d3cb 	.word	0x0801d3cb
 800ca5c:	0801d3ac 	.word	0x0801d3ac
 800ca60:	0801d381 	.word	0x0801d381

0800ca64 <parse_common_args>:
	arg_idx_value		= 3,
};

static int parse_common_args(const struct shell *shell, char **argv,
			     const struct device * *dev, uint32_t *led)
{
 800ca64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca66:	4605      	mov	r5, r0
 800ca68:	460c      	mov	r4, r1
	char *end_ptr;

	*dev = device_get_binding(argv[arg_idx_dev]);
 800ca6a:	6848      	ldr	r0, [r1, #4]
{
 800ca6c:	4617      	mov	r7, r2
 800ca6e:	461e      	mov	r6, r3
 800ca70:	f002 fc88 	bl	800f384 <z_impl_device_get_binding>
	*dev = device_get_binding(argv[arg_idx_dev]);
 800ca74:	6038      	str	r0, [r7, #0]
	if (!*dev) {
 800ca76:	b948      	cbnz	r0, 800ca8c <parse_common_args+0x28>
		shell_error(shell,
 800ca78:	4628      	mov	r0, r5
 800ca7a:	6863      	ldr	r3, [r4, #4]
 800ca7c:	4a0d      	ldr	r2, [pc, #52]	; (800cab4 <parse_common_args+0x50>)
 800ca7e:	2101      	movs	r1, #1
 800ca80:	f008 fd8c 	bl	801559c <shell_fprintf>
			    "LED device %s not found", argv[arg_idx_dev]);
		return -ENODEV;
 800ca84:	f06f 0012 	mvn.w	r0, #18
			    argv[arg_idx_led]);
		return -EINVAL;
	}

	return 0;
}
 800ca88:	b003      	add	sp, #12
 800ca8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*led = strtoul(argv[arg_idx_led], &end_ptr, 0);
 800ca8c:	68a0      	ldr	r0, [r4, #8]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	a901      	add	r1, sp, #4
 800ca92:	f005 f969 	bl	8011d68 <strtoul>
	if (*end_ptr != '\0') {
 800ca96:	9b01      	ldr	r3, [sp, #4]
	*led = strtoul(argv[arg_idx_led], &end_ptr, 0);
 800ca98:	6030      	str	r0, [r6, #0]
	if (*end_ptr != '\0') {
 800ca9a:	7818      	ldrb	r0, [r3, #0]
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d0f3      	beq.n	800ca88 <parse_common_args+0x24>
		shell_error(shell, "Invalid LED number parameter %s",
 800caa0:	4628      	mov	r0, r5
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	4a04      	ldr	r2, [pc, #16]	; (800cab8 <parse_common_args+0x54>)
 800caa6:	2101      	movs	r1, #1
 800caa8:	f008 fd78 	bl	801559c <shell_fprintf>
		return -EINVAL;
 800caac:	f06f 0015 	mvn.w	r0, #21
 800cab0:	e7ea      	b.n	800ca88 <parse_common_args+0x24>
 800cab2:	bf00      	nop
 800cab4:	0801d3f3 	.word	0x0801d3f3
 800cab8:	0801d40c 	.word	0x0801d40c

0800cabc <cmd_set_channel>:

	return err;
}

static int cmd_set_channel(const struct shell *shell, size_t argc, char **argv)
{
 800cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cabe:	4616      	mov	r6, r2
 800cac0:	b087      	sub	sp, #28
	uint32_t channel;
	int err;
	char *end_ptr;
	unsigned long value;

	err = parse_common_args(shell, argv, &dev, &channel);
 800cac2:	ab04      	add	r3, sp, #16
 800cac4:	aa03      	add	r2, sp, #12
 800cac6:	4631      	mov	r1, r6
{
 800cac8:	4605      	mov	r5, r0
	err = parse_common_args(shell, argv, &dev, &channel);
 800caca:	f7ff ffcb 	bl	800ca64 <parse_common_args>
	if (err < 0) {
 800cace:	1e04      	subs	r4, r0, #0
 800cad0:	db10      	blt.n	800caf4 <cmd_set_channel+0x38>
		return err;
	}

	value = strtoul(argv[arg_idx_value], &end_ptr, 0);
 800cad2:	68f0      	ldr	r0, [r6, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	a905      	add	r1, sp, #20
 800cad8:	f005 f946 	bl	8011d68 <strtoul>
	if (*end_ptr != '\0') {
 800cadc:	9b05      	ldr	r3, [sp, #20]
 800cade:	781b      	ldrb	r3, [r3, #0]
	value = strtoul(argv[arg_idx_value], &end_ptr, 0);
 800cae0:	4604      	mov	r4, r0
	if (*end_ptr != '\0') {
 800cae2:	b153      	cbz	r3, 800cafa <cmd_set_channel+0x3e>
		shell_error(shell, "Invalid channel value parameter %s",
 800cae4:	68f3      	ldr	r3, [r6, #12]
 800cae6:	4a18      	ldr	r2, [pc, #96]	; (800cb48 <cmd_set_channel+0x8c>)
			     argv[arg_idx_value]);
		return -EINVAL;
	}
	if (value > 255) {
		shell_error(shell, "Invalid channel value %lu (max 255)",
 800cae8:	2101      	movs	r1, #1
 800caea:	4628      	mov	r0, r5
 800caec:	f008 fd56 	bl	801559c <shell_fprintf>
		return -EINVAL;
 800caf0:	f06f 0415 	mvn.w	r4, #21
	if (err) {
		shell_error(shell, "Error: %d", err);
	}

	return err;
}
 800caf4:	4620      	mov	r0, r4
 800caf6:	b007      	add	sp, #28
 800caf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (value > 255) {
 800cafa:	28ff      	cmp	r0, #255	; 0xff
 800cafc:	d902      	bls.n	800cb04 <cmd_set_channel+0x48>
		shell_error(shell, "Invalid channel value %lu (max 255)",
 800cafe:	4a13      	ldr	r2, [pc, #76]	; (800cb4c <cmd_set_channel+0x90>)
 800cb00:	4603      	mov	r3, r0
 800cb02:	e7f1      	b.n	800cae8 <cmd_set_channel+0x2c>
	shell_print(shell, "%s: setting channel %d to %lu",
 800cb04:	e9dd 6703 	ldrd	r6, r7, [sp, #12]
 800cb08:	e9cd 7000 	strd	r7, r0, [sp]
 800cb0c:	4a10      	ldr	r2, [pc, #64]	; (800cb50 <cmd_set_channel+0x94>)
 800cb0e:	6833      	ldr	r3, [r6, #0]
 800cb10:	2108      	movs	r1, #8
 800cb12:	4628      	mov	r0, r5
 800cb14:	f008 fd42 	bl	801559c <shell_fprintf>
	if (api->write_channels == NULL) {
 800cb18:	68b3      	ldr	r3, [r6, #8]
	err = led_set_channel(dev, channel, (uint8_t) value);
 800cb1a:	f88d 400b 	strb.w	r4, [sp, #11]
 800cb1e:	699c      	ldr	r4, [r3, #24]
 800cb20:	b944      	cbnz	r4, 800cb34 <cmd_set_channel+0x78>
		return -ENOSYS;
 800cb22:	f06f 0457 	mvn.w	r4, #87	; 0x57
		shell_error(shell, "Error: %d", err);
 800cb26:	4a0b      	ldr	r2, [pc, #44]	; (800cb54 <cmd_set_channel+0x98>)
 800cb28:	4623      	mov	r3, r4
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f008 fd35 	bl	801559c <shell_fprintf>
 800cb32:	e7df      	b.n	800caf4 <cmd_set_channel+0x38>
	return api->write_channels(dev, start_channel, num_channels, buf);
 800cb34:	f10d 030b 	add.w	r3, sp, #11
 800cb38:	2201      	movs	r2, #1
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	47a0      	blx	r4
	if (err) {
 800cb40:	4604      	mov	r4, r0
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d0d6      	beq.n	800caf4 <cmd_set_channel+0x38>
 800cb46:	e7ee      	b.n	800cb26 <cmd_set_channel+0x6a>
 800cb48:	0801d42d 	.word	0x0801d42d
 800cb4c:	0801d451 	.word	0x0801d451
 800cb50:	0801d476 	.word	0x0801d476
 800cb54:	0801d495 	.word	0x0801d495

0800cb58 <cmd_set_color>:
{
 800cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	4691      	mov	r9, r2
 800cb5e:	b089      	sub	sp, #36	; 0x24
 800cb60:	468a      	mov	sl, r1
	err = parse_common_args(shell, argv, &dev, &led);
 800cb62:	ab04      	add	r3, sp, #16
 800cb64:	aa03      	add	r2, sp, #12
 800cb66:	4649      	mov	r1, r9
{
 800cb68:	4605      	mov	r5, r0
	err = parse_common_args(shell, argv, &dev, &led);
 800cb6a:	f7ff ff7b 	bl	800ca64 <parse_common_args>
	if (err < 0) {
 800cb6e:	1e04      	subs	r4, r0, #0
 800cb70:	db41      	blt.n	800cbf6 <cmd_set_color+0x9e>
	num_colors = argc - arg_idx_value;
 800cb72:	f1aa 0603 	sub.w	r6, sl, #3
	if (num_colors > MAX_CHANNEL_ARGS) {
 800cb76:	2e08      	cmp	r6, #8
 800cb78:	d833      	bhi.n	800cbe2 <cmd_set_color+0x8a>
 800cb7a:	af06      	add	r7, sp, #24
 800cb7c:	eb09 048a 	add.w	r4, r9, sl, lsl #2
 800cb80:	f109 080c 	add.w	r8, r9, #12
 800cb84:	46ba      	mov	sl, r7
 800cb86:	46b9      	mov	r9, r7
	for (i = 0; i < num_colors; i++) {
 800cb88:	45a0      	cmp	r8, r4
 800cb8a:	d138      	bne.n	800cbfe <cmd_set_color+0xa6>
	shell_fprintf(shell, SHELL_NORMAL, "%s: setting LED %d color to %d",
 800cb8c:	e9dd 4a03 	ldrd	r4, sl, [sp, #12]
 800cb90:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800cb94:	4a2d      	ldr	r2, [pc, #180]	; (800cc4c <cmd_set_color+0xf4>)
		shell_fprintf(shell, SHELL_NORMAL, ":%d", color[i]);
 800cb96:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800cc64 <cmd_set_color+0x10c>
	shell_fprintf(shell, SHELL_NORMAL, "%s: setting LED %d color to %d",
 800cb9a:	e9cd a300 	strd	sl, r3, [sp]
 800cb9e:	2108      	movs	r1, #8
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	4628      	mov	r0, r5
 800cba4:	f008 fcfa 	bl	801559c <shell_fprintf>
	for (i = 1; i < num_colors; i++) {
 800cba8:	f04f 0800 	mov.w	r8, #0
 800cbac:	f108 0801 	add.w	r8, r8, #1
 800cbb0:	4546      	cmp	r6, r8
 800cbb2:	d840      	bhi.n	800cc36 <cmd_set_color+0xde>
	shell_fprintf(shell, SHELL_NORMAL, "\n");
 800cbb4:	4a26      	ldr	r2, [pc, #152]	; (800cc50 <cmd_set_color+0xf8>)
 800cbb6:	2108      	movs	r1, #8
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f008 fcef 	bl	801559c <shell_fprintf>
	err = led_set_color(dev, led, num_colors, color);
 800cbbe:	b2f2      	uxtb	r2, r6
				       uint8_t num_colors, const uint8_t *color)
{
	const struct led_driver_api *api =
		(const struct led_driver_api *)dev->api;

	if (api->set_color == NULL) {
 800cbc0:	68a3      	ldr	r3, [r4, #8]
 800cbc2:	695e      	ldr	r6, [r3, #20]
 800cbc4:	2e00      	cmp	r6, #0
 800cbc6:	d03e      	beq.n	800cc46 <cmd_set_color+0xee>
		return -ENOSYS;
	}
	return api->set_color(dev, led, num_colors, color);
 800cbc8:	4620      	mov	r0, r4
 800cbca:	464b      	mov	r3, r9
 800cbcc:	4651      	mov	r1, sl
 800cbce:	47b0      	blx	r6
	if (err) {
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	b180      	cbz	r0, 800cbf6 <cmd_set_color+0x9e>
		shell_error(shell, "Error: %d", err);
 800cbd4:	4a1f      	ldr	r2, [pc, #124]	; (800cc54 <cmd_set_color+0xfc>)
 800cbd6:	4623      	mov	r3, r4
 800cbd8:	2101      	movs	r1, #1
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f008 fcde 	bl	801559c <shell_fprintf>
 800cbe0:	e009      	b.n	800cbf6 <cmd_set_color+0x9e>
		shell_error(shell,
 800cbe2:	2308      	movs	r3, #8
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	4a1c      	ldr	r2, [pc, #112]	; (800cc58 <cmd_set_color+0x100>)
 800cbe8:	4633      	mov	r3, r6
 800cbea:	2101      	movs	r1, #1
 800cbec:	4628      	mov	r0, r5
 800cbee:	f008 fcd5 	bl	801559c <shell_fprintf>
		return -EINVAL;
 800cbf2:	f06f 0415 	mvn.w	r4, #21
}
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	b009      	add	sp, #36	; 0x24
 800cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		col = strtoul(argv[arg_idx_value + i], &end_ptr, 0);
 800cbfe:	46c3      	mov	fp, r8
 800cc00:	2200      	movs	r2, #0
 800cc02:	f8db 0000 	ldr.w	r0, [fp]
 800cc06:	a905      	add	r1, sp, #20
 800cc08:	f005 f8ae 	bl	8011d68 <strtoul>
		if (*end_ptr != '\0') {
 800cc0c:	9a05      	ldr	r2, [sp, #20]
 800cc0e:	7812      	ldrb	r2, [r2, #0]
 800cc10:	f108 0804 	add.w	r8, r8, #4
		col = strtoul(argv[arg_idx_value + i], &end_ptr, 0);
 800cc14:	4603      	mov	r3, r0
		if (*end_ptr != '\0') {
 800cc16:	b13a      	cbz	r2, 800cc28 <cmd_set_color+0xd0>
			shell_error(shell, "Invalid LED color parameter %s",
 800cc18:	f8db 3000 	ldr.w	r3, [fp]
 800cc1c:	4a0f      	ldr	r2, [pc, #60]	; (800cc5c <cmd_set_color+0x104>)
			shell_error(shell,
 800cc1e:	2101      	movs	r1, #1
 800cc20:	4628      	mov	r0, r5
 800cc22:	f008 fcbb 	bl	801559c <shell_fprintf>
			return -EINVAL;
 800cc26:	e7e4      	b.n	800cbf2 <cmd_set_color+0x9a>
		if (col > 255) {
 800cc28:	28ff      	cmp	r0, #255	; 0xff
 800cc2a:	d901      	bls.n	800cc30 <cmd_set_color+0xd8>
			shell_error(shell,
 800cc2c:	4a0c      	ldr	r2, [pc, #48]	; (800cc60 <cmd_set_color+0x108>)
 800cc2e:	e7f6      	b.n	800cc1e <cmd_set_color+0xc6>
		color[i] = col;
 800cc30:	f80a 0b01 	strb.w	r0, [sl], #1
	for (i = 0; i < num_colors; i++) {
 800cc34:	e7a8      	b.n	800cb88 <cmd_set_color+0x30>
		shell_fprintf(shell, SHELL_NORMAL, ":%d", color[i]);
 800cc36:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800cc3a:	465a      	mov	r2, fp
 800cc3c:	2108      	movs	r1, #8
 800cc3e:	4628      	mov	r0, r5
 800cc40:	f008 fcac 	bl	801559c <shell_fprintf>
	for (i = 1; i < num_colors; i++) {
 800cc44:	e7b2      	b.n	800cbac <cmd_set_color+0x54>
		return -ENOSYS;
 800cc46:	f06f 0457 	mvn.w	r4, #87	; 0x57
 800cc4a:	e7c3      	b.n	800cbd4 <cmd_set_color+0x7c>
 800cc4c:	0801d50d 	.word	0x0801d50d
 800cc50:	0801bd34 	.word	0x0801bd34
 800cc54:	0801d495 	.word	0x0801d495
 800cc58:	0801d4a0 	.word	0x0801d4a0
 800cc5c:	0801d4c6 	.word	0x0801d4c6
 800cc60:	0801d4e6 	.word	0x0801d4e6
 800cc64:	0801b7a8 	.word	0x0801b7a8

0800cc68 <cmd_set_brightness>:
{
 800cc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6a:	4616      	mov	r6, r2
 800cc6c:	b087      	sub	sp, #28
	err = parse_common_args(shell, argv, &dev, &led);
 800cc6e:	ab04      	add	r3, sp, #16
 800cc70:	aa03      	add	r2, sp, #12
 800cc72:	4631      	mov	r1, r6
{
 800cc74:	4605      	mov	r5, r0
	err = parse_common_args(shell, argv, &dev, &led);
 800cc76:	f7ff fef5 	bl	800ca64 <parse_common_args>
	if (err < 0) {
 800cc7a:	1e04      	subs	r4, r0, #0
 800cc7c:	db10      	blt.n	800cca0 <cmd_set_brightness+0x38>
	value = strtoul(argv[arg_idx_value], &end_ptr, 0);
 800cc7e:	68f0      	ldr	r0, [r6, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	a905      	add	r1, sp, #20
 800cc84:	f005 f870 	bl	8011d68 <strtoul>
	if (*end_ptr != '\0') {
 800cc88:	9b05      	ldr	r3, [sp, #20]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
	value = strtoul(argv[arg_idx_value], &end_ptr, 0);
 800cc8c:	4604      	mov	r4, r0
	if (*end_ptr != '\0') {
 800cc8e:	b153      	cbz	r3, 800cca6 <cmd_set_brightness+0x3e>
		shell_error(shell, "Invalid LED brightness parameter %s",
 800cc90:	68f3      	ldr	r3, [r6, #12]
 800cc92:	4a16      	ldr	r2, [pc, #88]	; (800ccec <cmd_set_brightness+0x84>)
		shell_error(shell, "Invalid LED brightness value %lu (max 100)",
 800cc94:	2101      	movs	r1, #1
 800cc96:	4628      	mov	r0, r5
 800cc98:	f008 fc80 	bl	801559c <shell_fprintf>
		return -EINVAL;
 800cc9c:	f06f 0415 	mvn.w	r4, #21
}
 800cca0:	4620      	mov	r0, r4
 800cca2:	b007      	add	sp, #28
 800cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (value > 100) {
 800cca6:	2864      	cmp	r0, #100	; 0x64
 800cca8:	d902      	bls.n	800ccb0 <cmd_set_brightness+0x48>
		shell_error(shell, "Invalid LED brightness value %lu (max 100)",
 800ccaa:	4a11      	ldr	r2, [pc, #68]	; (800ccf0 <cmd_set_brightness+0x88>)
 800ccac:	4603      	mov	r3, r0
 800ccae:	e7f1      	b.n	800cc94 <cmd_set_brightness+0x2c>
	shell_print(shell, "%s: setting LED %d brightness to %lu",
 800ccb0:	e9dd 6703 	ldrd	r6, r7, [sp, #12]
 800ccb4:	e9cd 7000 	strd	r7, r0, [sp]
 800ccb8:	4a0e      	ldr	r2, [pc, #56]	; (800ccf4 <cmd_set_brightness+0x8c>)
 800ccba:	6833      	ldr	r3, [r6, #0]
 800ccbc:	2108      	movs	r1, #8
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f008 fc6c 	bl	801559c <shell_fprintf>
	err = led_set_brightness(dev, led, (uint8_t) value);
 800ccc4:	b2e2      	uxtb	r2, r4
	if (api->set_brightness == NULL) {
 800ccc6:	68b3      	ldr	r3, [r6, #8]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	b163      	cbz	r3, 800cce6 <cmd_set_brightness+0x7e>
	return api->set_brightness(dev, led, value);
 800cccc:	4639      	mov	r1, r7
 800ccce:	4630      	mov	r0, r6
 800ccd0:	4798      	blx	r3
	if (err) {
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d0e3      	beq.n	800cca0 <cmd_set_brightness+0x38>
		shell_error(shell, "Error: %d", err);
 800ccd8:	4a07      	ldr	r2, [pc, #28]	; (800ccf8 <cmd_set_brightness+0x90>)
 800ccda:	4623      	mov	r3, r4
 800ccdc:	2101      	movs	r1, #1
 800ccde:	4628      	mov	r0, r5
 800cce0:	f008 fc5c 	bl	801559c <shell_fprintf>
 800cce4:	e7dc      	b.n	800cca0 <cmd_set_brightness+0x38>
		return -ENOSYS;
 800cce6:	f06f 0457 	mvn.w	r4, #87	; 0x57
 800ccea:	e7f5      	b.n	800ccd8 <cmd_set_brightness+0x70>
 800ccec:	0801d52c 	.word	0x0801d52c
 800ccf0:	0801d551 	.word	0x0801d551
 800ccf4:	0801d57d 	.word	0x0801d57d
 800ccf8:	0801d495 	.word	0x0801d495

0800ccfc <cmd_get_info>:
{
 800ccfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	4611      	mov	r1, r2
	err = parse_common_args(shell, argv, &dev, &led);
 800cd02:	ab04      	add	r3, sp, #16
 800cd04:	aa03      	add	r2, sp, #12
{
 800cd06:	4605      	mov	r5, r0
	err = parse_common_args(shell, argv, &dev, &led);
 800cd08:	f7ff feac 	bl	800ca64 <parse_common_args>
	if (err < 0) {
 800cd0c:	1e04      	subs	r4, r0, #0
 800cd0e:	db14      	blt.n	800cd3a <cmd_get_info+0x3e>
	shell_print(shell, "%s: getting LED %d information", dev->name, led);
 800cd10:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 800cd14:	9600      	str	r6, [sp, #0]
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	4a29      	ldr	r2, [pc, #164]	; (800cdc0 <cmd_get_info+0xc4>)
 800cd1a:	2108      	movs	r1, #8
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f008 fc3d 	bl	801559c <shell_fprintf>
	if (api->get_info == NULL) {
 800cd22:	68a3      	ldr	r3, [r4, #8]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	b95b      	cbnz	r3, 800cd40 <cmd_get_info+0x44>
		*info = NULL;
 800cd28:	9305      	str	r3, [sp, #20]
		return -ENOSYS;
 800cd2a:	f06f 0457 	mvn.w	r4, #87	; 0x57
		shell_error(shell, "Error: %d", err);
 800cd2e:	4a25      	ldr	r2, [pc, #148]	; (800cdc4 <cmd_get_info+0xc8>)
 800cd30:	4623      	mov	r3, r4
 800cd32:	2101      	movs	r1, #1
 800cd34:	4628      	mov	r0, r5
 800cd36:	f008 fc31 	bl	801559c <shell_fprintf>
}
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	b007      	add	sp, #28
 800cd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->get_info(dev, led, info);
 800cd40:	4620      	mov	r0, r4
 800cd42:	aa05      	add	r2, sp, #20
 800cd44:	4631      	mov	r1, r6
 800cd46:	4798      	blx	r3
	if (err) {
 800cd48:	4604      	mov	r4, r0
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d1ef      	bne.n	800cd2e <cmd_get_info+0x32>
	shell_print(shell, "Label      : %s", info->label ? : "<NULL>");
 800cd4e:	9b05      	ldr	r3, [sp, #20]
 800cd50:	4a1d      	ldr	r2, [pc, #116]	; (800cdc8 <cmd_get_info+0xcc>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2108      	movs	r1, #8
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bf08      	it	eq
 800cd5a:	4613      	moveq	r3, r2
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	4a1b      	ldr	r2, [pc, #108]	; (800cdcc <cmd_get_info+0xd0>)
 800cd60:	f008 fc1c 	bl	801559c <shell_fprintf>
	shell_print(shell, "Index      : %d", info->index);
 800cd64:	9b05      	ldr	r3, [sp, #20]
 800cd66:	4a1a      	ldr	r2, [pc, #104]	; (800cdd0 <cmd_get_info+0xd4>)
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	2108      	movs	r1, #8
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f008 fc15 	bl	801559c <shell_fprintf>
	shell_print(shell, "Num colors : %d", info->num_colors);
 800cd72:	9b05      	ldr	r3, [sp, #20]
 800cd74:	4a17      	ldr	r2, [pc, #92]	; (800cdd4 <cmd_get_info+0xd8>)
 800cd76:	7a1b      	ldrb	r3, [r3, #8]
 800cd78:	2108      	movs	r1, #8
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f008 fc0e 	bl	801559c <shell_fprintf>
	if (info->color_mapping) {
 800cd80:	9b05      	ldr	r3, [sp, #20]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0d8      	beq.n	800cd3a <cmd_get_info+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "Colors     : %d",
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	4a13      	ldr	r2, [pc, #76]	; (800cdd8 <cmd_get_info+0xdc>)
			shell_fprintf(shell, SHELL_NORMAL, ":%d",
 800cd8c:	4f13      	ldr	r7, [pc, #76]	; (800cddc <cmd_get_info+0xe0>)
		shell_fprintf(shell, SHELL_NORMAL, "Colors     : %d",
 800cd8e:	2108      	movs	r1, #8
 800cd90:	4628      	mov	r0, r5
 800cd92:	f008 fc03 	bl	801559c <shell_fprintf>
		for (i = 1; i < info->num_colors; i++) {
 800cd96:	2601      	movs	r6, #1
 800cd98:	9b05      	ldr	r3, [sp, #20]
 800cd9a:	7a19      	ldrb	r1, [r3, #8]
 800cd9c:	42b1      	cmp	r1, r6
 800cd9e:	dc05      	bgt.n	800cdac <cmd_get_info+0xb0>
		shell_fprintf(shell, SHELL_NORMAL, "\n");
 800cda0:	4a0f      	ldr	r2, [pc, #60]	; (800cde0 <cmd_get_info+0xe4>)
 800cda2:	2108      	movs	r1, #8
 800cda4:	4628      	mov	r0, r5
 800cda6:	f008 fbf9 	bl	801559c <shell_fprintf>
 800cdaa:	e7c6      	b.n	800cd3a <cmd_get_info+0x3e>
				      info->color_mapping[i]);
 800cdac:	68db      	ldr	r3, [r3, #12]
			shell_fprintf(shell, SHELL_NORMAL, ":%d",
 800cdae:	463a      	mov	r2, r7
 800cdb0:	5d9b      	ldrb	r3, [r3, r6]
 800cdb2:	2108      	movs	r1, #8
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f008 fbf1 	bl	801559c <shell_fprintf>
		for (i = 1; i < info->num_colors; i++) {
 800cdba:	3601      	adds	r6, #1
 800cdbc:	e7ec      	b.n	800cd98 <cmd_get_info+0x9c>
 800cdbe:	bf00      	nop
 800cdc0:	0801d5aa 	.word	0x0801d5aa
 800cdc4:	0801d495 	.word	0x0801d495
 800cdc8:	0801d5a3 	.word	0x0801d5a3
 800cdcc:	0801d5ca 	.word	0x0801d5ca
 800cdd0:	0801d5db 	.word	0x0801d5db
 800cdd4:	0801d5ec 	.word	0x0801d5ec
 800cdd8:	0801d5fd 	.word	0x0801d5fd
 800cddc:	0801b7a8 	.word	0x0801b7a8
 800cde0:	0801bd34 	.word	0x0801bd34

0800cde4 <cmd_on>:
{
 800cde4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cde6:	4611      	mov	r1, r2
	err = parse_common_args(shell, argv, &dev, &led);
 800cde8:	ab03      	add	r3, sp, #12
 800cdea:	aa02      	add	r2, sp, #8
{
 800cdec:	4605      	mov	r5, r0
	err = parse_common_args(shell, argv, &dev, &led);
 800cdee:	f7ff fe39 	bl	800ca64 <parse_common_args>
	if (err < 0) {
 800cdf2:	1e04      	subs	r4, r0, #0
 800cdf4:	db15      	blt.n	800ce22 <cmd_on+0x3e>
	shell_print(shell, "%s: turning on LED %d", dev->name, led);
 800cdf6:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
 800cdfa:	9600      	str	r6, [sp, #0]
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	4a0a      	ldr	r2, [pc, #40]	; (800ce28 <cmd_on+0x44>)
 800ce00:	2108      	movs	r1, #8
 800ce02:	4628      	mov	r0, r5
 800ce04:	f008 fbca 	bl	801559c <shell_fprintf>
static inline int z_impl_led_on(const struct device *dev, uint32_t led)
{
	const struct led_driver_api *api =
		(const struct led_driver_api *)dev->api;

	return api->on(dev, led);
 800ce08:	68a3      	ldr	r3, [r4, #8]
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4631      	mov	r1, r6
 800ce10:	4798      	blx	r3
	if (err) {
 800ce12:	4604      	mov	r4, r0
 800ce14:	b128      	cbz	r0, 800ce22 <cmd_on+0x3e>
		shell_error(shell, "Error: %d", err);
 800ce16:	4603      	mov	r3, r0
 800ce18:	4a04      	ldr	r2, [pc, #16]	; (800ce2c <cmd_on+0x48>)
 800ce1a:	2101      	movs	r1, #1
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	f008 fbbd 	bl	801559c <shell_fprintf>
}
 800ce22:	4620      	mov	r0, r4
 800ce24:	b004      	add	sp, #16
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	0801d60d 	.word	0x0801d60d
 800ce2c:	0801d495 	.word	0x0801d495

0800ce30 <cmd_off>:
{
 800ce30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ce32:	4611      	mov	r1, r2
	err = parse_common_args(shell, argv, &dev, &led);
 800ce34:	ab03      	add	r3, sp, #12
 800ce36:	aa02      	add	r2, sp, #8
{
 800ce38:	4605      	mov	r5, r0
	err = parse_common_args(shell, argv, &dev, &led);
 800ce3a:	f7ff fe13 	bl	800ca64 <parse_common_args>
	if (err < 0) {
 800ce3e:	1e04      	subs	r4, r0, #0
 800ce40:	db15      	blt.n	800ce6e <cmd_off+0x3e>
	shell_print(shell, "%s: turning off LED %d", dev->name, led);
 800ce42:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
 800ce46:	9600      	str	r6, [sp, #0]
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	4a0a      	ldr	r2, [pc, #40]	; (800ce74 <cmd_off+0x44>)
 800ce4c:	2108      	movs	r1, #8
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f008 fba4 	bl	801559c <shell_fprintf>
static inline int z_impl_led_off(const struct device *dev, uint32_t led)
{
	const struct led_driver_api *api =
		(const struct led_driver_api *)dev->api;

	return api->off(dev, led);
 800ce54:	68a3      	ldr	r3, [r4, #8]
 800ce56:	4620      	mov	r0, r4
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4798      	blx	r3
	if (err) {
 800ce5e:	4604      	mov	r4, r0
 800ce60:	b128      	cbz	r0, 800ce6e <cmd_off+0x3e>
		shell_error(shell, "Error: %d", err);
 800ce62:	4603      	mov	r3, r0
 800ce64:	4a04      	ldr	r2, [pc, #16]	; (800ce78 <cmd_off+0x48>)
 800ce66:	2101      	movs	r1, #1
 800ce68:	4628      	mov	r0, r5
 800ce6a:	f008 fb97 	bl	801559c <shell_fprintf>
}
 800ce6e:	4620      	mov	r0, r4
 800ce70:	b004      	add	sp, #16
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	0801d624 	.word	0x0801d624
 800ce78:	0801d495 	.word	0x0801d495

0800ce7c <cmd_write_channels>:

static int
cmd_write_channels(const struct shell *shell, size_t argc, char **argv)
{
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce80:	4691      	mov	r9, r2
 800ce82:	b089      	sub	sp, #36	; 0x24
 800ce84:	468a      	mov	sl, r1
	int err;
	size_t num_channels;
	uint8_t i;
	uint8_t value[MAX_CHANNEL_ARGS];

	err = parse_common_args(shell, argv, &dev, &start_channel);
 800ce86:	ab04      	add	r3, sp, #16
 800ce88:	aa03      	add	r2, sp, #12
 800ce8a:	4649      	mov	r1, r9
{
 800ce8c:	4605      	mov	r5, r0
	err = parse_common_args(shell, argv, &dev, &start_channel);
 800ce8e:	f7ff fde9 	bl	800ca64 <parse_common_args>
	if (err < 0) {
 800ce92:	1e04      	subs	r4, r0, #0
 800ce94:	db41      	blt.n	800cf1a <cmd_write_channels+0x9e>
		return err;
	}

	num_channels = argc - arg_idx_value;
 800ce96:	f1aa 0603 	sub.w	r6, sl, #3
	if (num_channels > MAX_CHANNEL_ARGS) {
 800ce9a:	2e08      	cmp	r6, #8
 800ce9c:	d833      	bhi.n	800cf06 <cmd_write_channels+0x8a>
 800ce9e:	af06      	add	r7, sp, #24
 800cea0:	eb09 048a 	add.w	r4, r9, sl, lsl #2
 800cea4:	f109 080c 	add.w	r8, r9, #12
 800cea8:	46ba      	mov	sl, r7
 800ceaa:	46b9      	mov	r9, r7
			    "Can't write %d channels (max %d)",
			     num_channels, MAX_CHANNEL_ARGS);
		return -EINVAL;
	}

	for (i = 0; i < num_channels; i++) {
 800ceac:	45a0      	cmp	r8, r4
 800ceae:	d138      	bne.n	800cf22 <cmd_write_channels+0xa6>
			return -EINVAL;
		}
		value[i] = val;
	}

	shell_fprintf(shell, SHELL_NORMAL, "%s: writing from channel %d: %d",
 800ceb0:	e9dd 4903 	ldrd	r4, r9, [sp, #12]
 800ceb4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ceb8:	4a2d      	ldr	r2, [pc, #180]	; (800cf70 <cmd_write_channels+0xf4>)
		      dev->name, start_channel, value[0]);
	for (i = 1; i < num_channels; i++) {
		shell_fprintf(shell, SHELL_NORMAL, " %d", value[i]);
 800ceba:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800cf88 <cmd_write_channels+0x10c>
	shell_fprintf(shell, SHELL_NORMAL, "%s: writing from channel %d: %d",
 800cebe:	e9cd 9300 	strd	r9, r3, [sp]
 800cec2:	2108      	movs	r1, #8
 800cec4:	6823      	ldr	r3, [r4, #0]
 800cec6:	4628      	mov	r0, r5
 800cec8:	f008 fb68 	bl	801559c <shell_fprintf>
	for (i = 1; i < num_channels; i++) {
 800cecc:	f04f 0800 	mov.w	r8, #0
 800ced0:	f108 0801 	add.w	r8, r8, #1
 800ced4:	4546      	cmp	r6, r8
 800ced6:	d840      	bhi.n	800cf5a <cmd_write_channels+0xde>
	}
	shell_fprintf(shell, SHELL_NORMAL, "\n");
 800ced8:	4a26      	ldr	r2, [pc, #152]	; (800cf74 <cmd_write_channels+0xf8>)
 800ceda:	2108      	movs	r1, #8
 800cedc:	4628      	mov	r0, r5
 800cede:	f008 fb5d 	bl	801559c <shell_fprintf>
	if (api->write_channels == NULL) {
 800cee2:	68a3      	ldr	r3, [r4, #8]
 800cee4:	699f      	ldr	r7, [r3, #24]
 800cee6:	2f00      	cmp	r7, #0
 800cee8:	d03f      	beq.n	800cf6a <cmd_write_channels+0xee>
	return api->write_channels(dev, start_channel, num_channels, buf);
 800ceea:	4620      	mov	r0, r4
 800ceec:	4653      	mov	r3, sl
 800ceee:	4632      	mov	r2, r6
 800cef0:	4649      	mov	r1, r9
 800cef2:	47b8      	blx	r7

	err = led_write_channels(dev, start_channel, num_channels, value);
	if (err) {
 800cef4:	4604      	mov	r4, r0
 800cef6:	b180      	cbz	r0, 800cf1a <cmd_write_channels+0x9e>
		shell_error(shell, "Error: %d", err);
 800cef8:	4a1f      	ldr	r2, [pc, #124]	; (800cf78 <cmd_write_channels+0xfc>)
 800cefa:	4623      	mov	r3, r4
 800cefc:	2101      	movs	r1, #1
 800cefe:	4628      	mov	r0, r5
 800cf00:	f008 fb4c 	bl	801559c <shell_fprintf>
 800cf04:	e009      	b.n	800cf1a <cmd_write_channels+0x9e>
		shell_error(shell,
 800cf06:	2308      	movs	r3, #8
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	4a1c      	ldr	r2, [pc, #112]	; (800cf7c <cmd_write_channels+0x100>)
 800cf0c:	4633      	mov	r3, r6
 800cf0e:	2101      	movs	r1, #1
 800cf10:	4628      	mov	r0, r5
 800cf12:	f008 fb43 	bl	801559c <shell_fprintf>
		return -EINVAL;
 800cf16:	f06f 0415 	mvn.w	r4, #21
	}

	return err;
}
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	b009      	add	sp, #36	; 0x24
 800cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = strtoul(argv[arg_idx_value + i], &end_ptr, 0);
 800cf22:	46c3      	mov	fp, r8
 800cf24:	2200      	movs	r2, #0
 800cf26:	f8db 0000 	ldr.w	r0, [fp]
 800cf2a:	a905      	add	r1, sp, #20
 800cf2c:	f004 ff1c 	bl	8011d68 <strtoul>
		if (*end_ptr != '\0') {
 800cf30:	9a05      	ldr	r2, [sp, #20]
 800cf32:	7812      	ldrb	r2, [r2, #0]
 800cf34:	f108 0804 	add.w	r8, r8, #4
		val = strtoul(argv[arg_idx_value + i], &end_ptr, 0);
 800cf38:	4603      	mov	r3, r0
		if (*end_ptr != '\0') {
 800cf3a:	b13a      	cbz	r2, 800cf4c <cmd_write_channels+0xd0>
			shell_error(shell,
 800cf3c:	f8db 3000 	ldr.w	r3, [fp]
 800cf40:	4a0f      	ldr	r2, [pc, #60]	; (800cf80 <cmd_write_channels+0x104>)
			shell_error(shell,
 800cf42:	2101      	movs	r1, #1
 800cf44:	4628      	mov	r0, r5
 800cf46:	f008 fb29 	bl	801559c <shell_fprintf>
			return -EINVAL;
 800cf4a:	e7e4      	b.n	800cf16 <cmd_write_channels+0x9a>
		if (val > 255) {
 800cf4c:	28ff      	cmp	r0, #255	; 0xff
 800cf4e:	d901      	bls.n	800cf54 <cmd_write_channels+0xd8>
			shell_error(shell,
 800cf50:	4a0c      	ldr	r2, [pc, #48]	; (800cf84 <cmd_write_channels+0x108>)
 800cf52:	e7f6      	b.n	800cf42 <cmd_write_channels+0xc6>
		value[i] = val;
 800cf54:	f809 0b01 	strb.w	r0, [r9], #1
	for (i = 0; i < num_channels; i++) {
 800cf58:	e7a8      	b.n	800ceac <cmd_write_channels+0x30>
		shell_fprintf(shell, SHELL_NORMAL, " %d", value[i]);
 800cf5a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800cf5e:	465a      	mov	r2, fp
 800cf60:	2108      	movs	r1, #8
 800cf62:	4628      	mov	r0, r5
 800cf64:	f008 fb1a 	bl	801559c <shell_fprintf>
	for (i = 1; i < num_channels; i++) {
 800cf68:	e7b2      	b.n	800ced0 <cmd_write_channels+0x54>
		return -ENOSYS;
 800cf6a:	f06f 0457 	mvn.w	r4, #87	; 0x57
 800cf6e:	e7c3      	b.n	800cef8 <cmd_write_channels+0x7c>
 800cf70:	0801d65e 	.word	0x0801d65e
 800cf74:	0801bd34 	.word	0x0801bd34
 800cf78:	0801d495 	.word	0x0801d495
 800cf7c:	0801d63c 	.word	0x0801d63c
 800cf80:	0801d42d 	.word	0x0801d42d
 800cf84:	0801d451 	.word	0x0801d451
 800cf88:	0801d609 	.word	0x0801d609

0800cf8c <hts221_channel_get>:
};

static int hts221_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
 800cf8c:	b530      	push	{r4, r5, lr}

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800cf8e:	290d      	cmp	r1, #13
	struct hts221_data *data = dev->data;
 800cf90:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800cf92:	d120      	bne.n	800cfd6 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 800cf94:	88c4      	ldrh	r4, [r0, #6]
			   (data->t_sample - data->t0_out) /
 800cf96:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 800cf9a:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
 800cf9c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 800cfa0:	1b1b      	subs	r3, r3, r4
			   (data->t_sample - data->t0_out) /
 800cfa2:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 800cfa4:	434b      	muls	r3, r1
			   (data->t1_out - data->t0_out) +
 800cfa6:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 800cfaa:	1b49      	subs	r1, r1, r5
			   (data->t_sample - data->t0_out) /
 800cfac:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 800cfb0:	4423      	add	r3, r4
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	bfb8      	it	lt
 800cfb8:	1dd9      	addlt	r1, r3, #7
		val->val2 = (conv_val % 8) * (1000000 / 8);
 800cfba:	4258      	negs	r0, r3
 800cfbc:	f000 0007 	and.w	r0, r0, #7
 800cfc0:	f003 0307 	and.w	r3, r3, #7
 800cfc4:	bf58      	it	pl
 800cfc6:	4243      	negpl	r3, r0
 800cfc8:	4812      	ldr	r0, [pc, #72]	; (800d014 <hts221_channel_get+0x88>)
		val->val1 = conv_val / 8;
 800cfca:	10c9      	asrs	r1, r1, #3
		val->val2 = (conv_val % 8) * (1000000 / 8);
 800cfcc:	4343      	muls	r3, r0
 800cfce:	e9c2 1300 	strd	r1, r3, [r2]
		val->val2 = (conv_val % 2) * 500000;
	} else {
		return -ENOTSUP;
	}

	return 0;
 800cfd2:	2000      	movs	r0, #0
}
 800cfd4:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
 800cfd6:	2910      	cmp	r1, #16
 800cfd8:	d119      	bne.n	800d00e <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 800cfda:	7904      	ldrb	r4, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
 800cfdc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 800cfe0:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
 800cfe2:	f9b0 1000 	ldrsh.w	r1, [r0]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 800cfe6:	1b1b      	subs	r3, r3, r4
			   (data->rh_sample - data->h0_t0_out) /
 800cfe8:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 800cfea:	434b      	muls	r3, r1
			   (data->h1_t0_out - data->h0_t0_out) +
 800cfec:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		val->val2 = (conv_val % 2) * 500000;
 800cff0:	4809      	ldr	r0, [pc, #36]	; (800d018 <hts221_channel_get+0x8c>)
			   (data->h1_t0_out - data->h0_t0_out) +
 800cff2:	1b49      	subs	r1, r1, r5
			   (data->rh_sample - data->h0_t0_out) /
 800cff4:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 800cff8:	4423      	add	r3, r4
		val->val1 = conv_val / 2;
 800cffa:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
		val->val2 = (conv_val % 2) * 500000;
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
 800d004:	ea4f 0161 	mov.w	r1, r1, asr #1
		val->val2 = (conv_val % 2) * 500000;
 800d008:	bfb8      	it	lt
 800d00a:	425b      	neglt	r3, r3
 800d00c:	e7de      	b.n	800cfcc <hts221_channel_get+0x40>
		return -ENOTSUP;
 800d00e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d012:	e7df      	b.n	800cfd4 <hts221_channel_get+0x48>
 800d014:	0001e848 	.word	0x0001e848
 800d018:	0007a120 	.word	0x0007a120

0800d01c <hts221_sample_fetch>:

static int hts221_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
 800d01c:	b530      	push	{r4, r5, lr}
	uint8_t buf[4];
	int status;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
 800d01e:	2304      	movs	r3, #4
{
 800d020:	b089      	sub	sp, #36	; 0x24
	struct hts221_data *data = dev->data;
 800d022:	6905      	ldr	r5, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
 800d024:	6840      	ldr	r0, [r0, #4]
 800d026:	eb0d 0203 	add.w	r2, sp, r3
 800d02a:	21a8      	movs	r1, #168	; 0xa8
 800d02c:	f00c f96a 	bl	8019304 <hts221_read_reg>
				 HTS221_AUTOINCREMENT_ADDR, buf, 4);
	if (status < 0) {
 800d030:	1e04      	subs	r4, r0, #0
 800d032:	da0f      	bge.n	800d054 <hts221_sample_fetch+0x38>
		LOG_ERR("Failed to fetch data sample.");
 800d034:	480b      	ldr	r0, [pc, #44]	; (800d064 <hts221_sample_fetch+0x48>)
 800d036:	6803      	ldr	r3, [r0, #0]
 800d038:	075b      	lsls	r3, r3, #29
 800d03a:	d008      	beq.n	800d04e <hts221_sample_fetch+0x32>
 800d03c:	4b0a      	ldr	r3, [pc, #40]	; (800d068 <hts221_sample_fetch+0x4c>)
 800d03e:	9307      	str	r3, [sp, #28]
 800d040:	aa06      	add	r2, sp, #24
 800d042:	2302      	movs	r3, #2
 800d044:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d048:	9306      	str	r3, [sp, #24]
 800d04a:	f009 fd30 	bl	8016aae <z_log_msg_static_create.constprop.0>

	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));

	return 0;
}
 800d04e:	4620      	mov	r0, r4
 800d050:	b009      	add	sp, #36	; 0x24
 800d052:	bd30      	pop	{r4, r5, pc}
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
 800d054:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d058:	802b      	strh	r3, [r5, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
 800d05a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d05e:	806b      	strh	r3, [r5, #2]
	return 0;
 800d060:	2400      	movs	r4, #0
 800d062:	e7f4      	b.n	800d04e <hts221_sample_fetch+0x32>
 800d064:	20000d20 	.word	0x20000d20
 800d068:	0801d782 	.word	0x0801d782

0800d06c <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
 800d06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d070:	b08c      	sub	sp, #48	; 0x30
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
 800d072:	6846      	ldr	r6, [r0, #4]
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
 800d074:	4d6b      	ldr	r5, [pc, #428]	; (800d224 <hts221_init+0x1b8>)
{
 800d076:	af00      	add	r7, sp, #0
 800d078:	4680      	mov	r8, r0
	status = hts221_device_id_get(ctx, &id);
 800d07a:	1df9      	adds	r1, r7, #7
 800d07c:	4630      	mov	r0, r6
 800d07e:	f00c f97d 	bl	801937c <hts221_device_id_get>
	if (status < 0) {
 800d082:	1e04      	subs	r4, r0, #0
 800d084:	da0e      	bge.n	800d0a4 <hts221_init+0x38>
		LOG_ERR("Failed to read chip ID.");
 800d086:	682b      	ldr	r3, [r5, #0]
 800d088:	075a      	lsls	r2, r3, #29
 800d08a:	d013      	beq.n	800d0b4 <hts221_init+0x48>
 800d08c:	4b66      	ldr	r3, [pc, #408]	; (800d228 <hts221_init+0x1bc>)
 800d08e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d090:	2302      	movs	r3, #2
 800d092:	62bb      	str	r3, [r7, #40]	; 0x28
 800d094:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d098:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d09c:	4628      	mov	r0, r5
		return -EINVAL;
	}

	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
	if (status < 0) {
		LOG_ERR("Could not set output data rate");
 800d09e:	f009 fd06 	bl	8016aae <z_log_msg_static_create.constprop.0>
 800d0a2:	e007      	b.n	800d0b4 <hts221_init+0x48>
	if (id != HTS221_ID) {
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	2bbc      	cmp	r3, #188	; 0xbc
 800d0a8:	d015      	beq.n	800d0d6 <hts221_init+0x6a>
		LOG_ERR("Invalid chip ID.");
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	075b      	lsls	r3, r3, #29
 800d0ae:	d106      	bne.n	800d0be <hts221_init+0x52>
		return -EINVAL;
 800d0b0:	f06f 0415 	mvn.w	r4, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	3730      	adds	r7, #48	; 0x30
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Invalid chip ID.");
 800d0be:	4b5b      	ldr	r3, [pc, #364]	; (800d22c <hts221_init+0x1c0>)
 800d0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d0ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	f009 fced 	bl	8016aae <z_log_msg_static_create.constprop.0>
 800d0d4:	e7ec      	b.n	800d0b0 <hts221_init+0x44>
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
 800d0d6:	4c56      	ldr	r4, [pc, #344]	; (800d230 <hts221_init+0x1c4>)
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7f3 f8e4 	bl	80002a8 <strcmp>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	b150      	cbz	r0, 800d0fa <hts221_init+0x8e>
 800d0e4:	4853      	ldr	r0, [pc, #332]	; (800d234 <hts221_init+0x1c8>)
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	f7f3 f8de 	bl	80002a8 <strcmp>
 800d0ec:	b1d8      	cbz	r0, 800d126 <hts221_init+0xba>
 800d0ee:	4852      	ldr	r0, [pc, #328]	; (800d238 <hts221_init+0x1cc>)
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	f7f3 f8d9 	bl	80002a8 <strcmp>
 800d0f6:	b9c0      	cbnz	r0, 800d12a <hts221_init+0xbe>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
 800d0f8:	2302      	movs	r3, #2
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
 800d0fa:	4a50      	ldr	r2, [pc, #320]	; (800d23c <hts221_init+0x1d0>)
 800d0fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d100:	4630      	mov	r0, r6
 800d102:	7919      	ldrb	r1, [r3, #4]
 800d104:	f00c f90c 	bl	8019320 <hts221_data_rate_set>
	if (status < 0) {
 800d108:	1e04      	subs	r4, r0, #0
 800d10a:	da24      	bge.n	800d156 <hts221_init+0xea>
		LOG_ERR("Could not set output data rate");
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	075d      	lsls	r5, r3, #29
 800d110:	d0d0      	beq.n	800d0b4 <hts221_init+0x48>
 800d112:	4b4b      	ldr	r3, [pc, #300]	; (800d240 <hts221_init+0x1d4>)
 800d114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d116:	2302      	movs	r3, #2
 800d118:	62bb      	str	r3, [r7, #40]	; 0x28
 800d11a:	4842      	ldr	r0, [pc, #264]	; (800d224 <hts221_init+0x1b8>)
 800d11c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d120:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d124:	e7bb      	b.n	800d09e <hts221_init+0x32>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
 800d126:	2301      	movs	r3, #1
 800d128:	e7e7      	b.n	800d0fa <hts221_init+0x8e>
		LOG_ERR("Invalid ODR value %s.", CONFIG_HTS221_ODR);
 800d12a:	682b      	ldr	r3, [r5, #0]
 800d12c:	075e      	lsls	r6, r3, #29
 800d12e:	d0bf      	beq.n	800d0b0 <hts221_init+0x44>
 800d130:	466e      	mov	r6, sp
 800d132:	b088      	sub	sp, #32
 800d134:	466a      	mov	r2, sp
 800d136:	4b43      	ldr	r3, [pc, #268]	; (800d244 <hts221_init+0x1d8>)
 800d138:	e9c2 3405 	strd	r3, r4, [r2, #20]
 800d13c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d140:	8393      	strh	r3, [r2, #28]
 800d142:	4b41      	ldr	r3, [pc, #260]	; (800d248 <hts221_init+0x1dc>)
 800d144:	f842 3f10 	str.w	r3, [r2, #16]!
 800d148:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800d14c:	4628      	mov	r0, r5
 800d14e:	f009 fcae 	bl	8016aae <z_log_msg_static_create.constprop.0>
 800d152:	46b5      	mov	sp, r6
 800d154:	e7ac      	b.n	800d0b0 <hts221_init+0x44>
	status = hts221_block_data_update_set(ctx, 1);
 800d156:	2101      	movs	r1, #1
 800d158:	4630      	mov	r0, r6
 800d15a:	f00c f8f8 	bl	801934e <hts221_block_data_update_set>
	if (status < 0) {
 800d15e:	1e04      	subs	r4, r0, #0
 800d160:	da04      	bge.n	800d16c <hts221_init+0x100>
		LOG_ERR("Could not set BDU bit");
 800d162:	682b      	ldr	r3, [r5, #0]
 800d164:	0758      	lsls	r0, r3, #29
 800d166:	d0a5      	beq.n	800d0b4 <hts221_init+0x48>
 800d168:	4b38      	ldr	r3, [pc, #224]	; (800d24c <hts221_init+0x1e0>)
 800d16a:	e7d3      	b.n	800d114 <hts221_init+0xa8>
	status = hts221_power_on_set(ctx, 1);
 800d16c:	2101      	movs	r1, #1
 800d16e:	4630      	mov	r0, r6
 800d170:	f00c f909 	bl	8019386 <hts221_power_on_set>
	if (status < 0) {
 800d174:	1e04      	subs	r4, r0, #0
 800d176:	da04      	bge.n	800d182 <hts221_init+0x116>
		LOG_ERR("Could not set PD bit");
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	0759      	lsls	r1, r3, #29
 800d17c:	d09a      	beq.n	800d0b4 <hts221_init+0x48>
 800d17e:	4b34      	ldr	r3, [pc, #208]	; (800d250 <hts221_init+0x1e4>)
 800d180:	e7c8      	b.n	800d114 <hts221_init+0xa8>
	return z_impl_k_sleep(timeout);
 800d182:	2100      	movs	r1, #0
 800d184:	201e      	movs	r0, #30
 800d186:	f003 f899 	bl	80102bc <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
 800d18a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	struct hts221_data *data = dev->data;
 800d18e:	f8d8 6010 	ldr.w	r6, [r8, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
 800d192:	2310      	movs	r3, #16
 800d194:	f107 0208 	add.w	r2, r7, #8
 800d198:	21b0      	movs	r1, #176	; 0xb0
 800d19a:	f00c f8b3 	bl	8019304 <hts221_read_reg>
	if (status < 0) {
 800d19e:	1e04      	subs	r4, r0, #0
 800d1a0:	da16      	bge.n	800d1d0 <hts221_init+0x164>
		LOG_ERR("Failed to read conversion data.");
 800d1a2:	682b      	ldr	r3, [r5, #0]
 800d1a4:	075a      	lsls	r2, r3, #29
 800d1a6:	d085      	beq.n	800d0b4 <hts221_init+0x48>
 800d1a8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800d258 <hts221_init+0x1ec>
 800d1ac:	481d      	ldr	r0, [pc, #116]	; (800d224 <hts221_init+0x1b8>)
 800d1ae:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
 800d1b2:	2602      	movs	r6, #2
 800d1b4:	62be      	str	r6, [r7, #40]	; 0x28
 800d1b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d1ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d1be:	f009 fc76 	bl	8016aae <z_log_msg_static_create.constprop.0>
		LOG_ERR("Failed to read conversion data.");
 800d1c2:	682b      	ldr	r3, [r5, #0]
 800d1c4:	075b      	lsls	r3, r3, #29
 800d1c6:	f43f af75 	beq.w	800d0b4 <hts221_init+0x48>
 800d1ca:	e9c7 680a 	strd	r6, r8, [r7, #40]	; 0x28
 800d1ce:	e7a4      	b.n	800d11a <hts221_init+0xae>
	data->h0_rh_x2 = buf[0];
 800d1d0:	893b      	ldrh	r3, [r7, #8]
 800d1d2:	80b3      	strh	r3, [r6, #4]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
 800d1d4:	7b7b      	ldrb	r3, [r7, #13]
 800d1d6:	7aba      	ldrb	r2, [r7, #10]
 800d1d8:	0219      	lsls	r1, r3, #8
 800d1da:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800d1de:	430a      	orrs	r2, r1
 800d1e0:	80f2      	strh	r2, [r6, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
 800d1e2:	019b      	lsls	r3, r3, #6
 800d1e4:	7afa      	ldrb	r2, [r7, #11]
 800d1e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	8133      	strh	r3, [r6, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
 800d1ee:	89fb      	ldrh	r3, [r7, #14]
 800d1f0:	8173      	strh	r3, [r6, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
 800d1f2:	8a7b      	ldrh	r3, [r7, #18]
 800d1f4:	81b3      	strh	r3, [r6, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
 800d1f6:	8abb      	ldrh	r3, [r7, #20]
 800d1f8:	81f3      	strh	r3, [r6, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
 800d1fa:	8afb      	ldrh	r3, [r7, #22]
 800d1fc:	8233      	strh	r3, [r6, #16]
	LOG_INF("Cannot enable trigger without drdy-gpios");
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	f003 0307 	and.w	r3, r3, #7
 800d204:	2b02      	cmp	r3, #2
 800d206:	d90a      	bls.n	800d21e <hts221_init+0x1b2>
 800d208:	4b12      	ldr	r3, [pc, #72]	; (800d254 <hts221_init+0x1e8>)
 800d20a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d20c:	2302      	movs	r3, #2
 800d20e:	4805      	ldr	r0, [pc, #20]	; (800d224 <hts221_init+0x1b8>)
 800d210:	62bb      	str	r3, [r7, #40]	; 0x28
 800d212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d216:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800d21a:	f009 fc48 	bl	8016aae <z_log_msg_static_create.constprop.0>
	return 0;
 800d21e:	2400      	movs	r4, #0
 800d220:	e748      	b.n	800d0b4 <hts221_init+0x48>
 800d222:	bf00      	nop
 800d224:	20000d20 	.word	0x20000d20
 800d228:	0801d79f 	.word	0x0801d79f
 800d22c:	0801d7b7 	.word	0x0801d7b7
 800d230:	0801d887 	.word	0x0801d887
 800d234:	0801d7c8 	.word	0x0801d7c8
 800d238:	0801d7ca 	.word	0x0801d7ca
 800d23c:	0801aff0 	.word	0x0801aff0
 800d240:	0801d7e5 	.word	0x0801d7e5
 800d244:	0801d7cf 	.word	0x0801d7cf
 800d248:	01000003 	.word	0x01000003
 800d24c:	0801d804 	.word	0x0801d804
 800d250:	0801d81a 	.word	0x0801d81a
 800d254:	0801d84f 	.word	0x0801d84f
 800d258:	0801d82f 	.word	0x0801d82f

0800d25c <lis3mdl_init>:
	.sample_fetch = lis3mdl_sample_fetch,
	.channel_get = lis3mdl_channel_get,
};

int lis3mdl_init(const struct device *dev)
{
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct lis3mdl_config *config = dev->config;
 800d260:	6846      	ldr	r6, [r0, #4]
{
 800d262:	b08a      	sub	sp, #40	; 0x28
	uint8_t chip_cfg[6];
	uint8_t id, idx;

	if (!device_is_ready(config->i2c.bus)) {
 800d264:	6830      	ldr	r0, [r6, #0]
 800d266:	f00c f9d5 	bl	8019614 <z_device_is_ready>
 800d26a:	4603      	mov	r3, r0
 800d26c:	b998      	cbnz	r0, 800d296 <lis3mdl_init+0x3a>
		LOG_ERR("I2C bus device not ready");
 800d26e:	4848      	ldr	r0, [pc, #288]	; (800d390 <lis3mdl_init+0x134>)
 800d270:	6802      	ldr	r2, [r0, #0]
 800d272:	0754      	lsls	r4, r2, #29
 800d274:	d105      	bne.n	800d282 <lis3mdl_init+0x26>
		return -ENODEV;
 800d276:	f06f 0512 	mvn.w	r5, #18
		}
	}
#endif

	return 0;
}
 800d27a:	4628      	mov	r0, r5
 800d27c:	b00a      	add	sp, #40	; 0x28
 800d27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("I2C bus device not ready");
 800d282:	4a44      	ldr	r2, [pc, #272]	; (800d394 <lis3mdl_init+0x138>)
 800d284:	9209      	str	r2, [sp, #36]	; 0x24
 800d286:	2202      	movs	r2, #2
 800d288:	9208      	str	r2, [sp, #32]
 800d28a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d28e:	aa08      	add	r2, sp, #32
 800d290:	f7fa ff5e 	bl	8008150 <z_impl_z_log_msg_static_create>
 800d294:	e7ef      	b.n	800d276 <lis3mdl_init+0x1a>
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 800d296:	220f      	movs	r2, #15
 800d298:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 800d29c:	f10d 0207 	add.w	r2, sp, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 800d2a0:	6830      	ldr	r0, [r6, #0]
 800d2a2:	88b3      	ldrh	r3, [r6, #4]
	msg[0].buf = (uint8_t *)write_buf;
 800d2a4:	9204      	str	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
 800d2a6:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
 800d2aa:	2201      	movs	r2, #1
	msg[1].len = num_read;
 800d2ac:	e9cd 1207 	strd	r1, r2, [sp, #28]
	msg[0].len = num_write;
 800d2b0:	9205      	str	r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 800d2b2:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 800d2b4:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 800d2b6:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 800d2ba:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		union { uintptr_t x; uint16_t val; } parm3 = { .val = addr };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
 800d2be:	2202      	movs	r2, #2
 800d2c0:	a904      	add	r1, sp, #16
 800d2c2:	f009 fbf7 	bl	8016ab4 <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&config->i2c, LIS3MDL_REG_WHO_AM_I, &id) < 0) {
 800d2c6:	42a0      	cmp	r0, r4
 800d2c8:	da10      	bge.n	800d2ec <lis3mdl_init+0x90>
		LOG_ERR("Failed to read chip ID.");
 800d2ca:	4831      	ldr	r0, [pc, #196]	; (800d390 <lis3mdl_init+0x134>)
 800d2cc:	6803      	ldr	r3, [r0, #0]
 800d2ce:	0759      	lsls	r1, r3, #29
 800d2d0:	d009      	beq.n	800d2e6 <lis3mdl_init+0x8a>
 800d2d2:	4b31      	ldr	r3, [pc, #196]	; (800d398 <lis3mdl_init+0x13c>)
 800d2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	9308      	str	r3, [sp, #32]
 800d2da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d2de:	4623      	mov	r3, r4
 800d2e0:	aa08      	add	r2, sp, #32
 800d2e2:	f7fa ff35 	bl	8008150 <z_impl_z_log_msg_static_create>
		return -EIO;
 800d2e6:	f06f 0504 	mvn.w	r5, #4
 800d2ea:	e7c6      	b.n	800d27a <lis3mdl_init+0x1e>
	if (id != LIS3MDL_CHIP_ID) {
 800d2ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2f0:	2b3d      	cmp	r3, #61	; 0x3d
 800d2f2:	d011      	beq.n	800d318 <lis3mdl_init+0xbc>
		LOG_ERR("Invalid chip ID.");
 800d2f4:	4826      	ldr	r0, [pc, #152]	; (800d390 <lis3mdl_init+0x134>)
 800d2f6:	6803      	ldr	r3, [r0, #0]
 800d2f8:	075a      	lsls	r2, r3, #29
 800d2fa:	d102      	bne.n	800d302 <lis3mdl_init+0xa6>
		return -EINVAL;
 800d2fc:	f06f 0515 	mvn.w	r5, #21
 800d300:	e7bb      	b.n	800d27a <lis3mdl_init+0x1e>
		LOG_ERR("Invalid chip ID.");
 800d302:	4b26      	ldr	r3, [pc, #152]	; (800d39c <lis3mdl_init+0x140>)
		LOG_ERR("Invalid ODR value.");
 800d304:	9309      	str	r3, [sp, #36]	; 0x24
 800d306:	2302      	movs	r3, #2
 800d308:	9308      	str	r3, [sp, #32]
 800d30a:	2300      	movs	r3, #0
 800d30c:	aa08      	add	r2, sp, #32
 800d30e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d312:	f7fa ff1d 	bl	8008150 <z_impl_z_log_msg_static_create>
 800d316:	e7f1      	b.n	800d2fc <lis3mdl_init+0xa0>
 800d318:	4f21      	ldr	r7, [pc, #132]	; (800d3a0 <lis3mdl_init+0x144>)
		if (!strcmp(lis3mdl_odr_strings[idx], CONFIG_LIS3MDL_ODR)) {
 800d31a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800d3ac <lis3mdl_init+0x150>
 800d31e:	f857 0b04 	ldr.w	r0, [r7], #4
 800d322:	4641      	mov	r1, r8
 800d324:	f7f2 ffc0 	bl	80002a8 <strcmp>
 800d328:	4605      	mov	r5, r0
 800d32a:	b140      	cbz	r0, 800d33e <lis3mdl_init+0xe2>
	for (idx = 0U; idx < ARRAY_SIZE(lis3mdl_odr_strings); idx++) {
 800d32c:	3401      	adds	r4, #1
 800d32e:	2c0c      	cmp	r4, #12
 800d330:	d1f5      	bne.n	800d31e <lis3mdl_init+0xc2>
		LOG_ERR("Invalid ODR value.");
 800d332:	4817      	ldr	r0, [pc, #92]	; (800d390 <lis3mdl_init+0x134>)
 800d334:	6803      	ldr	r3, [r0, #0]
 800d336:	075b      	lsls	r3, r3, #29
 800d338:	d0e0      	beq.n	800d2fc <lis3mdl_init+0xa0>
 800d33a:	4b1a      	ldr	r3, [pc, #104]	; (800d3a4 <lis3mdl_init+0x148>)
 800d33c:	e7e2      	b.n	800d304 <lis3mdl_init+0xa8>
	chip_cfg[0] = LIS3MDL_REG_CTRL1;
 800d33e:	2320      	movs	r3, #32
 800d340:	f88d 3008 	strb.w	r3, [sp, #8]
	chip_cfg[1] = LIS3MDL_TEMP_EN_MASK | lis3mdl_odr_bits[idx];
 800d344:	4b18      	ldr	r3, [pc, #96]	; (800d3a8 <lis3mdl_init+0x14c>)
	chip_cfg[2] = LIS3MDL_FS_IDX << LIS3MDL_FS_SHIFT;
 800d346:	f88d 000a 	strb.w	r0, [sp, #10]
	chip_cfg[1] = LIS3MDL_TEMP_EN_MASK | lis3mdl_odr_bits[idx];
 800d34a:	5d1b      	ldrb	r3, [r3, r4]
 800d34c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800d350:	f88d 2009 	strb.w	r2, [sp, #9]
		      LIS3MDL_MD_SINGLE : LIS3MDL_MD_CONTINUOUS;
 800d354:	f3c3 0240 	ubfx	r2, r3, #1, #1
		       LIS3MDL_OM_SHIFT) << LIS3MDL_OMZ_SHIFT;
 800d358:	08db      	lsrs	r3, r3, #3
 800d35a:	f003 030c 	and.w	r3, r3, #12
	chip_cfg[4] = ((lis3mdl_odr_bits[idx] & LIS3MDL_OM_MASK) >>
 800d35e:	f88d 300c 	strb.w	r3, [sp, #12]
	chip_cfg[5] = LIS3MDL_BDU_EN;
 800d362:	2340      	movs	r3, #64	; 0x40
	chip_cfg[3] = lis3mdl_odr_bits[idx] & LIS3MDL_FAST_ODR_MASK ?
 800d364:	f88d 200b 	strb.w	r2, [sp, #11]
	chip_cfg[5] = LIS3MDL_BDU_EN;
 800d368:	f88d 300d 	strb.w	r3, [sp, #13]
	msg.buf = (uint8_t *)buf;
 800d36c:	aa02      	add	r2, sp, #8
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
 800d36e:	6830      	ldr	r0, [r6, #0]
 800d370:	88b3      	ldrh	r3, [r6, #4]
	msg.buf = (uint8_t *)buf;
 800d372:	9204      	str	r2, [sp, #16]
	msg.len = num_bytes;
 800d374:	2206      	movs	r2, #6
 800d376:	9205      	str	r2, [sp, #20]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800d378:	2202      	movs	r2, #2
 800d37a:	f88d 2018 	strb.w	r2, [sp, #24]
 800d37e:	2201      	movs	r2, #1
 800d380:	a904      	add	r1, sp, #16
 800d382:	f009 fb97 	bl	8016ab4 <z_impl_i2c_transfer>
	if (i2c_write_dt(&config->i2c, chip_cfg, 6) < 0) {
 800d386:	2800      	cmp	r0, #0
 800d388:	f6bf af77 	bge.w	800d27a <lis3mdl_init+0x1e>
 800d38c:	e7ab      	b.n	800d2e6 <lis3mdl_init+0x8a>
 800d38e:	bf00      	nop
 800d390:	20000d24 	.word	0x20000d24
 800d394:	0801d889 	.word	0x0801d889
 800d398:	0801d79f 	.word	0x0801d79f
 800d39c:	0801d7b7 	.word	0x0801d7b7
 800d3a0:	0801b01c 	.word	0x0801b01c
 800d3a4:	0801d8a8 	.word	0x0801d8a8
 800d3a8:	0801d8ed 	.word	0x0801d8ed
 800d3ac:	0801d8a2 	.word	0x0801d8a2

0800d3b0 <lis3mdl_channel_get>:
{
 800d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan == SENSOR_CHAN_MAGN_XYZ) {
 800d3b2:	290b      	cmp	r1, #11
	struct lis3mdl_data *drv_data = dev->data;
 800d3b4:	6906      	ldr	r6, [r0, #16]
{
 800d3b6:	4614      	mov	r4, r2
	if (chan == SENSOR_CHAN_MAGN_XYZ) {
 800d3b8:	d146      	bne.n	800d448 <lis3mdl_channel_get+0x98>
		lis3mdl_convert(val, drv_data->x_sample,
 800d3ba:	f9b6 0000 	ldrsh.w	r0, [r6]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d3be:	4d49      	ldr	r5, [pc, #292]	; (800d4e4 <lis3mdl_channel_get+0x134>)
	val->val1 = raw_val / divider;
 800d3c0:	f641 27ba 	movw	r7, #6842	; 0x1aba
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d3c4:	17c1      	asrs	r1, r0, #31
	val->val1 = raw_val / divider;
 800d3c6:	fb90 f3f7 	sdiv	r3, r0, r7
 800d3ca:	6013      	str	r3, [r2, #0]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d3cc:	f641 22ba 	movw	r2, #6842	; 0x1aba
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f7f3 fd6b 	bl	8000eac <__aeabi_ldivmod>
 800d3d6:	469c      	mov	ip, r3
 800d3d8:	fba2 0105 	umull	r0, r1, r2, r5
 800d3dc:	fb05 110c 	mla	r1, r5, ip, r1
 800d3e0:	f641 22ba 	movw	r2, #6842	; 0x1aba
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f7f3 fd61 	bl	8000eac <__aeabi_ldivmod>
 800d3ea:	6060      	str	r0, [r4, #4]
		lis3mdl_convert(val + 1, drv_data->y_sample,
 800d3ec:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
	val->val1 = raw_val / divider;
 800d3f0:	fb90 f3f7 	sdiv	r3, r0, r7
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d3f4:	f641 22ba 	movw	r2, #6842	; 0x1aba
	val->val1 = raw_val / divider;
 800d3f8:	60a3      	str	r3, [r4, #8]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d3fa:	17c1      	asrs	r1, r0, #31
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f7f3 fd55 	bl	8000eac <__aeabi_ldivmod>
 800d402:	469c      	mov	ip, r3
 800d404:	fba2 0105 	umull	r0, r1, r2, r5
 800d408:	fb05 110c 	mla	r1, r5, ip, r1
 800d40c:	f641 22ba 	movw	r2, #6842	; 0x1aba
 800d410:	2300      	movs	r3, #0
 800d412:	f7f3 fd4b 	bl	8000eac <__aeabi_ldivmod>
 800d416:	60e0      	str	r0, [r4, #12]
		lis3mdl_convert(val + 2, drv_data->z_sample,
 800d418:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
	val->val1 = raw_val / divider;
 800d41c:	fb90 f7f7 	sdiv	r7, r0, r7
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d420:	f641 22ba 	movw	r2, #6842	; 0x1aba
	val->val1 = raw_val / divider;
 800d424:	6127      	str	r7, [r4, #16]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d426:	2300      	movs	r3, #0
 800d428:	17c1      	asrs	r1, r0, #31
 800d42a:	f7f3 fd3f 	bl	8000eac <__aeabi_ldivmod>
 800d42e:	fba2 0105 	umull	r0, r1, r2, r5
 800d432:	461e      	mov	r6, r3
 800d434:	f641 22ba 	movw	r2, #6842	; 0x1aba
 800d438:	2300      	movs	r3, #0
 800d43a:	fb05 1106 	mla	r1, r5, r6, r1
 800d43e:	f7f3 fd35 	bl	8000eac <__aeabi_ldivmod>
 800d442:	6160      	str	r0, [r4, #20]
	return 0;
 800d444:	2000      	movs	r0, #0
}
 800d446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (chan == SENSOR_CHAN_MAGN_X) {
 800d448:	3908      	subs	r1, #8
 800d44a:	2904      	cmp	r1, #4
 800d44c:	d846      	bhi.n	800d4dc <lis3mdl_channel_get+0x12c>
 800d44e:	e8df f001 	tbb	[pc, r1]
 800d452:	1d03      	.short	0x1d03
 800d454:	4520      	.short	0x4520
 800d456:	23          	.byte	0x23
 800d457:	00          	.byte	0x00
		lis3mdl_convert(val, drv_data->x_sample,
 800d458:	f9b6 0000 	ldrsh.w	r0, [r6]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d45c:	4d21      	ldr	r5, [pc, #132]	; (800d4e4 <lis3mdl_channel_get+0x134>)
	val->val1 = raw_val / divider;
 800d45e:	f641 23ba 	movw	r3, #6842	; 0x1aba
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d462:	f641 22ba 	movw	r2, #6842	; 0x1aba
	val->val1 = raw_val / divider;
 800d466:	fb90 f3f3 	sdiv	r3, r0, r3
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d46a:	17c1      	asrs	r1, r0, #31
	val->val1 = raw_val / divider;
 800d46c:	6023      	str	r3, [r4, #0]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d46e:	2300      	movs	r3, #0
 800d470:	f7f3 fd1c 	bl	8000eac <__aeabi_ldivmod>
 800d474:	fba2 0105 	umull	r0, r1, r2, r5
 800d478:	461e      	mov	r6, r3
 800d47a:	f641 22ba 	movw	r2, #6842	; 0x1aba
 800d47e:	2300      	movs	r3, #0
 800d480:	fb05 1106 	mla	r1, r5, r6, r1
 800d484:	f7f3 fd12 	bl	8000eac <__aeabi_ldivmod>
 800d488:	6060      	str	r0, [r4, #4]
}
 800d48a:	e7db      	b.n	800d444 <lis3mdl_channel_get+0x94>
		lis3mdl_convert(val, drv_data->y_sample,
 800d48c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
	val->val1 = raw_val / divider;
 800d490:	e7e4      	b.n	800d45c <lis3mdl_channel_get+0xac>
		lis3mdl_convert(val, drv_data->z_sample,
 800d492:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 800d496:	e7e1      	b.n	800d45c <lis3mdl_channel_get+0xac>
		lis3mdl_convert(val, drv_data->temp_sample, 8);
 800d498:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d49c:	f012 4500 	ands.w	r5, r2, #2147483648	; 0x80000000
 800d4a0:	f002 0307 	and.w	r3, r2, #7
 800d4a4:	d505      	bpl.n	800d4b2 <lis3mdl_channel_get+0x102>
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	f063 0307 	orn	r3, r3, #7
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	eb65 0505 	sbc.w	r5, r5, r5
 800d4b2:	480c      	ldr	r0, [pc, #48]	; (800d4e4 <lis3mdl_channel_get+0x134>)
 800d4b4:	fba3 3100 	umull	r3, r1, r3, r0
 800d4b8:	fb00 1105 	mla	r1, r0, r5, r1
 800d4bc:	2900      	cmp	r1, #0
 800d4be:	da02      	bge.n	800d4c6 <lis3mdl_channel_get+0x116>
 800d4c0:	3307      	adds	r3, #7
 800d4c2:	f141 0100 	adc.w	r1, r1, #0
	val->val1 = raw_val / divider;
 800d4c6:	2a00      	cmp	r2, #0
 800d4c8:	bfb8      	it	lt
 800d4ca:	3207      	addlt	r2, #7
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d4cc:	08db      	lsrs	r3, r3, #3
	val->val1 = raw_val / divider;
 800d4ce:	10d2      	asrs	r2, r2, #3
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d4d0:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
		val->val1 += 25;
 800d4d4:	3219      	adds	r2, #25
	val->val2 = (((int64_t)raw_val % divider) * 1000000L) / divider;
 800d4d6:	6063      	str	r3, [r4, #4]
		val->val1 += 25;
 800d4d8:	6022      	str	r2, [r4, #0]
 800d4da:	e7b3      	b.n	800d444 <lis3mdl_channel_get+0x94>
	if (chan == SENSOR_CHAN_MAGN_XYZ) {
 800d4dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d4e0:	e7b1      	b.n	800d446 <lis3mdl_channel_get+0x96>
 800d4e2:	bf00      	nop
 800d4e4:	000f4240 	.word	0x000f4240

0800d4e8 <lps22hb_channel_get>:
}

static int lps22hb_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
 800d4e8:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
 800d4ea:	290e      	cmp	r1, #14
	struct lps22hb_data *data = dev->data;
 800d4ec:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
 800d4ee:	d111      	bne.n	800d514 <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
 800d4f0:	6819      	ldr	r1, [r3, #0]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
 800d4f2:	4c11      	ldr	r4, [pc, #68]	; (800d538 <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
 800d4f4:	130b      	asrs	r3, r1, #12
 800d4f6:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
 800d4f8:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
 800d4fc:	fb93 f0f5 	sdiv	r0, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
 800d500:	fb05 3310 	mls	r3, r5, r0, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
 800d504:	4361      	muls	r1, r4
	val->val2 = (raw_val >> 12) % 10 * 100000 +
 800d506:	4363      	muls	r3, r4
 800d508:	eb03 3311 	add.w	r3, r3, r1, lsr #12
 800d50c:	e9c2 0300 	strd	r0, r3, [r2]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
 800d510:	2000      	movs	r0, #0
}
 800d512:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800d514:	290d      	cmp	r1, #13
 800d516:	d10c      	bne.n	800d532 <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
 800d518:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	val->val1 = raw_val / 100;
 800d51c:	2464      	movs	r4, #100	; 0x64
 800d51e:	fb93 f1f4 	sdiv	r1, r3, r4
	val->val2 = ((int32_t)raw_val % 100) * 10000;
 800d522:	fb04 3311 	mls	r3, r4, r1, r3
	val->val1 = raw_val / 100;
 800d526:	b208      	sxth	r0, r1
	val->val2 = ((int32_t)raw_val % 100) * 10000;
 800d528:	f242 7110 	movw	r1, #10000	; 0x2710
 800d52c:	fb13 f301 	smulbb	r3, r3, r1
}
 800d530:	e7ec      	b.n	800d50c <lps22hb_channel_get+0x24>
		return -ENOTSUP;
 800d532:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d536:	e7ec      	b.n	800d512 <lps22hb_channel_get+0x2a>
 800d538:	000186a0 	.word	0x000186a0

0800d53c <lps22hb_init.part.0>:

err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
 800d53c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	const struct lps22hb_config * const config = dev->config;

	if (!device_is_ready(config->i2c.bus)) {
		LOG_ERR("I2C bus device not ready");
 800d53e:	4809      	ldr	r0, [pc, #36]	; (800d564 <lps22hb_init.part.0+0x28>)
 800d540:	6803      	ldr	r3, [r0, #0]
 800d542:	075b      	lsls	r3, r3, #29
 800d544:	d009      	beq.n	800d55a <lps22hb_init.part.0+0x1e>
 800d546:	4b08      	ldr	r3, [pc, #32]	; (800d568 <lps22hb_init.part.0+0x2c>)
 800d548:	9305      	str	r3, [sp, #20]
 800d54a:	2302      	movs	r3, #2
 800d54c:	9304      	str	r3, [sp, #16]
 800d54e:	2300      	movs	r3, #0
 800d550:	aa04      	add	r2, sp, #16
 800d552:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d556:	f7fa fdfb 	bl	8008150 <z_impl_z_log_msg_static_create>
		LOG_DBG("Failed to initialize chip");
		return -EIO;
	}

	return 0;
}
 800d55a:	f06f 0012 	mvn.w	r0, #18
 800d55e:	b007      	add	sp, #28
 800d560:	f85d fb04 	ldr.w	pc, [sp], #4
 800d564:	20000d28 	.word	0x20000d28
 800d568:	0801d889 	.word	0x0801d889

0800d56c <lsm6dsl_accel_set_odr_raw>:
{
 800d56c:	b570      	push	{r4, r5, r6, lr}
	struct lsm6dsl_data *data = dev->data;
 800d56e:	6905      	ldr	r5, [r0, #16]
	if (data->hw_tf->update_reg(dev,
 800d570:	6a2a      	ldr	r2, [r5, #32]
 800d572:	010b      	lsls	r3, r1, #4
 800d574:	68d6      	ldr	r6, [r2, #12]
{
 800d576:	460c      	mov	r4, r1
	if (data->hw_tf->update_reg(dev,
 800d578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d57c:	22f0      	movs	r2, #240	; 0xf0
 800d57e:	2110      	movs	r1, #16
 800d580:	47b0      	blx	r6
 800d582:	2800      	cmp	r0, #0
 800d584:	db09      	blt.n	800d59a <lsm6dsl_accel_set_odr_raw+0x2e>
	if (odr < ARRAY_SIZE(lsm6dsl_odr_map)) {
 800d586:	2c0a      	cmp	r4, #10
		return lsm6dsl_odr_map[odr];
 800d588:	bf96      	itet	ls
 800d58a:	4b05      	ldrls	r3, [pc, #20]	; (800d5a0 <lsm6dsl_accel_set_odr_raw+0x34>)
	return lsm6dsl_odr_map[ARRAY_SIZE(lsm6dsl_odr_map) - 1];
 800d58c:	f641 2304 	movwhi	r3, #6660	; 0x1a04
		return lsm6dsl_odr_map[odr];
 800d590:	f833 3014 	ldrhls.w	r3, [r3, r4, lsl #1]
	data->accel_freq = lsm6dsl_odr_to_freq_val(odr);
 800d594:	84ab      	strh	r3, [r5, #36]	; 0x24
	return 0;
 800d596:	2000      	movs	r0, #0
}
 800d598:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 800d59a:	f06f 0004 	mvn.w	r0, #4
 800d59e:	e7fb      	b.n	800d598 <lsm6dsl_accel_set_odr_raw+0x2c>
 800d5a0:	0801b5d0 	.word	0x0801b5d0

0800d5a4 <lsm6dsl_attr_set.part.0>:
static int lsm6dsl_attr_set(const struct device *dev,
 800d5a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("attr_set() not supported on this channel.");
 800d5a6:	480a      	ldr	r0, [pc, #40]	; (800d5d0 <lsm6dsl_attr_set.part.0+0x2c>)
 800d5a8:	6803      	ldr	r3, [r0, #0]
 800d5aa:	f013 0f06 	tst.w	r3, #6
 800d5ae:	d009      	beq.n	800d5c4 <lsm6dsl_attr_set.part.0+0x20>
 800d5b0:	4b08      	ldr	r3, [pc, #32]	; (800d5d4 <lsm6dsl_attr_set.part.0+0x30>)
 800d5b2:	9305      	str	r3, [sp, #20]
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	9304      	str	r3, [sp, #16]
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	aa04      	add	r2, sp, #16
 800d5bc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800d5c0:	f7fa fdc6 	bl	8008150 <z_impl_z_log_msg_static_create>
}
 800d5c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d5c8:	b007      	add	sp, #28
 800d5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5ce:	bf00      	nop
 800d5d0:	20000d2c 	.word	0x20000d2c
 800d5d4:	0801d912 	.word	0x0801d912

0800d5d8 <lsm6dsl_init>:

	return 0;
}

static int lsm6dsl_init(const struct device *dev)
{
 800d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret;
	const struct lsm6dsl_config * const config = dev->config;

	ret = config->bus_init(dev);
 800d5da:	6843      	ldr	r3, [r0, #4]
{
 800d5dc:	b087      	sub	sp, #28
	ret = config->bus_init(dev);
 800d5de:	681b      	ldr	r3, [r3, #0]
{
 800d5e0:	4604      	mov	r4, r0
	ret = config->bus_init(dev);
 800d5e2:	4798      	blx	r3
	if (ret < 0) {
 800d5e4:	1e05      	subs	r5, r0, #0
 800d5e6:	da0e      	bge.n	800d606 <lsm6dsl_init+0x2e>
		LOG_ERR("Failed to initialize sensor bus");
 800d5e8:	4846      	ldr	r0, [pc, #280]	; (800d704 <lsm6dsl_init+0x12c>)
 800d5ea:	6803      	ldr	r3, [r0, #0]
 800d5ec:	0759      	lsls	r1, r3, #29
 800d5ee:	d01a      	beq.n	800d626 <lsm6dsl_init+0x4e>
 800d5f0:	4b45      	ldr	r3, [pc, #276]	; (800d708 <lsm6dsl_init+0x130>)
	}

#ifdef CONFIG_LSM6DSL_TRIGGER
	ret = lsm6dsl_init_interrupt(dev);
	if (ret < 0) {
		LOG_ERR("Failed to initialize interrupt.");
 800d5f2:	9305      	str	r3, [sp, #20]
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	9304      	str	r3, [sp, #16]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	aa04      	add	r2, sp, #16
 800d5fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d600:	f7fa fda6 	bl	8008150 <z_impl_z_log_msg_static_create>
 800d604:	e00f      	b.n	800d626 <lsm6dsl_init+0x4e>
	struct lsm6dsl_data *data = dev->data;
 800d606:	6925      	ldr	r5, [r4, #16]
	if (data->hw_tf->update_reg(dev, LSM6DSL_REG_CTRL3_C,
 800d608:	6a2b      	ldr	r3, [r5, #32]
 800d60a:	68de      	ldr	r6, [r3, #12]
 800d60c:	2380      	movs	r3, #128	; 0x80
 800d60e:	461a      	mov	r2, r3
 800d610:	2112      	movs	r1, #18
 800d612:	4620      	mov	r0, r4
 800d614:	47b0      	blx	r6
 800d616:	2800      	cmp	r0, #0
 800d618:	da08      	bge.n	800d62c <lsm6dsl_init+0x54>
		LOG_ERR("Failed to initialize chip");
 800d61a:	483a      	ldr	r0, [pc, #232]	; (800d704 <lsm6dsl_init+0x12c>)
 800d61c:	6803      	ldr	r3, [r0, #0]
 800d61e:	075a      	lsls	r2, r3, #29
 800d620:	d15e      	bne.n	800d6e0 <lsm6dsl_init+0x108>
{
 800d622:	f06f 0504 	mvn.w	r5, #4
		return ret;
	}
#endif

	return 0;
}
 800d626:	4628      	mov	r0, r5
 800d628:	b007      	add	sp, #28
 800d62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_impl_k_busy_wait(usec_to_wait);
 800d62c:	f648 00b8 	movw	r0, #35000	; 0x88b8
 800d630:	f003 f832 	bl	8010698 <z_impl_k_busy_wait>
	if (data->hw_tf->read_reg(dev, LSM6DSL_REG_WHO_AM_I, &chip_id) < 0) {
 800d634:	6a2b      	ldr	r3, [r5, #32]
 800d636:	466a      	mov	r2, sp
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	210f      	movs	r1, #15
 800d63c:	4620      	mov	r0, r4
 800d63e:	4798      	blx	r3
 800d640:	2800      	cmp	r0, #0
 800d642:	dbea      	blt.n	800d61a <lsm6dsl_init+0x42>
	if (chip_id != LSM6DSL_VAL_WHO_AM_I) {
 800d644:	f89d 3000 	ldrb.w	r3, [sp]
 800d648:	2b6a      	cmp	r3, #106	; 0x6a
 800d64a:	d1e6      	bne.n	800d61a <lsm6dsl_init+0x42>
	if (lsm6dsl_accel_set_fs_raw(dev,
 800d64c:	2100      	movs	r1, #0
 800d64e:	4620      	mov	r0, r4
 800d650:	f009 fb39 	bl	8016cc6 <lsm6dsl_accel_set_fs_raw>
 800d654:	2800      	cmp	r0, #0
 800d656:	dbe0      	blt.n	800d61a <lsm6dsl_init+0x42>
	data->accel_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_ACCEL_ODR);
 800d658:	2600      	movs	r6, #0
	data->accel_sensitivity = LSM6DSL_DEFAULT_ACCEL_SENSITIVITY;
 800d65a:	4b2c      	ldr	r3, [pc, #176]	; (800d70c <lsm6dsl_init+0x134>)
 800d65c:	60eb      	str	r3, [r5, #12]
	data->accel_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_ACCEL_ODR);
 800d65e:	84ae      	strh	r6, [r5, #36]	; 0x24
	if (lsm6dsl_accel_set_odr_raw(dev, CONFIG_LSM6DSL_ACCEL_ODR) < 0) {
 800d660:	4631      	mov	r1, r6
 800d662:	4620      	mov	r0, r4
 800d664:	f7ff ff82 	bl	800d56c <lsm6dsl_accel_set_odr_raw>
 800d668:	42b0      	cmp	r0, r6
 800d66a:	dbd6      	blt.n	800d61a <lsm6dsl_init+0x42>
	if (lsm6dsl_gyro_set_fs_raw(dev, LSM6DSL_DEFAULT_GYRO_FULLSCALE) < 0) {
 800d66c:	2104      	movs	r1, #4
 800d66e:	4620      	mov	r0, r4
 800d670:	f009 fb3c 	bl	8016cec <lsm6dsl_gyro_set_fs_raw>
 800d674:	42b0      	cmp	r0, r6
 800d676:	dbd0      	blt.n	800d61a <lsm6dsl_init+0x42>
	data->gyro_sensitivity = LSM6DSL_DEFAULT_GYRO_SENSITIVITY;
 800d678:	4b25      	ldr	r3, [pc, #148]	; (800d710 <lsm6dsl_init+0x138>)
 800d67a:	61eb      	str	r3, [r5, #28]
	data->gyro_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_GYRO_ODR);
 800d67c:	852e      	strh	r6, [r5, #40]	; 0x28
	if (lsm6dsl_gyro_set_odr_raw(dev, CONFIG_LSM6DSL_GYRO_ODR) < 0) {
 800d67e:	4631      	mov	r1, r6
 800d680:	4620      	mov	r0, r4
 800d682:	f009 fb48 	bl	8016d16 <lsm6dsl_gyro_set_odr_raw>
 800d686:	42b0      	cmp	r0, r6
 800d688:	dbc7      	blt.n	800d61a <lsm6dsl_init+0x42>
	if (data->hw_tf->update_reg(dev,
 800d68a:	6a2b      	ldr	r3, [r5, #32]
 800d68c:	2207      	movs	r2, #7
 800d68e:	68df      	ldr	r7, [r3, #12]
 800d690:	210a      	movs	r1, #10
 800d692:	4633      	mov	r3, r6
 800d694:	4620      	mov	r0, r4
 800d696:	47b8      	blx	r7
 800d698:	42b0      	cmp	r0, r6
 800d69a:	dbbe      	blt.n	800d61a <lsm6dsl_init+0x42>
	if (data->hw_tf->update_reg(dev,
 800d69c:	6a2b      	ldr	r3, [r5, #32]
 800d69e:	2246      	movs	r2, #70	; 0x46
 800d6a0:	68de      	ldr	r6, [r3, #12]
 800d6a2:	2112      	movs	r1, #18
 800d6a4:	2344      	movs	r3, #68	; 0x44
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	47b0      	blx	r6
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	dbb5      	blt.n	800d61a <lsm6dsl_init+0x42>
	if (data->hw_tf->update_reg(dev,
 800d6ae:	6a2b      	ldr	r3, [r5, #32]
 800d6b0:	68de      	ldr	r6, [r3, #12]
 800d6b2:	2310      	movs	r3, #16
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	2115      	movs	r1, #21
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	47b0      	blx	r6
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	dbac      	blt.n	800d61a <lsm6dsl_init+0x42>
	if (data->hw_tf->update_reg(dev,
 800d6c0:	6a2b      	ldr	r3, [r5, #32]
 800d6c2:	68dd      	ldr	r5, [r3, #12]
 800d6c4:	2380      	movs	r3, #128	; 0x80
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	2116      	movs	r1, #22
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	47a8      	blx	r5
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	dba3      	blt.n	800d61a <lsm6dsl_init+0x42>
	ret = lsm6dsl_init_interrupt(dev);
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f000 f880 	bl	800d7d8 <lsm6dsl_init_interrupt>
	if (ret < 0) {
 800d6d8:	1e05      	subs	r5, r0, #0
 800d6da:	db0c      	blt.n	800d6f6 <lsm6dsl_init+0x11e>
	return 0;
 800d6dc:	2500      	movs	r5, #0
 800d6de:	e7a2      	b.n	800d626 <lsm6dsl_init+0x4e>
		LOG_ERR("Failed to initialize chip");
 800d6e0:	4b0c      	ldr	r3, [pc, #48]	; (800d714 <lsm6dsl_init+0x13c>)
 800d6e2:	9305      	str	r3, [sp, #20]
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	9304      	str	r3, [sp, #16]
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	aa04      	add	r2, sp, #16
 800d6ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d6f0:	f7fa fd2e 	bl	8008150 <z_impl_z_log_msg_static_create>
 800d6f4:	e795      	b.n	800d622 <lsm6dsl_init+0x4a>
		LOG_ERR("Failed to initialize interrupt.");
 800d6f6:	4803      	ldr	r0, [pc, #12]	; (800d704 <lsm6dsl_init+0x12c>)
 800d6f8:	6803      	ldr	r3, [r0, #0]
 800d6fa:	075b      	lsls	r3, r3, #29
 800d6fc:	d093      	beq.n	800d626 <lsm6dsl_init+0x4e>
 800d6fe:	4b06      	ldr	r3, [pc, #24]	; (800d718 <lsm6dsl_init+0x140>)
 800d700:	e777      	b.n	800d5f2 <lsm6dsl_init+0x1a>
 800d702:	bf00      	nop
 800d704:	20000d2c 	.word	0x20000d2c
 800d708:	0801d93c 	.word	0x0801d93c
 800d70c:	3d79db23 	.word	0x3d79db23
 800d710:	408c0000 	.word	0x408c0000
 800d714:	0801d95c 	.word	0x0801d95c
 800d718:	0801d976 	.word	0x0801d976

0800d71c <lsm6dsl_i2c_init>:
	.read_reg  = lsm6dsl_i2c_read_reg,
	.update_reg = lsm6dsl_i2c_update_reg,
};

int lsm6dsl_i2c_init(const struct device *dev)
{
 800d71c:	b508      	push	{r3, lr}
	struct lsm6dsl_data *data = dev->data;
 800d71e:	6902      	ldr	r2, [r0, #16]
	const struct lsm6dsl_config *cfg = dev->config;
 800d720:	6843      	ldr	r3, [r0, #4]

	data->hw_tf = &lsm6dsl_i2c_transfer_fn;
 800d722:	4905      	ldr	r1, [pc, #20]	; (800d738 <lsm6dsl_i2c_init+0x1c>)
 800d724:	6211      	str	r1, [r2, #32]

	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
 800d726:	6858      	ldr	r0, [r3, #4]
 800d728:	f00b ff74 	bl	8019614 <z_device_is_ready>
		return -ENODEV;
	}

	return 0;
 800d72c:	2800      	cmp	r0, #0
}
 800d72e:	bf0c      	ite	eq
 800d730:	f06f 0012 	mvneq.w	r0, #18
 800d734:	2000      	movne	r0, #0
 800d736:	bd08      	pop	{r3, pc}
 800d738:	0801b090 	.word	0x0801b090

0800d73c <lsm6dsl_trigger_set>:
}

int lsm6dsl_trigger_set(const struct device *dev,
			const struct sensor_trigger *trig,
			sensor_trigger_handler_t handler)
{
 800d73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct lsm6dsl_config *config = dev->config;
 800d740:	6845      	ldr	r5, [r0, #4]
	struct lsm6dsl_data *drv_data = dev->data;
 800d742:	f8d0 8010 	ldr.w	r8, [r0, #16]

	__ASSERT_NO_MSG(trig->type == SENSOR_TRIG_DATA_READY);

	/* If irq_gpio is not configured in DT just return error */
	if (!config->int_gpio.port) {
 800d746:	68eb      	ldr	r3, [r5, #12]
{
 800d748:	b086      	sub	sp, #24
 800d74a:	4604      	mov	r4, r0
 800d74c:	460f      	mov	r7, r1
 800d74e:	4616      	mov	r6, r2
	if (!config->int_gpio.port) {
 800d750:	b993      	cbnz	r3, 800d778 <lsm6dsl_trigger_set+0x3c>
		LOG_ERR("triggers not supported");
 800d752:	481f      	ldr	r0, [pc, #124]	; (800d7d0 <lsm6dsl_trigger_set+0x94>)
 800d754:	6802      	ldr	r2, [r0, #0]
 800d756:	0752      	lsls	r2, r2, #29
 800d758:	d104      	bne.n	800d764 <lsm6dsl_trigger_set+0x28>
		return -ENOTSUP;
 800d75a:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (gpio_pin_get_dt(&config->int_gpio) > 0) {
		handle_irq(dev);
	}

	return 0;
}
 800d75e:	b006      	add	sp, #24
 800d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("triggers not supported");
 800d764:	4a1b      	ldr	r2, [pc, #108]	; (800d7d4 <lsm6dsl_trigger_set+0x98>)
 800d766:	9205      	str	r2, [sp, #20]
 800d768:	2202      	movs	r2, #2
 800d76a:	9204      	str	r2, [sp, #16]
 800d76c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d770:	aa04      	add	r2, sp, #16
 800d772:	f7fa fced 	bl	8008150 <z_impl_z_log_msg_static_create>
 800d776:	e7f0      	b.n	800d75a <lsm6dsl_trigger_set+0x1e>
	setup_irq(dev, false);
 800d778:	2100      	movs	r1, #0
 800d77a:	4628      	mov	r0, r5
 800d77c:	f009 fbfb 	bl	8016f76 <setup_irq.isra.0>
	drv_data->data_ready_handler = handler;
 800d780:	f8c8 6040 	str.w	r6, [r8, #64]	; 0x40
	if (handler == NULL) {
 800d784:	b316      	cbz	r6, 800d7cc <lsm6dsl_trigger_set+0x90>
	drv_data->data_ready_trigger = *trig;
 800d786:	6838      	ldr	r0, [r7, #0]
 800d788:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
	setup_irq(dev, true);
 800d78c:	6860      	ldr	r0, [r4, #4]
 800d78e:	2101      	movs	r1, #1
 800d790:	f009 fbf1 	bl	8016f76 <setup_irq.isra.0>
	return gpio_pin_get(spec->port, spec->pin);
 800d794:	68e8      	ldr	r0, [r5, #12]
 800d796:	7c2d      	ldrb	r5, [r5, #16]
	const struct gpio_driver_data *const data =
 800d798:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
 800d79a:	6883      	ldr	r3, [r0, #8]
 800d79c:	4669      	mov	r1, sp
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	4798      	blx	r3
	if (ret == 0) {
 800d7a2:	b940      	cbnz	r0, 800d7b6 <lsm6dsl_trigger_set+0x7a>
		*value ^= data->invert;
 800d7a4:	9b00      	ldr	r3, [sp, #0]
 800d7a6:	6832      	ldr	r2, [r6, #0]
 800d7a8:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	40ab      	lsls	r3, r5
 800d7ae:	421a      	tst	r2, r3
 800d7b0:	bf14      	ite	ne
 800d7b2:	2001      	movne	r0, #1
 800d7b4:	2000      	moveq	r0, #0
	if (gpio_pin_get_dt(&config->int_gpio) > 0) {
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	dd08      	ble.n	800d7cc <lsm6dsl_trigger_set+0x90>
	struct lsm6dsl_data *drv_data = dev->data;
 800d7ba:	6925      	ldr	r5, [r4, #16]
	setup_irq(dev, false);
 800d7bc:	6860      	ldr	r0, [r4, #4]
 800d7be:	2100      	movs	r1, #0
 800d7c0:	f009 fbd9 	bl	8016f76 <setup_irq.isra.0>
	k_work_submit(&drv_data->work);
 800d7c4:	f105 0044 	add.w	r0, r5, #68	; 0x44
 800d7c8:	f002 fa7e 	bl	800fcc8 <k_work_submit>
		return 0;
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	e7c6      	b.n	800d75e <lsm6dsl_trigger_set+0x22>
 800d7d0:	20000d2c 	.word	0x20000d2c
 800d7d4:	0801d9a9 	.word	0x0801d9a9

0800d7d8 <lsm6dsl_init_interrupt>:
	lsm6dsl_thread_cb(drv_data->dev);
}
#endif

int lsm6dsl_init_interrupt(const struct device *dev)
{
 800d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct lsm6dsl_config *config = dev->config;
 800d7da:	6846      	ldr	r6, [r0, #4]
	struct lsm6dsl_data *drv_data = dev->data;
 800d7dc:	6905      	ldr	r5, [r0, #16]
{
 800d7de:	4604      	mov	r4, r0
 800d7e0:	b087      	sub	sp, #28

	if (!device_is_ready(config->int_gpio.port)) {
 800d7e2:	68f0      	ldr	r0, [r6, #12]
 800d7e4:	f00b ff16 	bl	8019614 <z_device_is_ready>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	b988      	cbnz	r0, 800d810 <lsm6dsl_init_interrupt+0x38>
		LOG_ERR("GPIO device not ready");
 800d7ec:	4832      	ldr	r0, [pc, #200]	; (800d8b8 <lsm6dsl_init_interrupt+0xe0>)
 800d7ee:	6802      	ldr	r2, [r0, #0]
 800d7f0:	0751      	lsls	r1, r2, #29
 800d7f2:	d103      	bne.n	800d7fc <lsm6dsl_init_interrupt+0x24>
		return -ENODEV;
 800d7f4:	f06f 0012 	mvn.w	r0, #18
#endif

	setup_irq(dev, true);

	return 0;
}
 800d7f8:	b007      	add	sp, #28
 800d7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("GPIO device not ready");
 800d7fc:	4a2f      	ldr	r2, [pc, #188]	; (800d8bc <lsm6dsl_init_interrupt+0xe4>)
 800d7fe:	9205      	str	r2, [sp, #20]
 800d800:	2202      	movs	r2, #2
 800d802:	9204      	str	r2, [sp, #16]
 800d804:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d808:	aa04      	add	r2, sp, #16
 800d80a:	f7fa fca1 	bl	8008150 <z_impl_z_log_msg_static_create>
 800d80e:	e7f1      	b.n	800d7f4 <lsm6dsl_init_interrupt+0x1c>
				  spec->dt_flags | extra_flags);
 800d810:	8a73      	ldrh	r3, [r6, #18]
	return gpio_pin_configure(spec->port,
 800d812:	68f0      	ldr	r0, [r6, #12]
				  spec->pin,
 800d814:	7c31      	ldrb	r1, [r6, #16]
	return gpio_pin_configure(spec->port,
 800d816:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
 800d81a:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 800d81e:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800d822:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800d826:	f04f 0701 	mov.w	r7, #1
 800d82a:	f8dc 3000 	ldr.w	r3, [ip]
 800d82e:	fa07 f701 	lsl.w	r7, r7, r1
 800d832:	bf14      	ite	ne
 800d834:	433b      	orrne	r3, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800d836:	43bb      	biceq	r3, r7
 800d838:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
 800d83c:	f8de 3000 	ldr.w	r3, [lr]
 800d840:	4798      	blx	r3
			   lsm6dsl_gpio_callback, BIT(config->int_gpio.pin));
 800d842:	7c33      	ldrb	r3, [r6, #16]
	callback->handler = handler;
 800d844:	4a1e      	ldr	r2, [pc, #120]	; (800d8c0 <lsm6dsl_init_interrupt+0xe8>)
 800d846:	2701      	movs	r7, #1
 800d848:	fa07 f303 	lsl.w	r3, r7, r3
	callback->pin_mask = pin_mask;
 800d84c:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
	if (gpio_add_callback(config->int_gpio.port, &drv_data->gpio_cb) < 0) {
 800d850:	68f0      	ldr	r0, [r6, #12]
	if (api->manage_callback == NULL) {
 800d852:	6883      	ldr	r3, [r0, #8]
 800d854:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&drv_data->gpio_cb,
 800d856:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800d85a:	b983      	cbnz	r3, 800d87e <lsm6dsl_init_interrupt+0xa6>
		LOG_ERR("Could not set gpio callback.");
 800d85c:	4816      	ldr	r0, [pc, #88]	; (800d8b8 <lsm6dsl_init_interrupt+0xe0>)
 800d85e:	6803      	ldr	r3, [r0, #0]
 800d860:	075a      	lsls	r2, r3, #29
 800d862:	d009      	beq.n	800d878 <lsm6dsl_init_interrupt+0xa0>
 800d864:	4b17      	ldr	r3, [pc, #92]	; (800d8c4 <lsm6dsl_init_interrupt+0xec>)
		LOG_ERR("Could not enable data-ready interrupt.");
 800d866:	9305      	str	r3, [sp, #20]
 800d868:	2302      	movs	r3, #2
 800d86a:	9304      	str	r3, [sp, #16]
 800d86c:	2300      	movs	r3, #0
 800d86e:	aa04      	add	r2, sp, #16
 800d870:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d874:	f7fa fc6c 	bl	8008150 <z_impl_z_log_msg_static_create>
		return -EIO;
 800d878:	f06f 0004 	mvn.w	r0, #4
 800d87c:	e7bc      	b.n	800d7f8 <lsm6dsl_init_interrupt+0x20>
	return api->manage_callback(port, callback, true);
 800d87e:	463a      	mov	r2, r7
 800d880:	4798      	blx	r3
	if (gpio_add_callback(config->int_gpio.port, &drv_data->gpio_cb) < 0) {
 800d882:	2800      	cmp	r0, #0
 800d884:	dbea      	blt.n	800d85c <lsm6dsl_init_interrupt+0x84>
	if (drv_data->hw_tf->update_reg(dev,
 800d886:	6a2b      	ldr	r3, [r5, #32]
 800d888:	68de      	ldr	r6, [r3, #12]
 800d88a:	2303      	movs	r3, #3
 800d88c:	461a      	mov	r2, r3
 800d88e:	210d      	movs	r1, #13
 800d890:	4620      	mov	r0, r4
 800d892:	47b0      	blx	r6
 800d894:	2800      	cmp	r0, #0
 800d896:	da05      	bge.n	800d8a4 <lsm6dsl_init_interrupt+0xcc>
		LOG_ERR("Could not enable data-ready interrupt.");
 800d898:	4807      	ldr	r0, [pc, #28]	; (800d8b8 <lsm6dsl_init_interrupt+0xe0>)
 800d89a:	6803      	ldr	r3, [r0, #0]
 800d89c:	075b      	lsls	r3, r3, #29
 800d89e:	d0eb      	beq.n	800d878 <lsm6dsl_init_interrupt+0xa0>
 800d8a0:	4b09      	ldr	r3, [pc, #36]	; (800d8c8 <lsm6dsl_init_interrupt+0xf0>)
 800d8a2:	e7e0      	b.n	800d866 <lsm6dsl_init_interrupt+0x8e>
	drv_data->work.handler = lsm6dsl_work_cb;
 800d8a4:	4b09      	ldr	r3, [pc, #36]	; (800d8cc <lsm6dsl_init_interrupt+0xf4>)
	drv_data->dev = dev;
 800d8a6:	62ec      	str	r4, [r5, #44]	; 0x2c
	drv_data->work.handler = lsm6dsl_work_cb;
 800d8a8:	64ab      	str	r3, [r5, #72]	; 0x48
	setup_irq(dev, true);
 800d8aa:	6860      	ldr	r0, [r4, #4]
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	f009 fb62 	bl	8016f76 <setup_irq.isra.0>
	return 0;
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	e7a0      	b.n	800d7f8 <lsm6dsl_init_interrupt+0x20>
 800d8b6:	bf00      	nop
 800d8b8:	20000d2c 	.word	0x20000d2c
 800d8bc:	0801d3cf 	.word	0x0801d3cf
 800d8c0:	08016fb3 	.word	0x08016fb3
 800d8c4:	0801d9c0 	.word	0x0801d9c0
 800d8c8:	0801d9dd 	.word	0x0801d9dd
 800d8cc:	08016fcf 	.word	0x08016fcf

0800d8d0 <vl53l0x_start>:
exit:
	return ret;
}

static int vl53l0x_start(const struct device *dev)
{
 800d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d4:	b09c      	sub	sp, #112	; 0x70
	const struct vl53l0x_config *const config = dev->config;
 800d8d6:	6843      	ldr	r3, [r0, #4]
	struct vl53l0x_data *drv_data = dev->data;
 800d8d8:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4605      	mov	r5, r0
	VL53L0X_DeviceInfo_t vl53l0x_dev_info;

	LOG_DBG("[%s] Starting", dev->name);

	/* Pull XSHUT high to start the sensor */
	if (config->xshut.port) {
 800d8e0:	6898      	ldr	r0, [r3, #8]
	uint16_t vl53l0x_id = 0U;
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	80fa      	strh	r2, [r7, #6]
	if (config->xshut.port) {
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d02e      	beq.n	800d948 <vl53l0x_start+0x78>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800d8ea:	7b1b      	ldrb	r3, [r3, #12]
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	4099      	lsls	r1, r3
 800d8f0:	6903      	ldr	r3, [r0, #16]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
 800d8f6:	6883      	ldr	r3, [r0, #8]
 800d8f8:	bf0c      	ite	eq
 800d8fa:	68db      	ldreq	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800d8fc:	691b      	ldrne	r3, [r3, #16]
 800d8fe:	4798      	blx	r3
		r = gpio_pin_set_dt(&config->xshut, 1);
		if (r < 0) {
 800d900:	2800      	cmp	r0, #0
 800d902:	4603      	mov	r3, r0
 800d904:	da1c      	bge.n	800d940 <vl53l0x_start+0x70>
			LOG_ERR("[%s] Unable to set XSHUT gpio (error %d)",
 800d906:	48a2      	ldr	r0, [pc, #648]	; (800db90 <vl53l0x_start+0x2c0>)
 800d908:	6802      	ldr	r2, [r0, #0]
 800d90a:	0752      	lsls	r2, r2, #29
 800d90c:	d012      	beq.n	800d934 <vl53l0x_start+0x64>
 800d90e:	466c      	mov	r4, sp
 800d910:	b08a      	sub	sp, #40	; 0x28
 800d912:	6829      	ldr	r1, [r5, #0]
 800d914:	466a      	mov	r2, sp
 800d916:	4d9f      	ldr	r5, [pc, #636]	; (800db94 <vl53l0x_start+0x2c4>)
 800d918:	61d3      	str	r3, [r2, #28]
 800d91a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d91e:	8413      	strh	r3, [r2, #32]
 800d920:	4b9d      	ldr	r3, [pc, #628]	; (800db98 <vl53l0x_start+0x2c8>)
 800d922:	e9c2 5105 	strd	r5, r1, [r2, #20]
 800d926:	f842 3f10 	str.w	r3, [r2, #16]!
 800d92a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 800d92e:	f009 fbb7 	bl	80170a0 <z_log_msg_static_create.constprop.0>
 800d932:	46a5      	mov	sp, r4
				dev->name, r);
			return -EIO;
 800d934:	f06f 0004 	mvn.w	r0, #4
	}

	drv_data->started = true;
	LOG_DBG("[%s] Started", dev->name);
	return 0;
}
 800d938:	3770      	adds	r7, #112	; 0x70
 800d93a:	46bd      	mov	sp, r7
 800d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sleep(timeout);
 800d940:	2014      	movs	r0, #20
 800d942:	2100      	movs	r1, #0
 800d944:	f002 fcba 	bl	80102bc <z_impl_k_sleep>
	(void)memset(&vl53l0x_dev_info, 0, sizeof(VL53L0X_DeviceInfo_t));
 800d948:	2263      	movs	r2, #99	; 0x63
 800d94a:	2100      	movs	r1, #0
 800d94c:	f107 000c 	add.w	r0, r7, #12
	ret = VL53L0X_GetDeviceInfo(&drv_data->vl53l0x, &vl53l0x_dev_info);
 800d950:	f108 0404 	add.w	r4, r8, #4
	(void)memset(&vl53l0x_dev_info, 0, sizeof(VL53L0X_DeviceInfo_t));
 800d954:	f003 fca0 	bl	8011298 <memset>
	ret = VL53L0X_GetDeviceInfo(&drv_data->vl53l0x, &vl53l0x_dev_info);
 800d958:	f107 010c 	add.w	r1, r7, #12
 800d95c:	4620      	mov	r0, r4
 800d95e:	f009 fd9a 	bl	8017496 <VL53L0X_GetDeviceInfo>
	if (ret < 0) {
 800d962:	2800      	cmp	r0, #0
 800d964:	da19      	bge.n	800d99a <vl53l0x_start+0xca>
		LOG_ERR("[%s] Could not get info from device.", dev->name);
 800d966:	488a      	ldr	r0, [pc, #552]	; (800db90 <vl53l0x_start+0x2c0>)
 800d968:	6803      	ldr	r3, [r0, #0]
 800d96a:	075b      	lsls	r3, r3, #29
 800d96c:	d102      	bne.n	800d974 <vl53l0x_start+0xa4>
		return -ENODEV;
 800d96e:	f06f 0012 	mvn.w	r0, #18
 800d972:	e7e1      	b.n	800d938 <vl53l0x_start+0x68>
		LOG_ERR("[%s] Could not get info from device.", dev->name);
 800d974:	466c      	mov	r4, sp
 800d976:	b088      	sub	sp, #32
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	466a      	mov	r2, sp
 800d97c:	4987      	ldr	r1, [pc, #540]	; (800db9c <vl53l0x_start+0x2cc>)
 800d97e:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d982:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d986:	8393      	strh	r3, [r2, #28]
 800d988:	4b85      	ldr	r3, [pc, #532]	; (800dba0 <vl53l0x_start+0x2d0>)
 800d98a:	f842 3f10 	str.w	r3, [r2, #16]!
 800d98e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800d992:	f009 fb85 	bl	80170a0 <z_log_msg_static_create.constprop.0>
 800d996:	46a5      	mov	sp, r4
 800d998:	e7e9      	b.n	800d96e <vl53l0x_start+0x9e>
	ret = VL53L0X_RdWord(&drv_data->vl53l0x,
 800d99a:	1dba      	adds	r2, r7, #6
 800d99c:	21c0      	movs	r1, #192	; 0xc0
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 faea 	bl	800df78 <VL53L0X_RdWord>
	if ((ret < 0) || (vl53l0x_id != VL53L0X_CHIP_ID)) {
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	db04      	blt.n	800d9b2 <vl53l0x_start+0xe2>
 800d9a8:	88fa      	ldrh	r2, [r7, #6]
 800d9aa:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d019      	beq.n	800d9e6 <vl53l0x_start+0x116>
		LOG_ERR("[%s] Issue on device identification", dev->name);
 800d9b2:	4877      	ldr	r0, [pc, #476]	; (800db90 <vl53l0x_start+0x2c0>)
 800d9b4:	6803      	ldr	r3, [r0, #0]
 800d9b6:	075e      	lsls	r6, r3, #29
 800d9b8:	d102      	bne.n	800d9c0 <vl53l0x_start+0xf0>
		return -ENOTSUP;
 800d9ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d9be:	e7bb      	b.n	800d938 <vl53l0x_start+0x68>
		LOG_ERR("[%s] Issue on device identification", dev->name);
 800d9c0:	466c      	mov	r4, sp
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	682b      	ldr	r3, [r5, #0]
 800d9c6:	466a      	mov	r2, sp
 800d9c8:	4976      	ldr	r1, [pc, #472]	; (800dba4 <vl53l0x_start+0x2d4>)
 800d9ca:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d9ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9d2:	8393      	strh	r3, [r2, #28]
 800d9d4:	4b72      	ldr	r3, [pc, #456]	; (800dba0 <vl53l0x_start+0x2d0>)
 800d9d6:	f842 3f10 	str.w	r3, [r2, #16]!
 800d9da:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
		LOG_ERR("[%s] VL53L0X_DataInit return error (%d)",
 800d9de:	f009 fb5f 	bl	80170a0 <z_log_msg_static_create.constprop.0>
 800d9e2:	46a5      	mov	sp, r4
 800d9e4:	e7e9      	b.n	800d9ba <vl53l0x_start+0xea>
	ret = VL53L0X_DataInit(&drv_data->vl53l0x);
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f000 ff22 	bl	800e830 <VL53L0X_DataInit>
	if (ret < 0) {
 800d9ec:	1e03      	subs	r3, r0, #0
 800d9ee:	da14      	bge.n	800da1a <vl53l0x_start+0x14a>
		LOG_ERR("[%s] VL53L0X_DataInit return error (%d)",
 800d9f0:	4867      	ldr	r0, [pc, #412]	; (800db90 <vl53l0x_start+0x2c0>)
 800d9f2:	6802      	ldr	r2, [r0, #0]
 800d9f4:	0754      	lsls	r4, r2, #29
 800d9f6:	d0e0      	beq.n	800d9ba <vl53l0x_start+0xea>
 800d9f8:	466c      	mov	r4, sp
 800d9fa:	b08a      	sub	sp, #40	; 0x28
 800d9fc:	6829      	ldr	r1, [r5, #0]
 800d9fe:	466a      	mov	r2, sp
 800da00:	4d69      	ldr	r5, [pc, #420]	; (800dba8 <vl53l0x_start+0x2d8>)
 800da02:	61d3      	str	r3, [r2, #28]
 800da04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da08:	8413      	strh	r3, [r2, #32]
 800da0a:	4b63      	ldr	r3, [pc, #396]	; (800db98 <vl53l0x_start+0x2c8>)
 800da0c:	e9c2 5105 	strd	r5, r1, [r2, #20]
 800da10:	f842 3f10 	str.w	r3, [r2, #16]!
 800da14:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 800da18:	e7e1      	b.n	800d9de <vl53l0x_start+0x10e>
	ret = VL53L0X_StaticInit(&drv_data->vl53l0x);
 800da1a:	692e      	ldr	r6, [r5, #16]
 800da1c:	3604      	adds	r6, #4
 800da1e:	4630      	mov	r0, r6
 800da20:	f001 f820 	bl	800ea64 <VL53L0X_StaticInit>
	if (ret) {
 800da24:	4604      	mov	r4, r0
 800da26:	b198      	cbz	r0, 800da50 <vl53l0x_start+0x180>
		LOG_ERR("[%s] VL53L0X_StaticInit failed",
 800da28:	4859      	ldr	r0, [pc, #356]	; (800db90 <vl53l0x_start+0x2c0>)
 800da2a:	6803      	ldr	r3, [r0, #0]
 800da2c:	0759      	lsls	r1, r3, #29
 800da2e:	d060      	beq.n	800daf2 <vl53l0x_start+0x222>
 800da30:	682b      	ldr	r3, [r5, #0]
 800da32:	466d      	mov	r5, sp
 800da34:	b088      	sub	sp, #32
 800da36:	466a      	mov	r2, sp
 800da38:	495c      	ldr	r1, [pc, #368]	; (800dbac <vl53l0x_start+0x2dc>)
		LOG_ERR("[%s] VL53L0X_SetVcselPulsePeriod final range failed",
 800da3a:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800da3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da42:	8393      	strh	r3, [r2, #28]
 800da44:	4b56      	ldr	r3, [pc, #344]	; (800dba0 <vl53l0x_start+0x2d0>)
 800da46:	f842 3f10 	str.w	r3, [r2, #16]!
 800da4a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800da4e:	e04d      	b.n	800daec <vl53l0x_start+0x21c>
	ret = VL53L0X_PerformRefCalibration(&drv_data->vl53l0x,
 800da50:	1d3a      	adds	r2, r7, #4
 800da52:	1cf9      	adds	r1, r7, #3
 800da54:	4630      	mov	r0, r6
 800da56:	f009 fed6 	bl	8017806 <VL53L0X_PerformRefCalibration>
	if (ret) {
 800da5a:	4604      	mov	r4, r0
 800da5c:	b148      	cbz	r0, 800da72 <vl53l0x_start+0x1a2>
		LOG_ERR("[%s] VL53L0X_PerformRefCalibration failed",
 800da5e:	484c      	ldr	r0, [pc, #304]	; (800db90 <vl53l0x_start+0x2c0>)
 800da60:	6803      	ldr	r3, [r0, #0]
 800da62:	075a      	lsls	r2, r3, #29
 800da64:	d045      	beq.n	800daf2 <vl53l0x_start+0x222>
 800da66:	682b      	ldr	r3, [r5, #0]
 800da68:	466d      	mov	r5, sp
 800da6a:	b088      	sub	sp, #32
 800da6c:	466a      	mov	r2, sp
 800da6e:	4950      	ldr	r1, [pc, #320]	; (800dbb0 <vl53l0x_start+0x2e0>)
 800da70:	e7e3      	b.n	800da3a <vl53l0x_start+0x16a>
	ret = VL53L0X_PerformRefSpadManagement(&drv_data->vl53l0x,
 800da72:	1d7a      	adds	r2, r7, #5
 800da74:	f107 0108 	add.w	r1, r7, #8
 800da78:	4630      	mov	r0, r6
 800da7a:	f00a f8c5 	bl	8017c08 <VL53L0X_PerformRefSpadManagement>
	if (ret) {
 800da7e:	4604      	mov	r4, r0
 800da80:	b148      	cbz	r0, 800da96 <vl53l0x_start+0x1c6>
		LOG_ERR("[%s] VL53L0X_PerformRefSpadManagement failed",
 800da82:	4843      	ldr	r0, [pc, #268]	; (800db90 <vl53l0x_start+0x2c0>)
 800da84:	6803      	ldr	r3, [r0, #0]
 800da86:	075b      	lsls	r3, r3, #29
 800da88:	d033      	beq.n	800daf2 <vl53l0x_start+0x222>
 800da8a:	682b      	ldr	r3, [r5, #0]
 800da8c:	466d      	mov	r5, sp
 800da8e:	b088      	sub	sp, #32
 800da90:	466a      	mov	r2, sp
 800da92:	4948      	ldr	r1, [pc, #288]	; (800dbb4 <vl53l0x_start+0x2e4>)
 800da94:	e7d1      	b.n	800da3a <vl53l0x_start+0x16a>
	ret = VL53L0X_SetDeviceMode(&drv_data->vl53l0x,
 800da96:	4601      	mov	r1, r0
 800da98:	4630      	mov	r0, r6
 800da9a:	f000 febb 	bl	800e814 <VL53L0X_SetDeviceMode>
	if (ret) {
 800da9e:	4604      	mov	r4, r0
 800daa0:	b148      	cbz	r0, 800dab6 <vl53l0x_start+0x1e6>
		LOG_ERR("[%s] VL53L0X_SetDeviceMode failed",
 800daa2:	483b      	ldr	r0, [pc, #236]	; (800db90 <vl53l0x_start+0x2c0>)
 800daa4:	6803      	ldr	r3, [r0, #0]
 800daa6:	075e      	lsls	r6, r3, #29
 800daa8:	d023      	beq.n	800daf2 <vl53l0x_start+0x222>
 800daaa:	682b      	ldr	r3, [r5, #0]
 800daac:	466d      	mov	r5, sp
 800daae:	b088      	sub	sp, #32
 800dab0:	466a      	mov	r2, sp
 800dab2:	4941      	ldr	r1, [pc, #260]	; (800dbb8 <vl53l0x_start+0x2e8>)
 800dab4:	e7c1      	b.n	800da3a <vl53l0x_start+0x16a>
	ret = VL53L0X_SetLimitCheckEnable(&drv_data->vl53l0x,
 800dab6:	4601      	mov	r1, r0
 800dab8:	2201      	movs	r2, #1
 800daba:	4630      	mov	r0, r6
 800dabc:	f009 fdaf 	bl	801761e <VL53L0X_SetLimitCheckEnable>
	if (ret) {
 800dac0:	4604      	mov	r4, r0
 800dac2:	b1f0      	cbz	r0, 800db02 <vl53l0x_start+0x232>
		LOG_ERR("[%s] VL53L0X_SetLimitCheckEnable sigma failed",
 800dac4:	4b32      	ldr	r3, [pc, #200]	; (800db90 <vl53l0x_start+0x2c0>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	0759      	lsls	r1, r3, #29
 800daca:	d012      	beq.n	800daf2 <vl53l0x_start+0x222>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	466d      	mov	r5, sp
 800dad0:	b088      	sub	sp, #32
 800dad2:	466a      	mov	r2, sp
 800dad4:	4939      	ldr	r1, [pc, #228]	; (800dbbc <vl53l0x_start+0x2ec>)
 800dad6:	482e      	ldr	r0, [pc, #184]	; (800db90 <vl53l0x_start+0x2c0>)
 800dad8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800dadc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dae0:	8393      	strh	r3, [r2, #28]
 800dae2:	4b2f      	ldr	r3, [pc, #188]	; (800dba0 <vl53l0x_start+0x2d0>)
 800dae4:	f842 3f10 	str.w	r3, [r2, #16]!
 800dae8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
		LOG_ERR("[%s] VL53L0X_SetVcselPulsePeriod final range failed",
 800daec:	f009 fad8 	bl	80170a0 <z_log_msg_static_create.constprop.0>
 800daf0:	46ad      	mov	sp, r5
	if (ret < 0) {
 800daf2:	2c00      	cmp	r4, #0
 800daf4:	f6ff af61 	blt.w	800d9ba <vl53l0x_start+0xea>
	drv_data->started = true;
 800daf8:	2301      	movs	r3, #1
 800dafa:	f888 3000 	strb.w	r3, [r8]
	return 0;
 800dafe:	2000      	movs	r0, #0
 800db00:	e71a      	b.n	800d938 <vl53l0x_start+0x68>
	ret = VL53L0X_SetLimitCheckEnable(&drv_data->vl53l0x,
 800db02:	2201      	movs	r2, #1
 800db04:	4611      	mov	r1, r2
 800db06:	4630      	mov	r0, r6
 800db08:	f009 fd89 	bl	801761e <VL53L0X_SetLimitCheckEnable>
	if (ret) {
 800db0c:	4604      	mov	r4, r0
 800db0e:	b148      	cbz	r0, 800db24 <vl53l0x_start+0x254>
		LOG_ERR("[%s] VL53L0X_SetLimitCheckEnable signal rate failed",
 800db10:	481f      	ldr	r0, [pc, #124]	; (800db90 <vl53l0x_start+0x2c0>)
 800db12:	6803      	ldr	r3, [r0, #0]
 800db14:	075a      	lsls	r2, r3, #29
 800db16:	d0ec      	beq.n	800daf2 <vl53l0x_start+0x222>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	466d      	mov	r5, sp
 800db1c:	b088      	sub	sp, #32
 800db1e:	466a      	mov	r2, sp
 800db20:	4927      	ldr	r1, [pc, #156]	; (800dbc0 <vl53l0x_start+0x2f0>)
 800db22:	e78a      	b.n	800da3a <vl53l0x_start+0x16a>
	ret = VL53L0X_SetLimitCheckValue(&drv_data->vl53l0x,
 800db24:	f641 1299 	movw	r2, #6553	; 0x1999
 800db28:	2101      	movs	r1, #1
 800db2a:	4630      	mov	r0, r6
 800db2c:	f009 fdc0 	bl	80176b0 <VL53L0X_SetLimitCheckValue>
	if (ret) {
 800db30:	4604      	mov	r4, r0
 800db32:	b148      	cbz	r0, 800db48 <vl53l0x_start+0x278>
		LOG_ERR("[%s] VL53L0X_SetLimitCheckValue signal rate failed",
 800db34:	4816      	ldr	r0, [pc, #88]	; (800db90 <vl53l0x_start+0x2c0>)
 800db36:	6803      	ldr	r3, [r0, #0]
 800db38:	075b      	lsls	r3, r3, #29
 800db3a:	d0da      	beq.n	800daf2 <vl53l0x_start+0x222>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	466d      	mov	r5, sp
 800db40:	b088      	sub	sp, #32
 800db42:	466a      	mov	r2, sp
 800db44:	491f      	ldr	r1, [pc, #124]	; (800dbc4 <vl53l0x_start+0x2f4>)
 800db46:	e778      	b.n	800da3a <vl53l0x_start+0x16a>
	ret = VL53L0X_SetLimitCheckValue(&drv_data->vl53l0x,
 800db48:	4601      	mov	r1, r0
 800db4a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800db4e:	4630      	mov	r0, r6
 800db50:	f009 fdae 	bl	80176b0 <VL53L0X_SetLimitCheckValue>
	if (ret) {
 800db54:	4604      	mov	r4, r0
 800db56:	b148      	cbz	r0, 800db6c <vl53l0x_start+0x29c>
		LOG_ERR("[%s] VL53L0X_SetLimitCheckValue sigma failed",
 800db58:	480d      	ldr	r0, [pc, #52]	; (800db90 <vl53l0x_start+0x2c0>)
 800db5a:	6803      	ldr	r3, [r0, #0]
 800db5c:	075e      	lsls	r6, r3, #29
 800db5e:	d0c8      	beq.n	800daf2 <vl53l0x_start+0x222>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	466d      	mov	r5, sp
 800db64:	b088      	sub	sp, #32
 800db66:	466a      	mov	r2, sp
 800db68:	4917      	ldr	r1, [pc, #92]	; (800dbc8 <vl53l0x_start+0x2f8>)
 800db6a:	e766      	b.n	800da3a <vl53l0x_start+0x16a>
	ret = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&drv_data->vl53l0x,
 800db6c:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800db70:	4630      	mov	r0, r6
 800db72:	f009 fc9e 	bl	80174b2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (ret) {
 800db76:	4604      	mov	r4, r0
 800db78:	b350      	cbz	r0, 800dbd0 <vl53l0x_start+0x300>
		LOG_ERR("[%s] VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed",
 800db7a:	4805      	ldr	r0, [pc, #20]	; (800db90 <vl53l0x_start+0x2c0>)
 800db7c:	6803      	ldr	r3, [r0, #0]
 800db7e:	0759      	lsls	r1, r3, #29
 800db80:	d0b7      	beq.n	800daf2 <vl53l0x_start+0x222>
 800db82:	682b      	ldr	r3, [r5, #0]
 800db84:	466d      	mov	r5, sp
 800db86:	b088      	sub	sp, #32
 800db88:	466a      	mov	r2, sp
 800db8a:	4910      	ldr	r1, [pc, #64]	; (800dbcc <vl53l0x_start+0x2fc>)
 800db8c:	e755      	b.n	800da3a <vl53l0x_start+0x16a>
 800db8e:	bf00      	nop
 800db90:	20000d30 	.word	0x20000d30
 800db94:	0801da04 	.word	0x0801da04
 800db98:	01000004 	.word	0x01000004
 800db9c:	0801da2d 	.word	0x0801da2d
 800dba0:	01000003 	.word	0x01000003
 800dba4:	0801da52 	.word	0x0801da52
 800dba8:	0801da76 	.word	0x0801da76
 800dbac:	0801da9e 	.word	0x0801da9e
 800dbb0:	0801dabd 	.word	0x0801dabd
 800dbb4:	0801dae7 	.word	0x0801dae7
 800dbb8:	0801db14 	.word	0x0801db14
 800dbbc:	0801db36 	.word	0x0801db36
 800dbc0:	0801db64 	.word	0x0801db64
 800dbc4:	0801db98 	.word	0x0801db98
 800dbc8:	0801dbcb 	.word	0x0801dbcb
 800dbcc:	0801dbf8 	.word	0x0801dbf8
	ret = VL53L0X_SetVcselPulsePeriod(&drv_data->vl53l0x,
 800dbd0:	4601      	mov	r1, r0
 800dbd2:	2212      	movs	r2, #18
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f009 fc6e 	bl	80174b6 <VL53L0X_SetVcselPulsePeriod>
	if (ret) {
 800dbda:	4604      	mov	r4, r0
 800dbdc:	b148      	cbz	r0, 800dbf2 <vl53l0x_start+0x322>
		LOG_ERR("[%s] VL53L0X_SetVcselPulsePeriod pre range failed",
 800dbde:	480f      	ldr	r0, [pc, #60]	; (800dc1c <vl53l0x_start+0x34c>)
 800dbe0:	6803      	ldr	r3, [r0, #0]
 800dbe2:	075a      	lsls	r2, r3, #29
 800dbe4:	d085      	beq.n	800daf2 <vl53l0x_start+0x222>
 800dbe6:	682b      	ldr	r3, [r5, #0]
 800dbe8:	466d      	mov	r5, sp
 800dbea:	b088      	sub	sp, #32
 800dbec:	466a      	mov	r2, sp
 800dbee:	490c      	ldr	r1, [pc, #48]	; (800dc20 <vl53l0x_start+0x350>)
 800dbf0:	e723      	b.n	800da3a <vl53l0x_start+0x16a>
	ret = VL53L0X_SetVcselPulsePeriod(&drv_data->vl53l0x,
 800dbf2:	220e      	movs	r2, #14
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f009 fc5d 	bl	80174b6 <VL53L0X_SetVcselPulsePeriod>
	if (ret) {
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	f43f af7a 	beq.w	800daf8 <vl53l0x_start+0x228>
		LOG_ERR("[%s] VL53L0X_SetVcselPulsePeriod final range failed",
 800dc04:	4805      	ldr	r0, [pc, #20]	; (800dc1c <vl53l0x_start+0x34c>)
 800dc06:	6803      	ldr	r3, [r0, #0]
 800dc08:	075b      	lsls	r3, r3, #29
 800dc0a:	f43f af72 	beq.w	800daf2 <vl53l0x_start+0x222>
 800dc0e:	682b      	ldr	r3, [r5, #0]
 800dc10:	466d      	mov	r5, sp
 800dc12:	b088      	sub	sp, #32
 800dc14:	466a      	mov	r2, sp
 800dc16:	4903      	ldr	r1, [pc, #12]	; (800dc24 <vl53l0x_start+0x354>)
 800dc18:	e70f      	b.n	800da3a <vl53l0x_start+0x16a>
 800dc1a:	bf00      	nop
 800dc1c:	20000d30 	.word	0x20000d30
 800dc20:	0801dc33 	.word	0x0801dc33
 800dc24:	0801dc65 	.word	0x0801dc65

0800dc28 <vl53l0x_sample_fetch>:

static int vl53l0x_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
 800dc28:	b5b0      	push	{r4, r5, r7, lr}
	struct vl53l0x_data *drv_data = dev->data;
 800dc2a:	6905      	ldr	r5, [r0, #16]

	__ASSERT_NO_MSG((chan == SENSOR_CHAN_ALL)
			|| (chan == SENSOR_CHAN_DISTANCE)
			|| (chan == SENSOR_CHAN_PROX));

	if (!drv_data->started) {
 800dc2c:	782b      	ldrb	r3, [r5, #0]
{
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	4604      	mov	r4, r0
	if (!drv_data->started) {
 800dc32:	b14b      	cbz	r3, 800dc48 <vl53l0x_sample_fetch+0x20>
		if (r < 0) {
			return r;
		}
	}

	ret = VL53L0X_PerformSingleRangingMeasurement(&drv_data->vl53l0x,
 800dc34:	f505 71b4 	add.w	r1, r5, #360	; 0x168
 800dc38:	1d28      	adds	r0, r5, #4
 800dc3a:	f009 ff18 	bl	8017a6e <VL53L0X_PerformSingleRangingMeasurement>
						      &drv_data->RangingMeasurementData);
	if (ret < 0) {
 800dc3e:	1e03      	subs	r3, r0, #0
 800dc40:	db07      	blt.n	800dc52 <vl53l0x_sample_fetch+0x2a>
		LOG_ERR("[%s] Could not perform measurment (error=%d)",
			dev->name, ret);
		return -EINVAL;
	}

	return 0;
 800dc42:	2000      	movs	r0, #0
}
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bdb0      	pop	{r4, r5, r7, pc}
		r = vl53l0x_start(dev);
 800dc48:	f7ff fe42 	bl	800d8d0 <vl53l0x_start>
		if (r < 0) {
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	daf1      	bge.n	800dc34 <vl53l0x_sample_fetch+0xc>
 800dc50:	e7f8      	b.n	800dc44 <vl53l0x_sample_fetch+0x1c>
		LOG_ERR("[%s] Could not perform measurment (error=%d)",
 800dc52:	480d      	ldr	r0, [pc, #52]	; (800dc88 <vl53l0x_sample_fetch+0x60>)
 800dc54:	6802      	ldr	r2, [r0, #0]
 800dc56:	0752      	lsls	r2, r2, #29
 800dc58:	d102      	bne.n	800dc60 <vl53l0x_sample_fetch+0x38>
		return -EINVAL;
 800dc5a:	f06f 0015 	mvn.w	r0, #21
 800dc5e:	e7f1      	b.n	800dc44 <vl53l0x_sample_fetch+0x1c>
		LOG_ERR("[%s] Could not perform measurment (error=%d)",
 800dc60:	6821      	ldr	r1, [r4, #0]
 800dc62:	466c      	mov	r4, sp
 800dc64:	b08a      	sub	sp, #40	; 0x28
 800dc66:	466a      	mov	r2, sp
 800dc68:	4d08      	ldr	r5, [pc, #32]	; (800dc8c <vl53l0x_sample_fetch+0x64>)
 800dc6a:	61d3      	str	r3, [r2, #28]
 800dc6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc70:	8413      	strh	r3, [r2, #32]
 800dc72:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <vl53l0x_sample_fetch+0x68>)
 800dc74:	e9c2 5105 	strd	r5, r1, [r2, #20]
 800dc78:	f842 3f10 	str.w	r3, [r2, #16]!
 800dc7c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 800dc80:	f009 fa0e 	bl	80170a0 <z_log_msg_static_create.constprop.0>
 800dc84:	46a5      	mov	sp, r4
 800dc86:	e7e8      	b.n	800dc5a <vl53l0x_sample_fetch+0x32>
 800dc88:	20000d30 	.word	0x20000d30
 800dc8c:	0801dc99 	.word	0x0801dc99
 800dc90:	01000004 	.word	0x01000004

0800dc94 <vl53l0x_init>:
	.sample_fetch = vl53l0x_sample_fetch,
	.channel_get = vl53l0x_channel_get,
};

static int vl53l0x_init(const struct device *dev)
{
 800dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int r;
	struct vl53l0x_data *drv_data = dev->data;
 800dc96:	6902      	ldr	r2, [r0, #16]
	const struct vl53l0x_config *const config = dev->config;
 800dc98:	6843      	ldr	r3, [r0, #4]

	/* Initialize the HAL peripheral with the default sensor address,
	 * ie. the address on power up
	 */
	drv_data->vl53l0x.I2cDevAddr = VL53L0X_INITIAL_ADDR;
 800dc9a:	2129      	movs	r1, #41	; 0x29
 800dc9c:	f882 1160 	strb.w	r1, [r2, #352]	; 0x160
{
 800dca0:	4604      	mov	r4, r0
	drv_data->vl53l0x.i2c = config->i2c.bus;
 800dca2:	6818      	ldr	r0, [r3, #0]
 800dca4:	f8c2 0164 	str.w	r0, [r2, #356]	; 0x164
	if (!config->xshut.port) {
		LOG_ERR("[%s] Missing XSHUT gpio spec", dev->name);
		return -ENOTSUP;
	}
#else
	if (config->i2c.addr != VL53L0X_INITIAL_ADDR) {
 800dca8:	889a      	ldrh	r2, [r3, #4]
 800dcaa:	428a      	cmp	r2, r1
{
 800dcac:	af00      	add	r7, sp, #0
	if (config->i2c.addr != VL53L0X_INITIAL_ADDR) {
 800dcae:	d01b      	beq.n	800dce8 <vl53l0x_init+0x54>
		LOG_ERR("[%s] Invalid device address (should be 0x%X or "
 800dcb0:	4827      	ldr	r0, [pc, #156]	; (800dd50 <vl53l0x_init+0xbc>)
 800dcb2:	6803      	ldr	r3, [r0, #0]
 800dcb4:	075a      	lsls	r2, r3, #29
 800dcb6:	d103      	bne.n	800dcc0 <vl53l0x_init+0x2c>
			"CONFIG_VL53L0X_RECONFIGURE_ADDRESS should be enabled)",
			dev->name, VL53L0X_INITIAL_ADDR);
		return -ENOTSUP;
 800dcb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}
#endif

	LOG_DBG("[%s] Initialized", dev->name);
	return 0;
}
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("[%s] Invalid device address (should be 0x%X or "
 800dcc0:	6823      	ldr	r3, [r4, #0]
 800dcc2:	466c      	mov	r4, sp
 800dcc4:	b08a      	sub	sp, #40	; 0x28
 800dcc6:	466a      	mov	r2, sp
 800dcc8:	4d22      	ldr	r5, [pc, #136]	; (800dd54 <vl53l0x_init+0xc0>)
 800dcca:	61d1      	str	r1, [r2, #28]
 800dccc:	e9c2 5305 	strd	r5, r3, [r2, #20]
 800dcd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcd4:	8413      	strh	r3, [r2, #32]
 800dcd6:	4b20      	ldr	r3, [pc, #128]	; (800dd58 <vl53l0x_init+0xc4>)
 800dcd8:	f842 3f10 	str.w	r3, [r2, #16]!
 800dcdc:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 800dce0:	f009 f9de 	bl	80170a0 <z_log_msg_static_create.constprop.0>
 800dce4:	46a5      	mov	sp, r4
 800dce6:	e7e7      	b.n	800dcb8 <vl53l0x_init+0x24>
	if (config->xshut.port) {
 800dce8:	6898      	ldr	r0, [r3, #8]
 800dcea:	b360      	cbz	r0, 800dd46 <vl53l0x_init+0xb2>
				  spec->pin,
 800dcec:	7b19      	ldrb	r1, [r3, #12]
				  spec->dt_flags | extra_flags);
 800dcee:	89db      	ldrh	r3, [r3, #14]
	return gpio_pin_configure(spec->port,
 800dcf0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
	struct gpio_driver_data *data =
 800dcf4:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
 800dcf6:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800dcfa:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800dcfe:	f04f 0501 	mov.w	r5, #1
 800dd02:	6833      	ldr	r3, [r6, #0]
 800dd04:	fa05 f501 	lsl.w	r5, r5, r1
 800dd08:	bf14      	ite	ne
 800dd0a:	432b      	orrne	r3, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800dd0c:	43ab      	biceq	r3, r5
 800dd0e:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 800dd10:	f8dc 3000 	ldr.w	r3, [ip]
 800dd14:	4798      	blx	r3
		if (r < 0) {
 800dd16:	2800      	cmp	r0, #0
 800dd18:	da15      	bge.n	800dd46 <vl53l0x_init+0xb2>
			LOG_ERR("[%s] Unable to configure GPIO as output",
 800dd1a:	480d      	ldr	r0, [pc, #52]	; (800dd50 <vl53l0x_init+0xbc>)
 800dd1c:	6803      	ldr	r3, [r0, #0]
 800dd1e:	075b      	lsls	r3, r3, #29
 800dd20:	d011      	beq.n	800dd46 <vl53l0x_init+0xb2>
 800dd22:	466d      	mov	r5, sp
 800dd24:	b088      	sub	sp, #32
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	466a      	mov	r2, sp
 800dd2a:	490c      	ldr	r1, [pc, #48]	; (800dd5c <vl53l0x_init+0xc8>)
 800dd2c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800dd30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd34:	8393      	strh	r3, [r2, #28]
 800dd36:	4b0a      	ldr	r3, [pc, #40]	; (800dd60 <vl53l0x_init+0xcc>)
 800dd38:	f842 3f10 	str.w	r3, [r2, #16]!
 800dd3c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800dd40:	f009 f9ae 	bl	80170a0 <z_log_msg_static_create.constprop.0>
 800dd44:	46ad      	mov	sp, r5
	r = vl53l0x_start(dev);
 800dd46:	4620      	mov	r0, r4
 800dd48:	f7ff fdc2 	bl	800d8d0 <vl53l0x_start>
	if (r) {
 800dd4c:	e7b6      	b.n	800dcbc <vl53l0x_init+0x28>
 800dd4e:	bf00      	nop
 800dd50:	20000d30 	.word	0x20000d30
 800dd54:	0801dcc6 	.word	0x0801dcc6
 800dd58:	01000004 	.word	0x01000004
 800dd5c:	0801dd2b 	.word	0x0801dd2b
 800dd60:	01000003 	.word	0x01000003

0800dd64 <VL53L0X_WrByte.part.0>:

	return Status;
}


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
 800dd64:	b598      	push	{r3, r4, r7, lr}

	status_int = i2c_reg_write_byte(Dev->i2c, Dev->I2cDevAddr, index, data);

	if (status_int < 0) {
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
		LOG_ERR("i2c_reg_write_byte failed (%d)", Status);
 800dd66:	480d      	ldr	r0, [pc, #52]	; (800dd9c <VL53L0X_WrByte.part.0+0x38>)
 800dd68:	6803      	ldr	r3, [r0, #0]
 800dd6a:	075b      	lsls	r3, r3, #29
VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
 800dd6c:	af00      	add	r7, sp, #0
		LOG_ERR("i2c_reg_write_byte failed (%d)", Status);
 800dd6e:	d010      	beq.n	800dd92 <VL53L0X_WrByte.part.0+0x2e>
 800dd70:	466c      	mov	r4, sp
 800dd72:	b088      	sub	sp, #32
 800dd74:	466a      	mov	r2, sp
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <VL53L0X_WrByte.part.0+0x3c>)
 800dd78:	6153      	str	r3, [r2, #20]
 800dd7a:	f06f 0313 	mvn.w	r3, #19
 800dd7e:	6193      	str	r3, [r2, #24]
 800dd80:	2303      	movs	r3, #3
 800dd82:	f842 3f10 	str.w	r3, [r2, #16]!
 800dd86:	2300      	movs	r3, #0
 800dd88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800dd8c:	f7fa f9e0 	bl	8008150 <z_impl_z_log_msg_static_create>
 800dd90:	46a5      	mov	sp, r4
	}

	return Status;
}
 800dd92:	f06f 0013 	mvn.w	r0, #19
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd98      	pop	{r3, r4, r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20000d30 	.word	0x20000d30
 800dda0:	0801dd66 	.word	0x0801dd66

0800dda4 <VL53L0X_RdByte.part.0>:
	}

	return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
 800dda4:	b598      	push	{r3, r4, r7, lr}
	int32_t status_int;

	status_int = i2c_reg_read_byte(Dev->i2c, Dev->I2cDevAddr, index, data);
	if (status_int < 0) {
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
		LOG_ERR("i2c_reg_read_byte failed (%d)", Status);
 800dda6:	480d      	ldr	r0, [pc, #52]	; (800dddc <VL53L0X_RdByte.part.0+0x38>)
 800dda8:	6803      	ldr	r3, [r0, #0]
 800ddaa:	075b      	lsls	r3, r3, #29
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
 800ddac:	af00      	add	r7, sp, #0
		LOG_ERR("i2c_reg_read_byte failed (%d)", Status);
 800ddae:	d010      	beq.n	800ddd2 <VL53L0X_RdByte.part.0+0x2e>
 800ddb0:	466c      	mov	r4, sp
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	466a      	mov	r2, sp
 800ddb6:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <VL53L0X_RdByte.part.0+0x3c>)
 800ddb8:	6153      	str	r3, [r2, #20]
 800ddba:	f06f 0313 	mvn.w	r3, #19
 800ddbe:	6193      	str	r3, [r2, #24]
 800ddc0:	2303      	movs	r3, #3
 800ddc2:	f842 3f10 	str.w	r3, [r2, #16]!
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800ddcc:	f7fa f9c0 	bl	8008150 <z_impl_z_log_msg_static_create>
 800ddd0:	46a5      	mov	sp, r4
	}

	return Status;
}
 800ddd2:	f06f 0013 	mvn.w	r0, #19
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd98      	pop	{r3, r4, r7, pc}
 800ddda:	bf00      	nop
 800dddc:	20000d30 	.word	0x20000d30
 800dde0:	0801dd85 	.word	0x0801dd85

0800dde4 <VL53L0X_WriteMulti>:
{
 800dde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dde6:	460e      	mov	r6, r1
	uint8_t I2CBuffer[count+1];
 800dde8:	1c5d      	adds	r5, r3, #1
{
 800ddea:	4611      	mov	r1, r2
 800ddec:	461a      	mov	r2, r3
	uint8_t I2CBuffer[count+1];
 800ddee:	3308      	adds	r3, #8
{
 800ddf0:	b087      	sub	sp, #28
	uint8_t I2CBuffer[count+1];
 800ddf2:	f023 0307 	bic.w	r3, r3, #7
{
 800ddf6:	af00      	add	r7, sp, #0
	uint8_t I2CBuffer[count+1];
 800ddf8:	ebad 0d03 	sub.w	sp, sp, r3
{
 800ddfc:	4604      	mov	r4, r0
	I2CBuffer[0] = index;
 800ddfe:	4668      	mov	r0, sp
 800de00:	f800 6b01 	strb.w	r6, [r0], #1
 800de04:	f7f3 f944 	bl	8001090 <memcpy>
	status_int = i2c_write(Dev->i2c, I2CBuffer, count+1, Dev->I2cDevAddr);
 800de08:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
 800de0c:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 800de10:	462a      	mov	r2, r5
 800de12:	4669      	mov	r1, sp
 800de14:	f009 f961 	bl	80170da <i2c_write>
	if (status_int < 0) {
 800de18:	2800      	cmp	r0, #0
 800de1a:	da14      	bge.n	800de46 <VL53L0X_WriteMulti+0x62>
		LOG_ERR("Failed to write");
 800de1c:	480b      	ldr	r0, [pc, #44]	; (800de4c <VL53L0X_WriteMulti+0x68>)
 800de1e:	6803      	ldr	r3, [r0, #0]
 800de20:	075b      	lsls	r3, r3, #29
 800de22:	d104      	bne.n	800de2e <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de24:	f06f 0013 	mvn.w	r0, #19
}
 800de28:	371c      	adds	r7, #28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to write");
 800de2e:	4b08      	ldr	r3, [pc, #32]	; (800de50 <VL53L0X_WriteMulti+0x6c>)
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	2302      	movs	r3, #2
 800de34:	613b      	str	r3, [r7, #16]
 800de36:	2300      	movs	r3, #0
 800de38:	f107 0210 	add.w	r2, r7, #16
 800de3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800de40:	f7fa f986 	bl	8008150 <z_impl_z_log_msg_static_create>
 800de44:	e7ee      	b.n	800de24 <VL53L0X_WriteMulti+0x40>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de46:	2000      	movs	r0, #0
 800de48:	e7ee      	b.n	800de28 <VL53L0X_WriteMulti+0x44>
 800de4a:	bf00      	nop
 800de4c:	20000d30 	.word	0x20000d30
 800de50:	0801dda3 	.word	0x0801dda3

0800de54 <VL53L0X_ReadMulti>:
{
 800de54:	b500      	push	{lr}
 800de56:	b089      	sub	sp, #36	; 0x24
	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, pdata,
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	4613      	mov	r3, r2
 800de5c:	460a      	mov	r2, r1
 800de5e:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 800de62:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
 800de66:	f009 f91e 	bl	80170a6 <i2c_burst_read>
	if (status_int < 0) {
 800de6a:	2800      	cmp	r0, #0
 800de6c:	da13      	bge.n	800de96 <VL53L0X_ReadMulti+0x42>
		LOG_ERR("Failed to read");
 800de6e:	480b      	ldr	r0, [pc, #44]	; (800de9c <VL53L0X_ReadMulti+0x48>)
 800de70:	6803      	ldr	r3, [r0, #0]
 800de72:	075b      	lsls	r3, r3, #29
 800de74:	d104      	bne.n	800de80 <VL53L0X_ReadMulti+0x2c>
		return -EIO;
 800de76:	f06f 0004 	mvn.w	r0, #4
}
 800de7a:	b009      	add	sp, #36	; 0x24
 800de7c:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to read");
 800de80:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <VL53L0X_ReadMulti+0x4c>)
 800de82:	9307      	str	r3, [sp, #28]
 800de84:	2302      	movs	r3, #2
 800de86:	9306      	str	r3, [sp, #24]
 800de88:	2300      	movs	r3, #0
 800de8a:	aa06      	add	r2, sp, #24
 800de8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800de90:	f7fa f95e 	bl	8008150 <z_impl_z_log_msg_static_create>
 800de94:	e7ef      	b.n	800de76 <VL53L0X_ReadMulti+0x22>
	return Status;
 800de96:	2000      	movs	r0, #0
 800de98:	e7ef      	b.n	800de7a <VL53L0X_ReadMulti+0x26>
 800de9a:	bf00      	nop
 800de9c:	20000d30 	.word	0x20000d30
 800dea0:	0801ddb3 	.word	0x0801ddb3

0800dea4 <VL53L0X_WrWord>:
{
 800dea4:	b590      	push	{r4, r7, lr}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
	I2CBuffer[1] = data >> 8;
 800deaa:	0a13      	lsrs	r3, r2, #8
	I2CBuffer[0] = index;
 800deac:	7139      	strb	r1, [r7, #4]
	I2CBuffer[1] = data >> 8;
 800deae:	717b      	strb	r3, [r7, #5]
	I2CBuffer[2] = data & 0x00FF;
 800deb0:	71ba      	strb	r2, [r7, #6]
	status_int = i2c_write(Dev->i2c, I2CBuffer, 3, Dev->I2cDevAddr);
 800deb2:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
 800deb6:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
 800deba:	2203      	movs	r2, #3
 800debc:	1d39      	adds	r1, r7, #4
 800debe:	f009 f90c 	bl	80170da <i2c_write>
	if (status_int < 0) {
 800dec2:	2800      	cmp	r0, #0
 800dec4:	da1a      	bge.n	800defc <VL53L0X_WrWord+0x58>
		LOG_ERR("i2c_write failed (%d)", Status);
 800dec6:	480e      	ldr	r0, [pc, #56]	; (800df00 <VL53L0X_WrWord+0x5c>)
 800dec8:	6803      	ldr	r3, [r0, #0]
 800deca:	075b      	lsls	r3, r3, #29
 800decc:	d104      	bne.n	800ded8 <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dece:	f06f 0013 	mvn.w	r0, #19
}
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("i2c_write failed (%d)", Status);
 800ded8:	466c      	mov	r4, sp
 800deda:	b088      	sub	sp, #32
 800dedc:	466a      	mov	r2, sp
 800dede:	4b09      	ldr	r3, [pc, #36]	; (800df04 <VL53L0X_WrWord+0x60>)
 800dee0:	6153      	str	r3, [r2, #20]
 800dee2:	f06f 0313 	mvn.w	r3, #19
 800dee6:	6193      	str	r3, [r2, #24]
 800dee8:	2303      	movs	r3, #3
 800deea:	f842 3f10 	str.w	r3, [r2, #16]!
 800deee:	2300      	movs	r3, #0
 800def0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800def4:	f7fa f92c 	bl	8008150 <z_impl_z_log_msg_static_create>
 800def8:	46a5      	mov	sp, r4
 800defa:	e7e8      	b.n	800dece <VL53L0X_WrWord+0x2a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800defc:	2000      	movs	r0, #0
 800defe:	e7e8      	b.n	800ded2 <VL53L0X_WrWord+0x2e>
 800df00:	20000d30 	.word	0x20000d30
 800df04:	0801ddc2 	.word	0x0801ddc2

0800df08 <VL53L0X_UpdateByte>:
{
 800df08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df0c:	b082      	sub	sp, #8
 800df0e:	af00      	add	r7, sp, #0
 800df10:	4615      	mov	r5, r2
	status_int = VL53L0X_RdByte(Dev, index, &data);
 800df12:	1dfa      	adds	r2, r7, #7
{
 800df14:	4606      	mov	r6, r0
 800df16:	4688      	mov	r8, r1
 800df18:	461c      	mov	r4, r3
	status_int = VL53L0X_RdByte(Dev, index, &data);
 800df1a:	f009 f903 	bl	8017124 <VL53L0X_RdByte>
	if (status_int < 0) {
 800df1e:	2800      	cmp	r0, #0
 800df20:	da1a      	bge.n	800df58 <VL53L0X_UpdateByte+0x50>
		LOG_ERR("VL53L0X_RdByte failed (%d)", Status);
 800df22:	4813      	ldr	r0, [pc, #76]	; (800df70 <VL53L0X_UpdateByte+0x68>)
 800df24:	6803      	ldr	r3, [r0, #0]
 800df26:	075b      	lsls	r3, r3, #29
 800df28:	d010      	beq.n	800df4c <VL53L0X_UpdateByte+0x44>
 800df2a:	466c      	mov	r4, sp
 800df2c:	b088      	sub	sp, #32
 800df2e:	466a      	mov	r2, sp
 800df30:	4b10      	ldr	r3, [pc, #64]	; (800df74 <VL53L0X_UpdateByte+0x6c>)
 800df32:	6153      	str	r3, [r2, #20]
 800df34:	f06f 0313 	mvn.w	r3, #19
 800df38:	6193      	str	r3, [r2, #24]
 800df3a:	2303      	movs	r3, #3
 800df3c:	f842 3f10 	str.w	r3, [r2, #16]!
 800df40:	2300      	movs	r3, #0
 800df42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800df46:	f7fa f903 	bl	8008150 <z_impl_z_log_msg_static_create>
 800df4a:	46a5      	mov	sp, r4
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df4c:	f06f 0013 	mvn.w	r0, #19
}
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data = (data & AndData) | OrData;
 800df58:	79fb      	ldrb	r3, [r7, #7]
 800df5a:	401d      	ands	r5, r3
 800df5c:	ea44 0205 	orr.w	r2, r4, r5
		status_int = VL53L0X_WrByte(Dev, index, data);
 800df60:	4641      	mov	r1, r8
 800df62:	4630      	mov	r0, r6
		data = (data & AndData) | OrData;
 800df64:	71fa      	strb	r2, [r7, #7]
		status_int = VL53L0X_WrByte(Dev, index, data);
 800df66:	f009 f8c5 	bl	80170f4 <VL53L0X_WrByte>
		if (status_int != 0) {
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d0f0      	beq.n	800df50 <VL53L0X_UpdateByte+0x48>
 800df6e:	e7ed      	b.n	800df4c <VL53L0X_UpdateByte+0x44>
 800df70:	20000d30 	.word	0x20000d30
 800df74:	0801ddd8 	.word	0x0801ddd8

0800df78 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800df78:	b530      	push	{r4, r5, lr}
 800df7a:	b08b      	sub	sp, #44	; 0x2c
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int;
	uint8_t buf[2];

	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 2);
 800df7c:	2502      	movs	r5, #2
 800df7e:	9500      	str	r5, [sp, #0]
{
 800df80:	4614      	mov	r4, r2
	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 2);
 800df82:	ab03      	add	r3, sp, #12
 800df84:	460a      	mov	r2, r1
 800df86:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 800df8a:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
 800df8e:	f009 f88a 	bl	80170a6 <i2c_burst_read>
	if (status_int < 0) {
 800df92:	2800      	cmp	r0, #0
 800df94:	da11      	bge.n	800dfba <VL53L0X_RdWord+0x42>
		LOG_ERR("i2c_burst_read failed");
 800df96:	480c      	ldr	r0, [pc, #48]	; (800dfc8 <VL53L0X_RdWord+0x50>)
 800df98:	6803      	ldr	r3, [r0, #0]
 800df9a:	075b      	lsls	r3, r3, #29
 800df9c:	d103      	bne.n	800dfa6 <VL53L0X_RdWord+0x2e>
		return -EIO;
 800df9e:	f06f 0004 	mvn.w	r0, #4
	}
	*data = ((uint16_t)buf[0]<<8) + (uint16_t)buf[1];

	return Status;
}
 800dfa2:	b00b      	add	sp, #44	; 0x2c
 800dfa4:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("i2c_burst_read failed");
 800dfa6:	4b09      	ldr	r3, [pc, #36]	; (800dfcc <VL53L0X_RdWord+0x54>)
 800dfa8:	e9cd 5308 	strd	r5, r3, [sp, #32]
 800dfac:	2300      	movs	r3, #0
 800dfae:	aa08      	add	r2, sp, #32
 800dfb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800dfb4:	f7fa f8cc 	bl	8008150 <z_impl_z_log_msg_static_create>
 800dfb8:	e7f1      	b.n	800df9e <VL53L0X_RdWord+0x26>
	*data = ((uint16_t)buf[0]<<8) + (uint16_t)buf[1];
 800dfba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800dfbe:	ba5b      	rev16	r3, r3
 800dfc0:	8023      	strh	r3, [r4, #0]
	return Status;
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	e7ed      	b.n	800dfa2 <VL53L0X_RdWord+0x2a>
 800dfc6:	bf00      	nop
 800dfc8:	20000d30 	.word	0x20000d30
 800dfcc:	0801ddf3 	.word	0x0801ddf3

0800dfd0 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	b08a      	sub	sp, #40	; 0x28
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int;
	uint8_t buf[4];

	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 4);
 800dfd4:	2304      	movs	r3, #4
 800dfd6:	9300      	str	r3, [sp, #0]
{
 800dfd8:	4614      	mov	r4, r2
	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 4);
 800dfda:	ab03      	add	r3, sp, #12
 800dfdc:	460a      	mov	r2, r1
 800dfde:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 800dfe2:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
 800dfe6:	f009 f85e 	bl	80170a6 <i2c_burst_read>
	if (status_int < 0) {
 800dfea:	2800      	cmp	r0, #0
 800dfec:	da12      	bge.n	800e014 <VL53L0X_RdDWord+0x44>
		LOG_ERR("i2c_burst_read failed");
 800dfee:	480c      	ldr	r0, [pc, #48]	; (800e020 <VL53L0X_RdDWord+0x50>)
 800dff0:	6803      	ldr	r3, [r0, #0]
 800dff2:	075b      	lsls	r3, r3, #29
 800dff4:	d103      	bne.n	800dffe <VL53L0X_RdDWord+0x2e>
		return -EIO;
 800dff6:	f06f 0004 	mvn.w	r0, #4
	}
	*data = ((uint32_t)buf[0]<<24) + ((uint32_t)buf[1]<<16) +
		((uint32_t)buf[2]<<8) + (uint32_t)buf[3];

	return Status;
}
 800dffa:	b00a      	add	sp, #40	; 0x28
 800dffc:	bd10      	pop	{r4, pc}
		LOG_ERR("i2c_burst_read failed");
 800dffe:	4b09      	ldr	r3, [pc, #36]	; (800e024 <VL53L0X_RdDWord+0x54>)
 800e000:	9309      	str	r3, [sp, #36]	; 0x24
 800e002:	2302      	movs	r3, #2
 800e004:	9308      	str	r3, [sp, #32]
 800e006:	2300      	movs	r3, #0
 800e008:	aa08      	add	r2, sp, #32
 800e00a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e00e:	f7fa f89f 	bl	8008150 <z_impl_z_log_msg_static_create>
 800e012:	e7f0      	b.n	800dff6 <VL53L0X_RdDWord+0x26>
	*data = ((uint32_t)buf[0]<<24) + ((uint32_t)buf[1]<<16) +
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	ba1b      	rev	r3, r3
 800e018:	6023      	str	r3, [r4, #0]
	return Status;
 800e01a:	2000      	movs	r0, #0
 800e01c:	e7ed      	b.n	800dffa <VL53L0X_RdDWord+0x2a>
 800e01e:	bf00      	nop
 800e020:	20000d30 	.word	0x20000d30
 800e024:	0801ddf3 	.word	0x0801ddf3

0800e028 <channel_name_get>:

static void channel_name_get(size_t idx, struct shell_static_entry *entry)
{
	int cnt = 0;

	entry->syntax = NULL;
 800e028:	2300      	movs	r3, #0
	entry->handler = NULL;
	entry->help  = NULL;
	entry->subcmd = &dsub_channel_name;
 800e02a:	4a0a      	ldr	r2, [pc, #40]	; (800e054 <channel_name_get+0x2c>)
 800e02c:	608a      	str	r2, [r1, #8]
{
 800e02e:	b530      	push	{r4, r5, lr}
 800e030:	4c09      	ldr	r4, [pc, #36]	; (800e058 <channel_name_get+0x30>)
	entry->syntax = NULL;
 800e032:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
 800e034:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 800e036:	604b      	str	r3, [r1, #4]
	int cnt = 0;
 800e038:	461a      	mov	r2, r3

	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
		if (sensor_channel_name[i] != NULL) {
 800e03a:	f854 5b04 	ldr.w	r5, [r4], #4
 800e03e:	b125      	cbz	r5, 800e04a <channel_name_get+0x22>
			if (cnt == idx) {
 800e040:	4282      	cmp	r2, r0
 800e042:	d101      	bne.n	800e048 <channel_name_get+0x20>
				entry->syntax = sensor_channel_name[i];
 800e044:	600d      	str	r5, [r1, #0]
				break;
			}
			cnt++;
		}
	}
}
 800e046:	bd30      	pop	{r4, r5, pc}
			cnt++;
 800e048:	3201      	adds	r2, #1
	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
 800e04a:	3301      	adds	r3, #1
 800e04c:	2b39      	cmp	r3, #57	; 0x39
 800e04e:	d1f4      	bne.n	800e03a <channel_name_get+0x12>
 800e050:	e7f9      	b.n	800e046 <channel_name_get+0x1e>
 800e052:	bf00      	nop
 800e054:	0801a4e4 	.word	0x0801a4e4
 800e058:	20000764 	.word	0x20000764

0800e05c <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
 800e05c:	b510      	push	{r4, lr}
 800e05e:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
 800e060:	2100      	movs	r1, #0
 800e062:	f007 fbb8 	bl	80157d6 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
 800e066:	b100      	cbz	r0, 800e06a <device_name_get+0xe>
 800e068:	6800      	ldr	r0, [r0, #0]
 800e06a:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60e3      	str	r3, [r4, #12]
	entry->help  = NULL;
 800e070:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_channel_name;
 800e072:	4b01      	ldr	r3, [pc, #4]	; (800e078 <device_name_get+0x1c>)
 800e074:	60a3      	str	r3, [r4, #8]
}
 800e076:	bd10      	pop	{r4, pc}
 800e078:	0801a4e4 	.word	0x0801a4e4

0800e07c <cmd_get_sensor>:
{
 800e07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e080:	4604      	mov	r4, r0
 800e082:	4688      	mov	r8, r1
	dev = device_get_binding(argv[1]);
 800e084:	6850      	ldr	r0, [r2, #4]
{
 800e086:	4616      	mov	r6, r2
 800e088:	f001 f97c 	bl	800f384 <z_impl_device_get_binding>
	if (dev == NULL) {
 800e08c:	4605      	mov	r5, r0
 800e08e:	b948      	cbnz	r0, 800e0a4 <cmd_get_sensor+0x28>
		shell_error(shell, "Device unknown (%s)", argv[1]);
 800e090:	4620      	mov	r0, r4
 800e092:	6873      	ldr	r3, [r6, #4]
 800e094:	4a1d      	ldr	r2, [pc, #116]	; (800e10c <cmd_get_sensor+0x90>)
 800e096:	2101      	movs	r1, #1
 800e098:	f007 fa80 	bl	801559c <shell_fprintf>
		return -ENODEV;
 800e09c:	f06f 0012 	mvn.w	r0, #18
}
 800e0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 800e0a4:	6883      	ldr	r3, [r0, #8]
 800e0a6:	2139      	movs	r1, #57	; 0x39
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	4798      	blx	r3
	if (err < 0) {
 800e0ac:	1e03      	subs	r3, r0, #0
 800e0ae:	da04      	bge.n	800e0ba <cmd_get_sensor+0x3e>
		shell_error(shell, "Failed to read sensor: %d", err);
 800e0b0:	4a17      	ldr	r2, [pc, #92]	; (800e110 <cmd_get_sensor+0x94>)
 800e0b2:	2101      	movs	r1, #1
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f007 fa71 	bl	801559c <shell_fprintf>
	if (argc == 2) {
 800e0ba:	f1b8 0f02 	cmp.w	r8, #2
 800e0be:	d120      	bne.n	800e102 <cmd_get_sensor+0x86>
 800e0c0:	4f14      	ldr	r7, [pc, #80]	; (800e114 <cmd_get_sensor+0x98>)
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 800e0c2:	2600      	movs	r6, #0
			if (sensor_channel_name[i]) {
 800e0c4:	f857 2b04 	ldr.w	r2, [r7], #4
 800e0c8:	b11a      	cbz	r2, 800e0d2 <cmd_get_sensor+0x56>
				handle_channel_by_name(shell, dev,
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f7f4 fc9b 	bl	8002a08 <handle_channel_by_name>
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 800e0d2:	3601      	adds	r6, #1
 800e0d4:	2e39      	cmp	r6, #57	; 0x39
 800e0d6:	d1f5      	bne.n	800e0c4 <cmd_get_sensor+0x48>
	return 0;
 800e0d8:	2000      	movs	r0, #0
 800e0da:	e7e1      	b.n	800e0a0 <cmd_get_sensor+0x24>
			err = handle_channel_by_name(shell, dev, argv[i]);
 800e0dc:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f7f4 fc90 	bl	8002a08 <handle_channel_by_name>
			if (err < 0) {
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	da06      	bge.n	800e0fa <cmd_get_sensor+0x7e>
				shell_error(shell,
 800e0ec:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
 800e0f0:	464a      	mov	r2, r9
 800e0f2:	2101      	movs	r1, #1
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f007 fa51 	bl	801559c <shell_fprintf>
		for (int i = 2; i < argc; i++) {
 800e0fa:	3701      	adds	r7, #1
 800e0fc:	4547      	cmp	r7, r8
 800e0fe:	d3ed      	bcc.n	800e0dc <cmd_get_sensor+0x60>
 800e100:	e7ea      	b.n	800e0d8 <cmd_get_sensor+0x5c>
				shell_error(shell,
 800e102:	f8df 9014 	ldr.w	r9, [pc, #20]	; 800e118 <cmd_get_sensor+0x9c>
		for (int i = 2; i < argc; i++) {
 800e106:	2702      	movs	r7, #2
 800e108:	e7f8      	b.n	800e0fc <cmd_get_sensor+0x80>
 800e10a:	bf00      	nop
 800e10c:	0801de94 	.word	0x0801de94
 800e110:	0801dea9 	.word	0x0801dea9
 800e114:	20000764 	.word	0x20000764
 800e118:	0801dec4 	.word	0x0801dec4

0800e11c <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 800e11c:	6842      	ldr	r2, [r0, #4]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(config->usart);
 800e11e:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e120:	f101 0308 	add.w	r3, r1, #8
 800e124:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800e128:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e12c:	f101 0c08 	add.w	ip, r1, #8
 800e130:	e84c 3000 	strex	r0, r3, [ip]
 800e134:	2800      	cmp	r0, #0
 800e136:	d1f3      	bne.n	800e120 <uart_stm32_irq_err_enable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 800e138:	6813      	ldr	r3, [r2, #0]
 800e13a:	4910      	ldr	r1, [pc, #64]	; (800e17c <uart_stm32_irq_err_enable+0x60>)
 800e13c:	428b      	cmp	r3, r1
 800e13e:	d00f      	beq.n	800e160 <uart_stm32_irq_err_enable+0x44>
 800e140:	f5a1 4174 	sub.w	r1, r1, #62464	; 0xf400
 800e144:	428b      	cmp	r3, r1
 800e146:	d00b      	beq.n	800e160 <uart_stm32_irq_err_enable+0x44>
 800e148:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e14c:	428b      	cmp	r3, r1
 800e14e:	d007      	beq.n	800e160 <uart_stm32_irq_err_enable+0x44>
 800e150:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e154:	428b      	cmp	r3, r1
 800e156:	d003      	beq.n	800e160 <uart_stm32_irq_err_enable+0x44>
 800e158:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e15c:	428b      	cmp	r3, r1
 800e15e:	d103      	bne.n	800e168 <uart_stm32_irq_err_enable+0x4c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800e160:	6859      	ldr	r1, [r3, #4]
 800e162:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800e166:	6059      	str	r1, [r3, #4]
		LL_USART_EnableIT_LBD(config->usart);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(config->usart);
 800e168:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 800e16e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e172:	e842 3100 	strex	r1, r3, [r2]
 800e176:	2900      	cmp	r1, #0
 800e178:	d1f7      	bne.n	800e16a <uart_stm32_irq_err_enable+0x4e>
}
 800e17a:	4770      	bx	lr
 800e17c:	40013800 	.word	0x40013800

0800e180 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 800e180:	6842      	ldr	r2, [r0, #4]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(config->usart);
 800e182:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e184:	f101 0308 	add.w	r3, r1, #8
 800e188:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800e18c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e190:	f101 0c08 	add.w	ip, r1, #8
 800e194:	e84c 3000 	strex	r0, r3, [ip]
 800e198:	2800      	cmp	r0, #0
 800e19a:	d1f3      	bne.n	800e184 <uart_stm32_irq_err_disable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 800e19c:	6813      	ldr	r3, [r2, #0]
 800e19e:	4910      	ldr	r1, [pc, #64]	; (800e1e0 <uart_stm32_irq_err_disable+0x60>)
 800e1a0:	428b      	cmp	r3, r1
 800e1a2:	d00f      	beq.n	800e1c4 <uart_stm32_irq_err_disable+0x44>
 800e1a4:	f5a1 4174 	sub.w	r1, r1, #62464	; 0xf400
 800e1a8:	428b      	cmp	r3, r1
 800e1aa:	d00b      	beq.n	800e1c4 <uart_stm32_irq_err_disable+0x44>
 800e1ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e1b0:	428b      	cmp	r3, r1
 800e1b2:	d007      	beq.n	800e1c4 <uart_stm32_irq_err_disable+0x44>
 800e1b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e1b8:	428b      	cmp	r3, r1
 800e1ba:	d003      	beq.n	800e1c4 <uart_stm32_irq_err_disable+0x44>
 800e1bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e1c0:	428b      	cmp	r3, r1
 800e1c2:	d103      	bne.n	800e1cc <uart_stm32_irq_err_disable+0x4c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800e1c4:	6859      	ldr	r1, [r3, #4]
 800e1c6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800e1ca:	6059      	str	r1, [r3, #4]
		LL_USART_DisableIT_LBD(config->usart);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(config->usart);
 800e1cc:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 800e1d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d6:	e842 3100 	strex	r1, r3, [r2]
 800e1da:	2900      	cmp	r1, #0
 800e1dc:	d1f7      	bne.n	800e1ce <uart_stm32_irq_err_disable+0x4e>
}
 800e1de:	4770      	bx	lr
 800e1e0:	40013800 	.word	0x40013800

0800e1e4 <uart_stm32_set_baudrate.part.0>:
static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
 800e1e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
 800e1e6:	4808      	ldr	r0, [pc, #32]	; (800e208 <uart_stm32_set_baudrate.part.0+0x24>)
 800e1e8:	6803      	ldr	r3, [r0, #0]
 800e1ea:	075b      	lsls	r3, r3, #29
 800e1ec:	d009      	beq.n	800e202 <uart_stm32_set_baudrate.part.0+0x1e>
 800e1ee:	4b07      	ldr	r3, [pc, #28]	; (800e20c <uart_stm32_set_baudrate.part.0+0x28>)
 800e1f0:	9305      	str	r3, [sp, #20]
 800e1f2:	2302      	movs	r3, #2
 800e1f4:	9304      	str	r3, [sp, #16]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	aa04      	add	r2, sp, #16
 800e1fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e1fe:	f7f9 ffa7 	bl	8008150 <z_impl_z_log_msg_static_create>
}
 800e202:	b007      	add	sp, #28
 800e204:	f85d fb04 	ldr.w	pc, [sp], #4
 800e208:	20000d70 	.word	0x20000d70
 800e20c:	0801e1e2 	.word	0x0801e1e2

0800e210 <uart_stm32_configure>:
{
 800e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800e214:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800e216:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800e218:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 800e21a:	2b01      	cmp	r3, #1
{
 800e21c:	460c      	mov	r4, r1
	switch (parity) {
 800e21e:	f000 8093 	beq.w	800e348 <uart_stm32_configure+0x138>
 800e222:	1e9a      	subs	r2, r3, #2
 800e224:	4251      	negs	r1, r2
 800e226:	4151      	adcs	r1, r2
 800e228:	0289      	lsls	r1, r1, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800e22a:	f894 c005 	ldrb.w	ip, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800e22e:	f894 8006 	ldrb.w	r8, [r4, #6]
 800e232:	f1bc 0f02 	cmp.w	ip, #2
 800e236:	bf96      	itet	ls
 800e238:	4a69      	ldrls	r2, [pc, #420]	; (800e3e0 <uart_stm32_configure+0x1d0>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800e23a:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
 800e23e:	f832 701c 	ldrhls.w	r7, [r2, ip, lsl #1]
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800e242:	79e2      	ldrb	r2, [r4, #7]
	switch (db) {
 800e244:	f1b8 0f02 	cmp.w	r8, #2
 800e248:	f000 8081 	beq.w	800e34e <uart_stm32_configure+0x13e>
 800e24c:	f1b8 0f04 	cmp.w	r8, #4
 800e250:	f000 80a6 	beq.w	800e3a0 <uart_stm32_configure+0x190>
		if (p == UART_CFG_PARITY_NONE) {
 800e254:	2b00      	cmp	r3, #0
 800e256:	f040 8087 	bne.w	800e368 <uart_stm32_configure+0x158>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800e25a:	2a01      	cmp	r2, #1
 800e25c:	f02c 0c02 	bic.w	ip, ip, #2
 800e260:	f040 80af 	bne.w	800e3c2 <uart_stm32_configure+0x1b2>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800e264:	f1bc 0f00 	cmp.w	ip, #0
 800e268:	f000 809a 	beq.w	800e3a0 <uart_stm32_configure+0x190>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800e26c:	f1b8 0f01 	cmp.w	r8, #1
 800e270:	f240 8096 	bls.w	800e3a0 <uart_stm32_configure+0x190>
		return LL_USART_HWCONTROL_RTS_CTS;
 800e274:	f44f 7e40 	mov.w	lr, #768	; 0x300
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800e278:	f8d5 c000 	ldr.w	ip, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800e27c:	b1ca      	cbz	r2, 800e2b2 <uart_stm32_configure+0xa2>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800e27e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800e3e4 <uart_stm32_configure+0x1d4>
 800e282:	45c4      	cmp	ip, r8
 800e284:	d013      	beq.n	800e2ae <uart_stm32_configure+0x9e>
 800e286:	f5a8 4874 	sub.w	r8, r8, #62464	; 0xf400
 800e28a:	45c4      	cmp	ip, r8
 800e28c:	d00f      	beq.n	800e2ae <uart_stm32_configure+0x9e>
 800e28e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800e292:	45c4      	cmp	ip, r8
 800e294:	d00b      	beq.n	800e2ae <uart_stm32_configure+0x9e>
 800e296:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800e29a:	45c4      	cmp	ip, r8
 800e29c:	d007      	beq.n	800e2ae <uart_stm32_configure+0x9e>
 800e29e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800e2a2:	45c4      	cmp	ip, r8
 800e2a4:	d003      	beq.n	800e2ae <uart_stm32_configure+0x9e>
 800e2a6:	f508 5840 	add.w	r8, r8, #12288	; 0x3000
 800e2aa:	45c4      	cmp	ip, r8
 800e2ac:	d178      	bne.n	800e3a0 <uart_stm32_configure+0x190>
 800e2ae:	2a01      	cmp	r2, #1
 800e2b0:	d176      	bne.n	800e3a0 <uart_stm32_configure+0x190>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800e2b2:	f8dc 2000 	ldr.w	r2, [ip]
 800e2b6:	f022 0201 	bic.w	r2, r2, #1
 800e2ba:	f8cc 2000 	str.w	r2, [ip]
	return LL_USART_GetParity(config->usart);
 800e2be:	6842      	ldr	r2, [r0, #4]
 800e2c0:	f8d2 c000 	ldr.w	ip, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800e2c4:	f8dc 2000 	ldr.w	r2, [ip]
 800e2c8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 800e2cc:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800e2ce:	bf1f      	itttt	ne
 800e2d0:	f8dc 2000 	ldrne.w	r2, [ip]
 800e2d4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800e2d8:	430a      	orrne	r2, r1
 800e2da:	f8cc 2000 	strne.w	r2, [ip]
	return LL_USART_GetStopBitsLength(config->usart);
 800e2de:	6842      	ldr	r2, [r0, #4]
 800e2e0:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800e2e2:	684a      	ldr	r2, [r1, #4]
 800e2e4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800e2e8:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e2ea:	bf1f      	itttt	ne
 800e2ec:	684a      	ldrne	r2, [r1, #4]
 800e2ee:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 800e2f2:	433a      	orrne	r2, r7
 800e2f4:	604a      	strne	r2, [r1, #4]
	return LL_USART_GetDataWidth(config->usart);
 800e2f6:	6842      	ldr	r2, [r0, #4]
 800e2f8:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800e2fa:	680a      	ldr	r2, [r1, #0]
 800e2fc:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 800e300:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800e302:	bf1f      	itttt	ne
 800e304:	680a      	ldrne	r2, [r1, #0]
 800e306:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 800e30a:	4313      	orrne	r3, r2
 800e30c:	600b      	strne	r3, [r1, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 800e30e:	6843      	ldr	r3, [r0, #4]
 800e310:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800e312:	6893      	ldr	r3, [r2, #8]
 800e314:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800e318:	4573      	cmp	r3, lr
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e31a:	bf1f      	itttt	ne
 800e31c:	6893      	ldrne	r3, [r2, #8]
 800e31e:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 800e322:	ea43 030e 	orrne.w	r3, r3, lr
 800e326:	6093      	strne	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 800e328:	6821      	ldr	r1, [r4, #0]
 800e32a:	6833      	ldr	r3, [r6, #0]
 800e32c:	4299      	cmp	r1, r3
 800e32e:	d003      	beq.n	800e338 <uart_stm32_configure+0x128>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800e330:	f008 ffda 	bl	80172e8 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 800e338:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e33a:	6813      	ldr	r3, [r2, #0]
 800e33c:	f043 0301 	orr.w	r3, r3, #1
 800e340:	6013      	str	r3, [r2, #0]
	return 0;
 800e342:	2000      	movs	r0, #0
};
 800e344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 800e348:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e34c:	e76d      	b.n	800e22a <uart_stm32_configure+0x1a>
		if (p == UART_CFG_PARITY_NONE) {
 800e34e:	bb0b      	cbnz	r3, 800e394 <uart_stm32_configure+0x184>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800e350:	2a01      	cmp	r2, #1
 800e352:	f02c 0c02 	bic.w	ip, ip, #2
 800e356:	d12f      	bne.n	800e3b8 <uart_stm32_configure+0x1a8>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800e358:	f1bc 0f00 	cmp.w	ip, #0
 800e35c:	d020      	beq.n	800e3a0 <uart_stm32_configure+0x190>
		return LL_USART_HWCONTROL_RTS_CTS;
 800e35e:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 800e362:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e366:	e787      	b.n	800e278 <uart_stm32_configure+0x68>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800e368:	3b03      	subs	r3, #3
 800e36a:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e36c:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800e36e:	d10c      	bne.n	800e38a <uart_stm32_configure+0x17a>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e370:	2b01      	cmp	r3, #1
 800e372:	d915      	bls.n	800e3a0 <uart_stm32_configure+0x190>
		return LL_USART_HWCONTROL_RTS_CTS;
 800e374:	f44f 7e40 	mov.w	lr, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800e378:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 800e37c:	d010      	beq.n	800e3a0 <uart_stm32_configure+0x190>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800e37e:	f1b8 0f01 	cmp.w	r8, #1
 800e382:	d90d      	bls.n	800e3a0 <uart_stm32_configure+0x190>
 800e384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e388:	e776      	b.n	800e278 <uart_stm32_configure+0x68>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d908      	bls.n	800e3a0 <uart_stm32_configure+0x190>
	return LL_USART_HWCONTROL_NONE;
 800e38e:	f04f 0e00 	mov.w	lr, #0
 800e392:	e7f1      	b.n	800e378 <uart_stm32_configure+0x168>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800e394:	3b03      	subs	r3, #3
 800e396:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e398:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800e39a:	d004      	beq.n	800e3a6 <uart_stm32_configure+0x196>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d819      	bhi.n	800e3d4 <uart_stm32_configure+0x1c4>
		return -ENOTSUP;
 800e3a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800e3a4:	e7ce      	b.n	800e344 <uart_stm32_configure+0x134>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d9fa      	bls.n	800e3a0 <uart_stm32_configure+0x190>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800e3aa:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 800e3ae:	d0f7      	beq.n	800e3a0 <uart_stm32_configure+0x190>
		return LL_USART_HWCONTROL_RTS_CTS;
 800e3b0:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_8B;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e75f      	b.n	800e278 <uart_stm32_configure+0x68>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800e3b8:	f1bc 0f00 	cmp.w	ip, #0
 800e3bc:	d0f0      	beq.n	800e3a0 <uart_stm32_configure+0x190>
	return LL_USART_HWCONTROL_NONE;
 800e3be:	469e      	mov	lr, r3
 800e3c0:	e7cf      	b.n	800e362 <uart_stm32_configure+0x152>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800e3c2:	f1bc 0f00 	cmp.w	ip, #0
 800e3c6:	d0eb      	beq.n	800e3a0 <uart_stm32_configure+0x190>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800e3c8:	f1b8 0f01 	cmp.w	r8, #1
 800e3cc:	d9e8      	bls.n	800e3a0 <uart_stm32_configure+0x190>
	return LL_USART_HWCONTROL_NONE;
 800e3ce:	469e      	mov	lr, r3
			return LL_USART_DATAWIDTH_8B;
 800e3d0:	4673      	mov	r3, lr
 800e3d2:	e751      	b.n	800e278 <uart_stm32_configure+0x68>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800e3d4:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 800e3d8:	d0e2      	beq.n	800e3a0 <uart_stm32_configure+0x190>
	return LL_USART_HWCONTROL_NONE;
 800e3da:	f04f 0e00 	mov.w	lr, #0
 800e3de:	e7f7      	b.n	800e3d0 <uart_stm32_configure+0x1c0>
 800e3e0:	0801b5e6 	.word	0x0801b5e6
 800e3e4:	40013800 	.word	0x40013800

0800e3e8 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800e3e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3ec:	b087      	sub	sp, #28
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 800e3ee:	6906      	ldr	r6, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 800e3f0:	6844      	ldr	r4, [r0, #4]
{
 800e3f2:	4605      	mov	r5, r0
	data->clock = clk;
 800e3f4:	485f      	ldr	r0, [pc, #380]	; (800e574 <uart_stm32_init+0x18c>)
 800e3f6:	6070      	str	r0, [r6, #4]
{
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	f00b f90b 	bl	8019614 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 800e3fe:	4603      	mov	r3, r0
 800e400:	b9a0      	cbnz	r0, 800e42c <uart_stm32_init+0x44>
		LOG_ERR("clock control device not ready");
 800e402:	485d      	ldr	r0, [pc, #372]	; (800e578 <uart_stm32_init+0x190>)
 800e404:	6802      	ldr	r2, [r0, #0]
 800e406:	0755      	lsls	r5, r2, #29
 800e408:	d105      	bne.n	800e416 <uart_stm32_init+0x2e>
		return -ENODEV;
 800e40a:	f06f 0012 	mvn.w	r0, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800e40e:	371c      	adds	r7, #28
 800e410:	46bd      	mov	sp, r7
 800e412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("clock control device not ready");
 800e416:	4a59      	ldr	r2, [pc, #356]	; (800e57c <uart_stm32_init+0x194>)
 800e418:	617a      	str	r2, [r7, #20]
 800e41a:	2202      	movs	r2, #2
 800e41c:	613a      	str	r2, [r7, #16]
 800e41e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e422:	f107 0210 	add.w	r2, r7, #16
 800e426:	f7f9 fe93 	bl	8008150 <z_impl_z_log_msg_static_create>
 800e42a:	e7ee      	b.n	800e40a <uart_stm32_init+0x22>
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 800e42c:	6870      	ldr	r0, [r6, #4]
 800e42e:	6861      	ldr	r1, [r4, #4]
 800e430:	6883      	ldr	r3, [r0, #8]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4798      	blx	r3
	if (err != 0) {
 800e436:	4680      	mov	r8, r0
 800e438:	b188      	cbz	r0, 800e45e <uart_stm32_init+0x76>
		LOG_ERR("Could not enable (LP)UART clock");
 800e43a:	484f      	ldr	r0, [pc, #316]	; (800e578 <uart_stm32_init+0x190>)
 800e43c:	6803      	ldr	r3, [r0, #0]
 800e43e:	075c      	lsls	r4, r3, #29
 800e440:	d101      	bne.n	800e446 <uart_stm32_init+0x5e>
		return -ENODEV;
 800e442:	4640      	mov	r0, r8
 800e444:	e7e3      	b.n	800e40e <uart_stm32_init+0x26>
		LOG_ERR("Could not enable (LP)UART clock");
 800e446:	4b4e      	ldr	r3, [pc, #312]	; (800e580 <uart_stm32_init+0x198>)
 800e448:	617b      	str	r3, [r7, #20]
 800e44a:	2302      	movs	r3, #2
 800e44c:	613b      	str	r3, [r7, #16]
 800e44e:	2300      	movs	r3, #0
 800e450:	f107 0210 	add.w	r2, r7, #16
 800e454:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e458:	f7f9 fe7a 	bl	8008150 <z_impl_z_log_msg_static_create>
 800e45c:	e7f1      	b.n	800e442 <uart_stm32_init+0x5a>
	ret = pinctrl_lookup_state(config, id, &state);
 800e45e:	4601      	mov	r1, r0
 800e460:	463a      	mov	r2, r7
 800e462:	69a0      	ldr	r0, [r4, #24]
 800e464:	f009 f801 	bl	801746a <pinctrl_lookup_state>
	if (ret < 0) {
 800e468:	2800      	cmp	r0, #0
 800e46a:	dbd0      	blt.n	800e40e <uart_stm32_init+0x26>
	return pinctrl_apply_state_direct(config, state);
 800e46c:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800e46e:	4642      	mov	r2, r8
 800e470:	7919      	ldrb	r1, [r3, #4]
 800e472:	6818      	ldr	r0, [r3, #0]
 800e474:	f000 f988 	bl	800e788 <pinctrl_configure_pins>
	if (err < 0) {
 800e478:	2800      	cmp	r0, #0
 800e47a:	dbc8      	blt.n	800e40e <uart_stm32_init+0x26>
	LL_USART_Disable(config->usart);
 800e47c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800e47e:	6813      	ldr	r3, [r2, #0]
 800e480:	f023 0301 	bic.w	r3, r3, #1
 800e484:	6013      	str	r3, [r2, #0]
	LL_USART_SetTransferDirection(config->usart,
 800e486:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e488:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800e48c:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e490:	e842 3800 	strex	r8, r3, [r2]
 800e494:	f1b8 0f00 	cmp.w	r8, #0
 800e498:	d1f6      	bne.n	800e488 <uart_stm32_init+0xa0>
	if (config->parity == 2) {
 800e49a:	6923      	ldr	r3, [r4, #16]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d05f      	beq.n	800e560 <uart_stm32_init+0x178>
	} else if (config->parity == 1) {
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d062      	beq.n	800e56a <uart_stm32_init+0x182>
		if (config->parity != 0) {
 800e4a4:	b123      	cbz	r3, 800e4b0 <uart_stm32_init+0xc8>
			LOG_WRN("Invalid parity setting '%d'."
 800e4a6:	4834      	ldr	r0, [pc, #208]	; (800e578 <uart_stm32_init+0x190>)
 800e4a8:	6802      	ldr	r2, [r0, #0]
 800e4aa:	f012 0f06 	tst.w	r2, #6
 800e4ae:	d147      	bne.n	800e540 <uart_stm32_init+0x158>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800e4b0:	2300      	movs	r3, #0
	LL_USART_ConfigCharacter(config->usart,
 800e4b2:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800e4b4:	680a      	ldr	r2, [r1, #0]
 800e4b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e4ba:	ea43 0308 	orr.w	r3, r3, r8
 800e4be:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800e4c2:	431a      	orrs	r2, r3
 800e4c4:	600a      	str	r2, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e4c6:	684b      	ldr	r3, [r1, #4]
 800e4c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e4cc:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 800e4ce:	7b23      	ldrb	r3, [r4, #12]
 800e4d0:	b12b      	cbz	r3, 800e4de <uart_stm32_init+0xf6>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 800e4d2:	686b      	ldr	r3, [r5, #4]
 800e4d4:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e4d6:	6893      	ldr	r3, [r2, #8]
 800e4d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e4dc:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800e4de:	6831      	ldr	r1, [r6, #0]
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	f008 ff01 	bl	80172e8 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 800e4e6:	7d23      	ldrb	r3, [r4, #20]
 800e4e8:	b123      	cbz	r3, 800e4f4 <uart_stm32_init+0x10c>
		LL_USART_EnableHalfDuplex(config->usart);
 800e4ea:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800e4ec:	6893      	ldr	r3, [r2, #8]
 800e4ee:	f043 0308 	orr.w	r3, r3, #8
 800e4f2:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 800e4f4:	7d63      	ldrb	r3, [r4, #21]
 800e4f6:	b123      	cbz	r3, 800e502 <uart_stm32_init+0x11a>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 800e4f8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 800e4fa:	6853      	ldr	r3, [r2, #4]
 800e4fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e500:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 800e502:	7da3      	ldrb	r3, [r4, #22]
 800e504:	b123      	cbz	r3, 800e510 <uart_stm32_init+0x128>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 800e506:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 800e508:	6853      	ldr	r3, [r2, #4]
 800e50a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e50e:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 800e510:	7de3      	ldrb	r3, [r4, #23]
 800e512:	b123      	cbz	r3, 800e51e <uart_stm32_init+0x136>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 800e514:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 800e516:	6853      	ldr	r3, [r2, #4]
 800e518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e51c:	6053      	str	r3, [r2, #4]
	LL_USART_Enable(config->usart);
 800e51e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e520:	6813      	ldr	r3, [r2, #0]
 800e522:	f043 0301 	orr.w	r3, r3, #1
 800e526:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 800e528:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800e52a:	69da      	ldr	r2, [r3, #28]
 800e52c:	0291      	lsls	r1, r2, #10
 800e52e:	d5fc      	bpl.n	800e52a <uart_stm32_init+0x142>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800e530:	69da      	ldr	r2, [r3, #28]
 800e532:	0252      	lsls	r2, r2, #9
 800e534:	d5fc      	bpl.n	800e530 <uart_stm32_init+0x148>
	config->irq_config_func(dev);
 800e536:	4628      	mov	r0, r5
 800e538:	69e3      	ldr	r3, [r4, #28]
 800e53a:	4798      	blx	r3
	return 0;
 800e53c:	2000      	movs	r0, #0
 800e53e:	e766      	b.n	800e40e <uart_stm32_init+0x26>
			LOG_WRN("Invalid parity setting '%d'."
 800e540:	46e9      	mov	r9, sp
 800e542:	b088      	sub	sp, #32
 800e544:	466a      	mov	r2, sp
 800e546:	490f      	ldr	r1, [pc, #60]	; (800e584 <uart_stm32_init+0x19c>)
 800e548:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e54c:	2303      	movs	r3, #3
 800e54e:	f842 3f10 	str.w	r3, [r2, #16]!
 800e552:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800e556:	4643      	mov	r3, r8
 800e558:	f7f9 fdfa 	bl	8008150 <z_impl_z_log_msg_static_create>
 800e55c:	46cd      	mov	sp, r9
 800e55e:	e7a7      	b.n	800e4b0 <uart_stm32_init+0xc8>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800e560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800e564:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800e568:	e7a3      	b.n	800e4b2 <uart_stm32_init+0xca>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800e56a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800e56e:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 800e572:	e79e      	b.n	800e4b2 <uart_stm32_init+0xca>
 800e574:	08019e20 	.word	0x08019e20
 800e578:	20000d70 	.word	0x20000d70
 800e57c:	0801d2f8 	.word	0x0801d2f8
 800e580:	0801e210 	.word	0x0801e210
 800e584:	0801e230 	.word	0x0801e230

0800e588 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 800e588:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800e58a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e58e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800e590:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800e592:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800e594:	4b09      	ldr	r3, [pc, #36]	; (800e5bc <elapsed+0x34>)
 800e596:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800e59a:	4909      	ldr	r1, [pc, #36]	; (800e5c0 <elapsed+0x38>)
 800e59c:	d101      	bne.n	800e5a2 <elapsed+0x1a>
	    || (val1 < val2)) {
 800e59e:	4282      	cmp	r2, r0
 800e5a0:	d206      	bcs.n	800e5b0 <elapsed+0x28>
		overflow_cyc += last_load;
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	680c      	ldr	r4, [r1, #0]
 800e5a6:	4422      	add	r2, r4
 800e5a8:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800e5aa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e5ae:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	680a      	ldr	r2, [r1, #0]
 800e5b4:	4413      	add	r3, r2
}
 800e5b6:	1a18      	subs	r0, r3, r0
 800e5b8:	bd10      	pop	{r4, pc}
 800e5ba:	bf00      	nop
 800e5bc:	200021ac 	.word	0x200021ac
 800e5c0:	200021b8 	.word	0x200021b8

0800e5c4 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e5c4:	4b09      	ldr	r3, [pc, #36]	; (800e5ec <sys_clock_driver_init+0x28>)
 800e5c6:	2210      	movs	r2, #16
 800e5c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800e5cc:	4b08      	ldr	r3, [pc, #32]	; (800e5f0 <sys_clock_driver_init+0x2c>)
 800e5ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800e5d2:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800e5d4:	4b07      	ldr	r3, [pc, #28]	; (800e5f4 <sys_clock_driver_init+0x30>)
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800e5da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e5de:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800e5e0:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800e5e2:	691a      	ldr	r2, [r3, #16]
 800e5e4:	f042 0207 	orr.w	r2, r2, #7
 800e5e8:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800e5ea:	4770      	bx	lr
 800e5ec:	e000ed00 	.word	0xe000ed00
 800e5f0:	200021b8 	.word	0x200021b8
 800e5f4:	200021ac 	.word	0x200021ac

0800e5f8 <sys_clock_isr>:
{
 800e5f8:	b508      	push	{r3, lr}
	elapsed();
 800e5fa:	f7ff ffc5 	bl	800e588 <elapsed>
	cycle_count += overflow_cyc;
 800e5fe:	4b0c      	ldr	r3, [pc, #48]	; (800e630 <sys_clock_isr+0x38>)
 800e600:	4a0c      	ldr	r2, [pc, #48]	; (800e634 <sys_clock_isr+0x3c>)
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	6811      	ldr	r1, [r2, #0]
 800e606:	4408      	add	r0, r1
 800e608:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800e60a:	2200      	movs	r2, #0
 800e60c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800e60e:	4a0a      	ldr	r2, [pc, #40]	; (800e638 <sys_clock_isr+0x40>)
 800e610:	6813      	ldr	r3, [r2, #0]
 800e612:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800e616:	1ac0      	subs	r0, r0, r3
 800e618:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 800e61c:	fb01 3300 	mla	r3, r1, r0, r3
 800e620:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800e622:	f001 ffc5 	bl	80105b0 <sys_clock_announce>
}
 800e626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800e62a:	f7fc be69 	b.w	800b300 <z_arm_exc_exit>
 800e62e:	bf00      	nop
 800e630:	200021ac 	.word	0x200021ac
 800e634:	200021b4 	.word	0x200021b4
 800e638:	200021b0 	.word	0x200021b0

0800e63c <sys_clock_set_timeout>:
{
 800e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e640:	4e32      	ldr	r6, [pc, #200]	; (800e70c <sys_clock_set_timeout+0xd0>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800e642:	2900      	cmp	r1, #0
 800e644:	d053      	beq.n	800e6ee <sys_clock_set_timeout+0xb2>
 800e646:	1c42      	adds	r2, r0, #1
 800e648:	d10a      	bne.n	800e660 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800e64a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e64e:	6913      	ldr	r3, [r2, #16]
 800e650:	f023 0301 	bic.w	r3, r3, #1
 800e654:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800e656:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800e65a:	6033      	str	r3, [r6, #0]
}
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 800e660:	6834      	ldr	r4, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800e662:	2801      	cmp	r0, #1
 800e664:	dd49      	ble.n	800e6fa <sys_clock_set_timeout+0xbe>
 800e666:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 800e66a:	dc49      	bgt.n	800e700 <sys_clock_set_timeout+0xc4>
 800e66c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 800e670:	f04f 0310 	mov.w	r3, #16
 800e674:	f3ef 8511 	mrs	r5, BASEPRI
 800e678:	f383 8812 	msr	BASEPRI_MAX, r3
 800e67c:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800e680:	f7ff ff82 	bl	800e588 <elapsed>
	val1 = SysTick->VAL;
 800e684:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 800e688:	4921      	ldr	r1, [pc, #132]	; (800e710 <sys_clock_set_timeout+0xd4>)
	val1 = SysTick->VAL;
 800e68a:	699f      	ldr	r7, [r3, #24]
	cycle_count += pending;
 800e68c:	680b      	ldr	r3, [r1, #0]
 800e68e:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800e690:	4b20      	ldr	r3, [pc, #128]	; (800e714 <sys_clock_set_timeout+0xd8>)
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800e696:	4b20      	ldr	r3, [pc, #128]	; (800e718 <sys_clock_set_timeout+0xdc>)
 800e698:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800e69a:	1ac2      	subs	r2, r0, r3
 800e69c:	d433      	bmi.n	800e706 <sys_clock_set_timeout+0xca>
		delay = ticks * CYC_PER_TICK;
 800e69e:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 800e6a2:	fb0c 2208 	mla	r2, ip, r8, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800e6a6:	f502 52f9 	add.w	r2, r2, #7968	; 0x1f20
		delay -= unannounced;
 800e6aa:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800e6ac:	321f      	adds	r2, #31
 800e6ae:	fbb2 f2fc 	udiv	r2, r2, ip
		delay -= unannounced;
 800e6b2:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
 800e6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6ba:	d924      	bls.n	800e706 <sys_clock_set_timeout+0xca>
		if (delay > MAX_CYCLES) {
 800e6bc:	4a17      	ldr	r2, [pc, #92]	; (800e71c <sys_clock_set_timeout+0xe0>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	bf28      	it	cs
 800e6c2:	4613      	movcs	r3, r2
	val2 = SysTick->VAL;
 800e6c4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 800e6c8:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 800e6ca:	6996      	ldr	r6, [r2, #24]
	if (val1 < val2) {
 800e6cc:	42b7      	cmp	r7, r6
 800e6ce:	eba7 0706 	sub.w	r7, r7, r6
	SysTick->LOAD = last_load - 1;
 800e6d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		cycle_count += (val1 + (last_load_ - val2));
 800e6d6:	bf38      	it	cc
 800e6d8:	193f      	addcc	r7, r7, r4
	SysTick->LOAD = last_load - 1;
 800e6da:	6153      	str	r3, [r2, #20]
		cycle_count += (val1 - val2);
 800e6dc:	4438      	add	r0, r7
	SysTick->VAL = 0; /* resets timer to last_load */
 800e6de:	2300      	movs	r3, #0
 800e6e0:	6193      	str	r3, [r2, #24]
		cycle_count += (val1 - val2);
 800e6e2:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 800e6e4:	f385 8811 	msr	BASEPRI, r5
 800e6e8:	f3bf 8f6f 	isb	sy
 800e6ec:	e7b6      	b.n	800e65c <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800e6ee:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 800e6f0:	6834      	ldr	r4, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800e6f2:	d1b6      	bne.n	800e662 <sys_clock_set_timeout+0x26>
 800e6f4:	f44f 6003 	mov.w	r0, #2096	; 0x830
 800e6f8:	e7b8      	b.n	800e66c <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800e6fa:	f04f 0800 	mov.w	r8, #0
 800e6fe:	e7b7      	b.n	800e670 <sys_clock_set_timeout+0x34>
 800e700:	f44f 6803 	mov.w	r8, #2096	; 0x830
 800e704:	e7b4      	b.n	800e670 <sys_clock_set_timeout+0x34>
 800e706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e70a:	e7db      	b.n	800e6c4 <sys_clock_set_timeout+0x88>
 800e70c:	200021b8 	.word	0x200021b8
 800e710:	200021b4 	.word	0x200021b4
 800e714:	200021ac 	.word	0x200021ac
 800e718:	200021b0 	.word	0x200021b0
 800e71c:	00ffdc00 	.word	0x00ffdc00

0800e720 <sys_clock_elapsed>:
{
 800e720:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e722:	f04f 0310 	mov.w	r3, #16
 800e726:	f3ef 8411 	mrs	r4, BASEPRI
 800e72a:	f383 8812 	msr	BASEPRI_MAX, r3
 800e72e:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800e732:	f7ff ff29 	bl	800e588 <elapsed>
 800e736:	4b07      	ldr	r3, [pc, #28]	; (800e754 <sys_clock_elapsed+0x34>)
 800e738:	4a07      	ldr	r2, [pc, #28]	; (800e758 <sys_clock_elapsed+0x38>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6812      	ldr	r2, [r2, #0]
 800e73e:	1a9b      	subs	r3, r3, r2
 800e740:	4403      	add	r3, r0
	__asm__ volatile(
 800e742:	f384 8811 	msr	BASEPRI, r4
 800e746:	f3bf 8f6f 	isb	sy
}
 800e74a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800e74e:	fbb3 f0f0 	udiv	r0, r3, r0
 800e752:	bd10      	pop	{r4, pc}
 800e754:	200021b4 	.word	0x200021b4
 800e758:	200021b0 	.word	0x200021b0

0800e75c <sys_clock_cycle_get_32>:
{
 800e75c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e75e:	f04f 0310 	mov.w	r3, #16
 800e762:	f3ef 8411 	mrs	r4, BASEPRI
 800e766:	f383 8812 	msr	BASEPRI_MAX, r3
 800e76a:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800e76e:	f7ff ff0b 	bl	800e588 <elapsed>
 800e772:	4b04      	ldr	r3, [pc, #16]	; (800e784 <sys_clock_cycle_get_32+0x28>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4418      	add	r0, r3
	__asm__ volatile(
 800e778:	f384 8811 	msr	BASEPRI, r4
 800e77c:	f3bf 8f6f 	isb	sy
}
 800e780:	bd10      	pop	{r4, pc}
 800e782:	bf00      	nop
 800e784:	200021b4 	.word	0x200021b4

0800e788 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800e788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 800e78c:	4f20      	ldr	r7, [pc, #128]	; (800e810 <pinctrl_configure_pins+0x88>)
 800e78e:	4604      	mov	r4, r0
 800e790:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 800e794:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800e796:	42b4      	cmp	r4, r6
 800e798:	d101      	bne.n	800e79e <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800e79a:	2000      	movs	r0, #0
 800e79c:	e014      	b.n	800e7c8 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 800e79e:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800e7a0:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800e7a2:	f002 091f 	and.w	r9, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800e7a6:	d411      	bmi.n	800e7cc <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800e7a8:	6865      	ldr	r5, [r4, #4]
 800e7aa:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800e7ae:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800e7b2:	f3c2 2243 	ubfx	r2, r2, #9, #4
 800e7b6:	2a0a      	cmp	r2, #10
 800e7b8:	d827      	bhi.n	800e80a <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 800e7ba:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800e7be:	f1b8 0f00 	cmp.w	r8, #0
 800e7c2:	d111      	bne.n	800e7e8 <pinctrl_configure_pins+0x60>
		return -ENODEV;
 800e7c4:	f06f 0012 	mvn.w	r0, #18
}
 800e7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800e7cc:	f1b9 0f10 	cmp.w	r9, #16
 800e7d0:	d008      	beq.n	800e7e4 <pinctrl_configure_pins+0x5c>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 800e7d2:	f1b9 0f11 	cmp.w	r9, #17
 800e7d6:	d1ea      	bne.n	800e7ae <pinctrl_configure_pins+0x26>
			uint32_t gpio_out = pins[i].pincfg &
 800e7d8:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 800e7da:	052b      	lsls	r3, r5, #20
 800e7dc:	d5e7      	bpl.n	800e7ae <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 800e7de:	f045 0510 	orr.w	r5, r5, #16
 800e7e2:	e7e4      	b.n	800e7ae <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 800e7e4:	2530      	movs	r5, #48	; 0x30
 800e7e6:	e7e2      	b.n	800e7ae <pinctrl_configure_pins+0x26>
 800e7e8:	4640      	mov	r0, r8
 800e7ea:	f00a ff13 	bl	8019614 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0e8      	beq.n	800e7c4 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 800e7f2:	464b      	mov	r3, r9
 800e7f4:	462a      	mov	r2, r5
 800e7f6:	f00a 010f 	and.w	r1, sl, #15
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	f007 fec6 	bl	801658c <gpio_stm32_configure>
		if (ret < 0) {
 800e800:	2800      	cmp	r0, #0
 800e802:	f104 0408 	add.w	r4, r4, #8
 800e806:	dac6      	bge.n	800e796 <pinctrl_configure_pins+0xe>
 800e808:	e7de      	b.n	800e7c8 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800e80a:	f06f 0015 	mvn.w	r0, #21
 800e80e:	e7db      	b.n	800e7c8 <pinctrl_configure_pins+0x40>
 800e810:	0801b1d0 	.word	0x0801b1d0

0800e814 <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800e814:	2915      	cmp	r1, #21
 800e816:	d806      	bhi.n	800e826 <VL53L0X_SetDeviceMode+0x12>
 800e818:	4b04      	ldr	r3, [pc, #16]	; (800e82c <VL53L0X_SetDeviceMode+0x18>)
 800e81a:	40cb      	lsrs	r3, r1
 800e81c:	07db      	lsls	r3, r3, #31
 800e81e:	d502      	bpl.n	800e826 <VL53L0X_SetDeviceMode+0x12>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800e820:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e822:	2000      	movs	r0, #0
		break;
 800e824:	4770      	bx	lr
	switch (DeviceMode) {
 800e826:	f06f 0007 	mvn.w	r0, #7
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800e82a:	4770      	bx	lr
 800e82c:	0030000b 	.word	0x0030000b

0800e830 <VL53L0X_DataInit>:
{
 800e830:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800e832:	2200      	movs	r2, #0
{
 800e834:	4605      	mov	r5, r0
 800e836:	b093      	sub	sp, #76	; 0x4c
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800e838:	2188      	movs	r1, #136	; 0x88
 800e83a:	f008 fc5b 	bl	80170f4 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800e83e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e842:	f8a5 2152 	strh.w	r2, [r5, #338]	; 0x152
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800e846:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e84a:	f8a5 2154 	strh.w	r2, [r5, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800e84e:	4a51      	ldr	r2, [pc, #324]	; (800e994 <VL53L0X_DataInit+0x164>)
 800e850:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800e854:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800e856:	4a50      	ldr	r2, [pc, #320]	; (800e998 <VL53L0X_DataInit+0x168>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800e858:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800e85c:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800e860:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800e862:	a902      	add	r1, sp, #8
 800e864:	4628      	mov	r0, r5
 800e866:	f008 ff93 	bl	8017790 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 800e86a:	4604      	mov	r4, r0
 800e86c:	b970      	cbnz	r0, 800e88c <VL53L0X_DataInit+0x5c>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800e86e:	f8ad 0008 	strh.w	r0, [sp, #8]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800e872:	ae02      	add	r6, sp, #8
 800e874:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e876:	f105 0710 	add.w	r7, r5, #16
 800e87a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e87c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e87e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e880:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e882:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e884:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800e888:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800e88c:	4b43      	ldr	r3, [pc, #268]	; (800e99c <VL53L0X_DataInit+0x16c>)
 800e88e:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800e892:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800e896:	2601      	movs	r6, #1
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800e898:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800e89c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800e8a0:	f8a5 313c 	strh.w	r3, [r5, #316]	; 0x13c
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800e8a4:	4632      	mov	r2, r6
 800e8a6:	2180      	movs	r1, #128	; 0x80
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800e8a8:	f885 6150 	strb.w	r6, [r5, #336]	; 0x150
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f008 fc21 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e8b2:	4632      	mov	r2, r6
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800e8b4:	4607      	mov	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e8b6:	21ff      	movs	r1, #255	; 0xff
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f008 fc1b 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800e8be:	2200      	movs	r2, #0
 800e8c0:	4611      	mov	r1, r2
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e8c2:	4307      	orrs	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	f008 fc15 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e8ca:	433c      	orrs	r4, r7
 800e8cc:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800e8ce:	4304      	orrs	r4, r0
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800e8d0:	f10d 0207 	add.w	r2, sp, #7
 800e8d4:	2191      	movs	r1, #145	; 0x91
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f008 fc24 	bl	8017124 <VL53L0X_RdByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800e8dc:	b264      	sxtb	r4, r4
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800e8de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e8e2:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800e8e6:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	f008 fc01 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800e8f2:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e8f4:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	21ff      	movs	r1, #255	; 0xff
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f008 fbfa 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e900:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e902:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e904:	2200      	movs	r2, #0
 800e906:	2180      	movs	r1, #128	; 0x80
 800e908:	4628      	mov	r0, r5
 800e90a:	f008 fbf3 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e90e:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e910:	4320      	orrs	r0, r4
 800e912:	b240      	sxtb	r0, r0
		if (Status == VL53L0X_ERROR_NONE)
 800e914:	2800      	cmp	r0, #0
 800e916:	d03b      	beq.n	800e990 <VL53L0X_DataInit+0x160>
}
 800e918:	b013      	add	sp, #76	; 0x4c
 800e91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (Status == VL53L0X_ERROR_NONE)
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d1fb      	bne.n	800e918 <VL53L0X_DataInit+0xe8>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800e920:	b2a1      	uxth	r1, r4
 800e922:	2201      	movs	r2, #1
 800e924:	4628      	mov	r0, r5
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800e926:	3401      	adds	r4, #1
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800e928:	f008 fe79 	bl	801761e <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800e92c:	2c06      	cmp	r4, #6
 800e92e:	d1f5      	bne.n	800e91c <VL53L0X_DataInit+0xec>
	if (Status == VL53L0X_ERROR_NONE)
 800e930:	2800      	cmp	r0, #0
 800e932:	d1f1      	bne.n	800e918 <VL53L0X_DataInit+0xe8>
			break;

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800e934:	4604      	mov	r4, r0
 800e936:	8568      	strh	r0, [r5, #42]	; 0x2a
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800e938:	4602      	mov	r2, r0
 800e93a:	2104      	movs	r1, #4
 800e93c:	4628      	mov	r0, r5
 800e93e:	f008 fe6e 	bl	801761e <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800e942:	2800      	cmp	r0, #0
 800e944:	d1e8      	bne.n	800e918 <VL53L0X_DataInit+0xe8>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800e946:	4602      	mov	r2, r0
 800e948:	2105      	movs	r1, #5
 800e94a:	4628      	mov	r0, r5
 800e94c:	f008 fe67 	bl	801761e <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 800e950:	2800      	cmp	r0, #0
 800e952:	d1e1      	bne.n	800e918 <VL53L0X_DataInit+0xe8>
	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800e954:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800e958:	636b      	str	r3, [r5, #52]	; 0x34
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800e95a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e95e:	2101      	movs	r1, #1
 800e960:	4628      	mov	r0, r5
 800e962:	f008 fea5 	bl	80176b0 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800e966:	2800      	cmp	r0, #0
 800e968:	d1d6      	bne.n	800e918 <VL53L0X_DataInit+0xe8>
	if (Temp8 == 0) { /* disabled write only internal value */
 800e96a:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800e96e:	22ff      	movs	r2, #255	; 0xff
 800e970:	e9c5 300f 	strd	r3, r0, [r5, #60]	; 0x3c
 800e974:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800e978:	2101      	movs	r1, #1
 800e97a:	4628      	mov	r0, r5
 800e97c:	f008 fbba 	bl	80170f4 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800e980:	2301      	movs	r3, #1
 800e982:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 800e986:	2800      	cmp	r0, #0
 800e988:	d1c6      	bne.n	800e918 <VL53L0X_DataInit+0xe8>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800e98a:	f885 4115 	strb.w	r4, [r5, #277]	; 0x115
 800e98e:	e7c3      	b.n	800e918 <VL53L0X_DataInit+0xe8>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800e990:	4604      	mov	r4, r0
 800e992:	e7c5      	b.n	800e920 <VL53L0X_DataInit+0xf0>
 800e994:	00016b85 	.word	0x00016b85
 800e998:	000970a4 	.word	0x000970a4
 800e99c:	03840064 	.word	0x03840064

0800e9a0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800e9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9a2:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800e9a4:	210e      	movs	r1, #14
 800e9a6:	f10d 0206 	add.w	r2, sp, #6
{
 800e9aa:	461d      	mov	r5, r3
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800e9ac:	4c0b      	ldr	r4, [pc, #44]	; (800e9dc <VL53L0X_GetInterruptThresholds+0x3c>)
{
 800e9ae:	4606      	mov	r6, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800e9b0:	f7ff fae2 	bl	800df78 <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800e9b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e9b8:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 800e9bc:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800e9be:	b950      	cbnz	r0, 800e9d6 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800e9c0:	f10d 0206 	add.w	r2, sp, #6
 800e9c4:	210c      	movs	r1, #12
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f7ff fad6 	bl	800df78 <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800e9cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e9d0:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 800e9d4:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800e9d6:	b003      	add	sp, #12
 800e9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	1ffe0000 	.word	0x1ffe0000

0800e9e0 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 800e9e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800e9e2:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 800e9e6:	3b01      	subs	r3, #1
 800e9e8:	2b02      	cmp	r3, #2
{
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 800e9ee:	d834      	bhi.n	800ea5a <VL53L0X_CheckAndLoadInterruptSettings+0x7a>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800e9f0:	ab01      	add	r3, sp, #4
 800e9f2:	466a      	mov	r2, sp
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	f7ff ffd3 	bl	800e9a0 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 800e9fa:	9b00      	ldr	r3, [sp, #0]
 800e9fc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800ea00:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 800ea02:	d803      	bhi.n	800ea0c <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 800ea04:	9b01      	ldr	r3, [sp, #4]
 800ea06:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800ea0a:	d923      	bls.n	800ea54 <VL53L0X_CheckAndLoadInterruptSettings+0x74>
			(ThresholdHigh > 255*65536)) &&
 800ea0c:	bb15      	cbnz	r5, 800ea54 <VL53L0X_CheckAndLoadInterruptSettings+0x74>
			if (StartNotStopFlag != 0) {
 800ea0e:	b134      	cbz	r4, 800ea1e <VL53L0X_CheckAndLoadInterruptSettings+0x3e>
				Status = VL53L0X_load_tuning_settings(Dev,
 800ea10:	4913      	ldr	r1, [pc, #76]	; (800ea60 <VL53L0X_CheckAndLoadInterruptSettings+0x80>)
 800ea12:	4630      	mov	r0, r6
}
 800ea14:	b002      	add	sp, #8
 800ea16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				Status = VL53L0X_load_tuning_settings(Dev,
 800ea1a:	f00a bad1 	b.w	8018fc0 <VL53L0X_load_tuning_settings>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800ea1e:	2204      	movs	r2, #4
 800ea20:	21ff      	movs	r1, #255	; 0xff
 800ea22:	4630      	mov	r0, r6
 800ea24:	f008 fb66 	bl	80170f4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800ea28:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800ea2a:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800ea2c:	2170      	movs	r1, #112	; 0x70
 800ea2e:	4630      	mov	r0, r6
 800ea30:	f008 fb60 	bl	80170f4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ea34:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800ea36:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ea38:	21ff      	movs	r1, #255	; 0xff
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f008 fb5a 	bl	80170f4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800ea40:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ea42:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ea44:	462a      	mov	r2, r5
 800ea46:	2180      	movs	r1, #128	; 0x80
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f008 fb53 	bl	80170f4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ea4e:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ea50:	4304      	orrs	r4, r0
 800ea52:	b265      	sxtb	r5, r4
}
 800ea54:	4628      	mov	r0, r5
 800ea56:	b002      	add	sp, #8
 800ea58:	bd70      	pop	{r4, r5, r6, pc}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea5a:	2500      	movs	r5, #0
 800ea5c:	e7fa      	b.n	800ea54 <VL53L0X_CheckAndLoadInterruptSettings+0x74>
 800ea5e:	bf00      	nop
 800ea60:	20000a06 	.word	0x20000a06

0800ea64 <VL53L0X_StaticInit>:
{
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	b094      	sub	sp, #80	; 0x50
 800ea68:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800ea6a:	2240      	movs	r2, #64	; 0x40
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	a804      	add	r0, sp, #16
 800ea70:	f002 fc12 	bl	8011298 <memset>
	uint16_t tempword = 0;
 800ea74:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 800ea76:	2101      	movs	r1, #1
 800ea78:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 800ea7a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t tempbyte = 0;
 800ea7e:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t isApertureSpads = 0;
 800ea82:	f88d 3004 	strb.w	r3, [sp, #4]
	uint32_t refSpadCount = 0;
 800ea86:	9302      	str	r3, [sp, #8]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 800ea88:	f009 fc79 	bl	801837e <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ea8c:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ea90:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 800ea94:	2a01      	cmp	r2, #1
 800ea96:	d804      	bhi.n	800eaa2 <VL53L0X_StaticInit+0x3e>
 800ea98:	f040 80ad 	bne.w	800ebf6 <VL53L0X_StaticInit+0x192>
		((ApertureSpads == 1) && (count > 32)) ||
 800ea9c:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 800ea9e:	f240 80ac 	bls.w	800ebfa <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800eaa2:	aa01      	add	r2, sp, #4
 800eaa4:	a902      	add	r1, sp, #8
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f009 faea 	bl	8018080 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800eaac:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f040 809e 	bne.w	800ebf0 <VL53L0X_StaticInit+0x18c>
		if (UseInternalTuningSettings == 0)
 800eab4:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f040 80a2 	bne.w	800ec02 <VL53L0X_StaticInit+0x19e>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800eabe:	f8d5 114c 	ldr.w	r1, [r5, #332]	; 0x14c
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800eac2:	4628      	mov	r0, r5
 800eac4:	f00a fa7c 	bl	8018fc0 <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 800eac8:	4604      	mov	r4, r0
 800eaca:	2800      	cmp	r0, #0
 800eacc:	f040 8090 	bne.w	800ebf0 <VL53L0X_StaticInit+0x18c>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800ead0:	4603      	mov	r3, r0
 800ead2:	4601      	mov	r1, r0
 800ead4:	2204      	movs	r2, #4
 800ead6:	4628      	mov	r0, r5
 800ead8:	f008 ffdd 	bl	8017a96 <VL53L0X_SetGpioConfig.part.0>
	if (Status == VL53L0X_ERROR_NONE) {
 800eadc:	4604      	mov	r4, r0
 800eade:	2800      	cmp	r0, #0
 800eae0:	f040 8086 	bne.w	800ebf0 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800eae4:	2201      	movs	r2, #1
 800eae6:	21ff      	movs	r1, #255	; 0xff
 800eae8:	4628      	mov	r0, r5
 800eaea:	f008 fb03 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800eaee:	f10d 0206 	add.w	r2, sp, #6
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800eaf2:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800eaf4:	2184      	movs	r1, #132	; 0x84
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7ff fa3e 	bl	800df78 <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800eafc:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800eafe:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800eb00:	21ff      	movs	r1, #255	; 0xff
 800eb02:	4628      	mov	r0, r5
 800eb04:	f008 faf6 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800eb08:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800eb0a:	4306      	orrs	r6, r0
 800eb0c:	b274      	sxtb	r4, r6
	if (Status == VL53L0X_ERROR_NONE) {
 800eb0e:	2c00      	cmp	r4, #0
 800eb10:	d16e      	bne.n	800ebf0 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800eb12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eb16:	011b      	lsls	r3, r3, #4
 800eb18:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800eb1c:	a904      	add	r1, sp, #16
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f008 fe36 	bl	8017790 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 800eb24:	4604      	mov	r4, r0
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d162      	bne.n	800ebf0 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800eb2a:	f10d 0103 	add.w	r1, sp, #3
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f008 fcb3 	bl	801749a <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 800eb34:	4604      	mov	r4, r0
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d15a      	bne.n	800ebf0 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800eb3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eb3e:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800eb42:	ac04      	add	r4, sp, #16
 800eb44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb46:	f105 0610 	add.w	r6, r5, #16
 800eb4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eb4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eb50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eb54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800eb58:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 800eb5c:	f10d 0203 	add.w	r2, sp, #3
 800eb60:	2101      	movs	r1, #1
 800eb62:	4628      	mov	r0, r5
 800eb64:	f008 fade 	bl	8017124 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 800eb68:	4604      	mov	r4, r0
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d140      	bne.n	800ebf0 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800eb6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eb72:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800eb76:	4602      	mov	r2, r0
 800eb78:	4601      	mov	r1, r0
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f008 fc9f 	bl	80174be <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800eb80:	4604      	mov	r4, r0
 800eb82:	bba8      	cbnz	r0, 800ebf0 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800eb84:	4602      	mov	r2, r0
 800eb86:	2102      	movs	r1, #2
 800eb88:	4628      	mov	r0, r5
 800eb8a:	f008 fc98 	bl	80174be <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800eb8e:	4604      	mov	r4, r0
 800eb90:	bb70      	cbnz	r0, 800ebf0 <VL53L0X_StaticInit+0x18c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800eb92:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800eb94:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800eb96:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800eb9a:	f10d 0205 	add.w	r2, sp, #5
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f00a f927 	bl	8018df2 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 800eba4:	4604      	mov	r4, r0
 800eba6:	bb18      	cbnz	r0, 800ebf0 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800eba8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ebac:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800ebb0:	f10d 0205 	add.w	r2, sp, #5
 800ebb4:	2101      	movs	r1, #1
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f00a f91b 	bl	8018df2 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 800ebbc:	4604      	mov	r4, r0
 800ebbe:	b9b8      	cbnz	r0, 800ebf0 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ebc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ebc4:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = get_sequence_step_timeout(
 800ebc8:	aa03      	add	r2, sp, #12
 800ebca:	2103      	movs	r1, #3
 800ebcc:	4628      	mov	r0, r5
 800ebce:	f009 fe8b 	bl	80188e8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	b960      	cbnz	r0, 800ebf0 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ebd6:	9b03      	ldr	r3, [sp, #12]
 800ebd8:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = get_sequence_step_timeout(
 800ebdc:	aa03      	add	r2, sp, #12
 800ebde:	2104      	movs	r1, #4
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	f009 fe81 	bl	80188e8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	b910      	cbnz	r0, 800ebf0 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ebea:	9b03      	ldr	r3, [sp, #12]
 800ebec:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	b014      	add	sp, #80	; 0x50
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 800ebf6:	290c      	cmp	r1, #12
 800ebf8:	e751      	b.n	800ea9e <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f009 f8d2 	bl	8017da4 <VL53L0X_set_reference_spads>
 800ec00:	e754      	b.n	800eaac <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 800ec02:	4901      	ldr	r1, [pc, #4]	; (800ec08 <VL53L0X_StaticInit+0x1a4>)
 800ec04:	e75d      	b.n	800eac2 <VL53L0X_StaticInit+0x5e>
 800ec06:	bf00      	nop
 800ec08:	20000bbc 	.word	0x20000bbc

0800ec0c <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800ec0c:	4b03      	ldr	r3, [pc, #12]	; (800ec1c <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 800ec0e:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800ec10:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 800ec14:	3800      	subs	r0, #0
 800ec16:	bf18      	it	ne
 800ec18:	2001      	movne	r0, #1
 800ec1a:	4770      	bx	lr
 800ec1c:	20000868 	.word	0x20000868

0800ec20 <VL53L0X_calc_timeout_mclks>:
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;

	macro_period_vclks = 2304;
	macro_period_ps = (uint32_t)(macro_period_vclks
 800ec20:	4b08      	ldr	r3, [pc, #32]	; (800ec44 <VL53L0X_calc_timeout_mclks+0x24>)
 800ec22:	435a      	muls	r2, r3

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800ec24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ec28:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ec2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ec30:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ec34:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ec38:	fb03 0001 	mla	r0, r3, r1, r0

    return timeout_period_mclks;
}
 800ec3c:	fbb0 f0f2 	udiv	r0, r0, r2
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	003a2f00 	.word	0x003a2f00

0800ec48 <VL53L0X_calc_timeout_us>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 800ec48:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <VL53L0X_calc_timeout_us+0x1c>)
 800ec4a:	435a      	muls	r2, r3
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ec4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ec50:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 800ec54:	fbb2 f2f0 	udiv	r2, r2, r0

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800ec58:	434a      	muls	r2, r1
 800ec5a:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4

	return actual_timeout_period_us;
}
 800ec5e:	fbb2 f0f0 	udiv	r0, r2, r0
 800ec62:	4770      	bx	lr
 800ec64:	003a2f00 	.word	0x003a2f00

0800ec68 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 800ec6a:	f8b0 5154 	ldrh.w	r5, [r0, #340]	; 0x154

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ec6e:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800ec72:	4368      	muls	r0, r5

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ec74:	3080      	adds	r0, #128	; 0x80
 800ec76:	0a00      	lsrs	r0, r0, #8
{
 800ec78:	460e      	mov	r6, r1
	SignalAt0mm *= dmaxCalRange_mm;
 800ec7a:	4345      	muls	r5, r0
{
 800ec7c:	e9dd 1707 	ldrd	r1, r7, [sp, #28]

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 800ec80:	4614      	mov	r4, r2
 800ec82:	b152      	cbz	r2, 800ec9a <VL53L0X_calc_dmax+0x32>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ec84:	02b6      	lsls	r6, r6, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ec86:	eb06 0252 	add.w	r2, r6, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ec8a:	fbb2 f2f4 	udiv	r2, r2, r4

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ec8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ec92:	4352      	muls	r2, r2

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ec94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800ec98:	0c14      	lsrs	r4, r2, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ec9a:	9a06      	ldr	r2, [sp, #24]
 800ec9c:	4353      	muls	r3, r2
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ec9e:	f501 4200 	add.w	r2, r1, #32768	; 0x8000
 800eca2:	0c12      	lsrs	r2, r2, #16
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800eca4:	2006      	movs	r0, #6
 800eca6:	3203      	adds	r2, #3
 800eca8:	fbb2 f2f0 	udiv	r2, r2, r0
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ecac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 800ecb0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ecb4:	bf38      	it	cc
 800ecb6:	3103      	addcc	r1, #3
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ecb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ecbc:	bf3e      	ittt	cc
 800ecbe:	fbb1 f1f0 	udivcc	r1, r1, r0
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ecc2:	ebc1 01c1 	rsbcc	r1, r1, r1, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ecc6:	f501 4100 	addcc.w	r1, r1, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ecca:	ea4f 4313 	mov.w	r3, r3, lsr #16
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ecce:	bf34      	ite	cc
 800ecd0:	0c09      	lsrcc	r1, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 800ecd2:	491b      	ldrcs	r1, [pc, #108]	; (800ed40 <VL53L0X_calc_dmax+0xd8>)
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ecd4:	fb03 f303 	mul.w	r3, r3, r3

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ecd8:	bf38      	it	cc
 800ecda:	4349      	mulcc	r1, r1

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ecdc:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 800ece0:	440b      	add	r3, r1
	minSignalNeeded /= peakVcselDuration_us;
 800ece2:	fbb3 f3f7 	udiv	r3, r3, r7

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ece6:	039b      	lsls	r3, r3, #14

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
	minSignalNeeded /= minSignalNeeded_p4;
 800ece8:	22fe      	movs	r2, #254	; 0xfe
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800ecea:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ecee:	337f      	adds	r3, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 800ecf0:	fbb3 f3f2 	udiv	r3, r3, r2
	minSignalNeeded *= minSignalNeeded_p1;
 800ecf4:	435c      	muls	r4, r3
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ecf6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800ecfa:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ecfe:	0980      	lsrs	r0, r0, #6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ed00:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 4;
 800ed04:	0124      	lsls	r4, r4, #4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ed06:	f009 fb03 	bl	8018310 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ed0a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800ed0e:	42bc      	cmp	r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ed10:	bf28      	it	cs
 800ed12:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ed16:	4606      	mov	r6, r0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ed18:	bf29      	itett	cs
 800ed1a:	fbb4 f3f3 	udivcs	r3, r4, r3
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800ed1e:	2000      	movcc	r0, #0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ed20:	195b      	addcs	r3, r3, r5
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ed22:	fbb4 f4f7 	udivcs	r4, r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ed26:	bf28      	it	cs
 800ed28:	fbb3 f0f4 	udivcs	r0, r3, r4

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ed2c:	f009 faf0 	bl	8018310 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
 800ed30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed32:	4286      	cmp	r6, r0
 800ed34:	bf94      	ite	ls
 800ed36:	601e      	strls	r6, [r3, #0]
 800ed38:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	fff00000 	.word	0xfff00000

0800ed44 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ed44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed48:	b091      	sub	sp, #68	; 0x44
 800ed4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800ed4e:	690b      	ldr	r3, [r1, #16]
 800ed50:	930a      	str	r3, [sp, #40]	; 0x28
{
 800ed52:	4605      	mov	r5, r0

	correctedSignalRate_mcps =
 800ed54:	68cb      	ldr	r3, [r1, #12]
 800ed56:	930c      	str	r3, [sp, #48]	; 0x30
{
 800ed58:	460e      	mov	r6, r1
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800ed5a:	aa0f      	add	r2, sp, #60	; 0x3c
 800ed5c:	f00a f992 	bl	8019084 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800ed60:	aa0e      	add	r2, sp, #56	; 0x38
 800ed62:	4631      	mov	r1, r6
 800ed64:	4628      	mov	r0, r5
 800ed66:	f00a f977 	bl	8019058 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 800ed6a:	bb50      	cbnz	r0, 800edc2 <VL53L0X_calc_sigma_estimate+0x7e>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800ed6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ed6e:	f895 a0e0 	ldrb.w	sl, [r5, #224]	; 0xe0
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ed72:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
 800ed76:	9306      	str	r3, [sp, #24]
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800ed78:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800ed7c:	fb07 f104 	mul.w	r1, r7, r4
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800ed80:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800ed84:	9104      	str	r1, [sp, #16]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800ed86:	3480      	adds	r4, #128	; 0x80
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800ed88:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ed8a:	910b      	str	r1, [sp, #44]	; 0x2c

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800ed8c:	f024 01ff 	bic.w	r1, r4, #255	; 0xff
 800ed90:	9105      	str	r1, [sp, #20]
 800ed92:	910f      	str	r1, [sp, #60]	; 0x3c
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 800ed94:	9904      	ldr	r1, [sp, #16]
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ed96:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 800ed9a:	9307      	str	r3, [sp, #28]
		vcselWidth = 3;
 800ed9c:	f1ba 0f08 	cmp.w	sl, #8
 800eda0:	bf0c      	ite	eq
 800eda2:	2302      	moveq	r3, #2
 800eda4:	2303      	movne	r3, #3
	if (peakSignalRate_kcps == 0) {
 800eda6:	ea5f 4b11 	movs.w	fp, r1, lsr #16
		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800edaa:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
	if (peakSignalRate_kcps == 0) {
 800edae:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800ef64 <VL53L0X_calc_sigma_estimate+0x220>
 800edb2:	d109      	bne.n	800edc8 <VL53L0X_calc_sigma_estimate+0x84>
		*pSigmaEstimate = cSigmaEstMax;
 800edb4:	9b08      	ldr	r3, [sp, #32]
 800edb6:	f8c3 8000 	str.w	r8, [r3]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 800edba:	9b09      	ldr	r3, [sp, #36]	; 0x24
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800edbc:	f8c5 8140 	str.w	r8, [r5, #320]	; 0x140
		*pDmax_mm = 0;
 800edc0:	6018      	str	r0, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800edc2:	b011      	add	sp, #68	; 0x44
 800edc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800edc8:	9907      	ldr	r1, [sp, #28]
 800edca:	930d      	str	r3, [sp, #52]	; 0x34
 800edcc:	4628      	mov	r0, r5
 800edce:	f7ff ff27 	bl	800ec20 <VL53L0X_calc_timeout_mclks>
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800edd2:	9906      	ldr	r1, [sp, #24]
 800edd4:	4652      	mov	r2, sl
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800edd6:	4681      	mov	r9, r0
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800edd8:	4628      	mov	r0, r5
 800edda:	f7ff ff21 	bl	800ec20 <VL53L0X_calc_timeout_mclks>
		peakVcselDuration_us = vcselWidth * 2048 *
 800edde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ede0:	4a5c      	ldr	r2, [pc, #368]	; (800ef54 <VL53L0X_calc_sigma_estimate+0x210>)
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ede2:	495d      	ldr	r1, [pc, #372]	; (800ef58 <VL53L0X_calc_sigma_estimate+0x214>)
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800ede4:	4481      	add	r9, r0
		peakVcselDuration_us = vcselWidth * 2048 *
 800ede6:	fb03 f909 	mul.w	r9, r3, r9
 800edea:	ea4f 29c9 	mov.w	r9, r9, lsl #11
		peakVcselDuration_us *= cPllPeriod_ps;
 800edee:	f240 6377 	movw	r3, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800edf2:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800edf6:	0a24      	lsrs	r4, r4, #8
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800edf8:	fbb9 f9f7 	udiv	r9, r9, r7
		peakVcselDuration_us *= cPllPeriod_ps;
 800edfc:	fb03 f909 	mul.w	r9, r3, r9
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ee00:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
 800ee04:	fbb9 f9f7 	udiv	r9, r9, r7
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800ee08:	fb09 f404 	mul.w	r4, r9, r4
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ee0c:	f104 0380 	add.w	r3, r4, #128	; 0x80
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800ee10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ee12:	437c      	muls	r4, r7
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ee14:	0a1b      	lsrs	r3, r3, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ee16:	4014      	ands	r4, r2
 800ee18:	fbb4 f4fb 	udiv	r4, r4, fp
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ee1c:	428c      	cmp	r4, r1
 800ee1e:	bf28      	it	cs
 800ee20:	460c      	movcs	r4, r1
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	bf38      	it	cc
 800ee26:	2301      	movcc	r3, #1
 800ee28:	200c      	movs	r0, #12
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ee2a:	f44f 7116 	mov.w	r1, #600	; 0x258
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ee2e:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ee30:	434c      	muls	r4, r1
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ee32:	f009 fa6d 	bl	8018310 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ee36:	9b04      	ldr	r3, [sp, #16]
 800ee38:	4a46      	ldr	r2, [pc, #280]	; (800ef54 <VL53L0X_calc_sigma_estimate+0x210>)
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ee3a:	f8b6 b008 	ldrh.w	fp, [r6, #8]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ee3e:	4013      	ands	r3, r2
 800ee40:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800ee44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee46:	437b      	muls	r3, r7
	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800ee48:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800ee4c:	bf28      	it	cs
 800ee4e:	f44f 1348 	movcs.w	r3, #3276800	; 0x320000
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ee52:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ee56:	ea4f 0a40 	mov.w	sl, r0, lsl #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ee5a:	fbb3 f3f7 	udiv	r3, r3, r7
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ee5e:	fbb2 f0f7 	udiv	r0, r2, r7
		diff1_mcps <<= 8;
 800ee62:	021b      	lsls	r3, r3, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ee64:	fbb3 f0f0 	udiv	r0, r3, r0
 800ee68:	f001 fe96 	bl	8010b98 <abs>
		if(pRangingMeasurementData->RangeStatus != 0){
 800ee6c:	7e33      	ldrb	r3, [r6, #24]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d16c      	bne.n	800ef4c <VL53L0X_calc_sigma_estimate+0x208>
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ee72:	4b3a      	ldr	r3, [pc, #232]	; (800ef5c <VL53L0X_calc_sigma_estimate+0x218>)
		xTalkCorrection <<= 8;
 800ee74:	0206      	lsls	r6, r0, #8
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ee76:	f5c6 3680 	rsb	r6, r6, #65536	; 0x10000
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ee7a:	fb03 fb0b 	mul.w	fp, r3, fp
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ee7e:	f241 235c 	movw	r3, #4700	; 0x125c
 800ee82:	fbbb fbf3 	udiv	fp, fp, r3
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ee86:	fb0b f606 	mul.w	r6, fp, r6
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ee8a:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
 800ee8e:	0c36      	lsrs	r6, r6, #16
			pwMult += (1 << 16);
 800ee90:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
			pwMult >>= 1;
 800ee94:	0876      	lsrs	r6, r6, #1
			pwMult = pwMult * pwMult;
 800ee96:	4376      	muls	r6, r6
			pwMult >>= 14;
 800ee98:	0bb6      	lsrs	r6, r6, #14
		sqr1 = pwMult * sigmaEstimateP1;
 800ee9a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800ee9e:	4370      	muls	r0, r6
		sqr2 = (sqr2 + 0x8000) >> 16;
 800eea0:	f504 4300 	add.w	r3, r4, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 800eea4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 800eea8:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 800eeaa:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 800eeac:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800eeae:	fb00 3000 	mla	r0, r0, r0, r3
 800eeb2:	f009 fa2d 	bl	8018310 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 800eeb6:	0403      	lsls	r3, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800eeb8:	2264      	movs	r2, #100	; 0x64
 800eeba:	3332      	adds	r3, #50	; 0x32
		sigmaEstRtn		 += 5000;
 800eebc:	f241 3788 	movw	r7, #5000	; 0x1388
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800eec0:	fbb3 f3f2 	udiv	r3, r3, r2
		sigmaEstRtn		 += 5000;
 800eec4:	f640 32b5 	movw	r2, #2997	; 0xbb5
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800eec8:	fbb3 f3fa 	udiv	r3, r3, sl
		sigmaEstRtn		 += 5000;
 800eecc:	fb02 7703 	mla	r7, r2, r3, r7
		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800eed0:	4b23      	ldr	r3, [pc, #140]	; (800ef60 <VL53L0X_calc_sigma_estimate+0x21c>)
 800eed2:	429f      	cmp	r7, r3
		sigmaEstRtn		 /= 10000;
 800eed4:	bf9c      	itt	ls
 800eed6:	f242 7310 	movwls	r3, #10000	; 0x2710
 800eeda:	fbb7 f7f3 	udivls	r7, r7, r3
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800eede:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eee2:	4413      	add	r3, r2
 800eee4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800eee8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
				finalRangeIntegrationTimeMilliSecs/2)/
 800eeec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
		finalRangeIntegrationTimeMilliSecs =
 800eef0:	fbb3 f0fa 	udiv	r0, r3, sl
				finalRangeIntegrationTimeMilliSecs/2)/
 800eef4:	fbb3 f2f2 	udiv	r2, r3, r2
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800eef8:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800eefc:	fbb2 f0f0 	udiv	r0, r2, r0
			sigmaEstRtn = cSigmaEstRtnMax;
 800ef00:	bf88      	it	hi
 800ef02:	f44f 4770 	movhi.w	r7, #61440	; 0xf000
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800ef06:	f009 fa03 	bl	8018310 <VL53L0X_isqrt>
		sigmaEstRef <<= 8;
 800ef0a:	0200      	lsls	r0, r0, #8
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ef0c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 800ef10:	fbb0 f0fa 	udiv	r0, r0, sl
		sqr2 = sigmaEstRef * sigmaEstRef;
 800ef14:	4340      	muls	r0, r0
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800ef16:	fb07 0007 	mla	r0, r7, r7, r0
 800ef1a:	f009 f9f9 	bl	8018310 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 800ef1e:	fb0a f000 	mul.w	r0, sl, r0
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800ef22:	9b08      	ldr	r3, [sp, #32]
		Status = VL53L0X_calc_dmax(
 800ef24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef26:	9905      	ldr	r1, [sp, #20]
		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800ef28:	4540      	cmp	r0, r8
 800ef2a:	bf28      	it	cs
 800ef2c:	4640      	movcs	r0, r8
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800ef2e:	6018      	str	r0, [r3, #0]
		Status = VL53L0X_calc_dmax(
 800ef30:	9b09      	ldr	r3, [sp, #36]	; 0x24
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800ef32:	f8c5 0140 	str.w	r0, [r5, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800ef36:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800ef3a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	9401      	str	r4, [sp, #4]
 800ef42:	4633      	mov	r3, r6
 800ef44:	4628      	mov	r0, r5
 800ef46:	f7ff fe8f 	bl	800ec68 <VL53L0X_calc_dmax>
 800ef4a:	e73a      	b.n	800edc2 <VL53L0X_calc_sigma_estimate+0x7e>
			pwMult = 1 << 16;
 800ef4c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800ef50:	e7a3      	b.n	800ee9a <VL53L0X_calc_sigma_estimate+0x156>
 800ef52:	bf00      	nop
 800ef54:	ffff0000 	.word	0xffff0000
 800ef58:	00666666 	.word	0x00666666
 800ef5c:	0006999a 	.word	0x0006999a
 800ef60:	249f270f 	.word	0x249f270f
 800ef64:	028f87ae 	.word	0x028f87ae

0800ef68 <VL53L0X_get_device_info>:
}


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800ef68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef6a:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800ef6c:	460a      	mov	r2, r1
 800ef6e:	f10d 0107 	add.w	r1, sp, #7
{
 800ef72:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800ef74:	f00a f9ab 	bl	80192ce <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 800ef78:	bb18      	cbnz	r0, 800efc2 <VL53L0X_get_device_info+0x5a>
		if (Revision == 0) {
 800ef7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef7e:	bb13      	cbnz	r3, 800efc6 <VL53L0X_get_device_info+0x5e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 800ef80:	4a1c      	ldr	r2, [pc, #112]	; (800eff4 <VL53L0X_get_device_info+0x8c>)
 800ef82:	6813      	ldr	r3, [r2, #0]
 800ef84:	6023      	str	r3, [r4, #0]
 800ef86:	6853      	ldr	r3, [r2, #4]
 800ef88:	6063      	str	r3, [r4, #4]
 800ef8a:	6893      	ldr	r3, [r2, #8]
 800ef8c:	60a3      	str	r3, [r4, #8]
 800ef8e:	4a1a      	ldr	r2, [pc, #104]	; (800eff8 <VL53L0X_get_device_info+0x90>)
 800ef90:	6813      	ldr	r3, [r2, #0]
 800ef92:	6223      	str	r3, [r4, #32]
 800ef94:	6853      	ldr	r3, [r2, #4]
 800ef96:	6263      	str	r3, [r4, #36]	; 0x24
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800ef98:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800ef9c:	21c0      	movs	r1, #192	; 0xc0
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f008 f8c0 	bl	8017124 <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800efa4:	b968      	cbnz	r0, 800efc2 <VL53L0X_get_device_info+0x5a>
		Status = VL53L0X_RdByte(Dev,
 800efa6:	f10d 0206 	add.w	r2, sp, #6
 800efaa:	21c2      	movs	r1, #194	; 0xc2
 800efac:	4628      	mov	r0, r5
 800efae:	f008 f8b9 	bl	8017124 <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800efb2:	2301      	movs	r3, #1
 800efb4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800efb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800efbc:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800efbe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 800efc2:	b003      	add	sp, #12
 800efc4:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 800efc6:	2b22      	cmp	r3, #34	; 0x22
 800efc8:	d803      	bhi.n	800efd2 <VL53L0X_get_device_info+0x6a>
 800efca:	2b20      	cmp	r3, #32
 800efcc:	d003      	beq.n	800efd6 <VL53L0X_get_device_info+0x6e>
 800efce:	4a0b      	ldr	r2, [pc, #44]	; (800effc <VL53L0X_get_device_info+0x94>)
 800efd0:	e7d7      	b.n	800ef82 <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 800efd2:	2b26      	cmp	r3, #38	; 0x26
 800efd4:	d801      	bhi.n	800efda <VL53L0X_get_device_info+0x72>
 800efd6:	4a0a      	ldr	r2, [pc, #40]	; (800f000 <VL53L0X_get_device_info+0x98>)
 800efd8:	e7d3      	b.n	800ef82 <VL53L0X_get_device_info+0x1a>
 800efda:	4b0a      	ldr	r3, [pc, #40]	; (800f004 <VL53L0X_get_device_info+0x9c>)
 800efdc:	4622      	mov	r2, r4
 800efde:	f103 0114 	add.w	r1, r3, #20
 800efe2:	f853 0b04 	ldr.w	r0, [r3], #4
 800efe6:	f842 0b04 	str.w	r0, [r2], #4
 800efea:	428b      	cmp	r3, r1
 800efec:	d1f9      	bne.n	800efe2 <VL53L0X_get_device_info+0x7a>
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	7013      	strb	r3, [r2, #0]
 800eff2:	e7cc      	b.n	800ef8e <VL53L0X_get_device_info+0x26>
 800eff4:	0801e28d 	.word	0x0801e28d
 800eff8:	0801dd5e 	.word	0x0801dd5e
 800effc:	0801e299 	.word	0x0801e299
 800f000:	0801e2a5 	.word	0x0801e2a5
 800f004:	0801e2b1 	.word	0x0801e2b1

0800f008 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f008:	4b22      	ldr	r3, [pc, #136]	; (800f094 <HAL_RCC_GetSysClockFreq+0x8c>)
 800f00a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f00c:	68d9      	ldr	r1, [r3, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f00e:	f012 020c 	ands.w	r2, r2, #12
 800f012:	d005      	beq.n	800f020 <HAL_RCC_GetSysClockFreq+0x18>
 800f014:	2a0c      	cmp	r2, #12
 800f016:	d115      	bne.n	800f044 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f018:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f01c:	2901      	cmp	r1, #1
 800f01e:	d118      	bne.n	800f052 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f020:	6819      	ldr	r1, [r3, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800f022:	481d      	ldr	r0, [pc, #116]	; (800f098 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f024:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f026:	bf55      	itete	pl
 800f028:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f02c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f02e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f032:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800f036:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f03a:	b112      	cbz	r2, 800f042 <HAL_RCC_GetSysClockFreq+0x3a>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800f03c:	2a0c      	cmp	r2, #12
 800f03e:	d009      	beq.n	800f054 <HAL_RCC_GetSysClockFreq+0x4c>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f040:	2000      	movs	r0, #0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
}
 800f042:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800f044:	2a04      	cmp	r2, #4
 800f046:	d022      	beq.n	800f08e <HAL_RCC_GetSysClockFreq+0x86>
    sysclockfreq = HSE_VALUE;
 800f048:	2a08      	cmp	r2, #8
 800f04a:	4814      	ldr	r0, [pc, #80]	; (800f09c <HAL_RCC_GetSysClockFreq+0x94>)
 800f04c:	bf18      	it	ne
 800f04e:	2000      	movne	r0, #0
 800f050:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f052:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f054:	68da      	ldr	r2, [r3, #12]
 800f056:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800f05a:	2a02      	cmp	r2, #2
 800f05c:	d015      	beq.n	800f08a <HAL_RCC_GetSysClockFreq+0x82>
 800f05e:	490f      	ldr	r1, [pc, #60]	; (800f09c <HAL_RCC_GetSysClockFreq+0x94>)
 800f060:	2a03      	cmp	r2, #3
 800f062:	bf08      	it	eq
 800f064:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f066:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f068:	68da      	ldr	r2, [r3, #12]
 800f06a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800f06e:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f070:	68d8      	ldr	r0, [r3, #12]
 800f072:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f076:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f07a:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f07c:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f07e:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f080:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800f084:	fbb2 f0f0 	udiv	r0, r2, r0
 800f088:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800f08a:	4805      	ldr	r0, [pc, #20]	; (800f0a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800f08c:	e7eb      	b.n	800f066 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800f08e:	4804      	ldr	r0, [pc, #16]	; (800f0a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	40021000 	.word	0x40021000
 800f098:	0801b1fc 	.word	0x0801b1fc
 800f09c:	007a1200 	.word	0x007a1200
 800f0a0:	00f42400 	.word	0x00f42400

0800f0a4 <LL_SetFlashLatency>:
  ErrorStatus status = SUCCESS;

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */

  /* Frequency cannot be equal to 0 or greater than max clock */
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800f0a4:	4b1f      	ldr	r3, [pc, #124]	; (800f124 <LL_SetFlashLatency+0x80>)
 800f0a6:	1e42      	subs	r2, r0, #1
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d901      	bls.n	800f0b0 <LL_SetFlashLatency+0xc>
  {
    status = ERROR;
 800f0ac:	2001      	movs	r0, #1
 800f0ae:	4770      	bx	lr
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800f0b0:	4b1d      	ldr	r3, [pc, #116]	; (800f128 <LL_SetFlashLatency+0x84>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800f0b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0bc:	d10f      	bne.n	800f0de <LL_SetFlashLatency+0x3a>
          latency = LL_FLASH_LATENCY_1;
        }
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
#else
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800f0be:	4b1b      	ldr	r3, [pc, #108]	; (800f12c <LL_SetFlashLatency+0x88>)
 800f0c0:	4298      	cmp	r0, r3
 800f0c2:	d81a      	bhi.n	800f0fa <LL_SetFlashLatency+0x56>
      {
        /* 64 < HCLK <= 80 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800f0c4:	4b1a      	ldr	r3, [pc, #104]	; (800f130 <LL_SetFlashLatency+0x8c>)
 800f0c6:	4298      	cmp	r0, r3
 800f0c8:	d827      	bhi.n	800f11a <LL_SetFlashLatency+0x76>
      {
        /* 48 < HCLK <= 64 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800f0ca:	4b1a      	ldr	r3, [pc, #104]	; (800f134 <LL_SetFlashLatency+0x90>)
 800f0cc:	4298      	cmp	r0, r3
 800f0ce:	d826      	bhi.n	800f11e <LL_SetFlashLatency+0x7a>
        /* 32 < HCLK <= 48 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800f0d0:	4b19      	ldr	r3, [pc, #100]	; (800f138 <LL_SetFlashLatency+0x94>)
        /* 12 < HCLK <= 18 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800f0d2:	4298      	cmp	r0, r3
 800f0d4:	bf94      	ite	ls
 800f0d6:	2300      	movls	r3, #0
 800f0d8:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 800f0da:	2000      	movs	r0, #0
 800f0dc:	e011      	b.n	800f102 <LL_SetFlashLatency+0x5e>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800f0de:	4b17      	ldr	r3, [pc, #92]	; (800f13c <LL_SetFlashLatency+0x98>)
 800f0e0:	4298      	cmp	r0, r3
 800f0e2:	d80c      	bhi.n	800f0fe <LL_SetFlashLatency+0x5a>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800f0e4:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800f0e8:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800f0ec:	4298      	cmp	r0, r3
 800f0ee:	d814      	bhi.n	800f11a <LL_SetFlashLatency+0x76>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800f0f0:	4b13      	ldr	r3, [pc, #76]	; (800f140 <LL_SetFlashLatency+0x9c>)
 800f0f2:	4298      	cmp	r0, r3
 800f0f4:	d813      	bhi.n	800f11e <LL_SetFlashLatency+0x7a>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800f0f6:	4b13      	ldr	r3, [pc, #76]	; (800f144 <LL_SetFlashLatency+0xa0>)
 800f0f8:	e7eb      	b.n	800f0d2 <LL_SetFlashLatency+0x2e>
        latency = LL_FLASH_LATENCY_4;
 800f0fa:	2304      	movs	r3, #4
 800f0fc:	e7ed      	b.n	800f0da <LL_SetFlashLatency+0x36>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800f0fe:	2300      	movs	r3, #0
        status = ERROR;
 800f100:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800f102:	4911      	ldr	r1, [pc, #68]	; (800f148 <LL_SetFlashLatency+0xa4>)
 800f104:	680a      	ldr	r2, [r1, #0]
 800f106:	f022 0207 	bic.w	r2, r2, #7
 800f10a:	431a      	orrs	r2, r3
 800f10c:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800f10e:	680a      	ldr	r2, [r1, #0]
 800f110:	f002 0207 	and.w	r2, r2, #7

    LL_FLASH_SetLatency(latency);

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(LL_FLASH_GetLatency() != latency)
 800f114:	4293      	cmp	r3, r2
 800f116:	d1c9      	bne.n	800f0ac <LL_SetFlashLatency+0x8>
    {
      status = ERROR;
    }
  }
  return status;
}
 800f118:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800f11a:	2303      	movs	r3, #3
 800f11c:	e7dd      	b.n	800f0da <LL_SetFlashLatency+0x36>
        latency = LL_FLASH_LATENCY_2;
 800f11e:	2302      	movs	r3, #2
 800f120:	e7db      	b.n	800f0da <LL_SetFlashLatency+0x36>
 800f122:	bf00      	nop
 800f124:	04c4b3ff 	.word	0x04c4b3ff
 800f128:	40007000 	.word	0x40007000
 800f12c:	03d09000 	.word	0x03d09000
 800f130:	02dc6c00 	.word	0x02dc6c00
 800f134:	01e84800 	.word	0x01e84800
 800f138:	00f42400 	.word	0x00f42400
 800f13c:	018cba80 	.word	0x018cba80
 800f140:	00b71b00 	.word	0x00b71b00
 800f144:	005b8d80 	.word	0x005b8d80
 800f148:	40022000 	.word	0x40022000

0800f14c <dm163_init>:
      return -ENODEV;                                                          \
    }                                                                          \
    gpio_pin_configure_dt(dt, flags);                                          \
  } while (0)

static int dm163_init(const struct device *dev) {
 800f14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const struct dm163_config *config = dev->config;
  struct dm163_data *data = dev->data;

  LOG_DBG("starting initialization of device %s", dev->name);
 800f150:	4d67      	ldr	r5, [pc, #412]	; (800f2f0 <dm163_init+0x1a4>)
  const struct dm163_config *config = dev->config;
 800f152:	6844      	ldr	r4, [r0, #4]
  LOG_DBG("starting initialization of device %s", dev->name);
 800f154:	682b      	ldr	r3, [r5, #0]
  struct dm163_data *data = dev->data;
 800f156:	f8d0 8010 	ldr.w	r8, [r0, #16]
  LOG_DBG("starting initialization of device %s", dev->name);
 800f15a:	0759      	lsls	r1, r3, #29
static int dm163_init(const struct device *dev) {
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	4606      	mov	r6, r0
  LOG_DBG("starting initialization of device %s", dev->name);
 800f160:	d515      	bpl.n	800f18e <dm163_init+0x42>
 800f162:	46e9      	mov	r9, sp
 800f164:	b08a      	sub	sp, #40	; 0x28
 800f166:	6803      	ldr	r3, [r0, #0]
 800f168:	466a      	mov	r2, sp
 800f16a:	4962      	ldr	r1, [pc, #392]	; (800f2f4 <dm163_init+0x1a8>)
 800f16c:	6151      	str	r1, [r2, #20]
 800f16e:	4962      	ldr	r1, [pc, #392]	; (800f2f8 <dm163_init+0x1ac>)
 800f170:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800f174:	f240 3301 	movw	r3, #769	; 0x301
 800f178:	8413      	strh	r3, [r2, #32]
 800f17a:	4b60      	ldr	r3, [pc, #384]	; (800f2fc <dm163_init+0x1b0>)
 800f17c:	f842 3f10 	str.w	r3, [r2, #16]!
 800f180:	2300      	movs	r3, #0
 800f182:	f44f 5114 	mov.w	r1, #9472	; 0x2500
 800f186:	4628      	mov	r0, r5
 800f188:	f7f8 ffe2 	bl	8008150 <z_impl_z_log_msg_static_create>
 800f18c:	46cd      	mov	sp, r9

  // Disable DM163 outputs while configuring if this pin
  // is connected.
  if (config->en.port) {
 800f18e:	6820      	ldr	r0, [r4, #0]
 800f190:	b320      	cbz	r0, 800f1dc <dm163_init+0x90>
 800f192:	f00a fa3f 	bl	8019614 <z_device_is_ready>
    CONFIGURE_PIN(&config->en, GPIO_OUTPUT_INACTIVE);
 800f196:	4603      	mov	r3, r0
 800f198:	b9d8      	cbnz	r0, 800f1d2 <dm163_init+0x86>
 800f19a:	682a      	ldr	r2, [r5, #0]
 800f19c:	0752      	lsls	r2, r2, #29
 800f19e:	d013      	beq.n	800f1c8 <dm163_init+0x7c>
 800f1a0:	6822      	ldr	r2, [r4, #0]
 800f1a2:	6811      	ldr	r1, [r2, #0]
 800f1a4:	466c      	mov	r4, sp
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	466a      	mov	r2, sp
 800f1aa:	4855      	ldr	r0, [pc, #340]	; (800f300 <dm163_init+0x1b4>)
 800f1ac:	e9c2 0105 	strd	r0, r1, [r2, #20]
 800f1b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1b4:	8391      	strh	r1, [r2, #28]
 800f1b6:	4953      	ldr	r1, [pc, #332]	; (800f304 <dm163_init+0x1b8>)
 800f1b8:	f842 1f10 	str.w	r1, [r2, #16]!
 800f1bc:	484c      	ldr	r0, [pc, #304]	; (800f2f0 <dm163_init+0x1a4>)
 800f1be:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800f1c2:	f7f8 ffc5 	bl	8008150 <z_impl_z_log_msg_static_create>
 800f1c6:	46a5      	mov	sp, r4
 800f1c8:	f06f 0012 	mvn.w	r0, #18
  if (config->en.port) {
    gpio_pin_set_dt(&config->en, 1);
  }
  LOG_INF("device %s initialized", dev->name);
  return 0;
}
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CONFIGURE_PIN(&config->en, GPIO_OUTPUT_INACTIVE);
 800f1d2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f00a f95b 	bl	8019492 <gpio_pin_configure_dt.isra.0>
  CONFIGURE_PIN(&config->rst, GPIO_OUTPUT_ACTIVE);
 800f1dc:	69a0      	ldr	r0, [r4, #24]
 800f1de:	f00a fa19 	bl	8019614 <z_device_is_ready>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	b920      	cbnz	r0, 800f1f0 <dm163_init+0xa4>
 800f1e6:	682a      	ldr	r2, [r5, #0]
 800f1e8:	0756      	lsls	r6, r2, #29
 800f1ea:	d0ed      	beq.n	800f1c8 <dm163_init+0x7c>
 800f1ec:	69a2      	ldr	r2, [r4, #24]
 800f1ee:	e7d8      	b.n	800f1a2 <dm163_init+0x56>
 800f1f0:	f104 0918 	add.w	r9, r4, #24
 800f1f4:	4648      	mov	r0, r9
 800f1f6:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f1fa:	f00a f94a 	bl	8019492 <gpio_pin_configure_dt.isra.0>
  CONFIGURE_PIN(&config->gck, GPIO_OUTPUT_INACTIVE);
 800f1fe:	68a0      	ldr	r0, [r4, #8]
 800f200:	f00a fa08 	bl	8019614 <z_device_is_ready>
 800f204:	4603      	mov	r3, r0
 800f206:	b920      	cbnz	r0, 800f212 <dm163_init+0xc6>
 800f208:	682a      	ldr	r2, [r5, #0]
 800f20a:	0755      	lsls	r5, r2, #29
 800f20c:	d0dc      	beq.n	800f1c8 <dm163_init+0x7c>
 800f20e:	68a2      	ldr	r2, [r4, #8]
 800f210:	e7c7      	b.n	800f1a2 <dm163_init+0x56>
 800f212:	f104 0008 	add.w	r0, r4, #8
 800f216:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800f21a:	f00a f93a 	bl	8019492 <gpio_pin_configure_dt.isra.0>
  CONFIGURE_PIN(&config->lat, GPIO_OUTPUT_INACTIVE);
 800f21e:	6920      	ldr	r0, [r4, #16]
 800f220:	f00a f9f8 	bl	8019614 <z_device_is_ready>
 800f224:	4603      	mov	r3, r0
 800f226:	b920      	cbnz	r0, 800f232 <dm163_init+0xe6>
 800f228:	682a      	ldr	r2, [r5, #0]
 800f22a:	0750      	lsls	r0, r2, #29
 800f22c:	d0cc      	beq.n	800f1c8 <dm163_init+0x7c>
 800f22e:	6922      	ldr	r2, [r4, #16]
 800f230:	e7b7      	b.n	800f1a2 <dm163_init+0x56>
 800f232:	f104 0010 	add.w	r0, r4, #16
 800f236:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800f23a:	f00a f92a 	bl	8019492 <gpio_pin_configure_dt.isra.0>
  CONFIGURE_PIN(&config->selbk, GPIO_OUTPUT_ACTIVE);
 800f23e:	6a20      	ldr	r0, [r4, #32]
 800f240:	f00a f9e8 	bl	8019614 <z_device_is_ready>
 800f244:	4603      	mov	r3, r0
 800f246:	b920      	cbnz	r0, 800f252 <dm163_init+0x106>
 800f248:	682a      	ldr	r2, [r5, #0]
 800f24a:	0751      	lsls	r1, r2, #29
 800f24c:	d0bc      	beq.n	800f1c8 <dm163_init+0x7c>
 800f24e:	6a22      	ldr	r2, [r4, #32]
 800f250:	e7a7      	b.n	800f1a2 <dm163_init+0x56>
 800f252:	f104 0020 	add.w	r0, r4, #32
 800f256:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800f25a:	f00a f91a 	bl	8019492 <gpio_pin_configure_dt.isra.0>
  CONFIGURE_PIN(&config->sin, GPIO_OUTPUT);
 800f25e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f260:	f00a f9d8 	bl	8019614 <z_device_is_ready>
 800f264:	4603      	mov	r3, r0
 800f266:	b920      	cbnz	r0, 800f272 <dm163_init+0x126>
 800f268:	682a      	ldr	r2, [r5, #0]
 800f26a:	0752      	lsls	r2, r2, #29
 800f26c:	d0ac      	beq.n	800f1c8 <dm163_init+0x7c>
 800f26e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f270:	e797      	b.n	800f1a2 <dm163_init+0x56>
 800f272:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f276:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f27a:	f00a f90a 	bl	8019492 <gpio_pin_configure_dt.isra.0>
	return z_impl_k_usleep(us);
 800f27e:	2001      	movs	r0, #1
 800f280:	f00a fb61 	bl	8019946 <z_impl_k_usleep>
  gpio_pin_set_dt(&config->rst, 0);
 800f284:	2100      	movs	r1, #0
 800f286:	4648      	mov	r0, r9
 800f288:	f00a f894 	bl	80193b4 <gpio_pin_set_dt.isra.0>
__ssp_bos_icheck3(memset, void *, int)
 800f28c:	2218      	movs	r2, #24
 800f28e:	213f      	movs	r1, #63	; 0x3f
 800f290:	4640      	mov	r0, r8
 800f292:	f002 f801 	bl	8011298 <memset>
 800f296:	2218      	movs	r2, #24
 800f298:	2100      	movs	r1, #0
 800f29a:	eb08 0002 	add.w	r0, r8, r2
 800f29e:	f001 fffb 	bl	8011298 <memset>
  flush_brightness(dev);
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f00a f8b3 	bl	801940e <flush_brightness>
  flush_channels(dev);
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	f00a f911 	bl	80194d0 <flush_channels>
  if (config->en.port) {
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	b11b      	cbz	r3, 800f2ba <dm163_init+0x16e>
    gpio_pin_set_dt(&config->en, 1);
 800f2b2:	2101      	movs	r1, #1
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f00a f87d 	bl	80193b4 <gpio_pin_set_dt.isra.0>
  LOG_INF("device %s initialized", dev->name);
 800f2ba:	682b      	ldr	r3, [r5, #0]
 800f2bc:	f003 0307 	and.w	r3, r3, #7
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d913      	bls.n	800f2ec <dm163_init+0x1a0>
 800f2c4:	466c      	mov	r4, sp
 800f2c6:	b088      	sub	sp, #32
 800f2c8:	6833      	ldr	r3, [r6, #0]
 800f2ca:	466a      	mov	r2, sp
 800f2cc:	490e      	ldr	r1, [pc, #56]	; (800f308 <dm163_init+0x1bc>)
 800f2ce:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f2d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f2d6:	8393      	strh	r3, [r2, #28]
 800f2d8:	4b0a      	ldr	r3, [pc, #40]	; (800f304 <dm163_init+0x1b8>)
 800f2da:	f842 3f10 	str.w	r3, [r2, #16]!
 800f2de:	4804      	ldr	r0, [pc, #16]	; (800f2f0 <dm163_init+0x1a4>)
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 800f2e6:	f7f8 ff33 	bl	8008150 <z_impl_z_log_msg_static_create>
 800f2ea:	46a5      	mov	sp, r4
  return 0;
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	e76d      	b.n	800f1cc <dm163_init+0x80>
 800f2f0:	20000d38 	.word	0x20000d38
 800f2f4:	0801e2d6 	.word	0x0801e2d6
 800f2f8:	0801e32c 	.word	0x0801e32c
 800f2fc:	01000004 	.word	0x01000004
 800f300:	0801e2ff 	.word	0x0801e2ff
 800f304:	01000003 	.word	0x01000003
 800f308:	0801e316 	.word	0x0801e316

0800f30c <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
 800f30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
 800f310:	f8df b050 	ldr.w	fp, [pc, #80]	; 800f364 <device_visitor+0x58>
 800f314:	4d11      	ldr	r5, [pc, #68]	; (800f35c <device_visitor+0x50>)
 800f316:	469a      	mov	sl, r3
 800f318:	eba5 050b 	sub.w	r5, r5, fp
 800f31c:	4b10      	ldr	r3, [pc, #64]	; (800f360 <device_visitor+0x54>)
 800f31e:	10ed      	asrs	r5, r5, #3
 800f320:	4680      	mov	r8, r0
 800f322:	460f      	mov	r7, r1
 800f324:	4691      	mov	r9, r2
 800f326:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
 800f328:	2600      	movs	r6, #0
 800f32a:	42be      	cmp	r6, r7
 800f32c:	d102      	bne.n	800f334 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
 800f32e:	4630      	mov	r0, r6
}
 800f330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
 800f334:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
 800f338:	2c00      	cmp	r4, #0
 800f33a:	dd0d      	ble.n	800f358 <device_visitor+0x4c>
 800f33c:	42a5      	cmp	r5, r4
 800f33e:	d30b      	bcc.n	800f358 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
 800f340:	3c01      	subs	r4, #1
 800f342:	b224      	sxth	r4, r4
 800f344:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f348:	eb0b 00c4 	add.w	r0, fp, r4, lsl #3
		int rc = visitor_cb(rdev, context);
 800f34c:	4651      	mov	r1, sl
 800f34e:	47c8      	blx	r9
		if (rc < 0) {
 800f350:	2800      	cmp	r0, #0
 800f352:	dbed      	blt.n	800f330 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
 800f354:	3601      	adds	r6, #1
 800f356:	e7e8      	b.n	800f32a <device_visitor+0x1e>
	const struct device *dev = NULL;
 800f358:	2000      	movs	r0, #0
 800f35a:	e7f7      	b.n	800f34c <device_visitor+0x40>
 800f35c:	0801a030 	.word	0x0801a030
 800f360:	aaaaaaab 	.word	0xaaaaaaab
 800f364:	08019e20 	.word	0x08019e20

0800f368 <z_device_get_all_static>:
	*devices = __device_start;
 800f368:	4a03      	ldr	r2, [pc, #12]	; (800f378 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
 800f36a:	4b04      	ldr	r3, [pc, #16]	; (800f37c <z_device_get_all_static+0x14>)
	*devices = __device_start;
 800f36c:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
 800f36e:	1a9b      	subs	r3, r3, r2
}
 800f370:	4803      	ldr	r0, [pc, #12]	; (800f380 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
 800f372:	10db      	asrs	r3, r3, #3
}
 800f374:	4358      	muls	r0, r3
 800f376:	4770      	bx	lr
 800f378:	08019e20 	.word	0x08019e20
 800f37c:	0801a030 	.word	0x0801a030
 800f380:	aaaaaaab 	.word	0xaaaaaaab

0800f384 <z_impl_device_get_binding>:
{
 800f384:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
 800f386:	4605      	mov	r5, r0
 800f388:	b910      	cbnz	r0, 800f390 <z_impl_device_get_binding+0xc>
		return NULL;
 800f38a:	2400      	movs	r4, #0
}
 800f38c:	4620      	mov	r0, r4
 800f38e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800f390:	7803      	ldrb	r3, [r0, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0f9      	beq.n	800f38a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f396:	4c0e      	ldr	r4, [pc, #56]	; (800f3d0 <z_impl_device_get_binding+0x4c>)
 800f398:	4e0e      	ldr	r6, [pc, #56]	; (800f3d4 <z_impl_device_get_binding+0x50>)
 800f39a:	42b4      	cmp	r4, r6
 800f39c:	d108      	bne.n	800f3b0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f39e:	4c0c      	ldr	r4, [pc, #48]	; (800f3d0 <z_impl_device_get_binding+0x4c>)
 800f3a0:	42b4      	cmp	r4, r6
 800f3a2:	d0f2      	beq.n	800f38a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f00a f935 	bl	8019614 <z_device_is_ready>
 800f3aa:	b950      	cbnz	r0, 800f3c2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f3ac:	3418      	adds	r4, #24
 800f3ae:	e7f7      	b.n	800f3a0 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f00a f92f 	bl	8019614 <z_device_is_ready>
 800f3b6:	b110      	cbz	r0, 800f3be <z_impl_device_get_binding+0x3a>
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	42ab      	cmp	r3, r5
 800f3bc:	d0e6      	beq.n	800f38c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f3be:	3418      	adds	r4, #24
 800f3c0:	e7eb      	b.n	800f39a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800f3c2:	6821      	ldr	r1, [r4, #0]
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	f7f0 ff6f 	bl	80002a8 <strcmp>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	d1ee      	bne.n	800f3ac <z_impl_device_get_binding+0x28>
 800f3ce:	e7dd      	b.n	800f38c <z_impl_device_get_binding+0x8>
 800f3d0:	08019e20 	.word	0x08019e20
 800f3d4:	0801a030 	.word	0x0801a030

0800f3d8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800f3d8:	4b01      	ldr	r3, [pc, #4]	; (800f3e0 <z_impl_z_errno+0x8>)
 800f3da:	6898      	ldr	r0, [r3, #8]
}
 800f3dc:	3098      	adds	r0, #152	; 0x98
 800f3de:	4770      	bx	lr
 800f3e0:	20002200 	.word	0x20002200

0800f3e4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	b086      	sub	sp, #24
	z_impl_log_panic();
 800f3ea:	f7f8 fccf 	bl	8007d8c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 800f3ee:	4808      	ldr	r0, [pc, #32]	; (800f410 <k_sys_fatal_error_handler+0x2c>)
 800f3f0:	6803      	ldr	r3, [r0, #0]
 800f3f2:	075b      	lsls	r3, r3, #29
 800f3f4:	d009      	beq.n	800f40a <k_sys_fatal_error_handler+0x26>
 800f3f6:	4b07      	ldr	r3, [pc, #28]	; (800f414 <k_sys_fatal_error_handler+0x30>)
 800f3f8:	9305      	str	r3, [sp, #20]
 800f3fa:	2302      	movs	r3, #2
 800f3fc:	9304      	str	r3, [sp, #16]
 800f3fe:	2300      	movs	r3, #0
 800f400:	aa04      	add	r2, sp, #16
 800f402:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800f406:	f7f8 fea3 	bl	8008150 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
 800f40a:	4620      	mov	r0, r4
 800f40c:	f00a f925 	bl	801965a <arch_system_halt>
 800f410:	20000d60 	.word	0x20000d60
 800f414:	0801e33d 	.word	0x0801e33d

0800f418 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800f418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f41c:	b086      	sub	sp, #24
 800f41e:	4605      	mov	r5, r0
 800f420:	af00      	add	r7, sp, #0
 800f422:	460e      	mov	r6, r1
	__asm__ volatile(
 800f424:	f04f 0310 	mov.w	r3, #16
 800f428:	f3ef 8911 	mrs	r9, BASEPRI
 800f42c:	f383 8812 	msr	BASEPRI_MAX, r3
 800f430:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800f434:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800f520 <z_fatal_error+0x108>
	return z_impl_z_current_get();
 800f438:	f000 ff58 	bl	80102ec <z_impl_z_current_get>
 800f43c:	f8d8 3000 	ldr.w	r3, [r8]
 800f440:	0759      	lsls	r1, r3, #29
 800f442:	4604      	mov	r4, r0
 800f444:	d061      	beq.n	800f50a <z_fatal_error+0xf2>
	switch (reason) {
 800f446:	2d04      	cmp	r5, #4
 800f448:	bf96      	itet	ls
 800f44a:	4b31      	ldrls	r3, [pc, #196]	; (800f510 <z_fatal_error+0xf8>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800f44c:	4b31      	ldrhi	r3, [pc, #196]	; (800f514 <z_fatal_error+0xfc>)
 800f44e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
 800f452:	46ea      	mov	sl, sp
 800f454:	b08a      	sub	sp, #40	; 0x28
 800f456:	466a      	mov	r2, sp
 800f458:	492f      	ldr	r1, [pc, #188]	; (800f518 <z_fatal_error+0x100>)
 800f45a:	61d3      	str	r3, [r2, #28]
 800f45c:	e9c2 1505 	strd	r1, r5, [r2, #20]
 800f460:	f240 3101 	movw	r1, #769	; 0x301
 800f464:	8491      	strh	r1, [r2, #36]	; 0x24
 800f466:	2300      	movs	r3, #0
 800f468:	492c      	ldr	r1, [pc, #176]	; (800f51c <z_fatal_error+0x104>)
 800f46a:	6213      	str	r3, [r2, #32]
 800f46c:	f842 1f10 	str.w	r1, [r2, #16]!
 800f470:	482b      	ldr	r0, [pc, #172]	; (800f520 <z_fatal_error+0x108>)
 800f472:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 800f476:	f7f8 fe6b 	bl	8008150 <z_impl_z_log_msg_static_create>
 800f47a:	46d5      	mov	sp, sl
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800f47c:	b19e      	cbz	r6, 800f4a6 <z_fatal_error+0x8e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800f47e:	69f3      	ldr	r3, [r6, #28]
		LOG_ERR("Fault during interrupt handling\n");
 800f480:	f8d8 2000 	ldr.w	r2, [r8]
 800f484:	f3c3 0308 	ubfx	r3, r3, #0, #9
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800f488:	b16b      	cbz	r3, 800f4a6 <z_fatal_error+0x8e>
		LOG_ERR("Fault during interrupt handling\n");
 800f48a:	0752      	lsls	r2, r2, #29
 800f48c:	d025      	beq.n	800f4da <z_fatal_error+0xc2>
 800f48e:	4b25      	ldr	r3, [pc, #148]	; (800f524 <z_fatal_error+0x10c>)
 800f490:	617b      	str	r3, [r7, #20]
 800f492:	2302      	movs	r3, #2
 800f494:	613b      	str	r3, [r7, #16]
 800f496:	4822      	ldr	r0, [pc, #136]	; (800f520 <z_fatal_error+0x108>)
 800f498:	2300      	movs	r3, #0
 800f49a:	f107 0210 	add.w	r2, r7, #16
 800f49e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800f4a2:	f7f8 fe55 	bl	8008150 <z_impl_z_log_msg_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800f4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800f4aa:	075b      	lsls	r3, r3, #29
 800f4ac:	d015      	beq.n	800f4da <z_fatal_error+0xc2>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800f4ae:	bb1c      	cbnz	r4, 800f4f8 <z_fatal_error+0xe0>
		thread_name = "unknown";
 800f4b0:	481d      	ldr	r0, [pc, #116]	; (800f528 <z_fatal_error+0x110>)
	LOG_ERR("Current thread: %p (%s)", thread,
 800f4b2:	46e8      	mov	r8, sp
 800f4b4:	b08a      	sub	sp, #40	; 0x28
 800f4b6:	466a      	mov	r2, sp
 800f4b8:	4b1c      	ldr	r3, [pc, #112]	; (800f52c <z_fatal_error+0x114>)
 800f4ba:	61d0      	str	r0, [r2, #28]
 800f4bc:	e9c2 3405 	strd	r3, r4, [r2, #20]
 800f4c0:	f240 3301 	movw	r3, #769	; 0x301
 800f4c4:	8413      	strh	r3, [r2, #32]
 800f4c6:	4b1a      	ldr	r3, [pc, #104]	; (800f530 <z_fatal_error+0x118>)
 800f4c8:	f842 3f10 	str.w	r3, [r2, #16]!
 800f4cc:	4814      	ldr	r0, [pc, #80]	; (800f520 <z_fatal_error+0x108>)
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 800f4d4:	f7f8 fe3c 	bl	8008150 <z_impl_z_log_msg_static_create>
 800f4d8:	46c5      	mov	sp, r8

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 800f4da:	4631      	mov	r1, r6
 800f4dc:	4628      	mov	r0, r5
 800f4de:	f7ff ff81 	bl	800f3e4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800f4e2:	f389 8811 	msr	BASEPRI, r9
 800f4e6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f7fc fa90 	bl	800ba10 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800f4f0:	3718      	adds	r7, #24
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f00a f8c1 	bl	8019680 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d0d6      	beq.n	800f4b0 <z_fatal_error+0x98>
 800f502:	7803      	ldrb	r3, [r0, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d0d3      	beq.n	800f4b0 <z_fatal_error+0x98>
 800f508:	e7d3      	b.n	800f4b2 <z_fatal_error+0x9a>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800f50a:	2e00      	cmp	r6, #0
 800f50c:	d1b7      	bne.n	800f47e <z_fatal_error+0x66>
 800f50e:	e7e4      	b.n	800f4da <z_fatal_error+0xc2>
 800f510:	0801b27c 	.word	0x0801b27c
 800f514:	0801e34c 	.word	0x0801e34c
 800f518:	0801e362 	.word	0x0801e362
 800f51c:	01000005 	.word	0x01000005
 800f520:	20000d60 	.word	0x20000d60
 800f524:	0801e38a 	.word	0x0801e38a
 800f528:	0801e35a 	.word	0x0801e35a
 800f52c:	0801e3ab 	.word	0x0801e3ab
 800f530:	01000004 	.word	0x01000004

0800f534 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800f534:	4b0f      	ldr	r3, [pc, #60]	; (800f574 <z_sys_init_run_level+0x40>)
{
 800f536:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800f538:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800f53c:	3001      	adds	r0, #1
 800f53e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f542:	42a6      	cmp	r6, r4
 800f544:	d800      	bhi.n	800f548 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 800f546:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 800f548:	e9d4 3500 	ldrd	r3, r5, [r4]
 800f54c:	4628      	mov	r0, r5
 800f54e:	4798      	blx	r3
		if (dev != NULL) {
 800f550:	b16d      	cbz	r5, 800f56e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 800f552:	b138      	cbz	r0, 800f564 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 800f554:	2800      	cmp	r0, #0
 800f556:	bfb8      	it	lt
 800f558:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800f55a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 800f55c:	28ff      	cmp	r0, #255	; 0xff
 800f55e:	bfa8      	it	ge
 800f560:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 800f562:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800f564:	68ea      	ldr	r2, [r5, #12]
 800f566:	7853      	ldrb	r3, [r2, #1]
 800f568:	f043 0301 	orr.w	r3, r3, #1
 800f56c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800f56e:	3408      	adds	r4, #8
 800f570:	e7e7      	b.n	800f542 <z_sys_init_run_level+0xe>
 800f572:	bf00      	nop
 800f574:	0801b290 	.word	0x0801b290

0800f578 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800f578:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800f57a:	4b0a      	ldr	r3, [pc, #40]	; (800f5a4 <bg_thread_main+0x2c>)
 800f57c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 800f57e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 800f580:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 800f582:	f7ff ffd7 	bl	800f534 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800f586:	f001 f9d9 	bl	801093c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 800f58a:	2004      	movs	r0, #4
 800f58c:	f7ff ffd2 	bl	800f534 <z_sys_init_run_level>

	z_init_static_threads();
 800f590:	f000 f9ea 	bl	800f968 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 800f594:	f7f7 ff14 	bl	80073c0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800f598:	4a03      	ldr	r2, [pc, #12]	; (800f5a8 <bg_thread_main+0x30>)
 800f59a:	7b13      	ldrb	r3, [r2, #12]
 800f59c:	f023 0301 	bic.w	r3, r3, #1
 800f5a0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800f5a2:	bd08      	pop	{r3, pc}
 800f5a4:	2000238d 	.word	0x2000238d
 800f5a8:	200017c0 	.word	0x200017c0

0800f5ac <z_bss_zero>:
{
 800f5ac:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 800f5ae:	4803      	ldr	r0, [pc, #12]	; (800f5bc <z_bss_zero+0x10>)
 800f5b0:	4a03      	ldr	r2, [pc, #12]	; (800f5c0 <z_bss_zero+0x14>)
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	1a12      	subs	r2, r2, r0
 800f5b6:	f00a f859 	bl	801966c <z_early_memset>
}
 800f5ba:	bd08      	pop	{r3, pc}
 800f5bc:	20000e08 	.word	0x20000e08
 800f5c0:	20002390 	.word	0x20002390

0800f5c4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 800f5c4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 800f5c6:	4e17      	ldr	r6, [pc, #92]	; (800f624 <z_init_cpu+0x60>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800f5c8:	4d17      	ldr	r5, [pc, #92]	; (800f628 <z_init_cpu+0x64>)
	z_setup_new_thread(thread, stack,
 800f5ca:	4918      	ldr	r1, [pc, #96]	; (800f62c <z_init_cpu+0x68>)
{
 800f5cc:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 800f5ce:	23f8      	movs	r3, #248	; 0xf8
 800f5d0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 800f5d4:	4b16      	ldr	r3, [pc, #88]	; (800f630 <z_init_cpu+0x6c>)
 800f5d6:	9305      	str	r3, [sp, #20]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	230f      	movs	r3, #15
 800f5dc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800f5e6:	231c      	movs	r3, #28
 800f5e8:	fb03 5500 	mla	r5, r3, r0, r5
{
 800f5ec:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 800f5ee:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800f5f2:	fb00 1104 	mla	r1, r0, r4, r1
 800f5f6:	4b0f      	ldr	r3, [pc, #60]	; (800f634 <z_init_cpu+0x70>)
 800f5f8:	9500      	str	r5, [sp, #0]
 800f5fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f5fe:	4630      	mov	r0, r6
 800f600:	f000 f920 	bl	800f844 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800f604:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800f606:	4a0c      	ldr	r2, [pc, #48]	; (800f638 <z_init_cpu+0x74>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800f608:	60ee      	str	r6, [r5, #12]
 800f60a:	f023 0304 	bic.w	r3, r3, #4
 800f60e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800f610:	f44f 6308 	mov.w	r3, #2176	; 0x880
 800f614:	fb04 3303 	mla	r3, r4, r3, r3
 800f618:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 800f61a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 800f61c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 800f61e:	b006      	add	sp, #24
 800f620:	bd70      	pop	{r4, r5, r6, pc}
 800f622:	bf00      	nop
 800f624:	200016c8 	.word	0x200016c8
 800f628:	20002200 	.word	0x20002200
 800f62c:	20003880 	.word	0x20003880
 800f630:	0801e40d 	.word	0x0801e40d
 800f634:	080196ab 	.word	0x080196ab
 800f638:	20003000 	.word	0x20003000

0800f63c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800f63c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 800f63e:	2000      	movs	r0, #0
{
 800f640:	b0c4      	sub	sp, #272	; 0x110
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 800f642:	f7ff ff77 	bl	800f534 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800f646:	4b2d      	ldr	r3, [pc, #180]	; (800f6fc <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800f648:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800f64c:	4d2c      	ldr	r5, [pc, #176]	; (800f700 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 800f64e:	4e2d      	ldr	r6, [pc, #180]	; (800f704 <z_cstart+0xc8>)
 800f650:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800f652:	4f2d      	ldr	r7, [pc, #180]	; (800f708 <z_cstart+0xcc>)
 800f654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f658:	616b      	str	r3, [r5, #20]
 800f65a:	2400      	movs	r4, #0
 800f65c:	23f0      	movs	r3, #240	; 0xf0
 800f65e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800f662:	77ec      	strb	r4, [r5, #31]
 800f664:	762c      	strb	r4, [r5, #24]
 800f666:	766c      	strb	r4, [r5, #25]
 800f668:	76ac      	strb	r4, [r5, #26]
 800f66a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800f66e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f670:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800f674:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800f676:	f7fc f991 	bl	800b99c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800f67a:	f7fb fbcb 	bl	800ae14 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800f67e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f682:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800f684:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800f686:	f7fc faa1 	bl	800bbcc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800f68a:	f7fc f9d7 	bl	800ba3c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800f68e:	f7f8 fad7 	bl	8007c40 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800f692:	f240 1301 	movw	r3, #257	; 0x101
 800f696:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800f69a:	ab06      	add	r3, sp, #24
 800f69c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800f69e:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
 800f6a2:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800f6a4:	f009 ffb5 	bl	8019612 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 800f6a8:	2001      	movs	r0, #1
 800f6aa:	f7ff ff43 	bl	800f534 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 800f6ae:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 800f6b0:	4d16      	ldr	r5, [pc, #88]	; (800f70c <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 800f6b2:	f7ff ff3f 	bl	800f534 <z_sys_init_run_level>
	z_sched_init();
 800f6b6:	f000 fd73 	bl	80101a0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800f6ba:	4b15      	ldr	r3, [pc, #84]	; (800f710 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
 800f6bc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800f6be:	9305      	str	r3, [sp, #20]
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	4914      	ldr	r1, [pc, #80]	; (800f714 <z_cstart+0xd8>)
 800f6c4:	9400      	str	r4, [sp, #0]
 800f6c6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800f6ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f6ce:	463b      	mov	r3, r7
 800f6d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f000 f8b5 	bl	800f844 <z_setup_new_thread>
 800f6da:	7b6a      	ldrb	r2, [r5, #13]
 800f6dc:	4606      	mov	r6, r0
 800f6de:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	736a      	strb	r2, [r5, #13]
 800f6e6:	f00a f8b1 	bl	801984c <z_ready_thread>
	z_init_cpu(0);
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f7ff ff6a 	bl	800f5c4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800f6f0:	463a      	mov	r2, r7
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f7fb fdcb 	bl	800b290 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800f6fa:	bf00      	nop
 800f6fc:	20003880 	.word	0x20003880
 800f700:	e000ed00 	.word	0xe000ed00
 800f704:	20002200 	.word	0x20002200
 800f708:	0800f579 	.word	0x0800f579
 800f70c:	200017c0 	.word	0x200017c0
 800f710:	0801e412 	.word	0x0801e412
 800f714:	20003a00 	.word	0x20003a00

0800f718 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
 800f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71a:	4605      	mov	r5, r0
 800f71c:	460e      	mov	r6, r1
	__asm__ volatile(
 800f71e:	f04f 0310 	mov.w	r3, #16
 800f722:	f3ef 8711 	mrs	r7, BASEPRI
 800f726:	f383 8812 	msr	BASEPRI_MAX, r3
 800f72a:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 800f72e:	4b06      	ldr	r3, [pc, #24]	; (800f748 <k_thread_foreach+0x30>)
 800f730:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f732:	b924      	cbnz	r4, 800f73e <k_thread_foreach+0x26>
	__asm__ volatile(
 800f734:	f387 8811 	msr	BASEPRI, r7
 800f738:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
 800f73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
 800f73e:	4620      	mov	r0, r4
 800f740:	4631      	mov	r1, r6
 800f742:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 800f744:	6f64      	ldr	r4, [r4, #116]	; 0x74
 800f746:	e7f4      	b.n	800f732 <k_thread_foreach+0x1a>
 800f748:	20002200 	.word	0x20002200

0800f74c <z_thread_monitor_exit>:
	__asm__ volatile(
 800f74c:	f04f 0310 	mov.w	r3, #16
 800f750:	f3ef 8111 	mrs	r1, BASEPRI
 800f754:	f383 8812 	msr	BASEPRI_MAX, r3
 800f758:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
 800f75c:	4a09      	ldr	r2, [pc, #36]	; (800f784 <z_thread_monitor_exit+0x38>)
 800f75e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f760:	4283      	cmp	r3, r0
 800f762:	d107      	bne.n	800f774 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
 800f764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f766:	62d3      	str	r3, [r2, #44]	; 0x2c
	__asm__ volatile(
 800f768:	f381 8811 	msr	BASEPRI, r1
 800f76c:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
 800f770:	4770      	bx	lr
 800f772:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
 800f774:	2b00      	cmp	r3, #0
 800f776:	d0f7      	beq.n	800f768 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
 800f778:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
 800f77a:	4282      	cmp	r2, r0
 800f77c:	d1f9      	bne.n	800f772 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
 800f77e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f780:	675a      	str	r2, [r3, #116]	; 0x74
 800f782:	e7f1      	b.n	800f768 <z_thread_monitor_exit+0x1c>
 800f784:	20002200 	.word	0x20002200

0800f788 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
 800f788:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
 800f78a:	4604      	mov	r4, r0
 800f78c:	b908      	cbnz	r0, 800f792 <z_impl_k_thread_name_set+0xa>
		thread = _current;
 800f78e:	4b05      	ldr	r3, [pc, #20]	; (800f7a4 <z_impl_k_thread_name_set+0x1c>)
 800f790:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800f792:	221f      	movs	r2, #31
 800f794:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800f798:	f001 ff56 	bl	8011648 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 800f79c:	2000      	movs	r0, #0
 800f79e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 800f7a2:	bd10      	pop	{r4, pc}
 800f7a4:	20002200 	.word	0x20002200

0800f7a8 <k_thread_state_str>:

	return bytes_to_copy;
}

const char *k_thread_state_str(k_tid_t thread_id, char *buf, size_t buf_size)
{
 800f7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static const char  *states_str[8] = {"dummy", "pending", "prestart",
					     "dead", "suspended", "aborting",
					     "", "queued"};
	static const size_t states_sz[8] = {5, 7, 8, 4, 9, 8, 0, 6};

	if ((buf == NULL) || (buf_size == 0)) {
 800f7ac:	460c      	mov	r4, r1
 800f7ae:	2900      	cmp	r1, #0
 800f7b0:	d03d      	beq.n	800f82e <k_thread_state_str+0x86>
 800f7b2:	2a00      	cmp	r2, #0
 800f7b4:	d03b      	beq.n	800f82e <k_thread_state_str+0x86>
	uint8_t     thread_state = thread_id->base.thread_state;
 800f7b6:	7b47      	ldrb	r7, [r0, #13]
		return "";
	}

	buf_size--;   /* Reserve 1 byte for end-of-string character */
 800f7b8:	1e56      	subs	r6, r2, #1
		bit = BIT(index);
		if ((thread_state & bit) == 0) {
			continue;
		}

		off += copy_bytes(buf + off, buf_size - off,
 800f7ba:	4608      	mov	r0, r1
	for (uint8_t index = 0; thread_state != 0; index++) {
 800f7bc:	b38f      	cbz	r7, 800f822 <k_thread_state_str+0x7a>
 800f7be:	f04f 0b00 	mov.w	fp, #0
				  states_str[index], states_sz[index]);
 800f7c2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800f83c <k_thread_state_str+0x94>
		off += copy_bytes(buf + off, buf_size - off,
 800f7c6:	f8df a078 	ldr.w	sl, [pc, #120]	; 800f840 <k_thread_state_str+0x98>
	size_t      off = 0;
 800f7ca:	465d      	mov	r5, fp
		bit = BIT(index);
 800f7cc:	fa5f f18b 	uxtb.w	r1, fp
 800f7d0:	f04f 0801 	mov.w	r8, #1
 800f7d4:	fa08 f801 	lsl.w	r8, r8, r1
		if ((thread_state & bit) == 0) {
 800f7d8:	ea17 0f08 	tst.w	r7, r8
 800f7dc:	d01d      	beq.n	800f81a <k_thread_state_str+0x72>
	bytes_to_copy = MIN(dest_size, src_size);
 800f7de:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800f7e2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
		off += copy_bytes(buf + off, buf_size - off,
 800f7e6:	1b72      	subs	r2, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	bf28      	it	cs
 800f7ec:	461a      	movcs	r2, r3
 800f7ee:	9201      	str	r2, [sp, #4]
 800f7f0:	f7f1 fc4e 	bl	8001090 <memcpy>
		off += copy_bytes(buf + off, buf_size - off,
 800f7f4:	9a01      	ldr	r2, [sp, #4]

		thread_state &= ~bit;

		if (thread_state != 0) {
 800f7f6:	ea37 0708 	bics.w	r7, r7, r8
		off += copy_bytes(buf + off, buf_size - off,
 800f7fa:	4415      	add	r5, r2
		if (thread_state != 0) {
 800f7fc:	eb04 0005 	add.w	r0, r4, r5
 800f800:	d00f      	beq.n	800f822 <k_thread_state_str+0x7a>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
 800f802:	eba6 0805 	sub.w	r8, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
 800f806:	f1b8 0f01 	cmp.w	r8, #1
 800f80a:	bf28      	it	cs
 800f80c:	f04f 0801 	movcs.w	r8, #1
 800f810:	4908      	ldr	r1, [pc, #32]	; (800f834 <k_thread_state_str+0x8c>)
 800f812:	4642      	mov	r2, r8
 800f814:	f7f1 fc3c 	bl	8001090 <memcpy>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
 800f818:	4445      	add	r5, r8
	for (uint8_t index = 0; thread_state != 0; index++) {
 800f81a:	f10b 0b01 	add.w	fp, fp, #1
		off += copy_bytes(buf + off, buf_size - off,
 800f81e:	1960      	adds	r0, r4, r5
 800f820:	e7d4      	b.n	800f7cc <k_thread_state_str+0x24>
		}
	}

	buf[off] = '\0';
 800f822:	2300      	movs	r3, #0
 800f824:	7003      	strb	r3, [r0, #0]

	return (const char *)buf;
 800f826:	4620      	mov	r0, r4
}
 800f828:	b003      	add	sp, #12
 800f82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return "";
 800f82e:	4802      	ldr	r0, [pc, #8]	; (800f838 <k_thread_state_str+0x90>)
 800f830:	e7fa      	b.n	800f828 <k_thread_state_str+0x80>
 800f832:	bf00      	nop
 800f834:	0801e417 	.word	0x0801e417
 800f838:	0801bd35 	.word	0x0801bd35
 800f83c:	0801b2a8 	.word	0x0801b2a8
 800f840:	0801b2c8 	.word	0x0801b2c8

0800f844 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800f844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f848:	b085      	sub	sp, #20
 800f84a:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800f84c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 800f850:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 800f854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f856:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800f858:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 800f85a:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800f85c:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 800f860:	7343      	strb	r3, [r0, #13]

	thread_base->prio = priority;
 800f862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f864:	7383      	strb	r3, [r0, #14]
	thread_base->pended_on = NULL;
 800f866:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800f868:	f101 0340 	add.w	r3, r1, #64	; 0x40
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800f86c:	f10a 0740 	add.w	r7, sl, #64	; 0x40
{
 800f870:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800f872:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800f876:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
 800f878:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 800f87a:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
 800f87c:	440f      	add	r7, r1
__ssp_bos_icheck3(memset, void *, int)
 800f87e:	4652      	mov	r2, sl
 800f880:	21aa      	movs	r1, #170	; 0xaa
 800f882:	4618      	mov	r0, r3
{
 800f884:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800f888:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800f88c:	f001 fd04 	bl	8011298 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800f890:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.delta = delta;
 800f892:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
 800f896:	e9c4 0a27 	strd	r0, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800f89a:	9302      	str	r3, [sp, #8]
 800f89c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f89e:	463a      	mov	r2, r7
 800f8a0:	e9cd b300 	strd	fp, r3, [sp]
 800f8a4:	4631      	mov	r1, r6
 800f8a6:	4643      	mov	r3, r8
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f7fb fc5f 	bl	800b16c <arch_new_thread>
	new_thread->entry.parameter2 = p2;
 800f8ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b0:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
 800f8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
 800f8b4:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
 800f8b6:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
 800f8ba:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
 800f8bc:	f04f 0210 	mov.w	r2, #16
 800f8c0:	f3ef 8311 	mrs	r3, BASEPRI
 800f8c4:	f382 8812 	msr	BASEPRI_MAX, r2
 800f8c8:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
 800f8cc:	4e0f      	ldr	r6, [pc, #60]	; (800f90c <z_setup_new_thread+0xc8>)
 800f8ce:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800f8d0:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
 800f8d2:	62f4      	str	r4, [r6, #44]	; 0x2c
	__asm__ volatile(
 800f8d4:	f383 8811 	msr	BASEPRI, r3
 800f8d8:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
 800f8dc:	f1b9 0f00 	cmp.w	r9, #0
 800f8e0:	d011      	beq.n	800f906 <z_setup_new_thread+0xc2>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800f8e2:	221f      	movs	r2, #31
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800f8ea:	f001 fead 	bl	8011648 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 800f8ee:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
 800f8f2:	68b3      	ldr	r3, [r6, #8]
 800f8f4:	b10b      	cbz	r3, 800f8fa <z_setup_new_thread+0xb6>
	new_thread->resource_pool = _current->resource_pool;
 800f8f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
 800f8fa:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 800f8fe:	4638      	mov	r0, r7
 800f900:	b005      	add	sp, #20
 800f902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
 800f906:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
 800f90a:	e7f2      	b.n	800f8f2 <z_setup_new_thread+0xae>
 800f90c:	20002200 	.word	0x20002200

0800f910 <z_impl_k_thread_create>:
{
 800f910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f912:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800f914:	2500      	movs	r5, #0
 800f916:	9505      	str	r5, [sp, #20]
 800f918:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f91a:	9504      	str	r5, [sp, #16]
 800f91c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f91e:	9503      	str	r5, [sp, #12]
 800f920:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f922:	9502      	str	r5, [sp, #8]
{
 800f924:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800f928:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f92a:	9501      	str	r5, [sp, #4]
 800f92c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f92e:	9500      	str	r5, [sp, #0]
{
 800f930:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800f932:	f7ff ff87 	bl	800f844 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800f936:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800f93a:	bf08      	it	eq
 800f93c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800f940:	d005      	beq.n	800f94e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800f942:	ea56 0307 	orrs.w	r3, r6, r7
 800f946:	d105      	bne.n	800f954 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 800f948:	4620      	mov	r0, r4
 800f94a:	f000 fba9 	bl	80100a0 <z_sched_start>
}
 800f94e:	4620      	mov	r0, r4
 800f950:	b007      	add	sp, #28
 800f952:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800f954:	4903      	ldr	r1, [pc, #12]	; (800f964 <z_impl_k_thread_create+0x54>)
 800f956:	463a      	mov	r2, r7
 800f958:	4633      	mov	r3, r6
 800f95a:	f104 0018 	add.w	r0, r4, #24
 800f95e:	f000 fda9 	bl	80104b4 <z_add_timeout>
 800f962:	e7f4      	b.n	800f94e <z_impl_k_thread_create+0x3e>
 800f964:	080197b9 	.word	0x080197b9

0800f968 <z_init_static_threads>:
{
 800f968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f96a:	4c22      	ldr	r4, [pc, #136]	; (800f9f4 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 800f96c:	4d22      	ldr	r5, [pc, #136]	; (800f9f8 <z_init_static_threads+0x90>)
{
 800f96e:	b087      	sub	sp, #28
 800f970:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800f972:	42ae      	cmp	r6, r5
 800f974:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800f978:	d30b      	bcc.n	800f992 <z_init_static_threads+0x2a>
	k_sched_lock();
 800f97a:	f000 fbe1 	bl	8010140 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800f97e:	4c1d      	ldr	r4, [pc, #116]	; (800f9f4 <z_init_static_threads+0x8c>)
 800f980:	4f1e      	ldr	r7, [pc, #120]	; (800f9fc <z_init_static_threads+0x94>)
 800f982:	260a      	movs	r6, #10
 800f984:	42ac      	cmp	r4, r5
 800f986:	d320      	bcc.n	800f9ca <z_init_static_threads+0x62>
}
 800f988:	b007      	add	sp, #28
 800f98a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800f98e:	f000 bbeb 	b.w	8010168 <k_sched_unlock>
		z_setup_new_thread(
 800f992:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f996:	9305      	str	r3, [sp, #20]
 800f998:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800f99c:	9304      	str	r3, [sp, #16]
 800f99e:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800f9a2:	9303      	str	r3, [sp, #12]
 800f9a4:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800f9a8:	9302      	str	r3, [sp, #8]
 800f9aa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800f9ae:	9301      	str	r3, [sp, #4]
 800f9b0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800f9ba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800f9be:	f7ff ff41 	bl	800f844 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800f9c2:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800f9c6:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800f9c8:	e7d2      	b.n	800f970 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800f9ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f9cc:	1c53      	adds	r3, r2, #1
 800f9ce:	d009      	beq.n	800f9e4 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800f9d0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800f9d4:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800f9d8:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800f9dc:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800f9de:	d103      	bne.n	800f9e8 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800f9e0:	f000 fb5e 	bl	80100a0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800f9e4:	3430      	adds	r4, #48	; 0x30
 800f9e6:	e7cd      	b.n	800f984 <z_init_static_threads+0x1c>
 800f9e8:	4639      	mov	r1, r7
 800f9ea:	3018      	adds	r0, #24
 800f9ec:	f000 fd62 	bl	80104b4 <z_add_timeout>
 800f9f0:	e7f8      	b.n	800f9e4 <z_init_static_threads+0x7c>
 800f9f2:	bf00      	nop
 800f9f4:	0801a2c0 	.word	0x0801a2c0
 800f9f8:	0801a2c0 	.word	0x0801a2c0
 800f9fc:	080197b9 	.word	0x080197b9

0800fa00 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
 800fa00:	4800      	ldr	r0, [pc, #0]	; (800fa04 <sys_kernel_version_get+0x4>)
 800fa02:	4770      	bx	lr
 800fa04:	03026300 	.word	0x03026300

0800fa08 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800fa08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	4617      	mov	r7, r2
 800fa10:	461e      	mov	r6, r3
	__asm__ volatile(
 800fa12:	f04f 0310 	mov.w	r3, #16
 800fa16:	f3ef 8811 	mrs	r8, BASEPRI
 800fa1a:	f383 8812 	msr	BASEPRI_MAX, r3
 800fa1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800fa22:	68c3      	ldr	r3, [r0, #12]
 800fa24:	4a33      	ldr	r2, [pc, #204]	; (800faf4 <z_impl_k_mutex_lock+0xec>)
 800fa26:	b17b      	cbz	r3, 800fa48 <z_impl_k_mutex_lock+0x40>
 800fa28:	6880      	ldr	r0, [r0, #8]
 800fa2a:	6891      	ldr	r1, [r2, #8]
 800fa2c:	4288      	cmp	r0, r1
 800fa2e:	d019      	beq.n	800fa64 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800fa30:	ea57 0306 	orrs.w	r3, r7, r6
 800fa34:	d118      	bne.n	800fa68 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 800fa36:	f388 8811 	msr	BASEPRI, r8
 800fa3a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 800fa3e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800fa42:	b002      	add	sp, #8
 800fa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 800fa48:	6891      	ldr	r1, [r2, #8]
 800fa4a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800fa4e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 800fa50:	3301      	adds	r3, #1
 800fa52:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 800fa54:	6893      	ldr	r3, [r2, #8]
 800fa56:	60a3      	str	r3, [r4, #8]
 800fa58:	f388 8811 	msr	BASEPRI, r8
 800fa5c:	f3bf 8f6f 	isb	sy
		return 0;
 800fa60:	2000      	movs	r0, #0
 800fa62:	e7ee      	b.n	800fa42 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
 800fa64:	6921      	ldr	r1, [r4, #16]
 800fa66:	e7f2      	b.n	800fa4e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800fa68:	f991 100e 	ldrsb.w	r1, [r1, #14]
 800fa6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800fa70:	4299      	cmp	r1, r3
 800fa72:	bfa8      	it	ge
 800fa74:	4619      	movge	r1, r3
 800fa76:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 800fa7a:	4291      	cmp	r1, r2
 800fa7c:	bfb8      	it	lt
 800fa7e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800fa80:	428b      	cmp	r3, r1
 800fa82:	dd2e      	ble.n	800fae2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 800fa84:	f009 fe1d 	bl	80196c2 <adjust_owner_prio.isra.0>
 800fa88:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800fa8a:	e9cd 7600 	strd	r7, r6, [sp]
 800fa8e:	481a      	ldr	r0, [pc, #104]	; (800faf8 <z_impl_k_mutex_lock+0xf0>)
 800fa90:	4622      	mov	r2, r4
 800fa92:	4641      	mov	r1, r8
 800fa94:	f000 fa8e 	bl	800ffb4 <z_pend_curr>
	if (got_mutex == 0) {
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d0e1      	beq.n	800fa60 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
 800fa9c:	f04f 0310 	mov.w	r3, #16
 800faa0:	f3ef 8611 	mrs	r6, BASEPRI
 800faa4:	f383 8812 	msr	BASEPRI_MAX, r3
 800faa8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 800faac:	68a0      	ldr	r0, [r4, #8]
 800faae:	b1d0      	cbz	r0, 800fae6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800fab0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800fab2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fab4:	429c      	cmp	r4, r3
 800fab6:	d00a      	beq.n	800face <z_impl_k_mutex_lock+0xc6>
 800fab8:	b14b      	cbz	r3, 800face <z_impl_k_mutex_lock+0xc6>
 800faba:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800fabe:	4299      	cmp	r1, r3
 800fac0:	bfa8      	it	ge
 800fac2:	4619      	movge	r1, r3
 800fac4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800fac8:	4299      	cmp	r1, r3
 800faca:	bfb8      	it	lt
 800facc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 800face:	f009 fdf8 	bl	80196c2 <adjust_owner_prio.isra.0>
 800fad2:	b140      	cbz	r0, 800fae6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 800fad4:	4808      	ldr	r0, [pc, #32]	; (800faf8 <z_impl_k_mutex_lock+0xf0>)
 800fad6:	4631      	mov	r1, r6
 800fad8:	f000 fad0 	bl	801007c <z_reschedule>
	return -EAGAIN;
 800fadc:	f06f 000a 	mvn.w	r0, #10
 800fae0:	e7af      	b.n	800fa42 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
 800fae2:	2500      	movs	r5, #0
 800fae4:	e7d1      	b.n	800fa8a <z_impl_k_mutex_lock+0x82>
	if (resched) {
 800fae6:	2d00      	cmp	r5, #0
 800fae8:	d1f4      	bne.n	800fad4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 800faea:	f386 8811 	msr	BASEPRI, r6
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	e7f3      	b.n	800fadc <z_impl_k_mutex_lock+0xd4>
 800faf4:	20002200 	.word	0x20002200
 800faf8:	2000238e 	.word	0x2000238e

0800fafc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800fafc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800fafe:	6883      	ldr	r3, [r0, #8]
{
 800fb00:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 800fb02:	b373      	cbz	r3, 800fb62 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800fb04:	4a1a      	ldr	r2, [pc, #104]	; (800fb70 <z_impl_k_mutex_unlock+0x74>)
 800fb06:	6892      	ldr	r2, [r2, #8]
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d12d      	bne.n	800fb68 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800fb0c:	68c3      	ldr	r3, [r0, #12]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d903      	bls.n	800fb1a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 800fb12:	3b01      	subs	r3, #1
 800fb14:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 800fb16:	2000      	movs	r0, #0
}
 800fb18:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800fb1a:	f04f 0310 	mov.w	r3, #16
 800fb1e:	f3ef 8511 	mrs	r5, BASEPRI
 800fb22:	f383 8812 	msr	BASEPRI_MAX, r3
 800fb26:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800fb2a:	6901      	ldr	r1, [r0, #16]
 800fb2c:	6880      	ldr	r0, [r0, #8]
 800fb2e:	f009 fdc8 	bl	80196c2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800fb32:	4620      	mov	r0, r4
 800fb34:	f009 fec1 	bl	80198ba <z_unpend_first_thread>
	mutex->owner = new_owner;
 800fb38:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800fb3a:	b160      	cbz	r0, 800fb56 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
 800fb3c:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800fb40:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800fb42:	2200      	movs	r2, #0
 800fb44:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
 800fb48:	f009 fe80 	bl	801984c <z_ready_thread>
		z_reschedule(&lock, key);
 800fb4c:	4809      	ldr	r0, [pc, #36]	; (800fb74 <z_impl_k_mutex_unlock+0x78>)
 800fb4e:	4629      	mov	r1, r5
 800fb50:	f000 fa94 	bl	801007c <z_reschedule>
 800fb54:	e7df      	b.n	800fb16 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 800fb56:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800fb58:	f385 8811 	msr	BASEPRI, r5
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	e7d9      	b.n	800fb16 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 800fb62:	f06f 0015 	mvn.w	r0, #21
 800fb66:	e7d7      	b.n	800fb18 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 800fb68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb6c:	e7d4      	b.n	800fb18 <z_impl_k_mutex_unlock+0x1c>
 800fb6e:	bf00      	nop
 800fb70:	20002200 	.word	0x20002200
 800fb74:	2000238e 	.word	0x2000238e

0800fb78 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4604      	mov	r4, r0
	__asm__ volatile(
 800fb7c:	f04f 0310 	mov.w	r3, #16
 800fb80:	f3ef 8511 	mrs	r5, BASEPRI
 800fb84:	f383 8812 	msr	BASEPRI_MAX, r3
 800fb88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800fb8c:	f009 fe95 	bl	80198ba <z_unpend_first_thread>

	if (thread != NULL) {
 800fb90:	b150      	cbz	r0, 800fba8 <z_impl_k_sem_give+0x30>
 800fb92:	2200      	movs	r2, #0
 800fb94:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800fb98:	f009 fe58 	bl	801984c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800fb9c:	4629      	mov	r1, r5
 800fb9e:	4808      	ldr	r0, [pc, #32]	; (800fbc0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800fba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800fba4:	f000 ba6a 	b.w	801007c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800fba8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	bf18      	it	ne
 800fbb0:	3301      	addne	r3, #1
 800fbb2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800fbb4:	2102      	movs	r1, #2
 800fbb6:	f104 0010 	add.w	r0, r4, #16
 800fbba:	f00a f89a 	bl	8019cf2 <z_handle_obj_poll_events>
}
 800fbbe:	e7ed      	b.n	800fb9c <z_impl_k_sem_give+0x24>
 800fbc0:	2000238e 	.word	0x2000238e

0800fbc4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800fbc4:	b513      	push	{r0, r1, r4, lr}
 800fbc6:	f04f 0410 	mov.w	r4, #16
 800fbca:	f3ef 8111 	mrs	r1, BASEPRI
 800fbce:	f384 8812 	msr	BASEPRI_MAX, r4
 800fbd2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800fbd6:	6884      	ldr	r4, [r0, #8]
 800fbd8:	b144      	cbz	r4, 800fbec <z_impl_k_sem_take+0x28>
		sem->count--;
 800fbda:	3c01      	subs	r4, #1
 800fbdc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800fbde:	f381 8811 	msr	BASEPRI, r1
 800fbe2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800fbe6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800fbe8:	b002      	add	sp, #8
 800fbea:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800fbec:	ea52 0403 	orrs.w	r4, r2, r3
 800fbf0:	d106      	bne.n	800fc00 <z_impl_k_sem_take+0x3c>
 800fbf2:	f381 8811 	msr	BASEPRI, r1
 800fbf6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800fbfa:	f06f 000f 	mvn.w	r0, #15
 800fbfe:	e7f3      	b.n	800fbe8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800fc00:	e9cd 2300 	strd	r2, r3, [sp]
 800fc04:	4602      	mov	r2, r0
 800fc06:	4802      	ldr	r0, [pc, #8]	; (800fc10 <z_impl_k_sem_take+0x4c>)
 800fc08:	f000 f9d4 	bl	800ffb4 <z_pend_curr>
	return ret;
 800fc0c:	e7ec      	b.n	800fbe8 <z_impl_k_sem_take+0x24>
 800fc0e:	bf00      	nop
 800fc10:	2000238e 	.word	0x2000238e

0800fc14 <submit_to_queue_locked>:
{
 800fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 800fc16:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800fc18:	079a      	lsls	r2, r3, #30
{
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800fc1e:	f3c3 0640 	ubfx	r6, r3, #1, #1
 800fc22:	d42c      	bmi.n	800fc7e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800fc24:	075b      	lsls	r3, r3, #29
 800fc26:	d41a      	bmi.n	800fc5e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
 800fc28:	680b      	ldr	r3, [r1, #0]
 800fc2a:	b90b      	cbnz	r3, 800fc30 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 800fc2c:	6883      	ldr	r3, [r0, #8]
 800fc2e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
 800fc30:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800fc32:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
 800fc34:	bf44      	itt	mi
 800fc36:	68a3      	ldrmi	r3, [r4, #8]
 800fc38:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
 800fc3a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
 800fc3c:	bf4c      	ite	mi
 800fc3e:	2602      	movmi	r6, #2
		ret = 1;
 800fc40:	2601      	movpl	r6, #1
	if (queue == NULL) {
 800fc42:	2d00      	cmp	r5, #0
 800fc44:	d03a      	beq.n	800fcbc <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800fc46:	4b1f      	ldr	r3, [pc, #124]	; (800fcc4 <submit_to_queue_locked+0xb0>)
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	42ab      	cmp	r3, r5
 800fc4c:	d00a      	beq.n	800fc64 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
 800fc4e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800fc52:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800fc54:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800fc58:	d414      	bmi.n	800fc84 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
 800fc5a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	603b      	str	r3, [r7, #0]
	return ret;
 800fc62:	e025      	b.n	800fcb0 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800fc64:	f009 fd06 	bl	8019674 <k_is_in_isr>
 800fc68:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d1f0      	bne.n	800fc52 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800fc70:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800fc72:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800fc76:	d5f0      	bpl.n	800fc5a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
 800fc78:	b152      	cbz	r2, 800fc90 <submit_to_queue_locked+0x7c>
 800fc7a:	075b      	lsls	r3, r3, #29
 800fc7c:	d408      	bmi.n	800fc90 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
 800fc7e:	f06f 060f 	mvn.w	r6, #15
 800fc82:	e7ec      	b.n	800fc5e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
 800fc84:	2a00      	cmp	r2, #0
 800fc86:	d1fa      	bne.n	800fc7e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
 800fc88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1f6      	bne.n	800fc7e <submit_to_queue_locked+0x6a>
	parent->next = child;
 800fc90:	2300      	movs	r3, #0
 800fc92:	6023      	str	r3, [r4, #0]
	return list->tail;
 800fc94:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
 800fc98:	b963      	cbnz	r3, 800fcb4 <submit_to_queue_locked+0xa0>
	list->head = node;
 800fc9a:	e9c5 443e 	strd	r4, r4, [r5, #248]	; 0xf8
		(void)notify_queue_locked(queue);
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f009 fd39 	bl	8019716 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 800fca4:	68e3      	ldr	r3, [r4, #12]
 800fca6:	f043 0304 	orr.w	r3, r3, #4
 800fcaa:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	60a3      	str	r3, [r4, #8]
}
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 800fcb4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800fcb6:	f8c5 40fc 	str.w	r4, [r5, #252]	; 0xfc
}
 800fcba:	e7f0      	b.n	800fc9e <submit_to_queue_locked+0x8a>
		return -EINVAL;
 800fcbc:	f06f 0615 	mvn.w	r6, #21
 800fcc0:	e7cd      	b.n	800fc5e <submit_to_queue_locked+0x4a>
 800fcc2:	bf00      	nop
 800fcc4:	20002200 	.word	0x20002200

0800fcc8 <k_work_submit>:
{
 800fcc8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800fcca:	4801      	ldr	r0, [pc, #4]	; (800fcd0 <k_work_submit+0x8>)
 800fccc:	f009 bd48 	b.w	8019760 <k_work_submit_to_queue>
 800fcd0:	200018c0 	.word	0x200018c0

0800fcd4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 800fcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcd6:	b089      	sub	sp, #36	; 0x24
 800fcd8:	4604      	mov	r4, r0
	list->head = NULL;
 800fcda:	2000      	movs	r0, #0
	list->tail = NULL;
 800fcdc:	e9c4 003e 	strd	r0, r0, [r4, #248]	; 0xf8
 800fce0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fce2:	f504 7080 	add.w	r0, r4, #256	; 0x100
	list->tail = (sys_dnode_t *)list;
 800fce6:	e9c4 0040 	strd	r0, r0, [r4, #256]	; 0x100
 800fcea:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800fcee:	e9c4 0042 	strd	r0, r0, [r4, #264]	; 0x108

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800fcf2:	b31d      	cbz	r5, 800fd3c <k_work_queue_start+0x68>
 800fcf4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	f240 1001 	movw	r0, #257	; 0x101
 800fcfc:	bf08      	it	eq
 800fcfe:	2001      	moveq	r0, #1
	*flagp = flags;
 800fd00:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800fd04:	2000      	movs	r0, #0
 800fd06:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800fd0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fd0e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 800fd12:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800fd16:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fd1a:	4b09      	ldr	r3, [pc, #36]	; (800fd40 <k_work_queue_start+0x6c>)
 800fd1c:	9400      	str	r4, [sp, #0]
 800fd1e:	4620      	mov	r0, r4
 800fd20:	f7ff fdf6 	bl	800f910 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800fd24:	b125      	cbz	r5, 800fd30 <k_work_queue_start+0x5c>
 800fd26:	6829      	ldr	r1, [r5, #0]
 800fd28:	b111      	cbz	r1, 800fd30 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7ff fd2c 	bl	800f788 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800fd30:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 800fd32:	b009      	add	sp, #36	; 0x24
 800fd34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fd38:	f009 bca4 	b.w	8019684 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	e7df      	b.n	800fd00 <k_work_queue_start+0x2c>
 800fd40:	08002b61 	.word	0x08002b61

0800fd44 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 800fd44:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 800fd46:	4d07      	ldr	r5, [pc, #28]	; (800fd64 <z_reset_time_slice+0x20>)
 800fd48:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 800fd4a:	b154      	cbz	r4, 800fd62 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 800fd4c:	f7fe fce8 	bl	800e720 <sys_clock_elapsed>
 800fd50:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <z_reset_time_slice+0x24>)
 800fd52:	4404      	add	r4, r0
 800fd54:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 800fd56:	6828      	ldr	r0, [r5, #0]
 800fd58:	2100      	movs	r1, #0
	}
}
 800fd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 800fd5e:	f009 be3d 	b.w	80199dc <z_set_timeout_expiry>
}
 800fd62:	bd38      	pop	{r3, r4, r5, pc}
 800fd64:	20002240 	.word	0x20002240
 800fd68:	20002200 	.word	0x20002200

0800fd6c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 800fd6c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 800fd6e:	4d0d      	ldr	r5, [pc, #52]	; (800fda4 <update_cache+0x38>)
 800fd70:	462b      	mov	r3, r5
 800fd72:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fd76:	429c      	cmp	r4, r3
 800fd78:	d000      	beq.n	800fd7c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800fd7a:	b904      	cbnz	r4, 800fd7e <update_cache+0x12>
 800fd7c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800fd7e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800fd80:	b938      	cbnz	r0, 800fd92 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 800fd82:	7b5a      	ldrb	r2, [r3, #13]
 800fd84:	06d2      	lsls	r2, r2, #27
 800fd86:	d104      	bne.n	800fd92 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800fd88:	69a2      	ldr	r2, [r4, #24]
 800fd8a:	b912      	cbnz	r2, 800fd92 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 800fd8c:	89da      	ldrh	r2, [r3, #14]
 800fd8e:	2a7f      	cmp	r2, #127	; 0x7f
 800fd90:	d805      	bhi.n	800fd9e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 800fd92:	429c      	cmp	r4, r3
 800fd94:	d002      	beq.n	800fd9c <update_cache+0x30>
			z_reset_time_slice(thread);
 800fd96:	4620      	mov	r0, r4
 800fd98:	f7ff ffd4 	bl	800fd44 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 800fd9c:	4623      	mov	r3, r4
 800fd9e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 800fda0:	bd38      	pop	{r3, r4, r5, pc}
 800fda2:	bf00      	nop
 800fda4:	20002200 	.word	0x20002200

0800fda8 <move_thread_to_end_of_prio_q>:
{
 800fda8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800fdaa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800fdae:	7b43      	ldrb	r3, [r0, #13]
 800fdb0:	2a00      	cmp	r2, #0
{
 800fdb2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800fdb4:	da04      	bge.n	800fdc0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800fdb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdba:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800fdbc:	f009 fce1 	bl	8019782 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800fdc0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 800fdc2:	4a15      	ldr	r2, [pc, #84]	; (800fe18 <move_thread_to_end_of_prio_q+0x70>)
 800fdc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fdc8:	4610      	mov	r0, r2
 800fdca:	734b      	strb	r3, [r1, #13]
 800fdcc:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800fdd0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fdd2:	4283      	cmp	r3, r0
 800fdd4:	bf08      	it	eq
 800fdd6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fdd8:	b923      	cbnz	r3, 800fde4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800fdda:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 800fdde:	6021      	str	r1, [r4, #0]
	list->tail = node;
 800fde0:	6251      	str	r1, [r2, #36]	; 0x24
}
 800fde2:	e00c      	b.n	800fdfe <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 800fde4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800fde8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800fdec:	42b5      	cmp	r5, r6
 800fdee:	d00e      	beq.n	800fe0e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800fdf0:	42ae      	cmp	r6, r5
 800fdf2:	dd0c      	ble.n	800fe0e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800fdf4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800fdf6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800fdfa:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800fdfc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 800fdfe:	6890      	ldr	r0, [r2, #8]
 800fe00:	1a43      	subs	r3, r0, r1
 800fe02:	4258      	negs	r0, r3
}
 800fe04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800fe08:	4158      	adcs	r0, r3
 800fe0a:	f7ff bfaf 	b.w	800fd6c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800fe0e:	429c      	cmp	r4, r3
 800fe10:	d0e3      	beq.n	800fdda <move_thread_to_end_of_prio_q+0x32>
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	e7e0      	b.n	800fdd8 <move_thread_to_end_of_prio_q+0x30>
 800fe16:	bf00      	nop
 800fe18:	20002200 	.word	0x20002200

0800fe1c <ready_thread>:
{
 800fe1c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800fe1e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800fe22:	7b42      	ldrb	r2, [r0, #13]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	db29      	blt.n	800fe7c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800fe28:	06d3      	lsls	r3, r2, #27
 800fe2a:	d127      	bne.n	800fe7c <ready_thread+0x60>
	return node->next != NULL;
 800fe2c:	6983      	ldr	r3, [r0, #24]
 800fe2e:	bb2b      	cbnz	r3, 800fe7c <ready_thread+0x60>
	return list->head == list;
 800fe30:	4913      	ldr	r1, [pc, #76]	; (800fe80 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800fe32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fe36:	7342      	strb	r2, [r0, #13]
 800fe38:	460a      	mov	r2, r1
 800fe3a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fe3e:	4294      	cmp	r4, r2
 800fe40:	bf18      	it	ne
 800fe42:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 800fe44:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fe46:	b923      	cbnz	r3, 800fe52 <ready_thread+0x36>
	node->prev = tail;
 800fe48:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 800fe4c:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800fe4e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800fe50:	e00c      	b.n	800fe6c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 800fe52:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800fe56:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800fe5a:	42b5      	cmp	r5, r6
 800fe5c:	d00a      	beq.n	800fe74 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800fe5e:	42ae      	cmp	r6, r5
 800fe60:	dd08      	ble.n	800fe74 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 800fe62:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800fe64:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800fe68:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800fe6a:	6058      	str	r0, [r3, #4]
}
 800fe6c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800fe6e:	2000      	movs	r0, #0
 800fe70:	f7ff bf7c 	b.w	800fd6c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800fe74:	42a3      	cmp	r3, r4
 800fe76:	d0e7      	beq.n	800fe48 <ready_thread+0x2c>
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	e7e4      	b.n	800fe46 <ready_thread+0x2a>
}
 800fe7c:	bc70      	pop	{r4, r5, r6}
 800fe7e:	4770      	bx	lr
 800fe80:	20002200 	.word	0x20002200

0800fe84 <unready_thread>:
{
 800fe84:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800fe86:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800fe8a:	7b43      	ldrb	r3, [r0, #13]
 800fe8c:	2a00      	cmp	r2, #0
{
 800fe8e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800fe90:	da04      	bge.n	800fe9c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800fe92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe96:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800fe98:	f009 fc73 	bl	8019782 <sys_dlist_remove>
	update_cache(thread == _current);
 800fe9c:	4b04      	ldr	r3, [pc, #16]	; (800feb0 <unready_thread+0x2c>)
 800fe9e:	6898      	ldr	r0, [r3, #8]
 800fea0:	1a43      	subs	r3, r0, r1
 800fea2:	4258      	negs	r0, r3
 800fea4:	4158      	adcs	r0, r3
}
 800fea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800feaa:	f7ff bf5f 	b.w	800fd6c <update_cache>
 800feae:	bf00      	nop
 800feb0:	20002200 	.word	0x20002200

0800feb4 <pend_locked>:
{
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	4615      	mov	r5, r2
 800feb8:	461c      	mov	r4, r3
 800feba:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 800febc:	f009 fc9e 	bl	80197fc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800fec0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800fec4:	bf08      	it	eq
 800fec6:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800feca:	d008      	beq.n	800fede <pend_locked+0x2a>
 800fecc:	462a      	mov	r2, r5
 800fece:	4623      	mov	r3, r4
 800fed0:	f106 0018 	add.w	r0, r6, #24
 800fed4:	4902      	ldr	r1, [pc, #8]	; (800fee0 <pend_locked+0x2c>)
}
 800fed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feda:	f000 baeb 	b.w	80104b4 <z_add_timeout>
 800fede:	bd70      	pop	{r4, r5, r6, pc}
 800fee0:	080197b9 	.word	0x080197b9

0800fee4 <k_sched_time_slice_set>:
{
 800fee4:	b510      	push	{r4, lr}
	__asm__ volatile(
 800fee6:	f04f 0310 	mov.w	r3, #16
 800feea:	f3ef 8411 	mrs	r4, BASEPRI
 800feee:	f383 8812 	msr	BASEPRI_MAX, r3
 800fef2:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 800fef6:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800fef8:	2800      	cmp	r0, #0
 800fefa:	fb00 f303 	mul.w	r3, r0, r3
 800fefe:	dd02      	ble.n	800ff06 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 800ff00:	2b02      	cmp	r3, #2
 800ff02:	bfb8      	it	lt
 800ff04:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 800ff06:	4a07      	ldr	r2, [pc, #28]	; (800ff24 <k_sched_time_slice_set+0x40>)
 800ff08:	2000      	movs	r0, #0
 800ff0a:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 800ff0c:	4806      	ldr	r0, [pc, #24]	; (800ff28 <k_sched_time_slice_set+0x44>)
 800ff0e:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 800ff10:	4b06      	ldr	r3, [pc, #24]	; (800ff2c <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 800ff12:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 800ff14:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 800ff16:	f7ff ff15 	bl	800fd44 <z_reset_time_slice>
	__asm__ volatile(
 800ff1a:	f384 8811 	msr	BASEPRI, r4
 800ff1e:	f3bf 8f6f 	isb	sy
}
 800ff22:	bd10      	pop	{r4, pc}
 800ff24:	20002200 	.word	0x20002200
 800ff28:	20002240 	.word	0x20002240
 800ff2c:	2000223c 	.word	0x2000223c

0800ff30 <z_time_slice>:
{
 800ff30:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800ff32:	f04f 0310 	mov.w	r3, #16
 800ff36:	f3ef 8511 	mrs	r5, BASEPRI
 800ff3a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ff3e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800ff42:	4b17      	ldr	r3, [pc, #92]	; (800ffa0 <z_time_slice+0x70>)
 800ff44:	4a17      	ldr	r2, [pc, #92]	; (800ffa4 <z_time_slice+0x74>)
 800ff46:	689c      	ldr	r4, [r3, #8]
 800ff48:	6811      	ldr	r1, [r2, #0]
 800ff4a:	428c      	cmp	r4, r1
 800ff4c:	d107      	bne.n	800ff5e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f7ff fef8 	bl	800fd44 <z_reset_time_slice>
	__asm__ volatile(
 800ff54:	f385 8811 	msr	BASEPRI, r5
 800ff58:	f3bf 8f6f 	isb	sy
}
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800ff5e:	2100      	movs	r1, #0
 800ff60:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 800ff62:	4a11      	ldr	r2, [pc, #68]	; (800ffa8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 800ff64:	6812      	ldr	r2, [r2, #0]
 800ff66:	b1c2      	cbz	r2, 800ff9a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 800ff68:	89e2      	ldrh	r2, [r4, #14]
 800ff6a:	2a7f      	cmp	r2, #127	; 0x7f
 800ff6c:	d815      	bhi.n	800ff9a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 800ff6e:	7b62      	ldrb	r2, [r4, #13]
 800ff70:	06d2      	lsls	r2, r2, #27
 800ff72:	d112      	bne.n	800ff9a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800ff74:	4a0d      	ldr	r2, [pc, #52]	; (800ffac <z_time_slice+0x7c>)
 800ff76:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800ff7a:	6812      	ldr	r2, [r2, #0]
 800ff7c:	4291      	cmp	r1, r2
 800ff7e:	db0c      	blt.n	800ff9a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 800ff80:	4a0b      	ldr	r2, [pc, #44]	; (800ffb0 <z_time_slice+0x80>)
 800ff82:	4294      	cmp	r4, r2
 800ff84:	d009      	beq.n	800ff9a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 800ff86:	691a      	ldr	r2, [r3, #16]
 800ff88:	4282      	cmp	r2, r0
 800ff8a:	dc03      	bgt.n	800ff94 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f7ff ff0b 	bl	800fda8 <move_thread_to_end_of_prio_q>
 800ff92:	e7dc      	b.n	800ff4e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 800ff94:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 800ff96:	611a      	str	r2, [r3, #16]
 800ff98:	e7dc      	b.n	800ff54 <z_time_slice+0x24>
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	e7fb      	b.n	800ff96 <z_time_slice+0x66>
 800ff9e:	bf00      	nop
 800ffa0:	20002200 	.word	0x20002200
 800ffa4:	20002238 	.word	0x20002238
 800ffa8:	20002240 	.word	0x20002240
 800ffac:	2000223c 	.word	0x2000223c
 800ffb0:	200016c8 	.word	0x200016c8

0800ffb4 <z_pend_curr>:
{
 800ffb4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 800ffb6:	480c      	ldr	r0, [pc, #48]	; (800ffe8 <z_pend_curr+0x34>)
 800ffb8:	4d0c      	ldr	r5, [pc, #48]	; (800ffec <z_pend_curr+0x38>)
 800ffba:	6886      	ldr	r6, [r0, #8]
 800ffbc:	602e      	str	r6, [r5, #0]
{
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	4611      	mov	r1, r2
 800ffc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 800ffc6:	f04f 0610 	mov.w	r6, #16
 800ffca:	f3ef 8511 	mrs	r5, BASEPRI
 800ffce:	f386 8812 	msr	BASEPRI_MAX, r6
 800ffd2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 800ffd6:	6880      	ldr	r0, [r0, #8]
 800ffd8:	f7ff ff6c 	bl	800feb4 <pend_locked>
	ret = arch_swap(key);
 800ffdc:	4620      	mov	r0, r4
}
 800ffde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffe2:	f7fb b84d 	b.w	800b080 <arch_swap>
 800ffe6:	bf00      	nop
 800ffe8:	20002200 	.word	0x20002200
 800ffec:	20002238 	.word	0x20002238

0800fff0 <z_set_prio>:
{
 800fff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff2:	4604      	mov	r4, r0
 800fff4:	f04f 0310 	mov.w	r3, #16
 800fff8:	f3ef 8611 	mrs	r6, BASEPRI
 800fffc:	f383 8812 	msr	BASEPRI_MAX, r3
 8010000:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8010004:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8010006:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 8010008:	b249      	sxtb	r1, r1
 801000a:	d119      	bne.n	8010040 <z_set_prio+0x50>
	return node->next != NULL;
 801000c:	6985      	ldr	r5, [r0, #24]
 801000e:	b9bd      	cbnz	r5, 8010040 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010014:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8010016:	f009 fbb4 	bl	8019782 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 801001a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 801001c:	4a16      	ldr	r2, [pc, #88]	; (8010078 <z_set_prio+0x88>)
				thread->base.prio = prio;
 801001e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8010020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010024:	7343      	strb	r3, [r0, #13]
 8010026:	4613      	mov	r3, r2
 8010028:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801002c:	4298      	cmp	r0, r3
 801002e:	bf18      	it	ne
 8010030:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
 8010032:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010034:	b95d      	cbnz	r5, 801004e <z_set_prio+0x5e>
	node->prev = tail;
 8010036:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
 801003a:	6004      	str	r4, [r0, #0]
	list->tail = node;
 801003c:	6254      	str	r4, [r2, #36]	; 0x24
}
 801003e:	e011      	b.n	8010064 <z_set_prio+0x74>
			thread->base.prio = prio;
 8010040:	73a1      	strb	r1, [r4, #14]
 8010042:	2000      	movs	r0, #0
	__asm__ volatile(
 8010044:	f386 8811 	msr	BASEPRI, r6
 8010048:	f3bf 8f6f 	isb	sy
}
 801004c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
 801004e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
 8010052:	42b9      	cmp	r1, r7
 8010054:	d00b      	beq.n	801006e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8010056:	428f      	cmp	r7, r1
 8010058:	dd09      	ble.n	801006e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
 801005a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 801005c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 8010060:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8010062:	606c      	str	r4, [r5, #4]
			update_cache(1);
 8010064:	2001      	movs	r0, #1
 8010066:	f7ff fe81 	bl	800fd6c <update_cache>
 801006a:	2001      	movs	r0, #1
 801006c:	e7ea      	b.n	8010044 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
 801006e:	42a8      	cmp	r0, r5
 8010070:	d0e1      	beq.n	8010036 <z_set_prio+0x46>
 8010072:	682d      	ldr	r5, [r5, #0]
 8010074:	e7de      	b.n	8010034 <z_set_prio+0x44>
 8010076:	bf00      	nop
 8010078:	20002200 	.word	0x20002200

0801007c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801007c:	b949      	cbnz	r1, 8010092 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801007e:	f3ef 8005 	mrs	r0, IPSR
 8010082:	b930      	cbnz	r0, 8010092 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8010084:	4b05      	ldr	r3, [pc, #20]	; (801009c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8010086:	69da      	ldr	r2, [r3, #28]
 8010088:	689b      	ldr	r3, [r3, #8]
 801008a:	429a      	cmp	r2, r3
 801008c:	d001      	beq.n	8010092 <z_reschedule+0x16>
 801008e:	f7fa bff7 	b.w	800b080 <arch_swap>
 8010092:	f381 8811 	msr	BASEPRI, r1
 8010096:	f3bf 8f6f 	isb	sy
}
 801009a:	4770      	bx	lr
 801009c:	20002200 	.word	0x20002200

080100a0 <z_sched_start>:
{
 80100a0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80100a2:	f04f 0210 	mov.w	r2, #16
 80100a6:	f3ef 8411 	mrs	r4, BASEPRI
 80100aa:	f382 8812 	msr	BASEPRI_MAX, r2
 80100ae:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80100b2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80100b4:	0751      	lsls	r1, r2, #29
 80100b6:	d404      	bmi.n	80100c2 <z_sched_start+0x22>
	__asm__ volatile(
 80100b8:	f384 8811 	msr	BASEPRI, r4
 80100bc:	f3bf 8f6f 	isb	sy
}
 80100c0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80100c2:	f022 0204 	bic.w	r2, r2, #4
 80100c6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80100c8:	f7ff fea8 	bl	800fe1c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80100cc:	4621      	mov	r1, r4
 80100ce:	4802      	ldr	r0, [pc, #8]	; (80100d8 <z_sched_start+0x38>)
}
 80100d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80100d4:	f7ff bfd2 	b.w	801007c <z_reschedule>
 80100d8:	2000238e 	.word	0x2000238e

080100dc <z_impl_k_thread_suspend>:
{
 80100dc:	b570      	push	{r4, r5, r6, lr}
 80100de:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80100e0:	3018      	adds	r0, #24
 80100e2:	f009 fc65 	bl	80199b0 <z_abort_timeout>
	__asm__ volatile(
 80100e6:	f04f 0310 	mov.w	r3, #16
 80100ea:	f3ef 8611 	mrs	r6, BASEPRI
 80100ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80100f2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80100f6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 80100fa:	7b63      	ldrb	r3, [r4, #13]
 80100fc:	2a00      	cmp	r2, #0
 80100fe:	da05      	bge.n	801010c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010104:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8010106:	4620      	mov	r0, r4
 8010108:	f009 fb3b 	bl	8019782 <sys_dlist_remove>
		update_cache(thread == _current);
 801010c:	4d0b      	ldr	r5, [pc, #44]	; (801013c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 801010e:	7b63      	ldrb	r3, [r4, #13]
 8010110:	68a8      	ldr	r0, [r5, #8]
 8010112:	f043 0310 	orr.w	r3, r3, #16
 8010116:	7363      	strb	r3, [r4, #13]
 8010118:	1b03      	subs	r3, r0, r4
 801011a:	4258      	negs	r0, r3
 801011c:	4158      	adcs	r0, r3
 801011e:	f7ff fe25 	bl	800fd6c <update_cache>
	__asm__ volatile(
 8010122:	f386 8811 	msr	BASEPRI, r6
 8010126:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 801012a:	68ab      	ldr	r3, [r5, #8]
 801012c:	42a3      	cmp	r3, r4
 801012e:	d103      	bne.n	8010138 <z_impl_k_thread_suspend+0x5c>
}
 8010130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8010134:	f009 bbfd 	b.w	8019932 <z_reschedule_unlocked>
}
 8010138:	bd70      	pop	{r4, r5, r6, pc}
 801013a:	bf00      	nop
 801013c:	20002200 	.word	0x20002200

08010140 <k_sched_lock>:
	__asm__ volatile(
 8010140:	f04f 0310 	mov.w	r3, #16
 8010144:	f3ef 8111 	mrs	r1, BASEPRI
 8010148:	f383 8812 	msr	BASEPRI_MAX, r3
 801014c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8010150:	4b04      	ldr	r3, [pc, #16]	; (8010164 <k_sched_lock+0x24>)
 8010152:	689a      	ldr	r2, [r3, #8]
 8010154:	7bd3      	ldrb	r3, [r2, #15]
 8010156:	3b01      	subs	r3, #1
 8010158:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 801015a:	f381 8811 	msr	BASEPRI, r1
 801015e:	f3bf 8f6f 	isb	sy
}
 8010162:	4770      	bx	lr
 8010164:	20002200 	.word	0x20002200

08010168 <k_sched_unlock>:
{
 8010168:	b510      	push	{r4, lr}
	__asm__ volatile(
 801016a:	f04f 0310 	mov.w	r3, #16
 801016e:	f3ef 8411 	mrs	r4, BASEPRI
 8010172:	f383 8812 	msr	BASEPRI_MAX, r3
 8010176:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 801017a:	4b08      	ldr	r3, [pc, #32]	; (801019c <k_sched_unlock+0x34>)
 801017c:	689a      	ldr	r2, [r3, #8]
 801017e:	7bd3      	ldrb	r3, [r2, #15]
 8010180:	3301      	adds	r3, #1
 8010182:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8010184:	2000      	movs	r0, #0
 8010186:	f7ff fdf1 	bl	800fd6c <update_cache>
	__asm__ volatile(
 801018a:	f384 8811 	msr	BASEPRI, r4
 801018e:	f3bf 8f6f 	isb	sy
}
 8010192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8010196:	f009 bbcc 	b.w	8019932 <z_reschedule_unlocked>
 801019a:	bf00      	nop
 801019c:	20002200 	.word	0x20002200

080101a0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80101a0:	4b04      	ldr	r3, [pc, #16]	; (80101b4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80101a2:	2100      	movs	r1, #0
 80101a4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
 80101a8:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80101ac:	4608      	mov	r0, r1
 80101ae:	f7ff be99 	b.w	800fee4 <k_sched_time_slice_set>
 80101b2:	bf00      	nop
 80101b4:	20002200 	.word	0x20002200

080101b8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80101b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80101ba:	f04f 0310 	mov.w	r3, #16
 80101be:	f3ef 8511 	mrs	r5, BASEPRI
 80101c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80101c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80101ca:	4919      	ldr	r1, [pc, #100]	; (8010230 <z_impl_k_yield+0x78>)
 80101cc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80101ce:	7b43      	ldrb	r3, [r0, #13]
 80101d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101d4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80101d6:	f009 fad4 	bl	8019782 <sys_dlist_remove>
	}
	queue_thread(_current);
 80101da:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 80101dc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 80101de:	4608      	mov	r0, r1
 80101e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80101e4:	735a      	strb	r2, [r3, #13]
 80101e6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
 80101ea:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80101ec:	4282      	cmp	r2, r0
 80101ee:	bf08      	it	eq
 80101f0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80101f2:	b922      	cbnz	r2, 80101fe <z_impl_k_yield+0x46>
	node->prev = tail;
 80101f4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 80101f8:	6023      	str	r3, [r4, #0]
	list->tail = node;
 80101fa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80101fc:	e00c      	b.n	8010218 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 80101fe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8010202:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8010206:	42be      	cmp	r6, r7
 8010208:	d00e      	beq.n	8010228 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 801020a:	42b7      	cmp	r7, r6
 801020c:	dd0c      	ble.n	8010228 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 801020e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8010210:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8010214:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8010216:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8010218:	2001      	movs	r0, #1
 801021a:	f7ff fda7 	bl	800fd6c <update_cache>
 801021e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8010220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010224:	f7fa bf2c 	b.w	800b080 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8010228:	42a2      	cmp	r2, r4
 801022a:	d0e3      	beq.n	80101f4 <z_impl_k_yield+0x3c>
 801022c:	6812      	ldr	r2, [r2, #0]
 801022e:	e7e0      	b.n	80101f2 <z_impl_k_yield+0x3a>
 8010230:	20002200 	.word	0x20002200

08010234 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8010234:	ea50 0301 	orrs.w	r3, r0, r1
{
 8010238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801023c:	4605      	mov	r5, r0
 801023e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8010240:	d103      	bne.n	801024a <z_tick_sleep+0x16>
	z_impl_k_yield();
 8010242:	f7ff ffb9 	bl	80101b8 <z_impl_k_yield>
		k_yield();
		return 0;
 8010246:	2000      	movs	r0, #0
 8010248:	e02c      	b.n	80102a4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 801024a:	1c83      	adds	r3, r0, #2
 801024c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 8010250:	db2a      	blt.n	80102a8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8010252:	f009 fbdf 	bl	8019a14 <sys_clock_tick_get_32>
 8010256:	1944      	adds	r4, r0, r5
 8010258:	f04f 0310 	mov.w	r3, #16
 801025c:	f3ef 8811 	mrs	r8, BASEPRI
 8010260:	f383 8812 	msr	BASEPRI_MAX, r3
 8010264:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8010268:	4f11      	ldr	r7, [pc, #68]	; (80102b0 <z_tick_sleep+0x7c>)
 801026a:	4b12      	ldr	r3, [pc, #72]	; (80102b4 <z_tick_sleep+0x80>)
 801026c:	68b8      	ldr	r0, [r7, #8]
 801026e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8010270:	f7ff fe08 	bl	800fe84 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8010274:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8010276:	4910      	ldr	r1, [pc, #64]	; (80102b8 <z_tick_sleep+0x84>)
 8010278:	462a      	mov	r2, r5
 801027a:	4633      	mov	r3, r6
 801027c:	3018      	adds	r0, #24
 801027e:	f000 f919 	bl	80104b4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8010282:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8010284:	7b53      	ldrb	r3, [r2, #13]
 8010286:	f043 0310 	orr.w	r3, r3, #16
 801028a:	7353      	strb	r3, [r2, #13]
 801028c:	4640      	mov	r0, r8
 801028e:	f7fa fef7 	bl	800b080 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8010292:	f009 fbbf 	bl	8019a14 <sys_clock_tick_get_32>
 8010296:	1a20      	subs	r0, r4, r0
 8010298:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 801029c:	2801      	cmp	r0, #1
 801029e:	f173 0300 	sbcs.w	r3, r3, #0
 80102a2:	dbd0      	blt.n	8010246 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 80102a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 80102a8:	f06f 0401 	mvn.w	r4, #1
 80102ac:	1a24      	subs	r4, r4, r0
 80102ae:	e7d3      	b.n	8010258 <z_tick_sleep+0x24>
 80102b0:	20002200 	.word	0x20002200
 80102b4:	20002238 	.word	0x20002238
 80102b8:	080197b9 	.word	0x080197b9

080102bc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80102bc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80102c0:	bf08      	it	eq
 80102c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 80102c6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80102c8:	d106      	bne.n	80102d8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80102ca:	4b07      	ldr	r3, [pc, #28]	; (80102e8 <z_impl_k_sleep+0x2c>)
 80102cc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80102ce:	f7ff ff05 	bl	80100dc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80102d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80102d6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80102d8:	f7ff ffac 	bl	8010234 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80102dc:	220a      	movs	r2, #10
 80102de:	2300      	movs	r3, #0
 80102e0:	17c1      	asrs	r1, r0, #31
 80102e2:	f7f0 fe33 	bl	8000f4c <__aeabi_uldivmod>
	return ret;
 80102e6:	e7f6      	b.n	80102d6 <z_impl_k_sleep+0x1a>
 80102e8:	20002200 	.word	0x20002200

080102ec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80102ec:	4b01      	ldr	r3, [pc, #4]	; (80102f4 <z_impl_z_current_get+0x8>)
 80102ee:	6898      	ldr	r0, [r3, #8]
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	20002200 	.word	0x20002200

080102f8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80102f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102fc:	4604      	mov	r4, r0
 80102fe:	f04f 0310 	mov.w	r3, #16
 8010302:	f3ef 8611 	mrs	r6, BASEPRI
 8010306:	f383 8812 	msr	BASEPRI_MAX, r3
 801030a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 801030e:	7b03      	ldrb	r3, [r0, #12]
 8010310:	07d9      	lsls	r1, r3, #31
 8010312:	d50b      	bpl.n	801032c <z_thread_abort+0x34>
	__asm__ volatile(
 8010314:	f386 8811 	msr	BASEPRI, r6
 8010318:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 801031c:	4040      	eors	r0, r0
 801031e:	f380 8811 	msr	BASEPRI, r0
 8010322:	f04f 0004 	mov.w	r0, #4
 8010326:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8010328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 801032c:	7b43      	ldrb	r3, [r0, #13]
 801032e:	071a      	lsls	r2, r3, #28
 8010330:	d504      	bpl.n	801033c <z_thread_abort+0x44>
 8010332:	f386 8811 	msr	BASEPRI, r6
 8010336:	f3bf 8f6f 	isb	sy
 801033a:	e7f5      	b.n	8010328 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 801033c:	f023 0220 	bic.w	r2, r3, #32
 8010340:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8010344:	09d2      	lsrs	r2, r2, #7
 8010346:	d123      	bne.n	8010390 <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8010348:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 801034a:	68a3      	ldr	r3, [r4, #8]
 801034c:	b113      	cbz	r3, 8010354 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 801034e:	4620      	mov	r0, r4
 8010350:	f009 fa1f 	bl	8019792 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8010354:	f104 0018 	add.w	r0, r4, #24
 8010358:	f009 fb2a 	bl	80199b0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 801035c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8010360:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8010364:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010366:	42bd      	cmp	r5, r7
 8010368:	d000      	beq.n	801036c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801036a:	b9cd      	cbnz	r5, 80103a0 <z_thread_abort+0xa8>
		update_cache(1);
 801036c:	2001      	movs	r0, #1
 801036e:	f7ff fcfd 	bl	800fd6c <update_cache>
		z_thread_monitor_exit(thread);
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff f9ea 	bl	800f74c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
 8010378:	4b10      	ldr	r3, [pc, #64]	; (80103bc <z_thread_abort+0xc4>)
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	42a3      	cmp	r3, r4
 801037e:	d1d8      	bne.n	8010332 <z_thread_abort+0x3a>
 8010380:	f3ef 8305 	mrs	r3, IPSR
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1d4      	bne.n	8010332 <z_thread_abort+0x3a>
 8010388:	4630      	mov	r0, r6
 801038a:	f7fa fe79 	bl	800b080 <arch_swap>
	return ret;
 801038e:	e7d0      	b.n	8010332 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010390:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8010394:	f043 0308 	orr.w	r3, r3, #8
 8010398:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 801039a:	f009 f9f2 	bl	8019782 <sys_dlist_remove>
}
 801039e:	e7d4      	b.n	801034a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 80103a0:	4628      	mov	r0, r5
 80103a2:	f009 f9f6 	bl	8019792 <unpend_thread_no_timeout>
 80103a6:	f105 0018 	add.w	r0, r5, #24
 80103aa:	f009 fb01 	bl	80199b0 <z_abort_timeout>
 80103ae:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
 80103b2:	4628      	mov	r0, r5
 80103b4:	f7ff fd32 	bl	800fe1c <ready_thread>
 80103b8:	e7d4      	b.n	8010364 <z_thread_abort+0x6c>
 80103ba:	bf00      	nop
 80103bc:	20002200 	.word	0x20002200

080103c0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 80103c0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 80103c2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 80103c6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 80103c8:	e9cd 6700 	strd	r6, r7, [sp]
 80103cc:	f7ff fdf2 	bl	800ffb4 <z_pend_curr>

	if (data != NULL) {
 80103d0:	b11c      	cbz	r4, 80103da <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 80103d2:	4b03      	ldr	r3, [pc, #12]	; (80103e0 <z_sched_wait+0x20>)
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	695b      	ldr	r3, [r3, #20]
 80103d8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 80103da:	b002      	add	sp, #8
 80103dc:	bdd0      	pop	{r4, r6, r7, pc}
 80103de:	bf00      	nop
 80103e0:	20002200 	.word	0x20002200

080103e4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 80103e4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 80103e6:	4806      	ldr	r0, [pc, #24]	; (8010400 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 80103e8:	4a06      	ldr	r2, [pc, #24]	; (8010404 <z_data_copy+0x20>)
 80103ea:	4907      	ldr	r1, [pc, #28]	; (8010408 <z_data_copy+0x24>)
 80103ec:	1a12      	subs	r2, r2, r0
 80103ee:	f009 f93f 	bl	8019670 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80103f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80103f6:	4a05      	ldr	r2, [pc, #20]	; (801040c <z_data_copy+0x28>)
 80103f8:	4905      	ldr	r1, [pc, #20]	; (8010410 <z_data_copy+0x2c>)
 80103fa:	4806      	ldr	r0, [pc, #24]	; (8010414 <z_data_copy+0x30>)
 80103fc:	f009 b938 	b.w	8019670 <z_early_memcpy>
 8010400:	20000000 	.word	0x20000000
 8010404:	20000e08 	.word	0x20000e08
 8010408:	0801e49c 	.word	0x0801e49c
 801040c:	00000000 	.word	0x00000000
 8010410:	0801e49c 	.word	0x0801e49c
 8010414:	20000000 	.word	0x20000000

08010418 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8010418:	4b03      	ldr	r3, [pc, #12]	; (8010428 <elapsed+0x10>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	b90b      	cbnz	r3, 8010422 <elapsed+0xa>
 801041e:	f7fe b97f 	b.w	800e720 <sys_clock_elapsed>
}
 8010422:	2000      	movs	r0, #0
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	20002244 	.word	0x20002244

0801042c <next_timeout>:

static int32_t next_timeout(void)
{
 801042c:	b510      	push	{r4, lr}
	return list->head == list;
 801042e:	4b11      	ldr	r3, [pc, #68]	; (8010474 <next_timeout+0x48>)
 8010430:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010432:	429c      	cmp	r4, r3
 8010434:	d10a      	bne.n	801044c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8010436:	f7ff ffef 	bl	8010418 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 801043a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 801043e:	4b0e      	ldr	r3, [pc, #56]	; (8010478 <next_timeout+0x4c>)
 8010440:	691b      	ldr	r3, [r3, #16]
 8010442:	b113      	cbz	r3, 801044a <next_timeout+0x1e>
 8010444:	4298      	cmp	r0, r3
 8010446:	bfa8      	it	ge
 8010448:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 801044a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 801044c:	f7ff ffe4 	bl	8010418 <elapsed>
	if ((to == NULL) ||
 8010450:	2c00      	cmp	r4, #0
 8010452:	d0f2      	beq.n	801043a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8010454:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010458:	1a1b      	subs	r3, r3, r0
 801045a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 801045e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010462:	f172 0100 	sbcs.w	r1, r2, #0
 8010466:	dae8      	bge.n	801043a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8010468:	2a00      	cmp	r2, #0
 801046a:	bfac      	ite	ge
 801046c:	4618      	movge	r0, r3
 801046e:	2000      	movlt	r0, #0
 8010470:	e7e5      	b.n	801043e <next_timeout+0x12>
 8010472:	bf00      	nop
 8010474:	2000087c 	.word	0x2000087c
 8010478:	20002200 	.word	0x20002200

0801047c <remove_timeout>:
{
 801047c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801047e:	b170      	cbz	r0, 801049e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8010480:	4b0b      	ldr	r3, [pc, #44]	; (80104b0 <remove_timeout+0x34>)
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	4298      	cmp	r0, r3
 8010486:	d00a      	beq.n	801049e <remove_timeout+0x22>
 8010488:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 801048a:	b143      	cbz	r3, 801049e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 801048c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8010490:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8010494:	1912      	adds	r2, r2, r4
 8010496:	eb41 0105 	adc.w	r1, r1, r5
 801049a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 801049e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 80104a2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80104a4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80104a6:	2300      	movs	r3, #0
	node->prev = NULL;
 80104a8:	e9c0 3300 	strd	r3, r3, [r0]
}
 80104ac:	bd30      	pop	{r4, r5, pc}
 80104ae:	bf00      	nop
 80104b0:	2000087c 	.word	0x2000087c

080104b4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80104b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104b8:	bf08      	it	eq
 80104ba:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80104be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c0:	4604      	mov	r4, r0
 80104c2:	461d      	mov	r5, r3
 80104c4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80104c6:	d061      	beq.n	801058c <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80104c8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80104ca:	f04f 0310 	mov.w	r3, #16
 80104ce:	f3ef 8711 	mrs	r7, BASEPRI
 80104d2:	f383 8812 	msr	BASEPRI_MAX, r3
 80104d6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80104da:	3201      	adds	r2, #1
 80104dc:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 80104e0:	da24      	bge.n	801052c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80104e2:	4930      	ldr	r1, [pc, #192]	; (80105a4 <z_add_timeout+0xf0>)
 80104e4:	e9d1 2000 	ldrd	r2, r0, [r1]
 80104e8:	f06f 0301 	mvn.w	r3, #1
 80104ec:	1a9b      	subs	r3, r3, r2
 80104ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104f2:	eb62 0000 	sbc.w	r0, r2, r0
 80104f6:	1b9e      	subs	r6, r3, r6
 80104f8:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 80104fc:	2e01      	cmp	r6, #1
 80104fe:	f170 0300 	sbcs.w	r3, r0, #0
 8010502:	da01      	bge.n	8010508 <z_add_timeout+0x54>
 8010504:	2601      	movs	r6, #1
 8010506:	2000      	movs	r0, #0
 8010508:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 801050c:	4e26      	ldr	r6, [pc, #152]	; (80105a8 <z_add_timeout+0xf4>)
 801050e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 8010512:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010514:	45b4      	cmp	ip, r6
 8010516:	bf08      	it	eq
 8010518:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 801051c:	f1bc 0f00 	cmp.w	ip, #0
 8010520:	d10d      	bne.n	801053e <z_add_timeout+0x8a>
	node->prev = tail;
 8010522:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 8010526:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8010528:	6074      	str	r4, [r6, #4]
}
 801052a:	e01c      	b.n	8010566 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 801052c:	f7ff ff74 	bl	8010418 <elapsed>
 8010530:	3601      	adds	r6, #1
 8010532:	f145 0500 	adc.w	r5, r5, #0
 8010536:	1836      	adds	r6, r6, r0
 8010538:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 801053c:	e7e4      	b.n	8010508 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 801053e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8010542:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8010546:	4293      	cmp	r3, r2
 8010548:	eb71 0e00 	sbcs.w	lr, r1, r0
 801054c:	da1f      	bge.n	801058e <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 801054e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8010550:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010554:	eb60 0001 	sbc.w	r0, r0, r1
 8010558:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 801055c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8010560:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8010562:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 8010566:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010568:	42b3      	cmp	r3, r6
 801056a:	d00b      	beq.n	8010584 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 801056c:	429c      	cmp	r4, r3
 801056e:	d109      	bne.n	8010584 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8010570:	f7ff ff5c 	bl	801042c <next_timeout>

			if (next_time == 0 ||
 8010574:	b118      	cbz	r0, 801057e <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 8010576:	4b0d      	ldr	r3, [pc, #52]	; (80105ac <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	4283      	cmp	r3, r0
 801057c:	d002      	beq.n	8010584 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 801057e:	2100      	movs	r1, #0
 8010580:	f7fe f85c 	bl	800e63c <sys_clock_set_timeout>
	__asm__ volatile(
 8010584:	f387 8811 	msr	BASEPRI, r7
 8010588:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 801058c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 801058e:	1a9b      	subs	r3, r3, r2
 8010590:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8010594:	45ac      	cmp	ip, r5
 8010596:	e9c4 3104 	strd	r3, r1, [r4, #16]
 801059a:	d0c2      	beq.n	8010522 <z_add_timeout+0x6e>
 801059c:	f8dc c000 	ldr.w	ip, [ip]
 80105a0:	e7bc      	b.n	801051c <z_add_timeout+0x68>
 80105a2:	bf00      	nop
 80105a4:	200018b8 	.word	0x200018b8
 80105a8:	2000087c 	.word	0x2000087c
 80105ac:	20002200 	.word	0x20002200

080105b0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 80105b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80105b6:	f7ff fcbb 	bl	800ff30 <z_time_slice>
	__asm__ volatile(
 80105ba:	f04f 0310 	mov.w	r3, #16
 80105be:	f3ef 8611 	mrs	r6, BASEPRI
 80105c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80105c6:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 80105ca:	4f23      	ldr	r7, [pc, #140]	; (8010658 <sys_clock_announce+0xa8>)
	return list->head == list;
 80105cc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8010660 <sys_clock_announce+0xb0>
 80105d0:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80105d4:	4a21      	ldr	r2, [pc, #132]	; (801065c <sys_clock_announce+0xac>)
	announce_remaining = ticks;
 80105d6:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80105d8:	4540      	cmp	r0, r8
		curr_tick += dt;
 80105da:	e9d2 3e00 	ldrd	r3, lr, [r2]
 80105de:	ea4f 71e4 	mov.w	r1, r4, asr #31
 80105e2:	d00b      	beq.n	80105fc <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80105e4:	b150      	cbz	r0, 80105fc <sys_clock_announce+0x4c>
 80105e6:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
 80105ea:	42ac      	cmp	r4, r5
 80105ec:	eb71 090c 	sbcs.w	r9, r1, ip
 80105f0:	da16      	bge.n	8010620 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80105f2:	1b2d      	subs	r5, r5, r4
 80105f4:	eb6c 0c01 	sbc.w	ip, ip, r1
 80105f8:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 80105fc:	18e3      	adds	r3, r4, r3
 80105fe:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
 8010602:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8010604:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 8010608:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 801060a:	f7ff ff0f 	bl	801042c <next_timeout>
 801060e:	4621      	mov	r1, r4
 8010610:	f7fe f814 	bl	800e63c <sys_clock_set_timeout>
	__asm__ volatile(
 8010614:	f386 8811 	msr	BASEPRI, r6
 8010618:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 801061c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8010620:	18eb      	adds	r3, r5, r3
 8010622:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
 8010626:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 801062a:	2200      	movs	r2, #0
 801062c:	2300      	movs	r3, #0
 801062e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 8010632:	f7ff ff23 	bl	801047c <remove_timeout>
 8010636:	f386 8811 	msr	BASEPRI, r6
 801063a:	f3bf 8f6f 	isb	sy
		t->fn(t);
 801063e:	6883      	ldr	r3, [r0, #8]
 8010640:	4798      	blx	r3
	__asm__ volatile(
 8010642:	f04f 0310 	mov.w	r3, #16
 8010646:	f3ef 8611 	mrs	r6, BASEPRI
 801064a:	f383 8812 	msr	BASEPRI_MAX, r3
 801064e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8010652:	683c      	ldr	r4, [r7, #0]
 8010654:	1b64      	subs	r4, r4, r5
 8010656:	e7bb      	b.n	80105d0 <sys_clock_announce+0x20>
 8010658:	20002244 	.word	0x20002244
 801065c:	200018b8 	.word	0x200018b8
 8010660:	2000087c 	.word	0x2000087c

08010664 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8010664:	b510      	push	{r4, lr}
 8010666:	f04f 0310 	mov.w	r3, #16
 801066a:	f3ef 8411 	mrs	r4, BASEPRI
 801066e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010672:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8010676:	f7ff fecf 	bl	8010418 <elapsed>
 801067a:	4a06      	ldr	r2, [pc, #24]	; (8010694 <sys_clock_tick_get+0x30>)
 801067c:	4603      	mov	r3, r0
 801067e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8010682:	1818      	adds	r0, r3, r0
 8010684:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8010688:	f384 8811 	msr	BASEPRI, r4
 801068c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8010690:	bd10      	pop	{r4, pc}
 8010692:	bf00      	nop
 8010694:	200018b8 	.word	0x200018b8

08010698 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8010698:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 801069a:	4604      	mov	r4, r0
 801069c:	b178      	cbz	r0, 80106be <z_impl_k_busy_wait+0x26>
 801069e:	f7fe f85d 	bl	800e75c <sys_clock_cycle_get_32>
 80106a2:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 80106a4:	4806      	ldr	r0, [pc, #24]	; (80106c0 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 80106a6:	4a07      	ldr	r2, [pc, #28]	; (80106c4 <z_impl_k_busy_wait+0x2c>)
 80106a8:	fba4 0100 	umull	r0, r1, r4, r0
 80106ac:	2300      	movs	r3, #0
 80106ae:	f7f0 fc4d 	bl	8000f4c <__aeabi_uldivmod>
 80106b2:	4604      	mov	r4, r0
 80106b4:	f7fe f852 	bl	800e75c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80106b8:	1b43      	subs	r3, r0, r5
 80106ba:	42a3      	cmp	r3, r4
 80106bc:	d3fa      	bcc.n	80106b4 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	04c4b400 	.word	0x04c4b400
 80106c4:	000f4240 	.word	0x000f4240

080106c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80106c8:	b570      	push	{r4, r5, r6, lr}
 80106ca:	4604      	mov	r4, r0
	__asm__ volatile(
 80106cc:	f04f 0310 	mov.w	r3, #16
 80106d0:	f3ef 8511 	mrs	r5, BASEPRI
 80106d4:	f383 8812 	msr	BASEPRI_MAX, r3
 80106d8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80106dc:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 80106e0:	3301      	adds	r3, #1
 80106e2:	f142 0200 	adc.w	r2, r2, #0
 80106e6:	2b02      	cmp	r3, #2
 80106e8:	f172 0200 	sbcs.w	r2, r2, #0
 80106ec:	d322      	bcc.n	8010734 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
 80106ee:	f009 f995 	bl	8019a1c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 80106f2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 80106f6:	3001      	adds	r0, #1
 80106f8:	f141 0100 	adc.w	r1, r1, #0
 80106fc:	18c0      	adds	r0, r0, r3
 80106fe:	eb41 0102 	adc.w	r1, r1, r2
 8010702:	2801      	cmp	r0, #1
 8010704:	f171 0100 	sbcs.w	r1, r1, #0
 8010708:	db32      	blt.n	8010770 <z_timer_expiration_handler+0xa8>
 801070a:	f009 f987 	bl	8019a1c <z_impl_k_uptime_ticks>
 801070e:	3001      	adds	r0, #1
 8010710:	f141 0300 	adc.w	r3, r1, #0
 8010714:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8010718:	1880      	adds	r0, r0, r2
 801071a:	f06f 0201 	mvn.w	r2, #1
 801071e:	eb43 0301 	adc.w	r3, r3, r1
 8010722:	1a12      	subs	r2, r2, r0
 8010724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010728:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 801072c:	491a      	ldr	r1, [pc, #104]	; (8010798 <z_timer_expiration_handler+0xd0>)
 801072e:	4620      	mov	r0, r4
 8010730:	f7ff fec0 	bl	80104b4 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
 8010734:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010736:	3301      	adds	r3, #1
 8010738:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 801073a:	6a23      	ldr	r3, [r4, #32]
 801073c:	b173      	cbz	r3, 801075c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
 801073e:	f385 8811 	msr	BASEPRI, r5
 8010742:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 8010746:	6a23      	ldr	r3, [r4, #32]
 8010748:	4620      	mov	r0, r4
 801074a:	4798      	blx	r3
	__asm__ volatile(
 801074c:	f04f 0310 	mov.w	r3, #16
 8010750:	f3ef 8511 	mrs	r5, BASEPRI
 8010754:	f383 8812 	msr	BASEPRI_MAX, r3
 8010758:	f3bf 8f6f 	isb	sy
	return list->head == list;
 801075c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010760:	42a6      	cmp	r6, r4
 8010762:	d000      	beq.n	8010766 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8010764:	b94e      	cbnz	r6, 801077a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
 8010766:	f385 8811 	msr	BASEPRI, r5
 801076a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 801076e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 8010770:	f06f 0201 	mvn.w	r2, #1
 8010774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010778:	e7d8      	b.n	801072c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
 801077a:	4630      	mov	r0, r6
 801077c:	f009 f876 	bl	801986c <z_unpend_thread_no_timeout>
 8010780:	2300      	movs	r3, #0
 8010782:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 8010786:	f385 8811 	msr	BASEPRI, r5
 801078a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 801078e:	4630      	mov	r0, r6
}
 8010790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 8010794:	f009 b85a 	b.w	801984c <z_ready_thread>
 8010798:	080106c9 	.word	0x080106c9

0801079c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 801079c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80107a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107a4:	bf08      	it	eq
 80107a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80107aa:	4605      	mov	r5, r0
 80107ac:	4614      	mov	r4, r2
 80107ae:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
 80107b2:	4619      	mov	r1, r3
 80107b4:	4691      	mov	r9, r2
 80107b6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80107b8:	d037      	beq.n	801082a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 80107ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80107be:	bf08      	it	eq
 80107c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 80107c4:	4637      	mov	r7, r6
 80107c6:	4682      	mov	sl, r0
 80107c8:	d011      	beq.n	80107ee <z_impl_k_timer_start+0x52>
 80107ca:	ea50 0306 	orrs.w	r3, r0, r6
 80107ce:	d00e      	beq.n	80107ee <z_impl_k_timer_start+0x52>
 80107d0:	1c72      	adds	r2, r6, #1
 80107d2:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
 80107d6:	db0a      	blt.n	80107ee <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
 80107d8:	2e02      	cmp	r6, #2
 80107da:	4684      	mov	ip, r0
 80107dc:	f170 0000 	sbcs.w	r0, r0, #0
 80107e0:	bfbc      	itt	lt
 80107e2:	2702      	movlt	r7, #2
 80107e4:	f04f 0c00 	movlt.w	ip, #0
 80107e8:	3f01      	subs	r7, #1
 80107ea:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 80107ee:	1c63      	adds	r3, r4, #1
 80107f0:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 80107f4:	db0a      	blt.n	801080c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80107f6:	2c01      	cmp	r4, #1
 80107f8:	f171 0300 	sbcs.w	r3, r1, #0
 80107fc:	4622      	mov	r2, r4
 80107fe:	bfbc      	itt	lt
 8010800:	2201      	movlt	r2, #1
 8010802:	2100      	movlt	r1, #0
 8010804:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 8010808:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
 801080c:	4628      	mov	r0, r5
 801080e:	f009 f8cf 	bl	80199b0 <z_abort_timeout>
	timer->period = period;
 8010812:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
 8010816:	2300      	movs	r3, #0
 8010818:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 801081a:	464a      	mov	r2, r9
 801081c:	4643      	mov	r3, r8
 801081e:	4628      	mov	r0, r5
 8010820:	4903      	ldr	r1, [pc, #12]	; (8010830 <z_impl_k_timer_start+0x94>)
		     duration);
}
 8010822:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8010826:	f7ff be45 	b.w	80104b4 <z_add_timeout>
}
 801082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801082e:	bf00      	nop
 8010830:	080106c9 	.word	0x080106c9

08010834 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8010834:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010838:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 801083a:	4b29      	ldr	r3, [pc, #164]	; (80108e0 <z_impl_k_poll+0xac>)
 801083c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 801083e:	2301      	movs	r3, #1
 8010840:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 8010844:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 8010848:	ea52 0305 	orrs.w	r3, r2, r5
{
 801084c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
 801084e:	bf0c      	ite	eq
 8010850:	2301      	moveq	r3, #1
 8010852:	2300      	movne	r3, #0
 8010854:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 8010858:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
 801085a:	f009 f93b 	bl	8019ad4 <register_events>
 801085e:	4681      	mov	r9, r0
	__asm__ volatile(
 8010860:	f04f 0310 	mov.w	r3, #16
 8010864:	f3ef 8a11 	mrs	sl, BASEPRI
 8010868:	f383 8812 	msr	BASEPRI_MAX, r3
 801086c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 8010870:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 8010874:	b964      	cbnz	r4, 8010890 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 8010876:	4601      	mov	r1, r0
 8010878:	4652      	mov	r2, sl
 801087a:	4640      	mov	r0, r8
 801087c:	f009 f9fb 	bl	8019c76 <clear_event_registrations>
	__asm__ volatile(
 8010880:	f38a 8811 	msr	BASEPRI, sl
 8010884:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8010888:	4620      	mov	r0, r4
 801088a:	b002      	add	sp, #8
 801088c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 8010890:	2300      	movs	r3, #0
 8010892:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8010896:	ea56 0305 	orrs.w	r3, r6, r5
 801089a:	d106      	bne.n	80108aa <z_impl_k_poll+0x76>
 801089c:	f38a 8811 	msr	BASEPRI, sl
 80108a0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 80108a4:	f06f 040a 	mvn.w	r4, #10
 80108a8:	e7ee      	b.n	8010888 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 80108aa:	e9cd 6500 	strd	r6, r5, [sp]
 80108ae:	4a0d      	ldr	r2, [pc, #52]	; (80108e4 <z_impl_k_poll+0xb0>)
 80108b0:	480d      	ldr	r0, [pc, #52]	; (80108e8 <z_impl_k_poll+0xb4>)
 80108b2:	4651      	mov	r1, sl
 80108b4:	f7ff fb7e 	bl	800ffb4 <z_pend_curr>
 80108b8:	4604      	mov	r4, r0
	__asm__ volatile(
 80108ba:	f04f 0310 	mov.w	r3, #16
 80108be:	f3ef 8511 	mrs	r5, BASEPRI
 80108c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80108c6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 80108ca:	462a      	mov	r2, r5
 80108cc:	4649      	mov	r1, r9
 80108ce:	4640      	mov	r0, r8
 80108d0:	f009 f9d1 	bl	8019c76 <clear_event_registrations>
	__asm__ volatile(
 80108d4:	f385 8811 	msr	BASEPRI, r5
 80108d8:	f3bf 8f6f 	isb	sy
	return swap_rc;
 80108dc:	e7d4      	b.n	8010888 <z_impl_k_poll+0x54>
 80108de:	bf00      	nop
 80108e0:	20002200 	.word	0x20002200
 80108e4:	20000884 	.word	0x20000884
 80108e8:	2000238e 	.word	0x2000238e

080108ec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4603      	mov	r3, r0
	__asm__ volatile(
 80108f0:	f04f 0210 	mov.w	r2, #16
 80108f4:	f3ef 8511 	mrs	r5, BASEPRI
 80108f8:	f382 8812 	msr	BASEPRI_MAX, r2
 80108fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8010900:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 8010902:	2101      	movs	r1, #1
 8010904:	6081      	str	r1, [r0, #8]
	return list->head == list;
 8010906:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8010908:	4283      	cmp	r3, r0
 801090a:	d106      	bne.n	801091a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 801090c:	f385 8811 	msr	BASEPRI, r5
 8010910:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 8010914:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 8010916:	4620      	mov	r0, r4
 8010918:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 801091a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 801091e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010920:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010922:	2300      	movs	r3, #0
	node->prev = NULL;
 8010924:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8010928:	f009 f94b 	bl	8019bc2 <signal_poll_event>
	z_reschedule(&lock, key);
 801092c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 801092e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 8010930:	4801      	ldr	r0, [pc, #4]	; (8010938 <z_impl_k_poll_signal_raise+0x4c>)
 8010932:	f7ff fba3 	bl	801007c <z_reschedule>
	return rc;
 8010936:	e7ee      	b.n	8010916 <z_impl_k_poll_signal_raise+0x2a>
 8010938:	2000238e 	.word	0x2000238e

0801093c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 801093c:	4801      	ldr	r0, [pc, #4]	; (8010944 <boot_banner+0x8>)
 801093e:	f003 bf76 	b.w	801482e <printk>
 8010942:	bf00      	nop
 8010944:	0801e44f 	.word	0x0801e44f

08010948 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8010948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 801094a:	4b09      	ldr	r3, [pc, #36]	; (8010970 <k_sys_work_q_init+0x28>)
 801094c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 801094e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 8010950:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	4907      	ldr	r1, [pc, #28]	; (8010974 <k_sys_work_q_init+0x2c>)
 8010956:	4808      	ldr	r0, [pc, #32]	; (8010978 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 8010958:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 801095c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010964:	f7ff f9b6 	bl	800fcd4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8010968:	4620      	mov	r0, r4
 801096a:	b004      	add	sp, #16
 801096c:	bd10      	pop	{r4, pc}
 801096e:	bf00      	nop
 8010970:	0801e491 	.word	0x0801e491
 8010974:	20003e80 	.word	0x20003e80
 8010978:	200018c0 	.word	0x200018c0

0801097c <fabs>:
 801097c:	ec51 0b10 	vmov	r0, r1, d0
 8010980:	4602      	mov	r2, r0
 8010982:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010986:	ec43 2b10 	vmov	d0, r2, r3
 801098a:	4770      	bx	lr

0801098c <sqrt>:
 801098c:	b538      	push	{r3, r4, r5, lr}
 801098e:	ed2d 8b02 	vpush	{d8}
 8010992:	ec55 4b10 	vmov	r4, r5, d0
 8010996:	f000 f833 	bl	8010a00 <__ieee754_sqrt>
 801099a:	4b18      	ldr	r3, [pc, #96]	; (80109fc <sqrt+0x70>)
 801099c:	eeb0 8a40 	vmov.f32	s16, s0
 80109a0:	eef0 8a60 	vmov.f32	s17, s1
 80109a4:	f993 3000 	ldrsb.w	r3, [r3]
 80109a8:	3301      	adds	r3, #1
 80109aa:	d00d      	beq.n	80109c8 <sqrt+0x3c>
 80109ac:	4622      	mov	r2, r4
 80109ae:	462b      	mov	r3, r5
 80109b0:	4620      	mov	r0, r4
 80109b2:	4629      	mov	r1, r5
 80109b4:	f7f0 fc06 	bl	80011c4 <__aeabi_dcmpun>
 80109b8:	b930      	cbnz	r0, 80109c8 <sqrt+0x3c>
 80109ba:	2200      	movs	r2, #0
 80109bc:	2300      	movs	r3, #0
 80109be:	4620      	mov	r0, r4
 80109c0:	4629      	mov	r1, r5
 80109c2:	f7f0 fb3d 	bl	8001040 <__aeabi_dcmplt>
 80109c6:	b930      	cbnz	r0, 80109d6 <sqrt+0x4a>
 80109c8:	eeb0 0a48 	vmov.f32	s0, s16
 80109cc:	eef0 0a68 	vmov.f32	s1, s17
 80109d0:	ecbd 8b02 	vpop	{d8}
 80109d4:	bd38      	pop	{r3, r4, r5, pc}
 80109d6:	f005 fc2b 	bl	8016230 <__errno>
 80109da:	2200      	movs	r2, #0
 80109dc:	2300      	movs	r3, #0
 80109de:	2121      	movs	r1, #33	; 0x21
 80109e0:	6001      	str	r1, [r0, #0]
 80109e2:	4610      	mov	r0, r2
 80109e4:	4619      	mov	r1, r3
 80109e6:	f7f0 f901 	bl	8000bec <__aeabi_ddiv>
 80109ea:	ec41 0b18 	vmov	d8, r0, r1
 80109ee:	eeb0 0a48 	vmov.f32	s0, s16
 80109f2:	eef0 0a68 	vmov.f32	s1, s17
 80109f6:	ecbd 8b02 	vpop	{d8}
 80109fa:	bd38      	pop	{r3, r4, r5, pc}
 80109fc:	20000caf 	.word	0x20000caf

08010a00 <__ieee754_sqrt>:
 8010a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a04:	4863      	ldr	r0, [pc, #396]	; (8010b94 <__ieee754_sqrt+0x194>)
 8010a06:	ec55 4b10 	vmov	r4, r5, d0
 8010a0a:	43a8      	bics	r0, r5
 8010a0c:	f000 809c 	beq.w	8010b48 <__ieee754_sqrt+0x148>
 8010a10:	2d00      	cmp	r5, #0
 8010a12:	4621      	mov	r1, r4
 8010a14:	462b      	mov	r3, r5
 8010a16:	4622      	mov	r2, r4
 8010a18:	dd56      	ble.n	8010ac8 <__ieee754_sqrt+0xc8>
 8010a1a:	152c      	asrs	r4, r5, #20
 8010a1c:	f000 80ad 	beq.w	8010b7a <__ieee754_sqrt+0x17a>
 8010a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a24:	07e1      	lsls	r1, r4, #31
 8010a26:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8010a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a2e:	d403      	bmi.n	8010a38 <__ieee754_sqrt+0x38>
 8010a30:	0fd1      	lsrs	r1, r2, #31
 8010a32:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010a36:	0052      	lsls	r2, r2, #1
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	2500      	movs	r5, #0
 8010a3c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010a40:	1076      	asrs	r6, r6, #1
 8010a42:	0052      	lsls	r2, r2, #1
 8010a44:	2016      	movs	r0, #22
 8010a46:	46ac      	mov	ip, r5
 8010a48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a4c:	eb0c 0401 	add.w	r4, ip, r1
 8010a50:	42a3      	cmp	r3, r4
 8010a52:	db03      	blt.n	8010a5c <__ieee754_sqrt+0x5c>
 8010a54:	1b1b      	subs	r3, r3, r4
 8010a56:	eb01 0c04 	add.w	ip, r1, r4
 8010a5a:	440d      	add	r5, r1
 8010a5c:	005b      	lsls	r3, r3, #1
 8010a5e:	3801      	subs	r0, #1
 8010a60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010a64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010a68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010a6c:	d1ee      	bne.n	8010a4c <__ieee754_sqrt+0x4c>
 8010a6e:	4607      	mov	r7, r0
 8010a70:	4680      	mov	r8, r0
 8010a72:	2420      	movs	r4, #32
 8010a74:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010a78:	e00a      	b.n	8010a90 <__ieee754_sqrt+0x90>
 8010a7a:	d03c      	beq.n	8010af6 <__ieee754_sqrt+0xf6>
 8010a7c:	0059      	lsls	r1, r3, #1
 8010a7e:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
 8010a82:	3c01      	subs	r4, #1
 8010a84:	460b      	mov	r3, r1
 8010a86:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010a8a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8010a8e:	d03e      	beq.n	8010b0e <__ieee754_sqrt+0x10e>
 8010a90:	459c      	cmp	ip, r3
 8010a92:	eb08 0e00 	add.w	lr, r8, r0
 8010a96:	daf0      	bge.n	8010a7a <__ieee754_sqrt+0x7a>
 8010a98:	f1be 0f00 	cmp.w	lr, #0
 8010a9c:	eb0e 0800 	add.w	r8, lr, r0
 8010aa0:	db0c      	blt.n	8010abc <__ieee754_sqrt+0xbc>
 8010aa2:	46e1      	mov	r9, ip
 8010aa4:	eba3 010c 	sub.w	r1, r3, ip
 8010aa8:	4596      	cmp	lr, r2
 8010aaa:	bf88      	it	hi
 8010aac:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8010ab0:	0049      	lsls	r1, r1, #1
 8010ab2:	46cc      	mov	ip, r9
 8010ab4:	eba2 020e 	sub.w	r2, r2, lr
 8010ab8:	4407      	add	r7, r0
 8010aba:	e7e0      	b.n	8010a7e <__ieee754_sqrt+0x7e>
 8010abc:	f1b8 0f00 	cmp.w	r8, #0
 8010ac0:	dbef      	blt.n	8010aa2 <__ieee754_sqrt+0xa2>
 8010ac2:	f10c 0901 	add.w	r9, ip, #1
 8010ac6:	e7ed      	b.n	8010aa4 <__ieee754_sqrt+0xa4>
 8010ac8:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8010acc:	4320      	orrs	r0, r4
 8010ace:	d02f      	beq.n	8010b30 <__ieee754_sqrt+0x130>
 8010ad0:	2d00      	cmp	r5, #0
 8010ad2:	d147      	bne.n	8010b64 <__ieee754_sqrt+0x164>
 8010ad4:	0ad1      	lsrs	r1, r2, #11
 8010ad6:	3b15      	subs	r3, #21
 8010ad8:	0552      	lsls	r2, r2, #21
 8010ada:	2900      	cmp	r1, #0
 8010adc:	d0fa      	beq.n	8010ad4 <__ieee754_sqrt+0xd4>
 8010ade:	02ce      	lsls	r6, r1, #11
 8010ae0:	461c      	mov	r4, r3
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	d549      	bpl.n	8010b7c <__ieee754_sqrt+0x17c>
 8010ae8:	2520      	movs	r5, #32
 8010aea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010aee:	40e8      	lsrs	r0, r5
 8010af0:	1a64      	subs	r4, r4, r1
 8010af2:	4303      	orrs	r3, r0
 8010af4:	e794      	b.n	8010a20 <__ieee754_sqrt+0x20>
 8010af6:	4596      	cmp	lr, r2
 8010af8:	d902      	bls.n	8010b00 <__ieee754_sqrt+0x100>
 8010afa:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8010afe:	e7be      	b.n	8010a7e <__ieee754_sqrt+0x7e>
 8010b00:	f1be 0f00 	cmp.w	lr, #0
 8010b04:	eb0e 0800 	add.w	r8, lr, r0
 8010b08:	db14      	blt.n	8010b34 <__ieee754_sqrt+0x134>
 8010b0a:	2100      	movs	r1, #0
 8010b0c:	e7d2      	b.n	8010ab4 <__ieee754_sqrt+0xb4>
 8010b0e:	4311      	orrs	r1, r2
 8010b10:	d114      	bne.n	8010b3c <__ieee754_sqrt+0x13c>
 8010b12:	087c      	lsrs	r4, r7, #1
 8010b14:	1069      	asrs	r1, r5, #1
 8010b16:	07eb      	lsls	r3, r5, #31
 8010b18:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8010b1c:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010b20:	bf48      	it	mi
 8010b22:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8010b26:	eb01 5306 	add.w	r3, r1, r6, lsl #20
 8010b2a:	4622      	mov	r2, r4
 8010b2c:	ec43 2b10 	vmov	d0, r2, r3
 8010b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b34:	f1b8 0f00 	cmp.w	r8, #0
 8010b38:	dac3      	bge.n	8010ac2 <__ieee754_sqrt+0xc2>
 8010b3a:	e7e6      	b.n	8010b0a <__ieee754_sqrt+0x10a>
 8010b3c:	1c7a      	adds	r2, r7, #1
 8010b3e:	bf16      	itet	ne
 8010b40:	1c78      	addne	r0, r7, #1
 8010b42:	3501      	addeq	r5, #1
 8010b44:	0844      	lsrne	r4, r0, #1
 8010b46:	e7e5      	b.n	8010b14 <__ieee754_sqrt+0x114>
 8010b48:	4622      	mov	r2, r4
 8010b4a:	462b      	mov	r3, r5
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	4629      	mov	r1, r5
 8010b50:	f7ef ff22 	bl	8000998 <__aeabi_dmul>
 8010b54:	4622      	mov	r2, r4
 8010b56:	462b      	mov	r3, r5
 8010b58:	f7ef fd68 	bl	800062c <__adddf3>
 8010b5c:	ec41 0b10 	vmov	d0, r0, r1
 8010b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b64:	4620      	mov	r0, r4
 8010b66:	4629      	mov	r1, r5
 8010b68:	f7ef fd5e 	bl	8000628 <__aeabi_dsub>
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	460b      	mov	r3, r1
 8010b70:	f7f0 f83c 	bl	8000bec <__aeabi_ddiv>
 8010b74:	ec41 0b10 	vmov	d0, r0, r1
 8010b78:	e7da      	b.n	8010b30 <__ieee754_sqrt+0x130>
 8010b7a:	4608      	mov	r0, r1
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	005b      	lsls	r3, r3, #1
 8010b80:	02dd      	lsls	r5, r3, #11
 8010b82:	4611      	mov	r1, r2
 8010b84:	f102 0201 	add.w	r2, r2, #1
 8010b88:	d5f9      	bpl.n	8010b7e <__ieee754_sqrt+0x17e>
 8010b8a:	f1c2 0520 	rsb	r5, r2, #32
 8010b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8010b92:	e7ac      	b.n	8010aee <__ieee754_sqrt+0xee>
 8010b94:	7ff00000 	.word	0x7ff00000

08010b98 <abs>:
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	bfb8      	it	lt
 8010b9c:	4240      	neglt	r0, r0
 8010b9e:	4770      	bx	lr

08010ba0 <malloc>:
 8010ba0:	4b02      	ldr	r3, [pc, #8]	; (8010bac <malloc+0xc>)
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	6818      	ldr	r0, [r3, #0]
 8010ba6:	f000 b80b 	b.w	8010bc0 <_malloc_r>
 8010baa:	bf00      	nop
 8010bac:	20000894 	.word	0x20000894

08010bb0 <free>:
 8010bb0:	4b02      	ldr	r3, [pc, #8]	; (8010bbc <free+0xc>)
 8010bb2:	4601      	mov	r1, r0
 8010bb4:	6818      	ldr	r0, [r3, #0]
 8010bb6:	f001 bbb5 	b.w	8012324 <_free_r>
 8010bba:	bf00      	nop
 8010bbc:	20000894 	.word	0x20000894

08010bc0 <_malloc_r>:
 8010bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc4:	f101 050b 	add.w	r5, r1, #11
 8010bc8:	2d16      	cmp	r5, #22
 8010bca:	b083      	sub	sp, #12
 8010bcc:	4606      	mov	r6, r0
 8010bce:	d824      	bhi.n	8010c1a <_malloc_r+0x5a>
 8010bd0:	2910      	cmp	r1, #16
 8010bd2:	f200 80b0 	bhi.w	8010d36 <_malloc_r+0x176>
 8010bd6:	f000 fbb9 	bl	801134c <__malloc_lock>
 8010bda:	2510      	movs	r5, #16
 8010bdc:	2218      	movs	r2, #24
 8010bde:	f04f 0c02 	mov.w	ip, #2
 8010be2:	4fbc      	ldr	r7, [pc, #752]	; (8010ed4 <_malloc_r+0x314>)
 8010be4:	443a      	add	r2, r7
 8010be6:	f1a2 0308 	sub.w	r3, r2, #8
 8010bea:	6854      	ldr	r4, [r2, #4]
 8010bec:	429c      	cmp	r4, r3
 8010bee:	f000 810b 	beq.w	8010e08 <_malloc_r+0x248>
 8010bf2:	6863      	ldr	r3, [r4, #4]
 8010bf4:	68e2      	ldr	r2, [r4, #12]
 8010bf6:	68a1      	ldr	r1, [r4, #8]
 8010bf8:	f023 0303 	bic.w	r3, r3, #3
 8010bfc:	4423      	add	r3, r4
 8010bfe:	60ca      	str	r2, [r1, #12]
 8010c00:	6091      	str	r1, [r2, #8]
 8010c02:	685a      	ldr	r2, [r3, #4]
 8010c04:	f042 0201 	orr.w	r2, r2, #1
 8010c08:	4630      	mov	r0, r6
 8010c0a:	605a      	str	r2, [r3, #4]
 8010c0c:	3408      	adds	r4, #8
 8010c0e:	f000 fba3 	bl	8011358 <__malloc_unlock>
 8010c12:	4620      	mov	r0, r4
 8010c14:	b003      	add	sp, #12
 8010c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1a:	f035 0507 	bics.w	r5, r5, #7
 8010c1e:	f100 808a 	bmi.w	8010d36 <_malloc_r+0x176>
 8010c22:	42a9      	cmp	r1, r5
 8010c24:	f200 8087 	bhi.w	8010d36 <_malloc_r+0x176>
 8010c28:	f000 fb90 	bl	801134c <__malloc_lock>
 8010c2c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8010c30:	f0c0 8158 	bcc.w	8010ee4 <_malloc_r+0x324>
 8010c34:	0a6b      	lsrs	r3, r5, #9
 8010c36:	f000 8082 	beq.w	8010d3e <_malloc_r+0x17e>
 8010c3a:	2b04      	cmp	r3, #4
 8010c3c:	f200 810b 	bhi.w	8010e56 <_malloc_r+0x296>
 8010c40:	09ab      	lsrs	r3, r5, #6
 8010c42:	f103 0c39 	add.w	ip, r3, #57	; 0x39
 8010c46:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8010c4a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8010c4e:	4fa1      	ldr	r7, [pc, #644]	; (8010ed4 <_malloc_r+0x314>)
 8010c50:	443b      	add	r3, r7
 8010c52:	f1a3 0008 	sub.w	r0, r3, #8
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	4298      	cmp	r0, r3
 8010c5a:	d106      	bne.n	8010c6a <_malloc_r+0xaa>
 8010c5c:	e00c      	b.n	8010c78 <_malloc_r+0xb8>
 8010c5e:	2900      	cmp	r1, #0
 8010c60:	f280 80c0 	bge.w	8010de4 <_malloc_r+0x224>
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	4298      	cmp	r0, r3
 8010c68:	d006      	beq.n	8010c78 <_malloc_r+0xb8>
 8010c6a:	685a      	ldr	r2, [r3, #4]
 8010c6c:	f022 0203 	bic.w	r2, r2, #3
 8010c70:	1b51      	subs	r1, r2, r5
 8010c72:	290f      	cmp	r1, #15
 8010c74:	ddf3      	ble.n	8010c5e <_malloc_r+0x9e>
 8010c76:	46a4      	mov	ip, r4
 8010c78:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8010ee0 <_malloc_r+0x320>
 8010c7c:	693c      	ldr	r4, [r7, #16]
 8010c7e:	4544      	cmp	r4, r8
 8010c80:	f000 809d 	beq.w	8010dbe <_malloc_r+0x1fe>
 8010c84:	6863      	ldr	r3, [r4, #4]
 8010c86:	f023 0903 	bic.w	r9, r3, #3
 8010c8a:	eba9 0305 	sub.w	r3, r9, r5
 8010c8e:	2b0f      	cmp	r3, #15
 8010c90:	f300 812d 	bgt.w	8010eee <_malloc_r+0x32e>
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	e9c7 8804 	strd	r8, r8, [r7, #16]
 8010c9a:	f280 810e 	bge.w	8010eba <_malloc_r+0x2fa>
 8010c9e:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
 8010ca2:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8010ca6:	f080 80b6 	bcs.w	8010e16 <_malloc_r+0x256>
 8010caa:	ea4f 01d9 	mov.w	r1, r9, lsr #3
 8010cae:	3101      	adds	r1, #1
 8010cb0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	fa03 f309 	lsl.w	r3, r3, r9
 8010cba:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
 8010cbe:	60a2      	str	r2, [r4, #8]
 8010cc0:	ea4e 0e03 	orr.w	lr, lr, r3
 8010cc4:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
 8010cc8:	3b08      	subs	r3, #8
 8010cca:	60e3      	str	r3, [r4, #12]
 8010ccc:	f8c7 e004 	str.w	lr, [r7, #4]
 8010cd0:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 8010cd4:	60d4      	str	r4, [r2, #12]
 8010cd6:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8010cda:	2001      	movs	r0, #1
 8010cdc:	4098      	lsls	r0, r3
 8010cde:	4570      	cmp	r0, lr
 8010ce0:	d833      	bhi.n	8010d4a <_malloc_r+0x18a>
 8010ce2:	ea10 0f0e 	tst.w	r0, lr
 8010ce6:	d107      	bne.n	8010cf8 <_malloc_r+0x138>
 8010ce8:	f02c 0c03 	bic.w	ip, ip, #3
 8010cec:	0040      	lsls	r0, r0, #1
 8010cee:	ea10 0f0e 	tst.w	r0, lr
 8010cf2:	f10c 0c04 	add.w	ip, ip, #4
 8010cf6:	d0f9      	beq.n	8010cec <_malloc_r+0x12c>
 8010cf8:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
 8010cfc:	4653      	mov	r3, sl
 8010cfe:	46e1      	mov	r9, ip
 8010d00:	68d9      	ldr	r1, [r3, #12]
 8010d02:	e00e      	b.n	8010d22 <_malloc_r+0x162>
 8010d04:	684a      	ldr	r2, [r1, #4]
 8010d06:	f022 0203 	bic.w	r2, r2, #3
 8010d0a:	eba2 0e05 	sub.w	lr, r2, r5
 8010d0e:	f1be 0f0f 	cmp.w	lr, #15
 8010d12:	460c      	mov	r4, r1
 8010d14:	68c9      	ldr	r1, [r1, #12]
 8010d16:	f300 80ac 	bgt.w	8010e72 <_malloc_r+0x2b2>
 8010d1a:	f1be 0f00 	cmp.w	lr, #0
 8010d1e:	f280 80bf 	bge.w	8010ea0 <_malloc_r+0x2e0>
 8010d22:	428b      	cmp	r3, r1
 8010d24:	d1ee      	bne.n	8010d04 <_malloc_r+0x144>
 8010d26:	f109 0901 	add.w	r9, r9, #1
 8010d2a:	f019 0f03 	tst.w	r9, #3
 8010d2e:	f103 0308 	add.w	r3, r3, #8
 8010d32:	d1e5      	bne.n	8010d00 <_malloc_r+0x140>
 8010d34:	e123      	b.n	8010f7e <_malloc_r+0x3be>
 8010d36:	230c      	movs	r3, #12
 8010d38:	6033      	str	r3, [r6, #0]
 8010d3a:	2400      	movs	r4, #0
 8010d3c:	e769      	b.n	8010c12 <_malloc_r+0x52>
 8010d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d42:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8010d46:	243f      	movs	r4, #63	; 0x3f
 8010d48:	e781      	b.n	8010c4e <_malloc_r+0x8e>
 8010d4a:	68bc      	ldr	r4, [r7, #8]
 8010d4c:	6863      	ldr	r3, [r4, #4]
 8010d4e:	f023 0803 	bic.w	r8, r3, #3
 8010d52:	45a8      	cmp	r8, r5
 8010d54:	d303      	bcc.n	8010d5e <_malloc_r+0x19e>
 8010d56:	eba8 0305 	sub.w	r3, r8, r5
 8010d5a:	2b0f      	cmp	r3, #15
 8010d5c:	dc32      	bgt.n	8010dc4 <_malloc_r+0x204>
 8010d5e:	4b5e      	ldr	r3, [pc, #376]	; (8010ed8 <_malloc_r+0x318>)
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	4b5e      	ldr	r3, [pc, #376]	; (8010edc <_malloc_r+0x31c>)
 8010d64:	6819      	ldr	r1, [r3, #0]
 8010d66:	3101      	adds	r1, #1
 8010d68:	442a      	add	r2, r5
 8010d6a:	eb04 0a08 	add.w	sl, r4, r8
 8010d6e:	f000 816b 	beq.w	8011048 <_malloc_r+0x488>
 8010d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010d76:	320f      	adds	r2, #15
 8010d78:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8010d7c:	f022 020f 	bic.w	r2, r2, #15
 8010d80:	4611      	mov	r1, r2
 8010d82:	4630      	mov	r0, r6
 8010d84:	9200      	str	r2, [sp, #0]
 8010d86:	f000 fb01 	bl	801138c <_sbrk_r>
 8010d8a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010d8e:	9a00      	ldr	r2, [sp, #0]
 8010d90:	4b52      	ldr	r3, [pc, #328]	; (8010edc <_malloc_r+0x31c>)
 8010d92:	4681      	mov	r9, r0
 8010d94:	d005      	beq.n	8010da2 <_malloc_r+0x1e2>
 8010d96:	4582      	cmp	sl, r0
 8010d98:	f240 80c4 	bls.w	8010f24 <_malloc_r+0x364>
 8010d9c:	42bc      	cmp	r4, r7
 8010d9e:	f000 8104 	beq.w	8010faa <_malloc_r+0x3ea>
 8010da2:	68bc      	ldr	r4, [r7, #8]
 8010da4:	6862      	ldr	r2, [r4, #4]
 8010da6:	f022 0203 	bic.w	r2, r2, #3
 8010daa:	42aa      	cmp	r2, r5
 8010dac:	eba2 0305 	sub.w	r3, r2, r5
 8010db0:	d301      	bcc.n	8010db6 <_malloc_r+0x1f6>
 8010db2:	2b0f      	cmp	r3, #15
 8010db4:	dc06      	bgt.n	8010dc4 <_malloc_r+0x204>
 8010db6:	4630      	mov	r0, r6
 8010db8:	f000 face 	bl	8011358 <__malloc_unlock>
 8010dbc:	e7bd      	b.n	8010d3a <_malloc_r+0x17a>
 8010dbe:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8010dc2:	e788      	b.n	8010cd6 <_malloc_r+0x116>
 8010dc4:	1962      	adds	r2, r4, r5
 8010dc6:	f043 0301 	orr.w	r3, r3, #1
 8010dca:	f045 0501 	orr.w	r5, r5, #1
 8010dce:	6065      	str	r5, [r4, #4]
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	60ba      	str	r2, [r7, #8]
 8010dd4:	6053      	str	r3, [r2, #4]
 8010dd6:	f000 fabf 	bl	8011358 <__malloc_unlock>
 8010dda:	3408      	adds	r4, #8
 8010ddc:	4620      	mov	r0, r4
 8010dde:	b003      	add	sp, #12
 8010de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de4:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 8010de8:	441a      	add	r2, r3
 8010dea:	60e1      	str	r1, [r4, #12]
 8010dec:	608c      	str	r4, [r1, #8]
 8010dee:	6851      	ldr	r1, [r2, #4]
 8010df0:	f041 0101 	orr.w	r1, r1, #1
 8010df4:	4630      	mov	r0, r6
 8010df6:	6051      	str	r1, [r2, #4]
 8010df8:	f103 0408 	add.w	r4, r3, #8
 8010dfc:	f000 faac 	bl	8011358 <__malloc_unlock>
 8010e00:	4620      	mov	r0, r4
 8010e02:	b003      	add	sp, #12
 8010e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e08:	68d4      	ldr	r4, [r2, #12]
 8010e0a:	42a2      	cmp	r2, r4
 8010e0c:	f47f aef1 	bne.w	8010bf2 <_malloc_r+0x32>
 8010e10:	f10c 0c02 	add.w	ip, ip, #2
 8010e14:	e730      	b.n	8010c78 <_malloc_r+0xb8>
 8010e16:	f5b9 6f20 	cmp.w	r9, #2560	; 0xa00
 8010e1a:	ea4f 2259 	mov.w	r2, r9, lsr #9
 8010e1e:	d37a      	bcc.n	8010f16 <_malloc_r+0x356>
 8010e20:	2a14      	cmp	r2, #20
 8010e22:	f200 812d 	bhi.w	8011080 <_malloc_r+0x4c0>
 8010e26:	f102 035c 	add.w	r3, r2, #92	; 0x5c
 8010e2a:	00db      	lsls	r3, r3, #3
 8010e2c:	325b      	adds	r2, #91	; 0x5b
 8010e2e:	18f9      	adds	r1, r7, r3
 8010e30:	58fb      	ldr	r3, [r7, r3]
 8010e32:	3908      	subs	r1, #8
 8010e34:	4299      	cmp	r1, r3
 8010e36:	d103      	bne.n	8010e40 <_malloc_r+0x280>
 8010e38:	e108      	b.n	801104c <_malloc_r+0x48c>
 8010e3a:	689b      	ldr	r3, [r3, #8]
 8010e3c:	4299      	cmp	r1, r3
 8010e3e:	d004      	beq.n	8010e4a <_malloc_r+0x28a>
 8010e40:	685a      	ldr	r2, [r3, #4]
 8010e42:	f022 0203 	bic.w	r2, r2, #3
 8010e46:	454a      	cmp	r2, r9
 8010e48:	d8f7      	bhi.n	8010e3a <_malloc_r+0x27a>
 8010e4a:	68d9      	ldr	r1, [r3, #12]
 8010e4c:	e9c4 3102 	strd	r3, r1, [r4, #8]
 8010e50:	608c      	str	r4, [r1, #8]
 8010e52:	60dc      	str	r4, [r3, #12]
 8010e54:	e73f      	b.n	8010cd6 <_malloc_r+0x116>
 8010e56:	2b14      	cmp	r3, #20
 8010e58:	f240 8085 	bls.w	8010f66 <_malloc_r+0x3a6>
 8010e5c:	2b54      	cmp	r3, #84	; 0x54
 8010e5e:	f200 8118 	bhi.w	8011092 <_malloc_r+0x4d2>
 8010e62:	0b2b      	lsrs	r3, r5, #12
 8010e64:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
 8010e68:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8010e6c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8010e70:	e6ed      	b.n	8010c4e <_malloc_r+0x8e>
 8010e72:	4630      	mov	r0, r6
 8010e74:	68a6      	ldr	r6, [r4, #8]
 8010e76:	1963      	adds	r3, r4, r5
 8010e78:	f045 0501 	orr.w	r5, r5, #1
 8010e7c:	6065      	str	r5, [r4, #4]
 8010e7e:	60f1      	str	r1, [r6, #12]
 8010e80:	608e      	str	r6, [r1, #8]
 8010e82:	f04e 0101 	orr.w	r1, lr, #1
 8010e86:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8010e8a:	f8c3 8008 	str.w	r8, [r3, #8]
 8010e8e:	f8c3 800c 	str.w	r8, [r3, #12]
 8010e92:	6059      	str	r1, [r3, #4]
 8010e94:	f844 e002 	str.w	lr, [r4, r2]
 8010e98:	f000 fa5e 	bl	8011358 <__malloc_unlock>
 8010e9c:	3408      	adds	r4, #8
 8010e9e:	e6b8      	b.n	8010c12 <_malloc_r+0x52>
 8010ea0:	4422      	add	r2, r4
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	6853      	ldr	r3, [r2, #4]
 8010ea6:	f043 0301 	orr.w	r3, r3, #1
 8010eaa:	6053      	str	r3, [r2, #4]
 8010eac:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8010eb0:	60d9      	str	r1, [r3, #12]
 8010eb2:	608b      	str	r3, [r1, #8]
 8010eb4:	f000 fa50 	bl	8011358 <__malloc_unlock>
 8010eb8:	e6ab      	b.n	8010c12 <_malloc_r+0x52>
 8010eba:	44a1      	add	r9, r4
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010ec2:	f043 0301 	orr.w	r3, r3, #1
 8010ec6:	f8c9 3004 	str.w	r3, [r9, #4]
 8010eca:	3408      	adds	r4, #8
 8010ecc:	f000 fa44 	bl	8011358 <__malloc_unlock>
 8010ed0:	e69f      	b.n	8010c12 <_malloc_r+0x52>
 8010ed2:	bf00      	nop
 8010ed4:	20000000 	.word	0x20000000
 8010ed8:	20002278 	.word	0x20002278
 8010edc:	2000088c 	.word	0x2000088c
 8010ee0:	20000008 	.word	0x20000008
 8010ee4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8010ee8:	f105 0208 	add.w	r2, r5, #8
 8010eec:	e679      	b.n	8010be2 <_malloc_r+0x22>
 8010eee:	1962      	adds	r2, r4, r5
 8010ef0:	f043 0101 	orr.w	r1, r3, #1
 8010ef4:	f045 0501 	orr.w	r5, r5, #1
 8010ef8:	6065      	str	r5, [r4, #4]
 8010efa:	4630      	mov	r0, r6
 8010efc:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8010f00:	f8c2 8008 	str.w	r8, [r2, #8]
 8010f04:	f8c2 800c 	str.w	r8, [r2, #12]
 8010f08:	6051      	str	r1, [r2, #4]
 8010f0a:	f844 3009 	str.w	r3, [r4, r9]
 8010f0e:	f000 fa23 	bl	8011358 <__malloc_unlock>
 8010f12:	3408      	adds	r4, #8
 8010f14:	e67d      	b.n	8010c12 <_malloc_r+0x52>
 8010f16:	ea4f 1299 	mov.w	r2, r9, lsr #6
 8010f1a:	f102 0339 	add.w	r3, r2, #57	; 0x39
 8010f1e:	00db      	lsls	r3, r3, #3
 8010f20:	3238      	adds	r2, #56	; 0x38
 8010f22:	e784      	b.n	8010e2e <_malloc_r+0x26e>
 8010f24:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011134 <_malloc_r+0x574>
 8010f28:	f8db 1000 	ldr.w	r1, [fp]
 8010f2c:	4411      	add	r1, r2
 8010f2e:	f8cb 1000 	str.w	r1, [fp]
 8010f32:	4608      	mov	r0, r1
 8010f34:	d140      	bne.n	8010fb8 <_malloc_r+0x3f8>
 8010f36:	f3c9 0c0b 	ubfx	ip, r9, #0, #12
 8010f3a:	f1bc 0f00 	cmp.w	ip, #0
 8010f3e:	d13b      	bne.n	8010fb8 <_malloc_r+0x3f8>
 8010f40:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8010f44:	4442      	add	r2, r8
 8010f46:	f042 0201 	orr.w	r2, r2, #1
 8010f4a:	f8c9 2004 	str.w	r2, [r9, #4]
 8010f4e:	4b77      	ldr	r3, [pc, #476]	; (801112c <_malloc_r+0x56c>)
 8010f50:	6818      	ldr	r0, [r3, #0]
 8010f52:	4288      	cmp	r0, r1
 8010f54:	bf38      	it	cc
 8010f56:	6019      	strcc	r1, [r3, #0]
 8010f58:	4b75      	ldr	r3, [pc, #468]	; (8011130 <_malloc_r+0x570>)
 8010f5a:	6818      	ldr	r0, [r3, #0]
 8010f5c:	4288      	cmp	r0, r1
 8010f5e:	bf38      	it	cc
 8010f60:	6019      	strcc	r1, [r3, #0]
 8010f62:	464c      	mov	r4, r9
 8010f64:	e71f      	b.n	8010da6 <_malloc_r+0x1e6>
 8010f66:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
 8010f6a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8010f6e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8010f72:	e66c      	b.n	8010c4e <_malloc_r+0x8e>
 8010f74:	f85a 3908 	ldr.w	r3, [sl], #-8
 8010f78:	4553      	cmp	r3, sl
 8010f7a:	f040 80d5 	bne.w	8011128 <_malloc_r+0x568>
 8010f7e:	f01c 0f03 	tst.w	ip, #3
 8010f82:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8010f86:	d1f5      	bne.n	8010f74 <_malloc_r+0x3b4>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	ea23 0300 	bic.w	r3, r3, r0
 8010f8e:	607b      	str	r3, [r7, #4]
 8010f90:	0040      	lsls	r0, r0, #1
 8010f92:	4298      	cmp	r0, r3
 8010f94:	f63f aed9 	bhi.w	8010d4a <_malloc_r+0x18a>
 8010f98:	b918      	cbnz	r0, 8010fa2 <_malloc_r+0x3e2>
 8010f9a:	e6d6      	b.n	8010d4a <_malloc_r+0x18a>
 8010f9c:	0040      	lsls	r0, r0, #1
 8010f9e:	f109 0904 	add.w	r9, r9, #4
 8010fa2:	4218      	tst	r0, r3
 8010fa4:	d0fa      	beq.n	8010f9c <_malloc_r+0x3dc>
 8010fa6:	46cc      	mov	ip, r9
 8010fa8:	e6a6      	b.n	8010cf8 <_malloc_r+0x138>
 8010faa:	f8df b188 	ldr.w	fp, [pc, #392]	; 8011134 <_malloc_r+0x574>
 8010fae:	f8db 0000 	ldr.w	r0, [fp]
 8010fb2:	4410      	add	r0, r2
 8010fb4:	f8cb 0000 	str.w	r0, [fp]
 8010fb8:	6819      	ldr	r1, [r3, #0]
 8010fba:	3101      	adds	r1, #1
 8010fbc:	bf1b      	ittet	ne
 8010fbe:	eba9 030a 	subne.w	r3, r9, sl
 8010fc2:	181b      	addne	r3, r3, r0
 8010fc4:	f8c3 9000 	streq.w	r9, [r3]
 8010fc8:	f8cb 3000 	strne.w	r3, [fp]
 8010fcc:	f019 0307 	ands.w	r3, r9, #7
 8010fd0:	d045      	beq.n	801105e <_malloc_r+0x49e>
 8010fd2:	f1c3 0108 	rsb	r1, r3, #8
 8010fd6:	4489      	add	r9, r1
 8010fd8:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8010fdc:	444a      	add	r2, r9
 8010fde:	3108      	adds	r1, #8
 8010fe0:	1a89      	subs	r1, r1, r2
 8010fe2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8010fe6:	4651      	mov	r1, sl
 8010fe8:	4630      	mov	r0, r6
 8010fea:	9301      	str	r3, [sp, #4]
 8010fec:	9200      	str	r2, [sp, #0]
 8010fee:	f000 f9cd 	bl	801138c <_sbrk_r>
 8010ff2:	1c42      	adds	r2, r0, #1
 8010ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ff8:	d07a      	beq.n	80110f0 <_malloc_r+0x530>
 8010ffa:	eba0 0009 	sub.w	r0, r0, r9
 8010ffe:	eb00 020a 	add.w	r2, r0, sl
 8011002:	f8db 3000 	ldr.w	r3, [fp]
 8011006:	f8c7 9008 	str.w	r9, [r7, #8]
 801100a:	f042 0201 	orr.w	r2, r2, #1
 801100e:	eb0a 0103 	add.w	r1, sl, r3
 8011012:	42bc      	cmp	r4, r7
 8011014:	f8c9 2004 	str.w	r2, [r9, #4]
 8011018:	f8cb 1000 	str.w	r1, [fp]
 801101c:	d097      	beq.n	8010f4e <_malloc_r+0x38e>
 801101e:	f1b8 0f0f 	cmp.w	r8, #15
 8011022:	d941      	bls.n	80110a8 <_malloc_r+0x4e8>
 8011024:	6862      	ldr	r2, [r4, #4]
 8011026:	f1a8 030c 	sub.w	r3, r8, #12
 801102a:	f023 0307 	bic.w	r3, r3, #7
 801102e:	f002 0201 	and.w	r2, r2, #1
 8011032:	431a      	orrs	r2, r3
 8011034:	6062      	str	r2, [r4, #4]
 8011036:	18e2      	adds	r2, r4, r3
 8011038:	2005      	movs	r0, #5
 801103a:	2b0f      	cmp	r3, #15
 801103c:	6050      	str	r0, [r2, #4]
 801103e:	6090      	str	r0, [r2, #8]
 8011040:	d84c      	bhi.n	80110dc <_malloc_r+0x51c>
 8011042:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011046:	e782      	b.n	8010f4e <_malloc_r+0x38e>
 8011048:	3210      	adds	r2, #16
 801104a:	e699      	b.n	8010d80 <_malloc_r+0x1c0>
 801104c:	1092      	asrs	r2, r2, #2
 801104e:	2001      	movs	r0, #1
 8011050:	fa00 f202 	lsl.w	r2, r0, r2
 8011054:	ea4e 0e02 	orr.w	lr, lr, r2
 8011058:	f8c7 e004 	str.w	lr, [r7, #4]
 801105c:	e6f6      	b.n	8010e4c <_malloc_r+0x28c>
 801105e:	eb09 0102 	add.w	r1, r9, r2
 8011062:	4249      	negs	r1, r1
 8011064:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8011068:	4651      	mov	r1, sl
 801106a:	4630      	mov	r0, r6
 801106c:	9301      	str	r3, [sp, #4]
 801106e:	9200      	str	r2, [sp, #0]
 8011070:	f000 f98c 	bl	801138c <_sbrk_r>
 8011074:	1c43      	adds	r3, r0, #1
 8011076:	e9dd 2300 	ldrd	r2, r3, [sp]
 801107a:	d1be      	bne.n	8010ffa <_malloc_r+0x43a>
 801107c:	469a      	mov	sl, r3
 801107e:	e7c0      	b.n	8011002 <_malloc_r+0x442>
 8011080:	2a54      	cmp	r2, #84	; 0x54
 8011082:	d815      	bhi.n	80110b0 <_malloc_r+0x4f0>
 8011084:	ea4f 3219 	mov.w	r2, r9, lsr #12
 8011088:	f102 036f 	add.w	r3, r2, #111	; 0x6f
 801108c:	00db      	lsls	r3, r3, #3
 801108e:	326e      	adds	r2, #110	; 0x6e
 8011090:	e6cd      	b.n	8010e2e <_malloc_r+0x26e>
 8011092:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8011096:	d815      	bhi.n	80110c4 <_malloc_r+0x504>
 8011098:	0beb      	lsrs	r3, r5, #15
 801109a:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 801109e:	f103 0477 	add.w	r4, r3, #119	; 0x77
 80110a2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80110a6:	e5d2      	b.n	8010c4e <_malloc_r+0x8e>
 80110a8:	2301      	movs	r3, #1
 80110aa:	f8c9 3004 	str.w	r3, [r9, #4]
 80110ae:	e682      	b.n	8010db6 <_malloc_r+0x1f6>
 80110b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80110b4:	d823      	bhi.n	80110fe <_malloc_r+0x53e>
 80110b6:	ea4f 32d9 	mov.w	r2, r9, lsr #15
 80110ba:	f102 0378 	add.w	r3, r2, #120	; 0x78
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	3277      	adds	r2, #119	; 0x77
 80110c2:	e6b4      	b.n	8010e2e <_malloc_r+0x26e>
 80110c4:	f240 5254 	movw	r2, #1364	; 0x554
 80110c8:	4293      	cmp	r3, r2
 80110ca:	d823      	bhi.n	8011114 <_malloc_r+0x554>
 80110cc:	0cab      	lsrs	r3, r5, #18
 80110ce:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
 80110d2:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80110d6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80110da:	e5b8      	b.n	8010c4e <_malloc_r+0x8e>
 80110dc:	f104 0108 	add.w	r1, r4, #8
 80110e0:	4630      	mov	r0, r6
 80110e2:	f001 f91f 	bl	8012324 <_free_r>
 80110e6:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80110ea:	f8db 1000 	ldr.w	r1, [fp]
 80110ee:	e7a8      	b.n	8011042 <_malloc_r+0x482>
 80110f0:	3b08      	subs	r3, #8
 80110f2:	441a      	add	r2, r3
 80110f4:	eba2 0209 	sub.w	r2, r2, r9
 80110f8:	f04f 0a00 	mov.w	sl, #0
 80110fc:	e781      	b.n	8011002 <_malloc_r+0x442>
 80110fe:	f240 5354 	movw	r3, #1364	; 0x554
 8011102:	429a      	cmp	r2, r3
 8011104:	d80c      	bhi.n	8011120 <_malloc_r+0x560>
 8011106:	ea4f 4299 	mov.w	r2, r9, lsr #18
 801110a:	f102 037d 	add.w	r3, r2, #125	; 0x7d
 801110e:	00db      	lsls	r3, r3, #3
 8011110:	327c      	adds	r2, #124	; 0x7c
 8011112:	e68c      	b.n	8010e2e <_malloc_r+0x26e>
 8011114:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8011118:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 801111c:	247e      	movs	r4, #126	; 0x7e
 801111e:	e596      	b.n	8010c4e <_malloc_r+0x8e>
 8011120:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8011124:	227e      	movs	r2, #126	; 0x7e
 8011126:	e682      	b.n	8010e2e <_malloc_r+0x26e>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	e731      	b.n	8010f90 <_malloc_r+0x3d0>
 801112c:	20002274 	.word	0x20002274
 8011130:	20002270 	.word	0x20002270
 8011134:	20002248 	.word	0x20002248

08011138 <memcmp>:
 8011138:	2a03      	cmp	r2, #3
 801113a:	b570      	push	{r4, r5, r6, lr}
 801113c:	d911      	bls.n	8011162 <memcmp+0x2a>
 801113e:	ea40 0301 	orr.w	r3, r0, r1
 8011142:	079b      	lsls	r3, r3, #30
 8011144:	d11f      	bne.n	8011186 <memcmp+0x4e>
 8011146:	4604      	mov	r4, r0
 8011148:	460b      	mov	r3, r1
 801114a:	e002      	b.n	8011152 <memcmp+0x1a>
 801114c:	3a04      	subs	r2, #4
 801114e:	2a03      	cmp	r2, #3
 8011150:	d91d      	bls.n	801118e <memcmp+0x56>
 8011152:	4619      	mov	r1, r3
 8011154:	4620      	mov	r0, r4
 8011156:	f853 5b04 	ldr.w	r5, [r3], #4
 801115a:	f854 6b04 	ldr.w	r6, [r4], #4
 801115e:	42ae      	cmp	r6, r5
 8011160:	d0f4      	beq.n	801114c <memcmp+0x14>
 8011162:	1e54      	subs	r4, r2, #1
 8011164:	b1b2      	cbz	r2, 8011194 <memcmp+0x5c>
 8011166:	1e42      	subs	r2, r0, #1
 8011168:	3901      	subs	r1, #1
 801116a:	e001      	b.n	8011170 <memcmp+0x38>
 801116c:	18c3      	adds	r3, r0, r3
 801116e:	d00c      	beq.n	801118a <memcmp+0x52>
 8011170:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8011174:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8011178:	45e6      	cmp	lr, ip
 801117a:	eba4 0302 	sub.w	r3, r4, r2
 801117e:	d0f5      	beq.n	801116c <memcmp+0x34>
 8011180:	ebae 000c 	sub.w	r0, lr, ip
 8011184:	bd70      	pop	{r4, r5, r6, pc}
 8011186:	1e54      	subs	r4, r2, #1
 8011188:	e7ed      	b.n	8011166 <memcmp+0x2e>
 801118a:	4618      	mov	r0, r3
 801118c:	bd70      	pop	{r4, r5, r6, pc}
 801118e:	4620      	mov	r0, r4
 8011190:	4619      	mov	r1, r3
 8011192:	e7e6      	b.n	8011162 <memcmp+0x2a>
 8011194:	4610      	mov	r0, r2
 8011196:	bd70      	pop	{r4, r5, r6, pc}

08011198 <memmove>:
 8011198:	4288      	cmp	r0, r1
 801119a:	d90e      	bls.n	80111ba <memmove+0x22>
 801119c:	188b      	adds	r3, r1, r2
 801119e:	4283      	cmp	r3, r0
 80111a0:	d90b      	bls.n	80111ba <memmove+0x22>
 80111a2:	eb00 0c02 	add.w	ip, r0, r2
 80111a6:	2a00      	cmp	r2, #0
 80111a8:	d06e      	beq.n	8011288 <memmove+0xf0>
 80111aa:	4662      	mov	r2, ip
 80111ac:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80111b0:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80111b4:	4299      	cmp	r1, r3
 80111b6:	d1f9      	bne.n	80111ac <memmove+0x14>
 80111b8:	4770      	bx	lr
 80111ba:	2a0f      	cmp	r2, #15
 80111bc:	d80f      	bhi.n	80111de <memmove+0x46>
 80111be:	4603      	mov	r3, r0
 80111c0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80111c4:	2a00      	cmp	r2, #0
 80111c6:	d05f      	beq.n	8011288 <memmove+0xf0>
 80111c8:	f10c 0c01 	add.w	ip, ip, #1
 80111cc:	3b01      	subs	r3, #1
 80111ce:	448c      	add	ip, r1
 80111d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111d8:	4561      	cmp	r1, ip
 80111da:	d1f9      	bne.n	80111d0 <memmove+0x38>
 80111dc:	4770      	bx	lr
 80111de:	ea40 0301 	orr.w	r3, r0, r1
 80111e2:	079b      	lsls	r3, r3, #30
 80111e4:	d151      	bne.n	801128a <memmove+0xf2>
 80111e6:	f1a2 0310 	sub.w	r3, r2, #16
 80111ea:	b570      	push	{r4, r5, r6, lr}
 80111ec:	f101 0c20 	add.w	ip, r1, #32
 80111f0:	f023 050f 	bic.w	r5, r3, #15
 80111f4:	f101 0e10 	add.w	lr, r1, #16
 80111f8:	f100 0410 	add.w	r4, r0, #16
 80111fc:	44ac      	add	ip, r5
 80111fe:	091b      	lsrs	r3, r3, #4
 8011200:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8011204:	f844 5c10 	str.w	r5, [r4, #-16]
 8011208:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 801120c:	f844 5c0c 	str.w	r5, [r4, #-12]
 8011210:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8011214:	f844 5c08 	str.w	r5, [r4, #-8]
 8011218:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 801121c:	f844 5c04 	str.w	r5, [r4, #-4]
 8011220:	f10e 0e10 	add.w	lr, lr, #16
 8011224:	45e6      	cmp	lr, ip
 8011226:	f104 0410 	add.w	r4, r4, #16
 801122a:	d1e9      	bne.n	8011200 <memmove+0x68>
 801122c:	3301      	adds	r3, #1
 801122e:	f012 0f0c 	tst.w	r2, #12
 8011232:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8011236:	f002 040f 	and.w	r4, r2, #15
 801123a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 801123e:	d028      	beq.n	8011292 <memmove+0xfa>
 8011240:	3c04      	subs	r4, #4
 8011242:	f024 0603 	bic.w	r6, r4, #3
 8011246:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 801124a:	441e      	add	r6, r3
 801124c:	1f1c      	subs	r4, r3, #4
 801124e:	468e      	mov	lr, r1
 8011250:	f85e 5b04 	ldr.w	r5, [lr], #4
 8011254:	f844 5f04 	str.w	r5, [r4, #4]!
 8011258:	42b4      	cmp	r4, r6
 801125a:	d1f9      	bne.n	8011250 <memmove+0xb8>
 801125c:	f10c 0401 	add.w	r4, ip, #1
 8011260:	f002 0203 	and.w	r2, r2, #3
 8011264:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801126c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8011270:	b14a      	cbz	r2, 8011286 <memmove+0xee>
 8011272:	f10c 0c01 	add.w	ip, ip, #1
 8011276:	3b01      	subs	r3, #1
 8011278:	448c      	add	ip, r1
 801127a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801127e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011282:	4561      	cmp	r1, ip
 8011284:	d1f9      	bne.n	801127a <memmove+0xe2>
 8011286:	bd70      	pop	{r4, r5, r6, pc}
 8011288:	4770      	bx	lr
 801128a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 801128e:	4603      	mov	r3, r0
 8011290:	e79a      	b.n	80111c8 <memmove+0x30>
 8011292:	4622      	mov	r2, r4
 8011294:	e7ea      	b.n	801126c <memmove+0xd4>
 8011296:	bf00      	nop

08011298 <memset>:
 8011298:	0783      	lsls	r3, r0, #30
 801129a:	b530      	push	{r4, r5, lr}
 801129c:	d047      	beq.n	801132e <memset+0x96>
 801129e:	1e54      	subs	r4, r2, #1
 80112a0:	2a00      	cmp	r2, #0
 80112a2:	d03e      	beq.n	8011322 <memset+0x8a>
 80112a4:	b2ca      	uxtb	r2, r1
 80112a6:	4603      	mov	r3, r0
 80112a8:	e001      	b.n	80112ae <memset+0x16>
 80112aa:	3c01      	subs	r4, #1
 80112ac:	d339      	bcc.n	8011322 <memset+0x8a>
 80112ae:	f803 2b01 	strb.w	r2, [r3], #1
 80112b2:	079d      	lsls	r5, r3, #30
 80112b4:	d1f9      	bne.n	80112aa <memset+0x12>
 80112b6:	2c03      	cmp	r4, #3
 80112b8:	d92c      	bls.n	8011314 <memset+0x7c>
 80112ba:	b2cd      	uxtb	r5, r1
 80112bc:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 80112c0:	2c0f      	cmp	r4, #15
 80112c2:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 80112c6:	d935      	bls.n	8011334 <memset+0x9c>
 80112c8:	f1a4 0210 	sub.w	r2, r4, #16
 80112cc:	f022 0c0f 	bic.w	ip, r2, #15
 80112d0:	f103 0e10 	add.w	lr, r3, #16
 80112d4:	44e6      	add	lr, ip
 80112d6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80112da:	461a      	mov	r2, r3
 80112dc:	6015      	str	r5, [r2, #0]
 80112de:	6055      	str	r5, [r2, #4]
 80112e0:	6095      	str	r5, [r2, #8]
 80112e2:	60d5      	str	r5, [r2, #12]
 80112e4:	3210      	adds	r2, #16
 80112e6:	4572      	cmp	r2, lr
 80112e8:	d1f8      	bne.n	80112dc <memset+0x44>
 80112ea:	f10c 0201 	add.w	r2, ip, #1
 80112ee:	f014 0f0c 	tst.w	r4, #12
 80112f2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80112f6:	f004 0c0f 	and.w	ip, r4, #15
 80112fa:	d013      	beq.n	8011324 <memset+0x8c>
 80112fc:	f1ac 0304 	sub.w	r3, ip, #4
 8011300:	f023 0303 	bic.w	r3, r3, #3
 8011304:	3304      	adds	r3, #4
 8011306:	4413      	add	r3, r2
 8011308:	f842 5b04 	str.w	r5, [r2], #4
 801130c:	429a      	cmp	r2, r3
 801130e:	d1fb      	bne.n	8011308 <memset+0x70>
 8011310:	f00c 0403 	and.w	r4, ip, #3
 8011314:	b12c      	cbz	r4, 8011322 <memset+0x8a>
 8011316:	b2c9      	uxtb	r1, r1
 8011318:	441c      	add	r4, r3
 801131a:	f803 1b01 	strb.w	r1, [r3], #1
 801131e:	429c      	cmp	r4, r3
 8011320:	d1fb      	bne.n	801131a <memset+0x82>
 8011322:	bd30      	pop	{r4, r5, pc}
 8011324:	4664      	mov	r4, ip
 8011326:	4613      	mov	r3, r2
 8011328:	2c00      	cmp	r4, #0
 801132a:	d1f4      	bne.n	8011316 <memset+0x7e>
 801132c:	e7f9      	b.n	8011322 <memset+0x8a>
 801132e:	4603      	mov	r3, r0
 8011330:	4614      	mov	r4, r2
 8011332:	e7c0      	b.n	80112b6 <memset+0x1e>
 8011334:	461a      	mov	r2, r3
 8011336:	46a4      	mov	ip, r4
 8011338:	e7e0      	b.n	80112fc <memset+0x64>
 801133a:	bf00      	nop

0801133c <__memset_chk>:
 801133c:	429a      	cmp	r2, r3
 801133e:	d801      	bhi.n	8011344 <__memset_chk+0x8>
 8011340:	f7ff bfaa 	b.w	8011298 <memset>
 8011344:	b508      	push	{r3, lr}
 8011346:	f7fa fcbf 	bl	800bcc8 <__chk_fail>
 801134a:	bf00      	nop

0801134c <__malloc_lock>:
 801134c:	4801      	ldr	r0, [pc, #4]	; (8011354 <__malloc_lock+0x8>)
 801134e:	f004 bf67 	b.w	8016220 <__retarget_lock_acquire_recursive>
 8011352:	bf00      	nop
 8011354:	20000db0 	.word	0x20000db0

08011358 <__malloc_unlock>:
 8011358:	4801      	ldr	r0, [pc, #4]	; (8011360 <__malloc_unlock+0x8>)
 801135a:	f004 bf67 	b.w	801622c <__retarget_lock_release_recursive>
 801135e:	bf00      	nop
 8011360:	20000db0 	.word	0x20000db0

08011364 <printf>:
 8011364:	b40f      	push	{r0, r1, r2, r3}
 8011366:	b500      	push	{lr}
 8011368:	4907      	ldr	r1, [pc, #28]	; (8011388 <printf+0x24>)
 801136a:	b083      	sub	sp, #12
 801136c:	ab04      	add	r3, sp, #16
 801136e:	6808      	ldr	r0, [r1, #0]
 8011370:	f853 2b04 	ldr.w	r2, [r3], #4
 8011374:	6881      	ldr	r1, [r0, #8]
 8011376:	9301      	str	r3, [sp, #4]
 8011378:	f7f3 fb46 	bl	8004a08 <_vfprintf_r>
 801137c:	b003      	add	sp, #12
 801137e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011382:	b004      	add	sp, #16
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop
 8011388:	20000894 	.word	0x20000894

0801138c <_sbrk_r>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	4d07      	ldr	r5, [pc, #28]	; (80113ac <_sbrk_r+0x20>)
 8011390:	2200      	movs	r2, #0
 8011392:	4604      	mov	r4, r0
 8011394:	4608      	mov	r0, r1
 8011396:	602a      	str	r2, [r5, #0]
 8011398:	f7fa fc82 	bl	800bca0 <_sbrk>
 801139c:	1c43      	adds	r3, r0, #1
 801139e:	d000      	beq.n	80113a2 <_sbrk_r+0x16>
 80113a0:	bd38      	pop	{r3, r4, r5, pc}
 80113a2:	682b      	ldr	r3, [r5, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d0fb      	beq.n	80113a0 <_sbrk_r+0x14>
 80113a8:	6023      	str	r3, [r4, #0]
 80113aa:	bd38      	pop	{r3, r4, r5, pc}
 80113ac:	2000227c 	.word	0x2000227c

080113b0 <snprintf>:
 80113b0:	b40c      	push	{r2, r3}
 80113b2:	b510      	push	{r4, lr}
 80113b4:	4b1f      	ldr	r3, [pc, #124]	; (8011434 <snprintf+0x84>)
 80113b6:	2900      	cmp	r1, #0
 80113b8:	681c      	ldr	r4, [r3, #0]
 80113ba:	b09c      	sub	sp, #112	; 0x70
 80113bc:	db35      	blt.n	801142a <snprintf+0x7a>
 80113be:	f44f 7302 	mov.w	r3, #520	; 0x208
 80113c2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80113c6:	9002      	str	r0, [sp, #8]
 80113c8:	9006      	str	r0, [sp, #24]
 80113ca:	ab1f      	add	r3, sp, #124	; 0x7c
 80113cc:	d018      	beq.n	8011400 <snprintf+0x50>
 80113ce:	3901      	subs	r1, #1
 80113d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113d4:	9104      	str	r1, [sp, #16]
 80113d6:	9107      	str	r1, [sp, #28]
 80113d8:	f8ad 2016 	strh.w	r2, [sp, #22]
 80113dc:	a902      	add	r1, sp, #8
 80113de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80113e0:	9301      	str	r3, [sp, #4]
 80113e2:	4620      	mov	r0, r4
 80113e4:	f7f1 fdf0 	bl	8002fc8 <_svfprintf_r>
 80113e8:	1c42      	adds	r2, r0, #1
 80113ea:	da01      	bge.n	80113f0 <snprintf+0x40>
 80113ec:	238b      	movs	r3, #139	; 0x8b
 80113ee:	6023      	str	r3, [r4, #0]
 80113f0:	9b02      	ldr	r3, [sp, #8]
 80113f2:	2200      	movs	r2, #0
 80113f4:	701a      	strb	r2, [r3, #0]
 80113f6:	b01c      	add	sp, #112	; 0x70
 80113f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113fc:	b002      	add	sp, #8
 80113fe:	4770      	bx	lr
 8011400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011404:	9104      	str	r1, [sp, #16]
 8011406:	9107      	str	r1, [sp, #28]
 8011408:	f8ad 2016 	strh.w	r2, [sp, #22]
 801140c:	a902      	add	r1, sp, #8
 801140e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011410:	9301      	str	r3, [sp, #4]
 8011412:	4620      	mov	r0, r4
 8011414:	f7f1 fdd8 	bl	8002fc8 <_svfprintf_r>
 8011418:	1c43      	adds	r3, r0, #1
 801141a:	da01      	bge.n	8011420 <snprintf+0x70>
 801141c:	238b      	movs	r3, #139	; 0x8b
 801141e:	6023      	str	r3, [r4, #0]
 8011420:	b01c      	add	sp, #112	; 0x70
 8011422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011426:	b002      	add	sp, #8
 8011428:	4770      	bx	lr
 801142a:	238b      	movs	r3, #139	; 0x8b
 801142c:	6023      	str	r3, [r4, #0]
 801142e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011432:	e7f5      	b.n	8011420 <snprintf+0x70>
 8011434:	20000894 	.word	0x20000894

08011438 <strchr>:
 8011438:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801143c:	4603      	mov	r3, r0
 801143e:	f000 0203 	and.w	r2, r0, #3
 8011442:	d039      	beq.n	80114b8 <strchr+0x80>
 8011444:	bb8a      	cbnz	r2, 80114aa <strchr+0x72>
 8011446:	6802      	ldr	r2, [r0, #0]
 8011448:	b510      	push	{r4, lr}
 801144a:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
 801144e:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
 8011452:	ea8e 0402 	eor.w	r4, lr, r2
 8011456:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 801145a:	ea23 0302 	bic.w	r3, r3, r2
 801145e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8011462:	ea22 0204 	bic.w	r2, r2, r4
 8011466:	4313      	orrs	r3, r2
 8011468:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801146c:	d10f      	bne.n	801148e <strchr+0x56>
 801146e:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8011472:	ea84 0c0e 	eor.w	ip, r4, lr
 8011476:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 801147a:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 801147e:	ea23 0304 	bic.w	r3, r3, r4
 8011482:	ea22 020c 	bic.w	r2, r2, ip
 8011486:	4313      	orrs	r3, r2
 8011488:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801148c:	d0ef      	beq.n	801146e <strchr+0x36>
 801148e:	7803      	ldrb	r3, [r0, #0]
 8011490:	b923      	cbnz	r3, 801149c <strchr+0x64>
 8011492:	e036      	b.n	8011502 <strchr+0xca>
 8011494:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011498:	2b00      	cmp	r3, #0
 801149a:	d032      	beq.n	8011502 <strchr+0xca>
 801149c:	4299      	cmp	r1, r3
 801149e:	d1f9      	bne.n	8011494 <strchr+0x5c>
 80114a0:	bd10      	pop	{r4, pc}
 80114a2:	428a      	cmp	r2, r1
 80114a4:	d028      	beq.n	80114f8 <strchr+0xc0>
 80114a6:	079a      	lsls	r2, r3, #30
 80114a8:	d029      	beq.n	80114fe <strchr+0xc6>
 80114aa:	781a      	ldrb	r2, [r3, #0]
 80114ac:	4618      	mov	r0, r3
 80114ae:	3301      	adds	r3, #1
 80114b0:	2a00      	cmp	r2, #0
 80114b2:	d1f6      	bne.n	80114a2 <strchr+0x6a>
 80114b4:	4610      	mov	r0, r2
 80114b6:	4770      	bx	lr
 80114b8:	b9ca      	cbnz	r2, 80114ee <strchr+0xb6>
 80114ba:	6802      	ldr	r2, [r0, #0]
 80114bc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 80114c0:	ea23 0302 	bic.w	r3, r3, r2
 80114c4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80114c8:	d108      	bne.n	80114dc <strchr+0xa4>
 80114ca:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80114ce:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 80114d2:	ea23 0302 	bic.w	r3, r3, r2
 80114d6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80114da:	d0f6      	beq.n	80114ca <strchr+0x92>
 80114dc:	7803      	ldrb	r3, [r0, #0]
 80114de:	b15b      	cbz	r3, 80114f8 <strchr+0xc0>
 80114e0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d1fb      	bne.n	80114e0 <strchr+0xa8>
 80114e8:	4770      	bx	lr
 80114ea:	0799      	lsls	r1, r3, #30
 80114ec:	d005      	beq.n	80114fa <strchr+0xc2>
 80114ee:	4618      	mov	r0, r3
 80114f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114f4:	2a00      	cmp	r2, #0
 80114f6:	d1f8      	bne.n	80114ea <strchr+0xb2>
 80114f8:	4770      	bx	lr
 80114fa:	4618      	mov	r0, r3
 80114fc:	e7dd      	b.n	80114ba <strchr+0x82>
 80114fe:	4618      	mov	r0, r3
 8011500:	e7a1      	b.n	8011446 <strchr+0xe>
 8011502:	4618      	mov	r0, r3
 8011504:	bd10      	pop	{r4, pc}
 8011506:	bf00      	nop

08011508 <strcpy>:
 8011508:	ea80 0201 	eor.w	r2, r0, r1
 801150c:	4684      	mov	ip, r0
 801150e:	f012 0f03 	tst.w	r2, #3
 8011512:	d14f      	bne.n	80115b4 <strcpy+0xac>
 8011514:	f011 0f03 	tst.w	r1, #3
 8011518:	d132      	bne.n	8011580 <strcpy+0x78>
 801151a:	f84d 4d04 	str.w	r4, [sp, #-4]!
 801151e:	f011 0f04 	tst.w	r1, #4
 8011522:	f851 3b04 	ldr.w	r3, [r1], #4
 8011526:	d00b      	beq.n	8011540 <strcpy+0x38>
 8011528:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801152c:	439a      	bics	r2, r3
 801152e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8011532:	bf04      	itt	eq
 8011534:	f84c 3b04 	streq.w	r3, [ip], #4
 8011538:	f851 3b04 	ldreq.w	r3, [r1], #4
 801153c:	d116      	bne.n	801156c <strcpy+0x64>
 801153e:	bf00      	nop
 8011540:	f851 4b04 	ldr.w	r4, [r1], #4
 8011544:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8011548:	439a      	bics	r2, r3
 801154a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801154e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8011552:	d10b      	bne.n	801156c <strcpy+0x64>
 8011554:	f84c 3b04 	str.w	r3, [ip], #4
 8011558:	43a2      	bics	r2, r4
 801155a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801155e:	bf04      	itt	eq
 8011560:	f851 3b04 	ldreq.w	r3, [r1], #4
 8011564:	f84c 4b04 	streq.w	r4, [ip], #4
 8011568:	d0ea      	beq.n	8011540 <strcpy+0x38>
 801156a:	4623      	mov	r3, r4
 801156c:	f80c 3b01 	strb.w	r3, [ip], #1
 8011570:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011574:	ea4f 2333 	mov.w	r3, r3, ror #8
 8011578:	d1f8      	bne.n	801156c <strcpy+0x64>
 801157a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801157e:	4770      	bx	lr
 8011580:	f011 0f01 	tst.w	r1, #1
 8011584:	d006      	beq.n	8011594 <strcpy+0x8c>
 8011586:	f811 2b01 	ldrb.w	r2, [r1], #1
 801158a:	f80c 2b01 	strb.w	r2, [ip], #1
 801158e:	2a00      	cmp	r2, #0
 8011590:	bf08      	it	eq
 8011592:	4770      	bxeq	lr
 8011594:	f011 0f02 	tst.w	r1, #2
 8011598:	d0bf      	beq.n	801151a <strcpy+0x12>
 801159a:	f831 2b02 	ldrh.w	r2, [r1], #2
 801159e:	f012 0fff 	tst.w	r2, #255	; 0xff
 80115a2:	bf16      	itet	ne
 80115a4:	f82c 2b02 	strhne.w	r2, [ip], #2
 80115a8:	f88c 2000 	strbeq.w	r2, [ip]
 80115ac:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80115b0:	d1b3      	bne.n	801151a <strcpy+0x12>
 80115b2:	4770      	bx	lr
 80115b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115b8:	f80c 2b01 	strb.w	r2, [ip], #1
 80115bc:	2a00      	cmp	r2, #0
 80115be:	d1f9      	bne.n	80115b4 <strcpy+0xac>
 80115c0:	4770      	bx	lr
 80115c2:	bf00      	nop

080115c4 <strncmp>:
 80115c4:	b3b2      	cbz	r2, 8011634 <strncmp+0x70>
 80115c6:	ea40 0301 	orr.w	r3, r0, r1
 80115ca:	079b      	lsls	r3, r3, #30
 80115cc:	b530      	push	{r4, r5, lr}
 80115ce:	4684      	mov	ip, r0
 80115d0:	d118      	bne.n	8011604 <strncmp+0x40>
 80115d2:	2a03      	cmp	r2, #3
 80115d4:	d916      	bls.n	8011604 <strncmp+0x40>
 80115d6:	4604      	mov	r4, r0
 80115d8:	460b      	mov	r3, r1
 80115da:	e006      	b.n	80115ea <strncmp+0x26>
 80115dc:	3a04      	subs	r2, #4
 80115de:	d02b      	beq.n	8011638 <strncmp+0x74>
 80115e0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
 80115e4:	d128      	bne.n	8011638 <strncmp+0x74>
 80115e6:	2a03      	cmp	r2, #3
 80115e8:	d92a      	bls.n	8011640 <strncmp+0x7c>
 80115ea:	6820      	ldr	r0, [r4, #0]
 80115ec:	4619      	mov	r1, r3
 80115ee:	f853 5b04 	ldr.w	r5, [r3], #4
 80115f2:	f1a0 3e01 	sub.w	lr, r0, #16843009	; 0x1010101
 80115f6:	42a8      	cmp	r0, r5
 80115f8:	46a4      	mov	ip, r4
 80115fa:	ea2e 0e00 	bic.w	lr, lr, r0
 80115fe:	f104 0404 	add.w	r4, r4, #4
 8011602:	d0eb      	beq.n	80115dc <strncmp+0x18>
 8011604:	f89c 0000 	ldrb.w	r0, [ip]
 8011608:	780c      	ldrb	r4, [r1, #0]
 801160a:	4284      	cmp	r4, r0
 801160c:	d116      	bne.n	801163c <strncmp+0x78>
 801160e:	2a01      	cmp	r2, #1
 8011610:	d012      	beq.n	8011638 <strncmp+0x74>
 8011612:	46e6      	mov	lr, ip
 8011614:	b168      	cbz	r0, 8011632 <strncmp+0x6e>
 8011616:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 801161a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801161e:	eba2 030e 	sub.w	r3, r2, lr
 8011622:	42a0      	cmp	r0, r4
 8011624:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011628:	d108      	bne.n	801163c <strncmp+0x78>
 801162a:	eb1c 0303 	adds.w	r3, ip, r3
 801162e:	d1f1      	bne.n	8011614 <strncmp+0x50>
 8011630:	4618      	mov	r0, r3
 8011632:	bd30      	pop	{r4, r5, pc}
 8011634:	4610      	mov	r0, r2
 8011636:	4770      	bx	lr
 8011638:	2000      	movs	r0, #0
 801163a:	bd30      	pop	{r4, r5, pc}
 801163c:	1b00      	subs	r0, r0, r4
 801163e:	bd30      	pop	{r4, r5, pc}
 8011640:	46a4      	mov	ip, r4
 8011642:	4619      	mov	r1, r3
 8011644:	e7de      	b.n	8011604 <strncmp+0x40>
 8011646:	bf00      	nop

08011648 <strncpy>:
 8011648:	ea40 0301 	orr.w	r3, r0, r1
 801164c:	079b      	lsls	r3, r3, #30
 801164e:	b510      	push	{r4, lr}
 8011650:	d101      	bne.n	8011656 <strncpy+0xe>
 8011652:	2a03      	cmp	r2, #3
 8011654:	d817      	bhi.n	8011686 <strncpy+0x3e>
 8011656:	4684      	mov	ip, r0
 8011658:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 801165c:	e007      	b.n	801166e <strncpy+0x26>
 801165e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8011662:	f803 1b01 	strb.w	r1, [r3], #1
 8011666:	1e54      	subs	r4, r2, #1
 8011668:	b129      	cbz	r1, 8011676 <strncpy+0x2e>
 801166a:	469c      	mov	ip, r3
 801166c:	4622      	mov	r2, r4
 801166e:	4663      	mov	r3, ip
 8011670:	2a00      	cmp	r2, #0
 8011672:	d1f4      	bne.n	801165e <strncpy+0x16>
 8011674:	bd10      	pop	{r4, pc}
 8011676:	4494      	add	ip, r2
 8011678:	2c00      	cmp	r4, #0
 801167a:	d0fb      	beq.n	8011674 <strncpy+0x2c>
 801167c:	f803 1b01 	strb.w	r1, [r3], #1
 8011680:	4563      	cmp	r3, ip
 8011682:	d1fb      	bne.n	801167c <strncpy+0x34>
 8011684:	bd10      	pop	{r4, pc}
 8011686:	468e      	mov	lr, r1
 8011688:	4684      	mov	ip, r0
 801168a:	f8de 4000 	ldr.w	r4, [lr]
 801168e:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8011692:	ea23 0304 	bic.w	r3, r3, r4
 8011696:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801169a:	4671      	mov	r1, lr
 801169c:	f10e 0e04 	add.w	lr, lr, #4
 80116a0:	d1da      	bne.n	8011658 <strncpy+0x10>
 80116a2:	3a04      	subs	r2, #4
 80116a4:	2a03      	cmp	r2, #3
 80116a6:	f84c 4b04 	str.w	r4, [ip], #4
 80116aa:	d8ee      	bhi.n	801168a <strncpy+0x42>
 80116ac:	4671      	mov	r1, lr
 80116ae:	e7d3      	b.n	8011658 <strncpy+0x10>

080116b0 <strnlen>:
 80116b0:	b171      	cbz	r1, 80116d0 <strnlen+0x20>
 80116b2:	4603      	mov	r3, r0
 80116b4:	eb00 0c01 	add.w	ip, r0, r1
 80116b8:	e001      	b.n	80116be <strnlen+0xe>
 80116ba:	4563      	cmp	r3, ip
 80116bc:	d006      	beq.n	80116cc <strnlen+0x1c>
 80116be:	461a      	mov	r2, r3
 80116c0:	3301      	adds	r3, #1
 80116c2:	7811      	ldrb	r1, [r2, #0]
 80116c4:	2900      	cmp	r1, #0
 80116c6:	d1f8      	bne.n	80116ba <strnlen+0xa>
 80116c8:	1a10      	subs	r0, r2, r0
 80116ca:	4770      	bx	lr
 80116cc:	1a18      	subs	r0, r3, r0
 80116ce:	4770      	bx	lr
 80116d0:	4608      	mov	r0, r1
 80116d2:	4770      	bx	lr

080116d4 <two_way_long_needle>:
 80116d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d8:	2b01      	cmp	r3, #1
 80116da:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80116de:	461c      	mov	r4, r3
 80116e0:	4681      	mov	r9, r0
 80116e2:	468b      	mov	fp, r1
 80116e4:	4690      	mov	r8, r2
 80116e6:	f240 813f 	bls.w	8011968 <two_way_long_needle+0x294>
 80116ea:	2301      	movs	r3, #1
 80116ec:	2500      	movs	r5, #0
 80116ee:	461f      	mov	r7, r3
 80116f0:	4619      	mov	r1, r3
 80116f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116f6:	e005      	b.n	8011704 <two_way_long_needle+0x30>
 80116f8:	1a1f      	subs	r7, r3, r0
 80116fa:	461d      	mov	r5, r3
 80116fc:	2101      	movs	r1, #1
 80116fe:	186b      	adds	r3, r5, r1
 8011700:	429c      	cmp	r4, r3
 8011702:	d90e      	bls.n	8011722 <two_way_long_needle+0x4e>
 8011704:	eb08 0200 	add.w	r2, r8, r0
 8011708:	f818 6003 	ldrb.w	r6, [r8, r3]
 801170c:	5c52      	ldrb	r2, [r2, r1]
 801170e:	4296      	cmp	r6, r2
 8011710:	d3f2      	bcc.n	80116f8 <two_way_long_needle+0x24>
 8011712:	d078      	beq.n	8011806 <two_way_long_needle+0x132>
 8011714:	2701      	movs	r7, #1
 8011716:	4628      	mov	r0, r5
 8011718:	4639      	mov	r1, r7
 801171a:	443d      	add	r5, r7
 801171c:	186b      	adds	r3, r5, r1
 801171e:	429c      	cmp	r4, r3
 8011720:	d8f0      	bhi.n	8011704 <two_way_long_needle+0x30>
 8011722:	9701      	str	r7, [sp, #4]
 8011724:	2701      	movs	r7, #1
 8011726:	2500      	movs	r5, #0
 8011728:	4639      	mov	r1, r7
 801172a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801172e:	463b      	mov	r3, r7
 8011730:	e005      	b.n	801173e <two_way_long_needle+0x6a>
 8011732:	1b9f      	subs	r7, r3, r6
 8011734:	461d      	mov	r5, r3
 8011736:	2101      	movs	r1, #1
 8011738:	186b      	adds	r3, r5, r1
 801173a:	429c      	cmp	r4, r3
 801173c:	d90e      	bls.n	801175c <two_way_long_needle+0x88>
 801173e:	eb08 0201 	add.w	r2, r8, r1
 8011742:	f818 c003 	ldrb.w	ip, [r8, r3]
 8011746:	5d92      	ldrb	r2, [r2, r6]
 8011748:	4562      	cmp	r2, ip
 801174a:	d3f2      	bcc.n	8011732 <two_way_long_needle+0x5e>
 801174c:	d061      	beq.n	8011812 <two_way_long_needle+0x13e>
 801174e:	2701      	movs	r7, #1
 8011750:	462e      	mov	r6, r5
 8011752:	4639      	mov	r1, r7
 8011754:	443d      	add	r5, r7
 8011756:	186b      	adds	r3, r5, r1
 8011758:	429c      	cmp	r4, r3
 801175a:	d8f0      	bhi.n	801173e <two_way_long_needle+0x6a>
 801175c:	3601      	adds	r6, #1
 801175e:	f100 0a01 	add.w	sl, r0, #1
 8011762:	4556      	cmp	r6, sl
 8011764:	9b01      	ldr	r3, [sp, #4]
 8011766:	bf28      	it	cs
 8011768:	463b      	movcs	r3, r7
 801176a:	9301      	str	r3, [sp, #4]
 801176c:	bf28      	it	cs
 801176e:	46b2      	movcs	sl, r6
 8011770:	ab03      	add	r3, sp, #12
 8011772:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
 8011776:	f843 4f04 	str.w	r4, [r3, #4]!
 801177a:	429a      	cmp	r2, r3
 801177c:	d1fb      	bne.n	8011776 <two_way_long_needle+0xa2>
 801177e:	b16c      	cbz	r4, 801179c <two_way_long_needle+0xc8>
 8011780:	1e60      	subs	r0, r4, #1
 8011782:	4440      	add	r0, r8
 8011784:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8011788:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801178c:	1aa3      	subs	r3, r4, r2
 801178e:	3b01      	subs	r3, #1
 8011790:	ad04      	add	r5, sp, #16
 8011792:	4443      	add	r3, r8
 8011794:	4282      	cmp	r2, r0
 8011796:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
 801179a:	d1f5      	bne.n	8011788 <two_way_long_needle+0xb4>
 801179c:	9b01      	ldr	r3, [sp, #4]
 801179e:	4652      	mov	r2, sl
 80117a0:	eb08 0103 	add.w	r1, r8, r3
 80117a4:	4640      	mov	r0, r8
 80117a6:	f7ff fcc7 	bl	8011138 <memcmp>
 80117aa:	2800      	cmp	r0, #0
 80117ac:	f040 8084 	bne.w	80118b8 <two_way_long_needle+0x1e4>
 80117b0:	f444 6300 	orr.w	r3, r4, #2048	; 0x800
 80117b4:	4607      	mov	r7, r0
 80117b6:	4605      	mov	r5, r0
 80117b8:	ebab 0c04 	sub.w	ip, fp, r4
 80117bc:	9302      	str	r3, [sp, #8]
 80117be:	1e66      	subs	r6, r4, #1
 80117c0:	45ac      	cmp	ip, r5
 80117c2:	d311      	bcc.n	80117e8 <two_way_long_needle+0x114>
 80117c4:	eb09 0e05 	add.w	lr, r9, r5
 80117c8:	aa04      	add	r2, sp, #16
 80117ca:	f81e 3006 	ldrb.w	r3, [lr, r6]
 80117ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117d2:	b323      	cbz	r3, 801181e <two_way_long_needle+0x14a>
 80117d4:	b11f      	cbz	r7, 80117de <two_way_long_needle+0x10a>
 80117d6:	9a01      	ldr	r2, [sp, #4]
 80117d8:	4293      	cmp	r3, r2
 80117da:	bf38      	it	cc
 80117dc:	1aa3      	subcc	r3, r4, r2
 80117de:	441d      	add	r5, r3
 80117e0:	45ac      	cmp	ip, r5
 80117e2:	f04f 0700 	mov.w	r7, #0
 80117e6:	d2ed      	bcs.n	80117c4 <two_way_long_needle+0xf0>
 80117e8:	eb09 000b 	add.w	r0, r9, fp
 80117ec:	9902      	ldr	r1, [sp, #8]
 80117ee:	f7ff ff5f 	bl	80116b0 <strnlen>
 80117f2:	4483      	add	fp, r0
 80117f4:	ebab 0c04 	sub.w	ip, fp, r4
 80117f8:	45ac      	cmp	ip, r5
 80117fa:	d2e3      	bcs.n	80117c4 <two_way_long_needle+0xf0>
 80117fc:	2000      	movs	r0, #0
 80117fe:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 8011802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011806:	42b9      	cmp	r1, r7
 8011808:	bf0a      	itet	eq
 801180a:	186d      	addeq	r5, r5, r1
 801180c:	3101      	addne	r1, #1
 801180e:	2101      	moveq	r1, #1
 8011810:	e775      	b.n	80116fe <two_way_long_needle+0x2a>
 8011812:	428f      	cmp	r7, r1
 8011814:	bf12      	itee	ne
 8011816:	3101      	addne	r1, #1
 8011818:	19ed      	addeq	r5, r5, r7
 801181a:	2101      	moveq	r1, #1
 801181c:	e78c      	b.n	8011738 <two_way_long_needle+0x64>
 801181e:	4557      	cmp	r7, sl
 8011820:	463b      	mov	r3, r7
 8011822:	bf38      	it	cc
 8011824:	4653      	movcc	r3, sl
 8011826:	42b3      	cmp	r3, r6
 8011828:	d218      	bcs.n	801185c <two_way_long_needle+0x188>
 801182a:	1e59      	subs	r1, r3, #1
 801182c:	18ea      	adds	r2, r5, r3
 801182e:	4441      	add	r1, r8
 8011830:	444a      	add	r2, r9
 8011832:	9500      	str	r5, [sp, #0]
 8011834:	e002      	b.n	801183c <two_way_long_needle+0x168>
 8011836:	3301      	adds	r3, #1
 8011838:	42b3      	cmp	r3, r6
 801183a:	d20e      	bcs.n	801185a <two_way_long_needle+0x186>
 801183c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011840:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8011844:	4285      	cmp	r5, r0
 8011846:	d0f6      	beq.n	8011836 <two_way_long_needle+0x162>
 8011848:	429e      	cmp	r6, r3
 801184a:	9d00      	ldr	r5, [sp, #0]
 801184c:	d906      	bls.n	801185c <two_way_long_needle+0x188>
 801184e:	f1ca 0201 	rsb	r2, sl, #1
 8011852:	442a      	add	r2, r5
 8011854:	189d      	adds	r5, r3, r2
 8011856:	2700      	movs	r7, #0
 8011858:	e7b2      	b.n	80117c0 <two_way_long_needle+0xec>
 801185a:	9d00      	ldr	r5, [sp, #0]
 801185c:	4557      	cmp	r7, sl
 801185e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011862:	d27f      	bcs.n	8011964 <two_way_long_needle+0x290>
 8011864:	eb05 020a 	add.w	r2, r5, sl
 8011868:	444a      	add	r2, r9
 801186a:	eb08 010a 	add.w	r1, r8, sl
 801186e:	9500      	str	r5, [sp, #0]
 8011870:	f8cd a00c 	str.w	sl, [sp, #12]
 8011874:	e002      	b.n	801187c <two_way_long_needle+0x1a8>
 8011876:	429f      	cmp	r7, r3
 8011878:	d013      	beq.n	80118a2 <two_way_long_needle+0x1ce>
 801187a:	4653      	mov	r3, sl
 801187c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8011880:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8011884:	4285      	cmp	r5, r0
 8011886:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 801188a:	d0f4      	beq.n	8011876 <two_way_long_needle+0x1a2>
 801188c:	9d00      	ldr	r5, [sp, #0]
 801188e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8011892:	3301      	adds	r3, #1
 8011894:	3701      	adds	r7, #1
 8011896:	429f      	cmp	r7, r3
 8011898:	d809      	bhi.n	80118ae <two_way_long_needle+0x1da>
 801189a:	9b01      	ldr	r3, [sp, #4]
 801189c:	441d      	add	r5, r3
 801189e:	1ae7      	subs	r7, r4, r3
 80118a0:	e78e      	b.n	80117c0 <two_way_long_needle+0xec>
 80118a2:	3701      	adds	r7, #1
 80118a4:	429f      	cmp	r7, r3
 80118a6:	9d00      	ldr	r5, [sp, #0]
 80118a8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80118ac:	d9f5      	bls.n	801189a <two_way_long_needle+0x1c6>
 80118ae:	4670      	mov	r0, lr
 80118b0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 80118b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b8:	eba4 030a 	sub.w	r3, r4, sl
 80118bc:	4553      	cmp	r3, sl
 80118be:	bf38      	it	cc
 80118c0:	4653      	movcc	r3, sl
 80118c2:	3301      	adds	r3, #1
 80118c4:	9301      	str	r3, [sp, #4]
 80118c6:	f444 6300 	orr.w	r3, r4, #2048	; 0x800
 80118ca:	2500      	movs	r5, #0
 80118cc:	ebab 0c04 	sub.w	ip, fp, r4
 80118d0:	9300      	str	r3, [sp, #0]
 80118d2:	1e66      	subs	r6, r4, #1
 80118d4:	45ac      	cmp	ip, r5
 80118d6:	d309      	bcc.n	80118ec <two_way_long_needle+0x218>
 80118d8:	eb09 0005 	add.w	r0, r9, r5
 80118dc:	aa04      	add	r2, sp, #16
 80118de:	5d83      	ldrb	r3, [r0, r6]
 80118e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118e4:	b16b      	cbz	r3, 8011902 <two_way_long_needle+0x22e>
 80118e6:	441d      	add	r5, r3
 80118e8:	45ac      	cmp	ip, r5
 80118ea:	d2f5      	bcs.n	80118d8 <two_way_long_needle+0x204>
 80118ec:	eb09 000b 	add.w	r0, r9, fp
 80118f0:	9900      	ldr	r1, [sp, #0]
 80118f2:	f7ff fedd 	bl	80116b0 <strnlen>
 80118f6:	4483      	add	fp, r0
 80118f8:	ebab 0c04 	sub.w	ip, fp, r4
 80118fc:	45ac      	cmp	ip, r5
 80118fe:	d2eb      	bcs.n	80118d8 <two_way_long_needle+0x204>
 8011900:	e77c      	b.n	80117fc <two_way_long_needle+0x128>
 8011902:	45b2      	cmp	sl, r6
 8011904:	d217      	bcs.n	8011936 <two_way_long_needle+0x262>
 8011906:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 801190a:	eb05 020a 	add.w	r2, r5, sl
 801190e:	4441      	add	r1, r8
 8011910:	444a      	add	r2, r9
 8011912:	4653      	mov	r3, sl
 8011914:	e002      	b.n	801191c <two_way_long_needle+0x248>
 8011916:	3301      	adds	r3, #1
 8011918:	42b3      	cmp	r3, r6
 801191a:	d20c      	bcs.n	8011936 <two_way_long_needle+0x262>
 801191c:	f812 7b01 	ldrb.w	r7, [r2], #1
 8011920:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8011924:	45be      	cmp	lr, r7
 8011926:	d0f6      	beq.n	8011916 <two_way_long_needle+0x242>
 8011928:	42b3      	cmp	r3, r6
 801192a:	d204      	bcs.n	8011936 <two_way_long_needle+0x262>
 801192c:	f1ca 0201 	rsb	r2, sl, #1
 8011930:	442a      	add	r2, r5
 8011932:	189d      	adds	r5, r3, r2
 8011934:	e7ce      	b.n	80118d4 <two_way_long_needle+0x200>
 8011936:	f1ba 0f00 	cmp.w	sl, #0
 801193a:	f43f af60 	beq.w	80117fe <two_way_long_needle+0x12a>
 801193e:	eb05 010a 	add.w	r1, r5, sl
 8011942:	4449      	add	r1, r9
 8011944:	eb08 020a 	add.w	r2, r8, sl
 8011948:	e002      	b.n	8011950 <two_way_long_needle+0x27c>
 801194a:	4543      	cmp	r3, r8
 801194c:	f43f af57 	beq.w	80117fe <two_way_long_needle+0x12a>
 8011950:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
 8011954:	f811 7d01 	ldrb.w	r7, [r1, #-1]!
 8011958:	45be      	cmp	lr, r7
 801195a:	4613      	mov	r3, r2
 801195c:	d0f5      	beq.n	801194a <two_way_long_needle+0x276>
 801195e:	9b01      	ldr	r3, [sp, #4]
 8011960:	441d      	add	r5, r3
 8011962:	e7c1      	b.n	80118e8 <two_way_long_needle+0x214>
 8011964:	4653      	mov	r3, sl
 8011966:	e795      	b.n	8011894 <two_way_long_needle+0x1c0>
 8011968:	2301      	movs	r3, #1
 801196a:	9301      	str	r3, [sp, #4]
 801196c:	f04f 0a00 	mov.w	sl, #0
 8011970:	e6fe      	b.n	8011770 <two_way_long_needle+0x9c>
 8011972:	bf00      	nop

08011974 <strstr>:
 8011974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011978:	460d      	mov	r5, r1
 801197a:	7809      	ldrb	r1, [r1, #0]
 801197c:	b090      	sub	sp, #64	; 0x40
 801197e:	4604      	mov	r4, r0
 8011980:	2900      	cmp	r1, #0
 8011982:	d054      	beq.n	8011a2e <strstr+0xba>
 8011984:	786a      	ldrb	r2, [r5, #1]
 8011986:	2a00      	cmp	r2, #0
 8011988:	f000 8082 	beq.w	8011a90 <strstr+0x11c>
 801198c:	78ab      	ldrb	r3, [r5, #2]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d051      	beq.n	8011a36 <strstr+0xc2>
 8011992:	78e8      	ldrb	r0, [r5, #3]
 8011994:	682e      	ldr	r6, [r5, #0]
 8011996:	2800      	cmp	r0, #0
 8011998:	f000 8081 	beq.w	8011a9e <strstr+0x12a>
 801199c:	792b      	ldrb	r3, [r5, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d056      	beq.n	8011a50 <strstr+0xdc>
 80119a2:	4628      	mov	r0, r5
 80119a4:	f7ee fc0c 	bl	80001c0 <strlen>
 80119a8:	4606      	mov	r6, r0
 80119aa:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 80119ae:	4620      	mov	r0, r4
 80119b0:	f7ff fe7e 	bl	80116b0 <strnlen>
 80119b4:	4286      	cmp	r6, r0
 80119b6:	d85a      	bhi.n	8011a6e <strstr+0xfa>
 80119b8:	2efe      	cmp	r6, #254	; 0xfe
 80119ba:	f200 8088 	bhi.w	8011ace <strstr+0x15a>
 80119be:	1b80      	subs	r0, r0, r6
 80119c0:	1827      	adds	r7, r4, r0
 80119c2:	2240      	movs	r2, #64	; 0x40
 80119c4:	1c71      	adds	r1, r6, #1
 80119c6:	4668      	mov	r0, sp
 80119c8:	f7ff fc66 	bl	8011298 <memset>
 80119cc:	b17e      	cbz	r6, 80119ee <strstr+0x7a>
 80119ce:	1e6a      	subs	r2, r5, #1
 80119d0:	fa5f fc86 	uxtb.w	ip, r6
 80119d4:	1990      	adds	r0, r2, r6
 80119d6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80119da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119de:	3340      	adds	r3, #64	; 0x40
 80119e0:	446b      	add	r3, sp
 80119e2:	1aa9      	subs	r1, r5, r2
 80119e4:	4461      	add	r1, ip
 80119e6:	4290      	cmp	r0, r2
 80119e8:	f803 1c40 	strb.w	r1, [r3, #-64]
 80119ec:	d1f3      	bne.n	80119d6 <strstr+0x62>
 80119ee:	3c01      	subs	r4, #1
 80119f0:	5da3      	ldrb	r3, [r4, r6]
 80119f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119f6:	3340      	adds	r3, #64	; 0x40
 80119f8:	446b      	add	r3, sp
 80119fa:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80119fe:	441c      	add	r4, r3
 8011a00:	42a7      	cmp	r7, r4
 8011a02:	d203      	bcs.n	8011a0c <strstr+0x98>
 8011a04:	e038      	b.n	8011a78 <strstr+0x104>
 8011a06:	4444      	add	r4, r8
 8011a08:	42a7      	cmp	r7, r4
 8011a0a:	d335      	bcc.n	8011a78 <strstr+0x104>
 8011a0c:	f814 c006 	ldrb.w	ip, [r4, r6]
 8011a10:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
 8011a14:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8011a18:	eb0d 0c03 	add.w	ip, sp, r3
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	4632      	mov	r2, r6
 8011a20:	4629      	mov	r1, r5
 8011a22:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
 8011a26:	f7ff fb87 	bl	8011138 <memcmp>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d1eb      	bne.n	8011a06 <strstr+0x92>
 8011a2e:	4620      	mov	r0, r4
 8011a30:	b010      	add	sp, #64	; 0x40
 8011a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a36:	7800      	ldrb	r0, [r0, #0]
 8011a38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011a3c:	b1b8      	cbz	r0, 8011a6e <strstr+0xfa>
 8011a3e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8011a42:	429a      	cmp	r2, r3
 8011a44:	4621      	mov	r1, r4
 8011a46:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8011a4a:	d1f7      	bne.n	8011a3c <strstr+0xc8>
 8011a4c:	1e4c      	subs	r4, r1, #1
 8011a4e:	e7ee      	b.n	8011a2e <strstr+0xba>
 8011a50:	7822      	ldrb	r2, [r4, #0]
 8011a52:	b162      	cbz	r2, 8011a6e <strstr+0xfa>
 8011a54:	ba31      	rev	r1, r6
 8011a56:	e001      	b.n	8011a5c <strstr+0xe8>
 8011a58:	4299      	cmp	r1, r3
 8011a5a:	d01e      	beq.n	8011a9a <strstr+0x126>
 8011a5c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011a60:	4620      	mov	r0, r4
 8011a62:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	d1f6      	bne.n	8011a58 <strstr+0xe4>
 8011a6a:	4299      	cmp	r1, r3
 8011a6c:	d015      	beq.n	8011a9a <strstr+0x126>
 8011a6e:	2400      	movs	r4, #0
 8011a70:	4620      	mov	r0, r4
 8011a72:	b010      	add	sp, #64	; 0x40
 8011a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a78:	5dbb      	ldrb	r3, [r7, r6]
 8011a7a:	19b8      	adds	r0, r7, r6
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d0f6      	beq.n	8011a6e <strstr+0xfa>
 8011a80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a84:	f7ff fe14 	bl	80116b0 <strnlen>
 8011a88:	4407      	add	r7, r0
 8011a8a:	42a7      	cmp	r7, r4
 8011a8c:	d2af      	bcs.n	80119ee <strstr+0x7a>
 8011a8e:	e7ee      	b.n	8011a6e <strstr+0xfa>
 8011a90:	b010      	add	sp, #64	; 0x40
 8011a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a96:	f7ff bccf 	b.w	8011438 <strchr>
 8011a9a:	1ec4      	subs	r4, r0, #3
 8011a9c:	e7c7      	b.n	8011a2e <strstr+0xba>
 8011a9e:	0412      	lsls	r2, r2, #16
 8011aa0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011aa4:	7821      	ldrb	r1, [r4, #0]
 8011aa6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011aaa:	2900      	cmp	r1, #0
 8011aac:	d0df      	beq.n	8011a6e <strstr+0xfa>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	e001      	b.n	8011ab6 <strstr+0x142>
 8011ab2:	2900      	cmp	r1, #0
 8011ab4:	d0db      	beq.n	8011a6e <strstr+0xfa>
 8011ab6:	ea41 0002 	orr.w	r0, r1, r2
 8011aba:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
 8011abe:	4625      	mov	r5, r4
 8011ac0:	ea4f 2200 	mov.w	r2, r0, lsl #8
 8011ac4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011ac8:	d1f3      	bne.n	8011ab2 <strstr+0x13e>
 8011aca:	1eac      	subs	r4, r5, #2
 8011acc:	e7af      	b.n	8011a2e <strstr+0xba>
 8011ace:	4601      	mov	r1, r0
 8011ad0:	4633      	mov	r3, r6
 8011ad2:	462a      	mov	r2, r5
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	b010      	add	sp, #64	; 0x40
 8011ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011adc:	f7ff bdfa 	b.w	80116d4 <two_way_long_needle>

08011ae0 <_strtol_l.constprop.0>:
 8011ae0:	2b24      	cmp	r3, #36	; 0x24
 8011ae2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae6:	d843      	bhi.n	8011b70 <_strtol_l.constprop.0+0x90>
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	d041      	beq.n	8011b70 <_strtol_l.constprop.0+0x90>
 8011aec:	4680      	mov	r8, r0
 8011aee:	4849      	ldr	r0, [pc, #292]	; (8011c14 <_strtol_l.constprop.0+0x134>)
 8011af0:	461f      	mov	r7, r3
 8011af2:	468e      	mov	lr, r1
 8011af4:	4675      	mov	r5, lr
 8011af6:	f81e bb01 	ldrb.w	fp, [lr], #1
 8011afa:	f810 400b 	ldrb.w	r4, [r0, fp]
 8011afe:	f014 0408 	ands.w	r4, r4, #8
 8011b02:	d1f7      	bne.n	8011af4 <_strtol_l.constprop.0+0x14>
 8011b04:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
 8011b08:	d06f      	beq.n	8011bea <_strtol_l.constprop.0+0x10a>
 8011b0a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8011b0e:	bf08      	it	eq
 8011b10:	f89e b000 	ldrbeq.w	fp, [lr]
 8011b14:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011b18:	bf08      	it	eq
 8011b1a:	f105 0e02 	addeq.w	lr, r5, #2
 8011b1e:	bb73      	cbnz	r3, 8011b7e <_strtol_l.constprop.0+0x9e>
 8011b20:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8011b24:	d04b      	beq.n	8011bbe <_strtol_l.constprop.0+0xde>
 8011b26:	270a      	movs	r7, #10
 8011b28:	463b      	mov	r3, r7
 8011b2a:	2500      	movs	r5, #0
 8011b2c:	fbb9 f6f7 	udiv	r6, r9, r7
 8011b30:	4628      	mov	r0, r5
 8011b32:	fb07 9a16 	mls	sl, r7, r6, r9
 8011b36:	e005      	b.n	8011b44 <_strtol_l.constprop.0+0x64>
 8011b38:	d03a      	beq.n	8011bb0 <_strtol_l.constprop.0+0xd0>
 8011b3a:	fb07 c000 	mla	r0, r7, r0, ip
 8011b3e:	2501      	movs	r5, #1
 8011b40:	f81e bb01 	ldrb.w	fp, [lr], #1
 8011b44:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
 8011b48:	f1bc 0f09 	cmp.w	ip, #9
 8011b4c:	d906      	bls.n	8011b5c <_strtol_l.constprop.0+0x7c>
 8011b4e:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
 8011b52:	f1bc 0f19 	cmp.w	ip, #25
 8011b56:	d819      	bhi.n	8011b8c <_strtol_l.constprop.0+0xac>
 8011b58:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
 8011b5c:	4563      	cmp	r3, ip
 8011b5e:	dd1e      	ble.n	8011b9e <_strtol_l.constprop.0+0xbe>
 8011b60:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8011b64:	d0ec      	beq.n	8011b40 <_strtol_l.constprop.0+0x60>
 8011b66:	4286      	cmp	r6, r0
 8011b68:	d2e6      	bcs.n	8011b38 <_strtol_l.constprop.0+0x58>
 8011b6a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011b6e:	e7e7      	b.n	8011b40 <_strtol_l.constprop.0+0x60>
 8011b70:	f004 fb5e 	bl	8016230 <__errno>
 8011b74:	2316      	movs	r3, #22
 8011b76:	6003      	str	r3, [r0, #0]
 8011b78:	2000      	movs	r0, #0
 8011b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7e:	2b10      	cmp	r3, #16
 8011b80:	d1d3      	bne.n	8011b2a <_strtol_l.constprop.0+0x4a>
 8011b82:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8011b86:	d023      	beq.n	8011bd0 <_strtol_l.constprop.0+0xf0>
 8011b88:	461f      	mov	r7, r3
 8011b8a:	e7ce      	b.n	8011b2a <_strtol_l.constprop.0+0x4a>
 8011b8c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
 8011b90:	f1bc 0f19 	cmp.w	ip, #25
 8011b94:	d803      	bhi.n	8011b9e <_strtol_l.constprop.0+0xbe>
 8011b96:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
 8011b9a:	4563      	cmp	r3, ip
 8011b9c:	dce0      	bgt.n	8011b60 <_strtol_l.constprop.0+0x80>
 8011b9e:	1c6b      	adds	r3, r5, #1
 8011ba0:	d02b      	beq.n	8011bfa <_strtol_l.constprop.0+0x11a>
 8011ba2:	b954      	cbnz	r4, 8011bba <_strtol_l.constprop.0+0xda>
 8011ba4:	2a00      	cmp	r2, #0
 8011ba6:	d0e8      	beq.n	8011b7a <_strtol_l.constprop.0+0x9a>
 8011ba8:	bb85      	cbnz	r5, 8011c0c <_strtol_l.constprop.0+0x12c>
 8011baa:	6011      	str	r1, [r2, #0]
 8011bac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb0:	45e2      	cmp	sl, ip
 8011bb2:	dac2      	bge.n	8011b3a <_strtol_l.constprop.0+0x5a>
 8011bb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011bb8:	e7c2      	b.n	8011b40 <_strtol_l.constprop.0+0x60>
 8011bba:	4240      	negs	r0, r0
 8011bbc:	e7f2      	b.n	8011ba4 <_strtol_l.constprop.0+0xc4>
 8011bbe:	f89e 3000 	ldrb.w	r3, [lr]
 8011bc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011bc6:	2b58      	cmp	r3, #88	; 0x58
 8011bc8:	d008      	beq.n	8011bdc <_strtol_l.constprop.0+0xfc>
 8011bca:	2708      	movs	r7, #8
 8011bcc:	463b      	mov	r3, r7
 8011bce:	e7ac      	b.n	8011b2a <_strtol_l.constprop.0+0x4a>
 8011bd0:	f89e 0000 	ldrb.w	r0, [lr]
 8011bd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011bd8:	2858      	cmp	r0, #88	; 0x58
 8011bda:	d1d5      	bne.n	8011b88 <_strtol_l.constprop.0+0xa8>
 8011bdc:	2710      	movs	r7, #16
 8011bde:	f89e b001 	ldrb.w	fp, [lr, #1]
 8011be2:	463b      	mov	r3, r7
 8011be4:	f10e 0e02 	add.w	lr, lr, #2
 8011be8:	e79f      	b.n	8011b2a <_strtol_l.constprop.0+0x4a>
 8011bea:	f89e b000 	ldrb.w	fp, [lr]
 8011bee:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8011bf2:	f105 0e02 	add.w	lr, r5, #2
 8011bf6:	2401      	movs	r4, #1
 8011bf8:	e791      	b.n	8011b1e <_strtol_l.constprop.0+0x3e>
 8011bfa:	2322      	movs	r3, #34	; 0x22
 8011bfc:	f8c8 3000 	str.w	r3, [r8]
 8011c00:	b132      	cbz	r2, 8011c10 <_strtol_l.constprop.0+0x130>
 8011c02:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8011c06:	4648      	mov	r0, r9
 8011c08:	6011      	str	r1, [r2, #0]
 8011c0a:	e7cf      	b.n	8011bac <_strtol_l.constprop.0+0xcc>
 8011c0c:	4681      	mov	r9, r0
 8011c0e:	e7f8      	b.n	8011c02 <_strtol_l.constprop.0+0x122>
 8011c10:	4648      	mov	r0, r9
 8011c12:	e7b2      	b.n	8011b7a <_strtol_l.constprop.0+0x9a>
 8011c14:	0801b2e9 	.word	0x0801b2e9

08011c18 <strtol>:
 8011c18:	b410      	push	{r4}
 8011c1a:	4c05      	ldr	r4, [pc, #20]	; (8011c30 <strtol+0x18>)
 8011c1c:	4684      	mov	ip, r0
 8011c1e:	4613      	mov	r3, r2
 8011c20:	6820      	ldr	r0, [r4, #0]
 8011c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c26:	460a      	mov	r2, r1
 8011c28:	4661      	mov	r1, ip
 8011c2a:	f7ff bf59 	b.w	8011ae0 <_strtol_l.constprop.0>
 8011c2e:	bf00      	nop
 8011c30:	20000894 	.word	0x20000894

08011c34 <_strtoul_l.constprop.0>:
 8011c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c38:	4607      	mov	r7, r0
 8011c3a:	4849      	ldr	r0, [pc, #292]	; (8011d60 <_strtoul_l.constprop.0+0x12c>)
 8011c3c:	460e      	mov	r6, r1
 8011c3e:	4635      	mov	r5, r6
 8011c40:	f816 eb01 	ldrb.w	lr, [r6], #1
 8011c44:	f810 c00e 	ldrb.w	ip, [r0, lr]
 8011c48:	f01c 0c08 	ands.w	ip, ip, #8
 8011c4c:	d1f7      	bne.n	8011c3e <_strtoul_l.constprop.0+0xa>
 8011c4e:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 8011c52:	d05a      	beq.n	8011d0a <_strtoul_l.constprop.0+0xd6>
 8011c54:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
 8011c58:	bf03      	ittte	eq
 8011c5a:	f896 e000 	ldrbeq.w	lr, [r6]
 8011c5e:	4664      	moveq	r4, ip
 8011c60:	1cae      	addeq	r6, r5, #2
 8011c62:	4664      	movne	r4, ip
 8011c64:	b94b      	cbnz	r3, 8011c7a <_strtoul_l.constprop.0+0x46>
 8011c66:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8011c6a:	d05c      	beq.n	8011d26 <_strtoul_l.constprop.0+0xf2>
 8011c6c:	230a      	movs	r3, #10
 8011c6e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8011d64 <_strtoul_l.constprop.0+0x130>
 8011c72:	f04f 0a05 	mov.w	sl, #5
 8011c76:	4699      	mov	r9, r3
 8011c78:	e00a      	b.n	8011c90 <_strtoul_l.constprop.0+0x5c>
 8011c7a:	2b10      	cmp	r3, #16
 8011c7c:	d04a      	beq.n	8011d14 <_strtoul_l.constprop.0+0xe0>
 8011c7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011c82:	fbb8 f8f3 	udiv	r8, r8, r3
 8011c86:	fb03 fa08 	mul.w	sl, r3, r8
 8011c8a:	ea6f 0a0a 	mvn.w	sl, sl
 8011c8e:	4699      	mov	r9, r3
 8011c90:	2500      	movs	r5, #0
 8011c92:	4628      	mov	r0, r5
 8011c94:	e005      	b.n	8011ca2 <_strtoul_l.constprop.0+0x6e>
 8011c96:	d02c      	beq.n	8011cf2 <_strtoul_l.constprop.0+0xbe>
 8011c98:	fb09 c000 	mla	r0, r9, r0, ip
 8011c9c:	2501      	movs	r5, #1
 8011c9e:	f816 eb01 	ldrb.w	lr, [r6], #1
 8011ca2:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
 8011ca6:	f1bc 0f09 	cmp.w	ip, #9
 8011caa:	d906      	bls.n	8011cba <_strtoul_l.constprop.0+0x86>
 8011cac:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
 8011cb0:	f1bc 0f19 	cmp.w	ip, #25
 8011cb4:	d80b      	bhi.n	8011cce <_strtoul_l.constprop.0+0x9a>
 8011cb6:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
 8011cba:	4563      	cmp	r3, ip
 8011cbc:	dd10      	ble.n	8011ce0 <_strtoul_l.constprop.0+0xac>
 8011cbe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8011cc2:	d0ec      	beq.n	8011c9e <_strtoul_l.constprop.0+0x6a>
 8011cc4:	4540      	cmp	r0, r8
 8011cc6:	d9e6      	bls.n	8011c96 <_strtoul_l.constprop.0+0x62>
 8011cc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011ccc:	e7e7      	b.n	8011c9e <_strtoul_l.constprop.0+0x6a>
 8011cce:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
 8011cd2:	f1bc 0f19 	cmp.w	ip, #25
 8011cd6:	d803      	bhi.n	8011ce0 <_strtoul_l.constprop.0+0xac>
 8011cd8:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
 8011cdc:	4563      	cmp	r3, ip
 8011cde:	dcee      	bgt.n	8011cbe <_strtoul_l.constprop.0+0x8a>
 8011ce0:	1c6b      	adds	r3, r5, #1
 8011ce2:	d00b      	beq.n	8011cfc <_strtoul_l.constprop.0+0xc8>
 8011ce4:	b104      	cbz	r4, 8011ce8 <_strtoul_l.constprop.0+0xb4>
 8011ce6:	4240      	negs	r0, r0
 8011ce8:	b10a      	cbz	r2, 8011cee <_strtoul_l.constprop.0+0xba>
 8011cea:	b965      	cbnz	r5, 8011d06 <_strtoul_l.constprop.0+0xd2>
 8011cec:	6011      	str	r1, [r2, #0]
 8011cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf2:	45d4      	cmp	ip, sl
 8011cf4:	ddd0      	ble.n	8011c98 <_strtoul_l.constprop.0+0x64>
 8011cf6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011cfa:	e7d0      	b.n	8011c9e <_strtoul_l.constprop.0+0x6a>
 8011cfc:	2322      	movs	r3, #34	; 0x22
 8011cfe:	603b      	str	r3, [r7, #0]
 8011d00:	4628      	mov	r0, r5
 8011d02:	2a00      	cmp	r2, #0
 8011d04:	d0f3      	beq.n	8011cee <_strtoul_l.constprop.0+0xba>
 8011d06:	1e71      	subs	r1, r6, #1
 8011d08:	e7f0      	b.n	8011cec <_strtoul_l.constprop.0+0xb8>
 8011d0a:	f896 e000 	ldrb.w	lr, [r6]
 8011d0e:	2401      	movs	r4, #1
 8011d10:	1cae      	adds	r6, r5, #2
 8011d12:	e7a7      	b.n	8011c64 <_strtoul_l.constprop.0+0x30>
 8011d14:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8011d18:	d011      	beq.n	8011d3e <_strtoul_l.constprop.0+0x10a>
 8011d1a:	f04f 0a0f 	mov.w	sl, #15
 8011d1e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8011d22:	4699      	mov	r9, r3
 8011d24:	e7b4      	b.n	8011c90 <_strtoul_l.constprop.0+0x5c>
 8011d26:	7833      	ldrb	r3, [r6, #0]
 8011d28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d2c:	2b58      	cmp	r3, #88	; 0x58
 8011d2e:	d00b      	beq.n	8011d48 <_strtoul_l.constprop.0+0x114>
 8011d30:	2308      	movs	r3, #8
 8011d32:	f04f 0a07 	mov.w	sl, #7
 8011d36:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8011d3a:	4699      	mov	r9, r3
 8011d3c:	e7a8      	b.n	8011c90 <_strtoul_l.constprop.0+0x5c>
 8011d3e:	7830      	ldrb	r0, [r6, #0]
 8011d40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011d44:	2858      	cmp	r0, #88	; 0x58
 8011d46:	d1e8      	bne.n	8011d1a <_strtoul_l.constprop.0+0xe6>
 8011d48:	f04f 0910 	mov.w	r9, #16
 8011d4c:	f896 e001 	ldrb.w	lr, [r6, #1]
 8011d50:	f04f 0a0f 	mov.w	sl, #15
 8011d54:	3602      	adds	r6, #2
 8011d56:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8011d5a:	464b      	mov	r3, r9
 8011d5c:	e798      	b.n	8011c90 <_strtoul_l.constprop.0+0x5c>
 8011d5e:	bf00      	nop
 8011d60:	0801b2e9 	.word	0x0801b2e9
 8011d64:	19999999 	.word	0x19999999

08011d68 <strtoul>:
 8011d68:	b410      	push	{r4}
 8011d6a:	4c05      	ldr	r4, [pc, #20]	; (8011d80 <strtoul+0x18>)
 8011d6c:	4684      	mov	ip, r0
 8011d6e:	4613      	mov	r3, r2
 8011d70:	6820      	ldr	r0, [r4, #0]
 8011d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d76:	460a      	mov	r2, r1
 8011d78:	4661      	mov	r1, ip
 8011d7a:	f7ff bf5b 	b.w	8011c34 <_strtoul_l.constprop.0>
 8011d7e:	bf00      	nop
 8011d80:	20000894 	.word	0x20000894

08011d84 <__sbprintf>:
 8011d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d86:	461f      	mov	r7, r3
 8011d88:	898b      	ldrh	r3, [r1, #12]
 8011d8a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8011d8e:	f023 0302 	bic.w	r3, r3, #2
 8011d92:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011d96:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011d98:	9319      	str	r3, [sp, #100]	; 0x64
 8011d9a:	89cb      	ldrh	r3, [r1, #14]
 8011d9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011da0:	69cb      	ldr	r3, [r1, #28]
 8011da2:	9307      	str	r3, [sp, #28]
 8011da4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011da6:	9309      	str	r3, [sp, #36]	; 0x24
 8011da8:	ab1a      	add	r3, sp, #104	; 0x68
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	9304      	str	r3, [sp, #16]
 8011dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011db2:	4615      	mov	r5, r2
 8011db4:	4606      	mov	r6, r0
 8011db6:	9302      	str	r3, [sp, #8]
 8011db8:	9305      	str	r3, [sp, #20]
 8011dba:	a816      	add	r0, sp, #88	; 0x58
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	9306      	str	r3, [sp, #24]
 8011dc2:	f004 fa21 	bl	8016208 <__retarget_lock_init_recursive>
 8011dc6:	462a      	mov	r2, r5
 8011dc8:	463b      	mov	r3, r7
 8011dca:	4669      	mov	r1, sp
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f7f2 fe1b 	bl	8004a08 <_vfprintf_r>
 8011dd2:	1e05      	subs	r5, r0, #0
 8011dd4:	db07      	blt.n	8011de6 <__sbprintf+0x62>
 8011dd6:	4669      	mov	r1, sp
 8011dd8:	4630      	mov	r0, r6
 8011dda:	f000 f99b 	bl	8012114 <_fflush_r>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	bf18      	it	ne
 8011de2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8011de6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011dea:	065b      	lsls	r3, r3, #25
 8011dec:	d503      	bpl.n	8011df6 <__sbprintf+0x72>
 8011dee:	89a3      	ldrh	r3, [r4, #12]
 8011df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011df4:	81a3      	strh	r3, [r4, #12]
 8011df6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011df8:	f004 fa10 	bl	801621c <__retarget_lock_close_recursive>
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8011e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e04 <__swsetup_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4b2f      	ldr	r3, [pc, #188]	; (8011ec4 <__swsetup_r+0xc0>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4605      	mov	r5, r0
 8011e0c:	460c      	mov	r4, r1
 8011e0e:	b10b      	cbz	r3, 8011e14 <__swsetup_r+0x10>
 8011e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e12:	b302      	cbz	r2, 8011e56 <__swsetup_r+0x52>
 8011e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e18:	0718      	lsls	r0, r3, #28
 8011e1a:	d523      	bpl.n	8011e64 <__swsetup_r+0x60>
 8011e1c:	6922      	ldr	r2, [r4, #16]
 8011e1e:	b35a      	cbz	r2, 8011e78 <__swsetup_r+0x74>
 8011e20:	f013 0101 	ands.w	r1, r3, #1
 8011e24:	d007      	beq.n	8011e36 <__swsetup_r+0x32>
 8011e26:	6961      	ldr	r1, [r4, #20]
 8011e28:	2000      	movs	r0, #0
 8011e2a:	4249      	negs	r1, r1
 8011e2c:	60a0      	str	r0, [r4, #8]
 8011e2e:	61a1      	str	r1, [r4, #24]
 8011e30:	b13a      	cbz	r2, 8011e42 <__swsetup_r+0x3e>
 8011e32:	2000      	movs	r0, #0
 8011e34:	bd38      	pop	{r3, r4, r5, pc}
 8011e36:	0798      	lsls	r0, r3, #30
 8011e38:	bf58      	it	pl
 8011e3a:	6961      	ldrpl	r1, [r4, #20]
 8011e3c:	60a1      	str	r1, [r4, #8]
 8011e3e:	2a00      	cmp	r2, #0
 8011e40:	d1f7      	bne.n	8011e32 <__swsetup_r+0x2e>
 8011e42:	0619      	lsls	r1, r3, #24
 8011e44:	bf58      	it	pl
 8011e46:	4610      	movpl	r0, r2
 8011e48:	d5f4      	bpl.n	8011e34 <__swsetup_r+0x30>
 8011e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e4e:	81a3      	strh	r3, [r4, #12]
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e54:	bd38      	pop	{r3, r4, r5, pc}
 8011e56:	4618      	mov	r0, r3
 8011e58:	f000 f990 	bl	801217c <__sinit>
 8011e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e60:	0718      	lsls	r0, r3, #28
 8011e62:	d4db      	bmi.n	8011e1c <__swsetup_r+0x18>
 8011e64:	06d9      	lsls	r1, r3, #27
 8011e66:	d528      	bpl.n	8011eba <__swsetup_r+0xb6>
 8011e68:	075a      	lsls	r2, r3, #29
 8011e6a:	d412      	bmi.n	8011e92 <__swsetup_r+0x8e>
 8011e6c:	6922      	ldr	r2, [r4, #16]
 8011e6e:	f043 0308 	orr.w	r3, r3, #8
 8011e72:	81a3      	strh	r3, [r4, #12]
 8011e74:	2a00      	cmp	r2, #0
 8011e76:	d1d3      	bne.n	8011e20 <__swsetup_r+0x1c>
 8011e78:	f403 7120 	and.w	r1, r3, #640	; 0x280
 8011e7c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011e80:	d0ce      	beq.n	8011e20 <__swsetup_r+0x1c>
 8011e82:	4621      	mov	r1, r4
 8011e84:	4628      	mov	r0, r5
 8011e86:	f000 fb73 	bl	8012570 <__smakebuf_r>
 8011e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e8e:	6922      	ldr	r2, [r4, #16]
 8011e90:	e7c6      	b.n	8011e20 <__swsetup_r+0x1c>
 8011e92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011e94:	b151      	cbz	r1, 8011eac <__swsetup_r+0xa8>
 8011e96:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8011e9a:	4291      	cmp	r1, r2
 8011e9c:	d004      	beq.n	8011ea8 <__swsetup_r+0xa4>
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	f000 fa40 	bl	8012324 <_free_r>
 8011ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	6322      	str	r2, [r4, #48]	; 0x30
 8011eac:	6922      	ldr	r2, [r4, #16]
 8011eae:	2100      	movs	r1, #0
 8011eb0:	e9c4 2100 	strd	r2, r1, [r4]
 8011eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011eb8:	e7d9      	b.n	8011e6e <__swsetup_r+0x6a>
 8011eba:	2209      	movs	r2, #9
 8011ebc:	602a      	str	r2, [r5, #0]
 8011ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ec2:	e7c4      	b.n	8011e4e <__swsetup_r+0x4a>
 8011ec4:	20000894 	.word	0x20000894

08011ec8 <quorem>:
 8011ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	6903      	ldr	r3, [r0, #16]
 8011ece:	690c      	ldr	r4, [r1, #16]
 8011ed0:	42a3      	cmp	r3, r4
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	f2c0 808a 	blt.w	8011fec <quorem+0x124>
 8011ed8:	3c01      	subs	r4, #1
 8011eda:	f101 0514 	add.w	r5, r1, #20
 8011ede:	f100 0814 	add.w	r8, r0, #20
 8011ee2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011ee6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8011eea:	3301      	adds	r3, #1
 8011eec:	429a      	cmp	r2, r3
 8011eee:	468e      	mov	lr, r1
 8011ef0:	4681      	mov	r9, r0
 8011ef2:	ea4f 0184 	mov.w	r1, r4, lsl #2
 8011ef6:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8011efa:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
 8011efe:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f02:	d33a      	bcc.n	8011f7a <quorem+0xb2>
 8011f04:	e9cd 1500 	strd	r1, r5, [sp]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	46ac      	mov	ip, r5
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	4613      	mov	r3, r2
 8011f10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011f14:	6805      	ldr	r5, [r0, #0]
 8011f16:	fa1f fb81 	uxth.w	fp, r1
 8011f1a:	fb06 220b 	mla	r2, r6, fp, r2
 8011f1e:	0c09      	lsrs	r1, r1, #16
 8011f20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011f24:	fb06 bb01 	mla	fp, r6, r1, fp
 8011f28:	b292      	uxth	r2, r2
 8011f2a:	b2a9      	uxth	r1, r5
 8011f2c:	1a89      	subs	r1, r1, r2
 8011f2e:	4419      	add	r1, r3
 8011f30:	fa1f f38b 	uxth.w	r3, fp
 8011f34:	ebc3 4321 	rsb	r3, r3, r1, asr #16
 8011f38:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8011f3c:	b289      	uxth	r1, r1
 8011f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8011f42:	4567      	cmp	r7, ip
 8011f44:	f840 1b04 	str.w	r1, [r0], #4
 8011f48:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8011f4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8011f50:	d2de      	bcs.n	8011f10 <quorem+0x48>
 8011f52:	e9dd 1500 	ldrd	r1, r5, [sp]
 8011f56:	f858 3001 	ldr.w	r3, [r8, r1]
 8011f5a:	b973      	cbnz	r3, 8011f7a <quorem+0xb2>
 8011f5c:	f1aa 0a04 	sub.w	sl, sl, #4
 8011f60:	45d0      	cmp	r8, sl
 8011f62:	d304      	bcc.n	8011f6e <quorem+0xa6>
 8011f64:	e007      	b.n	8011f76 <quorem+0xae>
 8011f66:	45d0      	cmp	r8, sl
 8011f68:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011f6c:	d203      	bcs.n	8011f76 <quorem+0xae>
 8011f6e:	f85a 3904 	ldr.w	r3, [sl], #-4
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d0f7      	beq.n	8011f66 <quorem+0x9e>
 8011f76:	f8c9 4010 	str.w	r4, [r9, #16]
 8011f7a:	4671      	mov	r1, lr
 8011f7c:	4648      	mov	r0, r9
 8011f7e:	f000 fde1 	bl	8012b44 <__mcmp>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	db2e      	blt.n	8011fe4 <quorem+0x11c>
 8011f86:	4641      	mov	r1, r8
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f855 0b04 	ldr.w	r0, [r5], #4
 8011f8e:	f8d1 c000 	ldr.w	ip, [r1]
 8011f92:	fa1f fe80 	uxth.w	lr, r0
 8011f96:	fa1f f38c 	uxth.w	r3, ip
 8011f9a:	eba3 030e 	sub.w	r3, r3, lr
 8011f9e:	4413      	add	r3, r2
 8011fa0:	0c02      	lsrs	r2, r0, #16
 8011fa2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011fa6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fb0:	42af      	cmp	r7, r5
 8011fb2:	f841 3b04 	str.w	r3, [r1], #4
 8011fb6:	ea4f 4222 	mov.w	r2, r2, asr #16
 8011fba:	d2e6      	bcs.n	8011f8a <quorem+0xc2>
 8011fbc:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8011fc0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011fc4:	b96a      	cbnz	r2, 8011fe2 <quorem+0x11a>
 8011fc6:	3b04      	subs	r3, #4
 8011fc8:	4598      	cmp	r8, r3
 8011fca:	d304      	bcc.n	8011fd6 <quorem+0x10e>
 8011fcc:	e007      	b.n	8011fde <quorem+0x116>
 8011fce:	4598      	cmp	r8, r3
 8011fd0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011fd4:	d203      	bcs.n	8011fde <quorem+0x116>
 8011fd6:	f853 2904 	ldr.w	r2, [r3], #-4
 8011fda:	2a00      	cmp	r2, #0
 8011fdc:	d0f7      	beq.n	8011fce <quorem+0x106>
 8011fde:	f8c9 4010 	str.w	r4, [r9, #16]
 8011fe2:	3601      	adds	r6, #1
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	b003      	add	sp, #12
 8011fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fec:	2000      	movs	r0, #0
 8011fee:	b003      	add	sp, #12
 8011ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ff4 <__sflush_r>:
 8011ff4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8011ff8:	071a      	lsls	r2, r3, #28
 8011ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffe:	460c      	mov	r4, r1
 8012000:	4680      	mov	r8, r0
 8012002:	d43d      	bmi.n	8012080 <__sflush_r+0x8c>
 8012004:	684a      	ldr	r2, [r1, #4]
 8012006:	2a00      	cmp	r2, #0
 8012008:	dd56      	ble.n	80120b8 <__sflush_r+0xc4>
 801200a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801200c:	2d00      	cmp	r5, #0
 801200e:	d034      	beq.n	801207a <__sflush_r+0x86>
 8012010:	2200      	movs	r2, #0
 8012012:	f8d8 6000 	ldr.w	r6, [r8]
 8012016:	f8c8 2000 	str.w	r2, [r8]
 801201a:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 801201e:	69e1      	ldr	r1, [r4, #28]
 8012020:	d157      	bne.n	80120d2 <__sflush_r+0xde>
 8012022:	2301      	movs	r3, #1
 8012024:	4640      	mov	r0, r8
 8012026:	47a8      	blx	r5
 8012028:	1c43      	adds	r3, r0, #1
 801202a:	4602      	mov	r2, r0
 801202c:	d061      	beq.n	80120f2 <__sflush_r+0xfe>
 801202e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012032:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8012034:	69e1      	ldr	r1, [r4, #28]
 8012036:	075f      	lsls	r7, r3, #29
 8012038:	d505      	bpl.n	8012046 <__sflush_r+0x52>
 801203a:	6863      	ldr	r3, [r4, #4]
 801203c:	1ad2      	subs	r2, r2, r3
 801203e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012040:	b10b      	cbz	r3, 8012046 <__sflush_r+0x52>
 8012042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012044:	1ad2      	subs	r2, r2, r3
 8012046:	2300      	movs	r3, #0
 8012048:	4640      	mov	r0, r8
 801204a:	47a8      	blx	r5
 801204c:	1c45      	adds	r5, r0, #1
 801204e:	d042      	beq.n	80120d6 <__sflush_r+0xe2>
 8012050:	2300      	movs	r3, #0
 8012052:	6063      	str	r3, [r4, #4]
 8012054:	6923      	ldr	r3, [r4, #16]
 8012056:	6023      	str	r3, [r4, #0]
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	04d9      	lsls	r1, r3, #19
 801205c:	d500      	bpl.n	8012060 <__sflush_r+0x6c>
 801205e:	6520      	str	r0, [r4, #80]	; 0x50
 8012060:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012062:	f8c8 6000 	str.w	r6, [r8]
 8012066:	b141      	cbz	r1, 801207a <__sflush_r+0x86>
 8012068:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801206c:	4299      	cmp	r1, r3
 801206e:	d002      	beq.n	8012076 <__sflush_r+0x82>
 8012070:	4640      	mov	r0, r8
 8012072:	f000 f957 	bl	8012324 <_free_r>
 8012076:	2300      	movs	r3, #0
 8012078:	6323      	str	r3, [r4, #48]	; 0x30
 801207a:	2000      	movs	r0, #0
 801207c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012080:	690e      	ldr	r6, [r1, #16]
 8012082:	2e00      	cmp	r6, #0
 8012084:	d0f9      	beq.n	801207a <__sflush_r+0x86>
 8012086:	079b      	lsls	r3, r3, #30
 8012088:	680d      	ldr	r5, [r1, #0]
 801208a:	bf08      	it	eq
 801208c:	694b      	ldreq	r3, [r1, #20]
 801208e:	600e      	str	r6, [r1, #0]
 8012090:	bf18      	it	ne
 8012092:	2300      	movne	r3, #0
 8012094:	1bad      	subs	r5, r5, r6
 8012096:	608b      	str	r3, [r1, #8]
 8012098:	e00b      	b.n	80120b2 <__sflush_r+0xbe>
 801209a:	462b      	mov	r3, r5
 801209c:	4632      	mov	r2, r6
 801209e:	69e1      	ldr	r1, [r4, #28]
 80120a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80120a2:	4640      	mov	r0, r8
 80120a4:	47b8      	blx	r7
 80120a6:	f1b0 0c00 	subs.w	ip, r0, #0
 80120aa:	eba5 050c 	sub.w	r5, r5, ip
 80120ae:	4466      	add	r6, ip
 80120b0:	dd06      	ble.n	80120c0 <__sflush_r+0xcc>
 80120b2:	2d00      	cmp	r5, #0
 80120b4:	dcf1      	bgt.n	801209a <__sflush_r+0xa6>
 80120b6:	e7e0      	b.n	801207a <__sflush_r+0x86>
 80120b8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80120ba:	2a00      	cmp	r2, #0
 80120bc:	dca5      	bgt.n	801200a <__sflush_r+0x16>
 80120be:	e7dc      	b.n	801207a <__sflush_r+0x86>
 80120c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120c8:	81a3      	strh	r3, [r4, #12]
 80120ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80120d4:	e7af      	b.n	8012036 <__sflush_r+0x42>
 80120d6:	f8d8 2000 	ldr.w	r2, [r8]
 80120da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120de:	b19a      	cbz	r2, 8012108 <__sflush_r+0x114>
 80120e0:	2a1d      	cmp	r2, #29
 80120e2:	d001      	beq.n	80120e8 <__sflush_r+0xf4>
 80120e4:	2a16      	cmp	r2, #22
 80120e6:	d1ed      	bne.n	80120c4 <__sflush_r+0xd0>
 80120e8:	6923      	ldr	r3, [r4, #16]
 80120ea:	2200      	movs	r2, #0
 80120ec:	e9c4 3200 	strd	r3, r2, [r4]
 80120f0:	e7b6      	b.n	8012060 <__sflush_r+0x6c>
 80120f2:	f8d8 3000 	ldr.w	r3, [r8]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d099      	beq.n	801202e <__sflush_r+0x3a>
 80120fa:	2b1d      	cmp	r3, #29
 80120fc:	d001      	beq.n	8012102 <__sflush_r+0x10e>
 80120fe:	2b16      	cmp	r3, #22
 8012100:	d1de      	bne.n	80120c0 <__sflush_r+0xcc>
 8012102:	f8c8 6000 	str.w	r6, [r8]
 8012106:	e7b8      	b.n	801207a <__sflush_r+0x86>
 8012108:	6062      	str	r2, [r4, #4]
 801210a:	6922      	ldr	r2, [r4, #16]
 801210c:	6022      	str	r2, [r4, #0]
 801210e:	04da      	lsls	r2, r3, #19
 8012110:	d4a5      	bmi.n	801205e <__sflush_r+0x6a>
 8012112:	e7a5      	b.n	8012060 <__sflush_r+0x6c>

08012114 <_fflush_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	460c      	mov	r4, r1
 8012118:	4605      	mov	r5, r0
 801211a:	b108      	cbz	r0, 8012120 <_fflush_r+0xc>
 801211c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801211e:	b1a3      	cbz	r3, 801214a <_fflush_r+0x36>
 8012120:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8012124:	b1b8      	cbz	r0, 8012156 <_fflush_r+0x42>
 8012126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012128:	07db      	lsls	r3, r3, #31
 801212a:	d401      	bmi.n	8012130 <_fflush_r+0x1c>
 801212c:	0581      	lsls	r1, r0, #22
 801212e:	d515      	bpl.n	801215c <_fflush_r+0x48>
 8012130:	4628      	mov	r0, r5
 8012132:	4621      	mov	r1, r4
 8012134:	f7ff ff5e 	bl	8011ff4 <__sflush_r>
 8012138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801213a:	07da      	lsls	r2, r3, #31
 801213c:	4605      	mov	r5, r0
 801213e:	d402      	bmi.n	8012146 <_fflush_r+0x32>
 8012140:	89a3      	ldrh	r3, [r4, #12]
 8012142:	059b      	lsls	r3, r3, #22
 8012144:	d50e      	bpl.n	8012164 <_fflush_r+0x50>
 8012146:	4628      	mov	r0, r5
 8012148:	bd38      	pop	{r3, r4, r5, pc}
 801214a:	f000 f817 	bl	801217c <__sinit>
 801214e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8012152:	2800      	cmp	r0, #0
 8012154:	d1e7      	bne.n	8012126 <_fflush_r+0x12>
 8012156:	4605      	mov	r5, r0
 8012158:	4628      	mov	r0, r5
 801215a:	bd38      	pop	{r3, r4, r5, pc}
 801215c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801215e:	f004 f85f 	bl	8016220 <__retarget_lock_acquire_recursive>
 8012162:	e7e5      	b.n	8012130 <_fflush_r+0x1c>
 8012164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012166:	f004 f861 	bl	801622c <__retarget_lock_release_recursive>
 801216a:	4628      	mov	r0, r5
 801216c:	bd38      	pop	{r3, r4, r5, pc}
 801216e:	bf00      	nop

08012170 <_cleanup_r>:
 8012170:	4901      	ldr	r1, [pc, #4]	; (8012178 <_cleanup_r+0x8>)
 8012172:	f000 b9d5 	b.w	8012520 <_fwalk_reent>
 8012176:	bf00      	nop
 8012178:	08012115 	.word	0x08012115

0801217c <__sinit>:
 801217c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012180:	4682      	mov	sl, r0
 8012182:	4839      	ldr	r0, [pc, #228]	; (8012268 <__sinit+0xec>)
 8012184:	f004 f84c 	bl	8016220 <__retarget_lock_acquire_recursive>
 8012188:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 801218c:	2c00      	cmp	r4, #0
 801218e:	d166      	bne.n	801225e <__sinit+0xe2>
 8012190:	f8da 5004 	ldr.w	r5, [sl, #4]
 8012194:	4a35      	ldr	r2, [pc, #212]	; (801226c <__sinit+0xf0>)
 8012196:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 801219a:	2303      	movs	r3, #3
 801219c:	e9ca 4353 	strd	r4, r3, [sl, #332]	; 0x14c
 80121a0:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8012280 <__sinit+0x104>
 80121a4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8012284 <__sinit+0x108>
 80121a8:	4f31      	ldr	r7, [pc, #196]	; (8012270 <__sinit+0xf4>)
 80121aa:	4e32      	ldr	r6, [pc, #200]	; (8012274 <__sinit+0xf8>)
 80121ac:	2304      	movs	r3, #4
 80121ae:	f50a 72ac 	add.w	r2, sl, #344	; 0x158
 80121b2:	f8ca 2154 	str.w	r2, [sl, #340]	; 0x154
 80121b6:	4621      	mov	r1, r4
 80121b8:	60eb      	str	r3, [r5, #12]
 80121ba:	e9c5 4400 	strd	r4, r4, [r5]
 80121be:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80121c2:	60ac      	str	r4, [r5, #8]
 80121c4:	666c      	str	r4, [r5, #100]	; 0x64
 80121c6:	2208      	movs	r2, #8
 80121c8:	61ac      	str	r4, [r5, #24]
 80121ca:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80121ce:	f7ff f863 	bl	8011298 <memset>
 80121d2:	e9c5 5907 	strd	r5, r9, [r5, #28]
 80121d6:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 80121da:	62ee      	str	r6, [r5, #44]	; 0x2c
 80121dc:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80121e0:	f004 f812 	bl	8016208 <__retarget_lock_init_recursive>
 80121e4:	f8da 5008 	ldr.w	r5, [sl, #8]
 80121e8:	4b23      	ldr	r3, [pc, #140]	; (8012278 <__sinit+0xfc>)
 80121ea:	60eb      	str	r3, [r5, #12]
 80121ec:	4621      	mov	r1, r4
 80121ee:	e9c5 4400 	strd	r4, r4, [r5]
 80121f2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80121f6:	60ac      	str	r4, [r5, #8]
 80121f8:	666c      	str	r4, [r5, #100]	; 0x64
 80121fa:	61ac      	str	r4, [r5, #24]
 80121fc:	2208      	movs	r2, #8
 80121fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8012202:	f7ff f849 	bl	8011298 <memset>
 8012206:	e9c5 5907 	strd	r5, r9, [r5, #28]
 801220a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 801220e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8012210:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8012214:	f003 fff8 	bl	8016208 <__retarget_lock_init_recursive>
 8012218:	f8da 500c 	ldr.w	r5, [sl, #12]
 801221c:	4b17      	ldr	r3, [pc, #92]	; (801227c <__sinit+0x100>)
 801221e:	60eb      	str	r3, [r5, #12]
 8012220:	4621      	mov	r1, r4
 8012222:	e9c5 4400 	strd	r4, r4, [r5]
 8012226:	e9c5 4404 	strd	r4, r4, [r5, #16]
 801222a:	60ac      	str	r4, [r5, #8]
 801222c:	666c      	str	r4, [r5, #100]	; 0x64
 801222e:	61ac      	str	r4, [r5, #24]
 8012230:	2208      	movs	r2, #8
 8012232:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8012236:	f7ff f82f 	bl	8011298 <memset>
 801223a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 801223e:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8012242:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 8012246:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 801224a:	f003 ffdd 	bl	8016208 <__retarget_lock_init_recursive>
 801224e:	2301      	movs	r3, #1
 8012250:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 8012254:	4804      	ldr	r0, [pc, #16]	; (8012268 <__sinit+0xec>)
 8012256:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801225a:	f003 bfe7 	b.w	801622c <__retarget_lock_release_recursive>
 801225e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012262:	4801      	ldr	r0, [pc, #4]	; (8012268 <__sinit+0xec>)
 8012264:	f003 bfe2 	b.w	801622c <__retarget_lock_release_recursive>
 8012268:	20000dc4 	.word	0x20000dc4
 801226c:	08012171 	.word	0x08012171
 8012270:	08012e79 	.word	0x08012e79
 8012274:	08012e9d 	.word	0x08012e9d
 8012278:	00010009 	.word	0x00010009
 801227c:	00020012 	.word	0x00020012
 8012280:	08012e15 	.word	0x08012e15
 8012284:	08012e39 	.word	0x08012e39

08012288 <_malloc_trim_r>:
 8012288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801228a:	4f23      	ldr	r7, [pc, #140]	; (8012318 <_malloc_trim_r+0x90>)
 801228c:	460c      	mov	r4, r1
 801228e:	4606      	mov	r6, r0
 8012290:	f7ff f85c 	bl	801134c <__malloc_lock>
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	685d      	ldr	r5, [r3, #4]
 8012298:	f025 0503 	bic.w	r5, r5, #3
 801229c:	f605 73ef 	addw	r3, r5, #4079	; 0xfef
 80122a0:	1b19      	subs	r1, r3, r4
 80122a2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80122a6:	f021 010f 	bic.w	r1, r1, #15
 80122aa:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80122ae:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80122b2:	db07      	blt.n	80122c4 <_malloc_trim_r+0x3c>
 80122b4:	2100      	movs	r1, #0
 80122b6:	4630      	mov	r0, r6
 80122b8:	f7ff f868 	bl	801138c <_sbrk_r>
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	442b      	add	r3, r5
 80122c0:	4298      	cmp	r0, r3
 80122c2:	d004      	beq.n	80122ce <_malloc_trim_r+0x46>
 80122c4:	4630      	mov	r0, r6
 80122c6:	f7ff f847 	bl	8011358 <__malloc_unlock>
 80122ca:	2000      	movs	r0, #0
 80122cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ce:	4261      	negs	r1, r4
 80122d0:	4630      	mov	r0, r6
 80122d2:	f7ff f85b 	bl	801138c <_sbrk_r>
 80122d6:	3001      	adds	r0, #1
 80122d8:	d00d      	beq.n	80122f6 <_malloc_trim_r+0x6e>
 80122da:	4a10      	ldr	r2, [pc, #64]	; (801231c <_malloc_trim_r+0x94>)
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	1b2d      	subs	r5, r5, r4
 80122e0:	f045 0501 	orr.w	r5, r5, #1
 80122e4:	605d      	str	r5, [r3, #4]
 80122e6:	6813      	ldr	r3, [r2, #0]
 80122e8:	4630      	mov	r0, r6
 80122ea:	1b1b      	subs	r3, r3, r4
 80122ec:	6013      	str	r3, [r2, #0]
 80122ee:	f7ff f833 	bl	8011358 <__malloc_unlock>
 80122f2:	2001      	movs	r0, #1
 80122f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122f6:	2100      	movs	r1, #0
 80122f8:	4630      	mov	r0, r6
 80122fa:	f7ff f847 	bl	801138c <_sbrk_r>
 80122fe:	68ba      	ldr	r2, [r7, #8]
 8012300:	1a83      	subs	r3, r0, r2
 8012302:	2b0f      	cmp	r3, #15
 8012304:	ddde      	ble.n	80122c4 <_malloc_trim_r+0x3c>
 8012306:	f043 0301 	orr.w	r3, r3, #1
 801230a:	6053      	str	r3, [r2, #4]
 801230c:	4b04      	ldr	r3, [pc, #16]	; (8012320 <_malloc_trim_r+0x98>)
 801230e:	4903      	ldr	r1, [pc, #12]	; (801231c <_malloc_trim_r+0x94>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	1ac0      	subs	r0, r0, r3
 8012314:	6008      	str	r0, [r1, #0]
 8012316:	e7d5      	b.n	80122c4 <_malloc_trim_r+0x3c>
 8012318:	20000000 	.word	0x20000000
 801231c:	20002248 	.word	0x20002248
 8012320:	2000088c 	.word	0x2000088c

08012324 <_free_r>:
 8012324:	2900      	cmp	r1, #0
 8012326:	d07c      	beq.n	8012422 <_free_r+0xfe>
 8012328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801232c:	460c      	mov	r4, r1
 801232e:	4680      	mov	r8, r0
 8012330:	f7ff f80c 	bl	801134c <__malloc_lock>
 8012334:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012338:	4f76      	ldr	r7, [pc, #472]	; (8012514 <_free_r+0x1f0>)
 801233a:	f1a4 0508 	sub.w	r5, r4, #8
 801233e:	f023 0101 	bic.w	r1, r3, #1
 8012342:	1868      	adds	r0, r5, r1
 8012344:	68be      	ldr	r6, [r7, #8]
 8012346:	6842      	ldr	r2, [r0, #4]
 8012348:	4286      	cmp	r6, r0
 801234a:	f022 0203 	bic.w	r2, r2, #3
 801234e:	f000 8083 	beq.w	8012458 <_free_r+0x134>
 8012352:	07de      	lsls	r6, r3, #31
 8012354:	6042      	str	r2, [r0, #4]
 8012356:	eb00 0c02 	add.w	ip, r0, r2
 801235a:	d433      	bmi.n	80123c4 <_free_r+0xa0>
 801235c:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8012360:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8012364:	1b2d      	subs	r5, r5, r4
 8012366:	4421      	add	r1, r4
 8012368:	68ac      	ldr	r4, [r5, #8]
 801236a:	f107 0c08 	add.w	ip, r7, #8
 801236e:	4564      	cmp	r4, ip
 8012370:	f003 0301 	and.w	r3, r3, #1
 8012374:	d064      	beq.n	8012440 <_free_r+0x11c>
 8012376:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801237a:	f8c4 e00c 	str.w	lr, [r4, #12]
 801237e:	f8ce 4008 	str.w	r4, [lr, #8]
 8012382:	2b00      	cmp	r3, #0
 8012384:	f000 8081 	beq.w	801248a <_free_r+0x166>
 8012388:	f041 0301 	orr.w	r3, r1, #1
 801238c:	606b      	str	r3, [r5, #4]
 801238e:	6001      	str	r1, [r0, #0]
 8012390:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012394:	d222      	bcs.n	80123dc <_free_r+0xb8>
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	08cb      	lsrs	r3, r1, #3
 801239a:	2201      	movs	r2, #1
 801239c:	0949      	lsrs	r1, r1, #5
 801239e:	3301      	adds	r3, #1
 80123a0:	408a      	lsls	r2, r1
 80123a2:	4302      	orrs	r2, r0
 80123a4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 80123a8:	607a      	str	r2, [r7, #4]
 80123aa:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80123ae:	3a08      	subs	r2, #8
 80123b0:	e9c5 1202 	strd	r1, r2, [r5, #8]
 80123b4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80123b8:	60cd      	str	r5, [r1, #12]
 80123ba:	4640      	mov	r0, r8
 80123bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123c0:	f7fe bfca 	b.w	8011358 <__malloc_unlock>
 80123c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80123c8:	07db      	lsls	r3, r3, #31
 80123ca:	d52b      	bpl.n	8012424 <_free_r+0x100>
 80123cc:	f041 0301 	orr.w	r3, r1, #1
 80123d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80123d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80123d8:	6001      	str	r1, [r0, #0]
 80123da:	d3dc      	bcc.n	8012396 <_free_r+0x72>
 80123dc:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 80123e0:	ea4f 2351 	mov.w	r3, r1, lsr #9
 80123e4:	d253      	bcs.n	801248e <_free_r+0x16a>
 80123e6:	098b      	lsrs	r3, r1, #6
 80123e8:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80123ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80123f0:	00c3      	lsls	r3, r0, #3
 80123f2:	18f8      	adds	r0, r7, r3
 80123f4:	58fb      	ldr	r3, [r7, r3]
 80123f6:	3808      	subs	r0, #8
 80123f8:	4298      	cmp	r0, r3
 80123fa:	d103      	bne.n	8012404 <_free_r+0xe0>
 80123fc:	e063      	b.n	80124c6 <_free_r+0x1a2>
 80123fe:	689b      	ldr	r3, [r3, #8]
 8012400:	4298      	cmp	r0, r3
 8012402:	d004      	beq.n	801240e <_free_r+0xea>
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	f022 0203 	bic.w	r2, r2, #3
 801240a:	428a      	cmp	r2, r1
 801240c:	d8f7      	bhi.n	80123fe <_free_r+0xda>
 801240e:	68d8      	ldr	r0, [r3, #12]
 8012410:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8012414:	6085      	str	r5, [r0, #8]
 8012416:	60dd      	str	r5, [r3, #12]
 8012418:	4640      	mov	r0, r8
 801241a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801241e:	f7fe bf9b 	b.w	8011358 <__malloc_unlock>
 8012422:	4770      	bx	lr
 8012424:	4411      	add	r1, r2
 8012426:	f107 0c08 	add.w	ip, r7, #8
 801242a:	6883      	ldr	r3, [r0, #8]
 801242c:	4563      	cmp	r3, ip
 801242e:	d03f      	beq.n	80124b0 <_free_r+0x18c>
 8012430:	68c2      	ldr	r2, [r0, #12]
 8012432:	60da      	str	r2, [r3, #12]
 8012434:	6093      	str	r3, [r2, #8]
 8012436:	f041 0301 	orr.w	r3, r1, #1
 801243a:	606b      	str	r3, [r5, #4]
 801243c:	5069      	str	r1, [r5, r1]
 801243e:	e7a7      	b.n	8012390 <_free_r+0x6c>
 8012440:	2b00      	cmp	r3, #0
 8012442:	d161      	bne.n	8012508 <_free_r+0x1e4>
 8012444:	440a      	add	r2, r1
 8012446:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 801244a:	60cb      	str	r3, [r1, #12]
 801244c:	6099      	str	r1, [r3, #8]
 801244e:	f042 0301 	orr.w	r3, r2, #1
 8012452:	606b      	str	r3, [r5, #4]
 8012454:	50aa      	str	r2, [r5, r2]
 8012456:	e7b0      	b.n	80123ba <_free_r+0x96>
 8012458:	07db      	lsls	r3, r3, #31
 801245a:	440a      	add	r2, r1
 801245c:	d407      	bmi.n	801246e <_free_r+0x14a>
 801245e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8012462:	1aed      	subs	r5, r5, r3
 8012464:	441a      	add	r2, r3
 8012466:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 801246a:	60cb      	str	r3, [r1, #12]
 801246c:	6099      	str	r1, [r3, #8]
 801246e:	f042 0301 	orr.w	r3, r2, #1
 8012472:	606b      	str	r3, [r5, #4]
 8012474:	4b28      	ldr	r3, [pc, #160]	; (8012518 <_free_r+0x1f4>)
 8012476:	60bd      	str	r5, [r7, #8]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4293      	cmp	r3, r2
 801247c:	d89d      	bhi.n	80123ba <_free_r+0x96>
 801247e:	4b27      	ldr	r3, [pc, #156]	; (801251c <_free_r+0x1f8>)
 8012480:	4640      	mov	r0, r8
 8012482:	6819      	ldr	r1, [r3, #0]
 8012484:	f7ff ff00 	bl	8012288 <_malloc_trim_r>
 8012488:	e797      	b.n	80123ba <_free_r+0x96>
 801248a:	4411      	add	r1, r2
 801248c:	e7cd      	b.n	801242a <_free_r+0x106>
 801248e:	2b14      	cmp	r3, #20
 8012490:	d908      	bls.n	80124a4 <_free_r+0x180>
 8012492:	2b54      	cmp	r3, #84	; 0x54
 8012494:	d81f      	bhi.n	80124d6 <_free_r+0x1b2>
 8012496:	0b0b      	lsrs	r3, r1, #12
 8012498:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 801249c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80124a0:	00c3      	lsls	r3, r0, #3
 80124a2:	e7a6      	b.n	80123f2 <_free_r+0xce>
 80124a4:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80124a8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80124ac:	00c3      	lsls	r3, r0, #3
 80124ae:	e7a0      	b.n	80123f2 <_free_r+0xce>
 80124b0:	f041 0301 	orr.w	r3, r1, #1
 80124b4:	613d      	str	r5, [r7, #16]
 80124b6:	617d      	str	r5, [r7, #20]
 80124b8:	f8c5 c008 	str.w	ip, [r5, #8]
 80124bc:	f8c5 c00c 	str.w	ip, [r5, #12]
 80124c0:	606b      	str	r3, [r5, #4]
 80124c2:	5069      	str	r1, [r5, r1]
 80124c4:	e779      	b.n	80123ba <_free_r+0x96>
 80124c6:	6879      	ldr	r1, [r7, #4]
 80124c8:	1092      	asrs	r2, r2, #2
 80124ca:	2401      	movs	r4, #1
 80124cc:	fa04 f202 	lsl.w	r2, r4, r2
 80124d0:	430a      	orrs	r2, r1
 80124d2:	607a      	str	r2, [r7, #4]
 80124d4:	e79c      	b.n	8012410 <_free_r+0xec>
 80124d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80124da:	d806      	bhi.n	80124ea <_free_r+0x1c6>
 80124dc:	0bcb      	lsrs	r3, r1, #15
 80124de:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80124e2:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80124e6:	00c3      	lsls	r3, r0, #3
 80124e8:	e783      	b.n	80123f2 <_free_r+0xce>
 80124ea:	f240 5254 	movw	r2, #1364	; 0x554
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d806      	bhi.n	8012500 <_free_r+0x1dc>
 80124f2:	0c8b      	lsrs	r3, r1, #18
 80124f4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80124f8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80124fc:	00c3      	lsls	r3, r0, #3
 80124fe:	e778      	b.n	80123f2 <_free_r+0xce>
 8012500:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8012504:	227e      	movs	r2, #126	; 0x7e
 8012506:	e774      	b.n	80123f2 <_free_r+0xce>
 8012508:	f041 0301 	orr.w	r3, r1, #1
 801250c:	606b      	str	r3, [r5, #4]
 801250e:	6001      	str	r1, [r0, #0]
 8012510:	e753      	b.n	80123ba <_free_r+0x96>
 8012512:	bf00      	nop
 8012514:	20000000 	.word	0x20000000
 8012518:	20000890 	.word	0x20000890
 801251c:	20002278 	.word	0x20002278

08012520 <_fwalk_reent>:
 8012520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012524:	4607      	mov	r7, r0
 8012526:	4688      	mov	r8, r1
 8012528:	f500 76a6 	add.w	r6, r0, #332	; 0x14c
 801252c:	f04f 0900 	mov.w	r9, #0
 8012530:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8012534:	3d01      	subs	r5, #1
 8012536:	d411      	bmi.n	801255c <_fwalk_reent+0x3c>
 8012538:	89a3      	ldrh	r3, [r4, #12]
 801253a:	2b01      	cmp	r3, #1
 801253c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8012540:	d908      	bls.n	8012554 <_fwalk_reent+0x34>
 8012542:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8012546:	3301      	adds	r3, #1
 8012548:	4621      	mov	r1, r4
 801254a:	d003      	beq.n	8012554 <_fwalk_reent+0x34>
 801254c:	4638      	mov	r0, r7
 801254e:	47c0      	blx	r8
 8012550:	ea49 0900 	orr.w	r9, r9, r0
 8012554:	1c6b      	adds	r3, r5, #1
 8012556:	f104 0468 	add.w	r4, r4, #104	; 0x68
 801255a:	d1ed      	bne.n	8012538 <_fwalk_reent+0x18>
 801255c:	6836      	ldr	r6, [r6, #0]
 801255e:	2e00      	cmp	r6, #0
 8012560:	d1e6      	bne.n	8012530 <_fwalk_reent+0x10>
 8012562:	4648      	mov	r0, r9
 8012564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012568 <_localeconv_r>:
 8012568:	4800      	ldr	r0, [pc, #0]	; (801256c <_localeconv_r+0x4>)
 801256a:	4770      	bx	lr
 801256c:	20000988 	.word	0x20000988

08012570 <__smakebuf_r>:
 8012570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012572:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8012576:	460c      	mov	r4, r1
 8012578:	0799      	lsls	r1, r3, #30
 801257a:	b097      	sub	sp, #92	; 0x5c
 801257c:	d507      	bpl.n	801258e <__smakebuf_r+0x1e>
 801257e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8012582:	2201      	movs	r2, #1
 8012584:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	b017      	add	sp, #92	; 0x5c
 801258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801258e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012592:	2900      	cmp	r1, #0
 8012594:	4605      	mov	r5, r0
 8012596:	db2e      	blt.n	80125f6 <__smakebuf_r+0x86>
 8012598:	466a      	mov	r2, sp
 801259a:	f001 fcad 	bl	8013ef8 <_fstat_r>
 801259e:	2800      	cmp	r0, #0
 80125a0:	db27      	blt.n	80125f2 <__smakebuf_r+0x82>
 80125a2:	9e01      	ldr	r6, [sp, #4]
 80125a4:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 80125a8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80125ac:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 80125b0:	fab6 f686 	clz	r6, r6
 80125b4:	4639      	mov	r1, r7
 80125b6:	4628      	mov	r0, r5
 80125b8:	0976      	lsrs	r6, r6, #5
 80125ba:	f7fe fb01 	bl	8010bc0 <_malloc_r>
 80125be:	b338      	cbz	r0, 8012610 <__smakebuf_r+0xa0>
 80125c0:	89a3      	ldrh	r3, [r4, #12]
 80125c2:	4a1b      	ldr	r2, [pc, #108]	; (8012630 <__smakebuf_r+0xc0>)
 80125c4:	63ea      	str	r2, [r5, #60]	; 0x3c
 80125c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80125ce:	81a3      	strh	r3, [r4, #12]
 80125d0:	6020      	str	r0, [r4, #0]
 80125d2:	2e00      	cmp	r6, #0
 80125d4:	d0d9      	beq.n	801258a <__smakebuf_r+0x1a>
 80125d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125da:	4628      	mov	r0, r5
 80125dc:	f001 fe22 	bl	8014224 <_isatty_r>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d0d2      	beq.n	801258a <__smakebuf_r+0x1a>
 80125e4:	89a3      	ldrh	r3, [r4, #12]
 80125e6:	f023 0303 	bic.w	r3, r3, #3
 80125ea:	f043 0301 	orr.w	r3, r3, #1
 80125ee:	81a3      	strh	r3, [r4, #12]
 80125f0:	e7cb      	b.n	801258a <__smakebuf_r+0x1a>
 80125f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80125fa:	bf0c      	ite	eq
 80125fc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8012600:	2740      	movne	r7, #64	; 0x40
 8012602:	4639      	mov	r1, r7
 8012604:	4628      	mov	r0, r5
 8012606:	2600      	movs	r6, #0
 8012608:	f7fe fada 	bl	8010bc0 <_malloc_r>
 801260c:	2800      	cmp	r0, #0
 801260e:	d1d7      	bne.n	80125c0 <__smakebuf_r+0x50>
 8012610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012614:	059a      	lsls	r2, r3, #22
 8012616:	d4b8      	bmi.n	801258a <__smakebuf_r+0x1a>
 8012618:	f023 0303 	bic.w	r3, r3, #3
 801261c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012620:	f043 0302 	orr.w	r3, r3, #2
 8012624:	2101      	movs	r1, #1
 8012626:	e9c4 2104 	strd	r2, r1, [r4, #16]
 801262a:	81a3      	strh	r3, [r4, #12]
 801262c:	6022      	str	r2, [r4, #0]
 801262e:	e7ac      	b.n	801258a <__smakebuf_r+0x1a>
 8012630:	08012171 	.word	0x08012171

08012634 <_Balloc>:
 8012634:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012636:	b570      	push	{r4, r5, r6, lr}
 8012638:	4605      	mov	r5, r0
 801263a:	460c      	mov	r4, r1
 801263c:	b14b      	cbz	r3, 8012652 <_Balloc+0x1e>
 801263e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012642:	b180      	cbz	r0, 8012666 <_Balloc+0x32>
 8012644:	6802      	ldr	r2, [r0, #0]
 8012646:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801264a:	2300      	movs	r3, #0
 801264c:	60c3      	str	r3, [r0, #12]
 801264e:	6103      	str	r3, [r0, #16]
 8012650:	bd70      	pop	{r4, r5, r6, pc}
 8012652:	2221      	movs	r2, #33	; 0x21
 8012654:	2104      	movs	r1, #4
 8012656:	f001 fbf9 	bl	8013e4c <_calloc_r>
 801265a:	4603      	mov	r3, r0
 801265c:	64e8      	str	r0, [r5, #76]	; 0x4c
 801265e:	2800      	cmp	r0, #0
 8012660:	d1ed      	bne.n	801263e <_Balloc+0xa>
 8012662:	2000      	movs	r0, #0
 8012664:	bd70      	pop	{r4, r5, r6, pc}
 8012666:	2101      	movs	r1, #1
 8012668:	fa01 f604 	lsl.w	r6, r1, r4
 801266c:	1d72      	adds	r2, r6, #5
 801266e:	0092      	lsls	r2, r2, #2
 8012670:	4628      	mov	r0, r5
 8012672:	f001 fbeb 	bl	8013e4c <_calloc_r>
 8012676:	2800      	cmp	r0, #0
 8012678:	d0f3      	beq.n	8012662 <_Balloc+0x2e>
 801267a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801267e:	e7e4      	b.n	801264a <_Balloc+0x16>

08012680 <_Bfree>:
 8012680:	b131      	cbz	r1, 8012690 <_Bfree+0x10>
 8012682:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012684:	684a      	ldr	r2, [r1, #4]
 8012686:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801268a:	6008      	str	r0, [r1, #0]
 801268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop

08012694 <__multadd>:
 8012694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012698:	690d      	ldr	r5, [r1, #16]
 801269a:	4607      	mov	r7, r0
 801269c:	460e      	mov	r6, r1
 801269e:	461c      	mov	r4, r3
 80126a0:	f101 0e14 	add.w	lr, r1, #20
 80126a4:	2000      	movs	r0, #0
 80126a6:	f8de 1000 	ldr.w	r1, [lr]
 80126aa:	b28b      	uxth	r3, r1
 80126ac:	fb02 4303 	mla	r3, r2, r3, r4
 80126b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80126b4:	0c09      	lsrs	r1, r1, #16
 80126b6:	fb02 cc01 	mla	ip, r2, r1, ip
 80126ba:	3001      	adds	r0, #1
 80126bc:	b29b      	uxth	r3, r3
 80126be:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80126c2:	4285      	cmp	r5, r0
 80126c4:	f84e 3b04 	str.w	r3, [lr], #4
 80126c8:	ea4f 441c 	mov.w	r4, ip, lsr #16
 80126cc:	dceb      	bgt.n	80126a6 <__multadd+0x12>
 80126ce:	b13c      	cbz	r4, 80126e0 <__multadd+0x4c>
 80126d0:	68b3      	ldr	r3, [r6, #8]
 80126d2:	42ab      	cmp	r3, r5
 80126d4:	dd07      	ble.n	80126e6 <__multadd+0x52>
 80126d6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80126da:	3501      	adds	r5, #1
 80126dc:	615c      	str	r4, [r3, #20]
 80126de:	6135      	str	r5, [r6, #16]
 80126e0:	4630      	mov	r0, r6
 80126e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e6:	6871      	ldr	r1, [r6, #4]
 80126e8:	4638      	mov	r0, r7
 80126ea:	3101      	adds	r1, #1
 80126ec:	f7ff ffa2 	bl	8012634 <_Balloc>
 80126f0:	4680      	mov	r8, r0
 80126f2:	b1a8      	cbz	r0, 8012720 <__multadd+0x8c>
 80126f4:	6932      	ldr	r2, [r6, #16]
 80126f6:	3202      	adds	r2, #2
 80126f8:	f106 010c 	add.w	r1, r6, #12
 80126fc:	0092      	lsls	r2, r2, #2
 80126fe:	300c      	adds	r0, #12
 8012700:	f7ee fcc6 	bl	8001090 <memcpy>
 8012704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012706:	6872      	ldr	r2, [r6, #4]
 8012708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801270c:	6031      	str	r1, [r6, #0]
 801270e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8012712:	4646      	mov	r6, r8
 8012714:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8012718:	3501      	adds	r5, #1
 801271a:	615c      	str	r4, [r3, #20]
 801271c:	6135      	str	r5, [r6, #16]
 801271e:	e7df      	b.n	80126e0 <__multadd+0x4c>
 8012720:	4b02      	ldr	r3, [pc, #8]	; (801272c <__multadd+0x98>)
 8012722:	4803      	ldr	r0, [pc, #12]	; (8012730 <__multadd+0x9c>)
 8012724:	4642      	mov	r2, r8
 8012726:	21b5      	movs	r1, #181	; 0xb5
 8012728:	f001 fb70 	bl	8013e0c <__assert_func>
 801272c:	0801b480 	.word	0x0801b480
 8012730:	0801b4ec 	.word	0x0801b4ec

08012734 <__hi0bits>:
 8012734:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8012738:	4603      	mov	r3, r0
 801273a:	bf36      	itet	cc
 801273c:	0403      	lslcc	r3, r0, #16
 801273e:	2000      	movcs	r0, #0
 8012740:	2010      	movcc	r0, #16
 8012742:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012746:	bf3c      	itt	cc
 8012748:	021b      	lslcc	r3, r3, #8
 801274a:	3008      	addcc	r0, #8
 801274c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012750:	bf3c      	itt	cc
 8012752:	011b      	lslcc	r3, r3, #4
 8012754:	3004      	addcc	r0, #4
 8012756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801275a:	d303      	bcc.n	8012764 <__hi0bits+0x30>
 801275c:	2b00      	cmp	r3, #0
 801275e:	db06      	blt.n	801276e <__hi0bits+0x3a>
 8012760:	3001      	adds	r0, #1
 8012762:	4770      	bx	lr
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	d403      	bmi.n	8012770 <__hi0bits+0x3c>
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	d403      	bmi.n	8012774 <__hi0bits+0x40>
 801276c:	2020      	movs	r0, #32
 801276e:	4770      	bx	lr
 8012770:	3002      	adds	r0, #2
 8012772:	4770      	bx	lr
 8012774:	3003      	adds	r0, #3
 8012776:	4770      	bx	lr

08012778 <__lo0bits>:
 8012778:	6803      	ldr	r3, [r0, #0]
 801277a:	f013 0207 	ands.w	r2, r3, #7
 801277e:	4601      	mov	r1, r0
 8012780:	d007      	beq.n	8012792 <__lo0bits+0x1a>
 8012782:	07da      	lsls	r2, r3, #31
 8012784:	d41f      	bmi.n	80127c6 <__lo0bits+0x4e>
 8012786:	0798      	lsls	r0, r3, #30
 8012788:	d521      	bpl.n	80127ce <__lo0bits+0x56>
 801278a:	085b      	lsrs	r3, r3, #1
 801278c:	600b      	str	r3, [r1, #0]
 801278e:	2001      	movs	r0, #1
 8012790:	4770      	bx	lr
 8012792:	b298      	uxth	r0, r3
 8012794:	b1a0      	cbz	r0, 80127c0 <__lo0bits+0x48>
 8012796:	4610      	mov	r0, r2
 8012798:	b2da      	uxtb	r2, r3
 801279a:	b90a      	cbnz	r2, 80127a0 <__lo0bits+0x28>
 801279c:	3008      	adds	r0, #8
 801279e:	0a1b      	lsrs	r3, r3, #8
 80127a0:	071a      	lsls	r2, r3, #28
 80127a2:	bf04      	itt	eq
 80127a4:	091b      	lsreq	r3, r3, #4
 80127a6:	3004      	addeq	r0, #4
 80127a8:	079a      	lsls	r2, r3, #30
 80127aa:	bf04      	itt	eq
 80127ac:	089b      	lsreq	r3, r3, #2
 80127ae:	3002      	addeq	r0, #2
 80127b0:	07da      	lsls	r2, r3, #31
 80127b2:	d403      	bmi.n	80127bc <__lo0bits+0x44>
 80127b4:	085b      	lsrs	r3, r3, #1
 80127b6:	f100 0001 	add.w	r0, r0, #1
 80127ba:	d006      	beq.n	80127ca <__lo0bits+0x52>
 80127bc:	600b      	str	r3, [r1, #0]
 80127be:	4770      	bx	lr
 80127c0:	0c1b      	lsrs	r3, r3, #16
 80127c2:	2010      	movs	r0, #16
 80127c4:	e7e8      	b.n	8012798 <__lo0bits+0x20>
 80127c6:	2000      	movs	r0, #0
 80127c8:	4770      	bx	lr
 80127ca:	2020      	movs	r0, #32
 80127cc:	4770      	bx	lr
 80127ce:	089b      	lsrs	r3, r3, #2
 80127d0:	600b      	str	r3, [r1, #0]
 80127d2:	2002      	movs	r0, #2
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop

080127d8 <__i2b>:
 80127d8:	b538      	push	{r3, r4, r5, lr}
 80127da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80127dc:	4604      	mov	r4, r0
 80127de:	460d      	mov	r5, r1
 80127e0:	b14b      	cbz	r3, 80127f6 <__i2b+0x1e>
 80127e2:	6858      	ldr	r0, [r3, #4]
 80127e4:	b1b0      	cbz	r0, 8012814 <__i2b+0x3c>
 80127e6:	6802      	ldr	r2, [r0, #0]
 80127e8:	605a      	str	r2, [r3, #4]
 80127ea:	2200      	movs	r2, #0
 80127ec:	2301      	movs	r3, #1
 80127ee:	6145      	str	r5, [r0, #20]
 80127f0:	60c2      	str	r2, [r0, #12]
 80127f2:	6103      	str	r3, [r0, #16]
 80127f4:	bd38      	pop	{r3, r4, r5, pc}
 80127f6:	2221      	movs	r2, #33	; 0x21
 80127f8:	2104      	movs	r1, #4
 80127fa:	f001 fb27 	bl	8013e4c <_calloc_r>
 80127fe:	4603      	mov	r3, r0
 8012800:	64e0      	str	r0, [r4, #76]	; 0x4c
 8012802:	2800      	cmp	r0, #0
 8012804:	d1ed      	bne.n	80127e2 <__i2b+0xa>
 8012806:	4b09      	ldr	r3, [pc, #36]	; (801282c <__i2b+0x54>)
 8012808:	4809      	ldr	r0, [pc, #36]	; (8012830 <__i2b+0x58>)
 801280a:	2200      	movs	r2, #0
 801280c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012810:	f001 fafc 	bl	8013e0c <__assert_func>
 8012814:	221c      	movs	r2, #28
 8012816:	2101      	movs	r1, #1
 8012818:	4620      	mov	r0, r4
 801281a:	f001 fb17 	bl	8013e4c <_calloc_r>
 801281e:	2800      	cmp	r0, #0
 8012820:	d0f1      	beq.n	8012806 <__i2b+0x2e>
 8012822:	2201      	movs	r2, #1
 8012824:	2302      	movs	r3, #2
 8012826:	6042      	str	r2, [r0, #4]
 8012828:	6083      	str	r3, [r0, #8]
 801282a:	e7de      	b.n	80127ea <__i2b+0x12>
 801282c:	0801b480 	.word	0x0801b480
 8012830:	0801b4ec 	.word	0x0801b4ec

08012834 <__multiply>:
 8012834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012838:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801283c:	6915      	ldr	r5, [r2, #16]
 801283e:	45a8      	cmp	r8, r5
 8012840:	b085      	sub	sp, #20
 8012842:	460e      	mov	r6, r1
 8012844:	4692      	mov	sl, r2
 8012846:	db05      	blt.n	8012854 <__multiply+0x20>
 8012848:	462a      	mov	r2, r5
 801284a:	4653      	mov	r3, sl
 801284c:	4645      	mov	r5, r8
 801284e:	468a      	mov	sl, r1
 8012850:	4690      	mov	r8, r2
 8012852:	461e      	mov	r6, r3
 8012854:	f8da 3008 	ldr.w	r3, [sl, #8]
 8012858:	f8da 1004 	ldr.w	r1, [sl, #4]
 801285c:	eb05 0408 	add.w	r4, r5, r8
 8012860:	42a3      	cmp	r3, r4
 8012862:	bfb8      	it	lt
 8012864:	3101      	addlt	r1, #1
 8012866:	f7ff fee5 	bl	8012634 <_Balloc>
 801286a:	4684      	mov	ip, r0
 801286c:	2800      	cmp	r0, #0
 801286e:	f000 808b 	beq.w	8012988 <__multiply+0x154>
 8012872:	f100 0714 	add.w	r7, r0, #20
 8012876:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
 801287a:	4577      	cmp	r7, lr
 801287c:	d205      	bcs.n	801288a <__multiply+0x56>
 801287e:	463b      	mov	r3, r7
 8012880:	2200      	movs	r2, #0
 8012882:	f843 2b04 	str.w	r2, [r3], #4
 8012886:	459e      	cmp	lr, r3
 8012888:	d8fb      	bhi.n	8012882 <__multiply+0x4e>
 801288a:	3614      	adds	r6, #20
 801288c:	eb06 0888 	add.w	r8, r6, r8, lsl #2
 8012890:	f10a 0914 	add.w	r9, sl, #20
 8012894:	4546      	cmp	r6, r8
 8012896:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801289a:	d266      	bcs.n	801296a <__multiply+0x136>
 801289c:	eba5 030a 	sub.w	r3, r5, sl
 80128a0:	3b15      	subs	r3, #21
 80128a2:	f023 0303 	bic.w	r3, r3, #3
 80128a6:	f10a 0a15 	add.w	sl, sl, #21
 80128aa:	3304      	adds	r3, #4
 80128ac:	4555      	cmp	r5, sl
 80128ae:	bf2c      	ite	cs
 80128b0:	469b      	movcs	fp, r3
 80128b2:	f04f 0b04 	movcc.w	fp, #4
 80128b6:	f8cd e008 	str.w	lr, [sp, #8]
 80128ba:	9403      	str	r4, [sp, #12]
 80128bc:	46ae      	mov	lr, r5
 80128be:	46e2      	mov	sl, ip
 80128c0:	e005      	b.n	80128ce <__multiply+0x9a>
 80128c2:	0c09      	lsrs	r1, r1, #16
 80128c4:	d12a      	bne.n	801291c <__multiply+0xe8>
 80128c6:	45b0      	cmp	r8, r6
 80128c8:	f107 0704 	add.w	r7, r7, #4
 80128cc:	d94a      	bls.n	8012964 <__multiply+0x130>
 80128ce:	f856 1b04 	ldr.w	r1, [r6], #4
 80128d2:	b28d      	uxth	r5, r1
 80128d4:	2d00      	cmp	r5, #0
 80128d6:	d0f4      	beq.n	80128c2 <__multiply+0x8e>
 80128d8:	46cc      	mov	ip, r9
 80128da:	463c      	mov	r4, r7
 80128dc:	2300      	movs	r3, #0
 80128de:	9601      	str	r6, [sp, #4]
 80128e0:	f85c 0b04 	ldr.w	r0, [ip], #4
 80128e4:	6821      	ldr	r1, [r4, #0]
 80128e6:	b286      	uxth	r6, r0
 80128e8:	b28a      	uxth	r2, r1
 80128ea:	0c00      	lsrs	r0, r0, #16
 80128ec:	fb05 2206 	mla	r2, r5, r6, r2
 80128f0:	0c09      	lsrs	r1, r1, #16
 80128f2:	441a      	add	r2, r3
 80128f4:	fb05 1100 	mla	r1, r5, r0, r1
 80128f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80128fc:	b292      	uxth	r2, r2
 80128fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012902:	45e6      	cmp	lr, ip
 8012904:	f844 2b04 	str.w	r2, [r4], #4
 8012908:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801290c:	d8e8      	bhi.n	80128e0 <__multiply+0xac>
 801290e:	9e01      	ldr	r6, [sp, #4]
 8012910:	f847 300b 	str.w	r3, [r7, fp]
 8012914:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8012918:	0c09      	lsrs	r1, r1, #16
 801291a:	d0d4      	beq.n	80128c6 <__multiply+0x92>
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	2200      	movs	r2, #0
 8012920:	4648      	mov	r0, r9
 8012922:	461d      	mov	r5, r3
 8012924:	463c      	mov	r4, r7
 8012926:	4694      	mov	ip, r2
 8012928:	8802      	ldrh	r2, [r0, #0]
 801292a:	fb01 c202 	mla	r2, r1, r2, ip
 801292e:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8012932:	b29b      	uxth	r3, r3
 8012934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012938:	f844 3b04 	str.w	r3, [r4], #4
 801293c:	f850 3b04 	ldr.w	r3, [r0], #4
 8012940:	6825      	ldr	r5, [r4, #0]
 8012942:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8012946:	b2ab      	uxth	r3, r5
 8012948:	fb01 330c 	mla	r3, r1, ip, r3
 801294c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012950:	4586      	cmp	lr, r0
 8012952:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8012956:	d8e7      	bhi.n	8012928 <__multiply+0xf4>
 8012958:	45b0      	cmp	r8, r6
 801295a:	f847 300b 	str.w	r3, [r7, fp]
 801295e:	f107 0704 	add.w	r7, r7, #4
 8012962:	d8b4      	bhi.n	80128ce <__multiply+0x9a>
 8012964:	e9dd e402 	ldrd	lr, r4, [sp, #8]
 8012968:	46d4      	mov	ip, sl
 801296a:	2c00      	cmp	r4, #0
 801296c:	dc02      	bgt.n	8012974 <__multiply+0x140>
 801296e:	e005      	b.n	801297c <__multiply+0x148>
 8012970:	3c01      	subs	r4, #1
 8012972:	d003      	beq.n	801297c <__multiply+0x148>
 8012974:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012978:	2b00      	cmp	r3, #0
 801297a:	d0f9      	beq.n	8012970 <__multiply+0x13c>
 801297c:	4660      	mov	r0, ip
 801297e:	f8cc 4010 	str.w	r4, [ip, #16]
 8012982:	b005      	add	sp, #20
 8012984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012988:	4b03      	ldr	r3, [pc, #12]	; (8012998 <__multiply+0x164>)
 801298a:	4804      	ldr	r0, [pc, #16]	; (801299c <__multiply+0x168>)
 801298c:	4662      	mov	r2, ip
 801298e:	f240 115d 	movw	r1, #349	; 0x15d
 8012992:	f001 fa3b 	bl	8013e0c <__assert_func>
 8012996:	bf00      	nop
 8012998:	0801b480 	.word	0x0801b480
 801299c:	0801b4ec 	.word	0x0801b4ec

080129a0 <__pow5mult>:
 80129a0:	f012 0303 	ands.w	r3, r2, #3
 80129a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	4614      	mov	r4, r2
 80129aa:	4607      	mov	r7, r0
 80129ac:	d12c      	bne.n	8012a08 <__pow5mult+0x68>
 80129ae:	460d      	mov	r5, r1
 80129b0:	10a4      	asrs	r4, r4, #2
 80129b2:	d01c      	beq.n	80129ee <__pow5mult+0x4e>
 80129b4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80129b6:	b386      	cbz	r6, 8012a1a <__pow5mult+0x7a>
 80129b8:	07e3      	lsls	r3, r4, #31
 80129ba:	f04f 0800 	mov.w	r8, #0
 80129be:	d406      	bmi.n	80129ce <__pow5mult+0x2e>
 80129c0:	1064      	asrs	r4, r4, #1
 80129c2:	d014      	beq.n	80129ee <__pow5mult+0x4e>
 80129c4:	6830      	ldr	r0, [r6, #0]
 80129c6:	b1a8      	cbz	r0, 80129f4 <__pow5mult+0x54>
 80129c8:	4606      	mov	r6, r0
 80129ca:	07e3      	lsls	r3, r4, #31
 80129cc:	d5f8      	bpl.n	80129c0 <__pow5mult+0x20>
 80129ce:	4632      	mov	r2, r6
 80129d0:	4629      	mov	r1, r5
 80129d2:	4638      	mov	r0, r7
 80129d4:	f7ff ff2e 	bl	8012834 <__multiply>
 80129d8:	b135      	cbz	r5, 80129e8 <__pow5mult+0x48>
 80129da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129dc:	6869      	ldr	r1, [r5, #4]
 80129de:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80129e2:	602a      	str	r2, [r5, #0]
 80129e4:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 80129e8:	1064      	asrs	r4, r4, #1
 80129ea:	4605      	mov	r5, r0
 80129ec:	d1ea      	bne.n	80129c4 <__pow5mult+0x24>
 80129ee:	4628      	mov	r0, r5
 80129f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f4:	4632      	mov	r2, r6
 80129f6:	4631      	mov	r1, r6
 80129f8:	4638      	mov	r0, r7
 80129fa:	f7ff ff1b 	bl	8012834 <__multiply>
 80129fe:	6030      	str	r0, [r6, #0]
 8012a00:	f8c0 8000 	str.w	r8, [r0]
 8012a04:	4606      	mov	r6, r0
 8012a06:	e7e0      	b.n	80129ca <__pow5mult+0x2a>
 8012a08:	3b01      	subs	r3, #1
 8012a0a:	4a0f      	ldr	r2, [pc, #60]	; (8012a48 <__pow5mult+0xa8>)
 8012a0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012a10:	2300      	movs	r3, #0
 8012a12:	f7ff fe3f 	bl	8012694 <__multadd>
 8012a16:	4605      	mov	r5, r0
 8012a18:	e7ca      	b.n	80129b0 <__pow5mult+0x10>
 8012a1a:	2101      	movs	r1, #1
 8012a1c:	4638      	mov	r0, r7
 8012a1e:	f7ff fe09 	bl	8012634 <_Balloc>
 8012a22:	4606      	mov	r6, r0
 8012a24:	b140      	cbz	r0, 8012a38 <__pow5mult+0x98>
 8012a26:	2301      	movs	r3, #1
 8012a28:	f240 2271 	movw	r2, #625	; 0x271
 8012a2c:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8012a30:	2300      	movs	r3, #0
 8012a32:	64b8      	str	r0, [r7, #72]	; 0x48
 8012a34:	6003      	str	r3, [r0, #0]
 8012a36:	e7bf      	b.n	80129b8 <__pow5mult+0x18>
 8012a38:	4b04      	ldr	r3, [pc, #16]	; (8012a4c <__pow5mult+0xac>)
 8012a3a:	4805      	ldr	r0, [pc, #20]	; (8012a50 <__pow5mult+0xb0>)
 8012a3c:	4632      	mov	r2, r6
 8012a3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012a42:	f001 f9e3 	bl	8013e0c <__assert_func>
 8012a46:	bf00      	nop
 8012a48:	0801b544 	.word	0x0801b544
 8012a4c:	0801b480 	.word	0x0801b480
 8012a50:	0801b4ec 	.word	0x0801b4ec

08012a54 <__lshift>:
 8012a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a58:	460c      	mov	r4, r1
 8012a5a:	4690      	mov	r8, r2
 8012a5c:	6927      	ldr	r7, [r4, #16]
 8012a5e:	68a3      	ldr	r3, [r4, #8]
 8012a60:	6849      	ldr	r1, [r1, #4]
 8012a62:	eb07 1762 	add.w	r7, r7, r2, asr #5
 8012a66:	1c7d      	adds	r5, r7, #1
 8012a68:	429d      	cmp	r5, r3
 8012a6a:	4606      	mov	r6, r0
 8012a6c:	ea4f 1962 	mov.w	r9, r2, asr #5
 8012a70:	dd04      	ble.n	8012a7c <__lshift+0x28>
 8012a72:	005b      	lsls	r3, r3, #1
 8012a74:	429d      	cmp	r5, r3
 8012a76:	f101 0101 	add.w	r1, r1, #1
 8012a7a:	dcfa      	bgt.n	8012a72 <__lshift+0x1e>
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	f7ff fdd9 	bl	8012634 <_Balloc>
 8012a82:	4684      	mov	ip, r0
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d051      	beq.n	8012b2c <__lshift+0xd8>
 8012a88:	f1b9 0f00 	cmp.w	r9, #0
 8012a8c:	f100 0014 	add.w	r0, r0, #20
 8012a90:	dd0e      	ble.n	8012ab0 <__lshift+0x5c>
 8012a92:	f109 0205 	add.w	r2, r9, #5
 8012a96:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	f843 1b04 	str.w	r1, [r3], #4
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d1fb      	bne.n	8012aa2 <__lshift+0x4e>
 8012aaa:	f1ae 0314 	sub.w	r3, lr, #20
 8012aae:	4418      	add	r0, r3
 8012ab0:	6921      	ldr	r1, [r4, #16]
 8012ab2:	f104 0314 	add.w	r3, r4, #20
 8012ab6:	f018 081f 	ands.w	r8, r8, #31
 8012aba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8012abe:	d02d      	beq.n	8012b1c <__lshift+0xc8>
 8012ac0:	f1c8 0920 	rsb	r9, r8, #32
 8012ac4:	4686      	mov	lr, r0
 8012ac6:	f04f 0a00 	mov.w	sl, #0
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	fa02 f208 	lsl.w	r2, r2, r8
 8012ad0:	ea42 020a 	orr.w	r2, r2, sl
 8012ad4:	f84e 2b04 	str.w	r2, [lr], #4
 8012ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012adc:	4299      	cmp	r1, r3
 8012ade:	fa22 fa09 	lsr.w	sl, r2, r9
 8012ae2:	d8f2      	bhi.n	8012aca <__lshift+0x76>
 8012ae4:	1b0b      	subs	r3, r1, r4
 8012ae6:	3b15      	subs	r3, #21
 8012ae8:	f023 0303 	bic.w	r3, r3, #3
 8012aec:	3304      	adds	r3, #4
 8012aee:	f104 0215 	add.w	r2, r4, #21
 8012af2:	4291      	cmp	r1, r2
 8012af4:	bf38      	it	cc
 8012af6:	2304      	movcc	r3, #4
 8012af8:	f840 a003 	str.w	sl, [r0, r3]
 8012afc:	f1ba 0f00 	cmp.w	sl, #0
 8012b00:	d100      	bne.n	8012b04 <__lshift+0xb0>
 8012b02:	463d      	mov	r5, r7
 8012b04:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8012b06:	6862      	ldr	r2, [r4, #4]
 8012b08:	f8cc 5010 	str.w	r5, [ip, #16]
 8012b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b10:	6021      	str	r1, [r4, #0]
 8012b12:	4660      	mov	r0, ip
 8012b14:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b1c:	3804      	subs	r0, #4
 8012b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b22:	f840 2f04 	str.w	r2, [r0, #4]!
 8012b26:	4299      	cmp	r1, r3
 8012b28:	d8f9      	bhi.n	8012b1e <__lshift+0xca>
 8012b2a:	e7ea      	b.n	8012b02 <__lshift+0xae>
 8012b2c:	4b03      	ldr	r3, [pc, #12]	; (8012b3c <__lshift+0xe8>)
 8012b2e:	4804      	ldr	r0, [pc, #16]	; (8012b40 <__lshift+0xec>)
 8012b30:	4662      	mov	r2, ip
 8012b32:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012b36:	f001 f969 	bl	8013e0c <__assert_func>
 8012b3a:	bf00      	nop
 8012b3c:	0801b480 	.word	0x0801b480
 8012b40:	0801b4ec 	.word	0x0801b4ec

08012b44 <__mcmp>:
 8012b44:	690b      	ldr	r3, [r1, #16]
 8012b46:	4684      	mov	ip, r0
 8012b48:	6900      	ldr	r0, [r0, #16]
 8012b4a:	1ac0      	subs	r0, r0, r3
 8012b4c:	d116      	bne.n	8012b7c <__mcmp+0x38>
 8012b4e:	f10c 0c14 	add.w	ip, ip, #20
 8012b52:	3114      	adds	r1, #20
 8012b54:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8012b58:	b410      	push	{r4}
 8012b5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012b5e:	e001      	b.n	8012b64 <__mcmp+0x20>
 8012b60:	4594      	cmp	ip, r2
 8012b62:	d208      	bcs.n	8012b76 <__mcmp+0x32>
 8012b64:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8012b68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b6c:	428c      	cmp	r4, r1
 8012b6e:	d0f7      	beq.n	8012b60 <__mcmp+0x1c>
 8012b70:	d205      	bcs.n	8012b7e <__mcmp+0x3a>
 8012b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b7a:	4770      	bx	lr
 8012b7c:	4770      	bx	lr
 8012b7e:	2001      	movs	r0, #1
 8012b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop

08012b88 <__mdiff>:
 8012b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8c:	6913      	ldr	r3, [r2, #16]
 8012b8e:	690f      	ldr	r7, [r1, #16]
 8012b90:	1aff      	subs	r7, r7, r3
 8012b92:	2f00      	cmp	r7, #0
 8012b94:	b083      	sub	sp, #12
 8012b96:	460d      	mov	r5, r1
 8012b98:	4690      	mov	r8, r2
 8012b9a:	d115      	bne.n	8012bc8 <__mdiff+0x40>
 8012b9c:	f101 0614 	add.w	r6, r1, #20
 8012ba0:	3214      	adds	r2, #20
 8012ba2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012ba6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012baa:	e001      	b.n	8012bb0 <__mdiff+0x28>
 8012bac:	429e      	cmp	r6, r3
 8012bae:	d276      	bcs.n	8012c9e <__mdiff+0x116>
 8012bb0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8012bb4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012bb8:	428c      	cmp	r4, r1
 8012bba:	d0f7      	beq.n	8012bac <__mdiff+0x24>
 8012bbc:	d206      	bcs.n	8012bcc <__mdiff+0x44>
 8012bbe:	462b      	mov	r3, r5
 8012bc0:	2701      	movs	r7, #1
 8012bc2:	4645      	mov	r5, r8
 8012bc4:	4698      	mov	r8, r3
 8012bc6:	e001      	b.n	8012bcc <__mdiff+0x44>
 8012bc8:	dbf9      	blt.n	8012bbe <__mdiff+0x36>
 8012bca:	2700      	movs	r7, #0
 8012bcc:	6869      	ldr	r1, [r5, #4]
 8012bce:	f7ff fd31 	bl	8012634 <_Balloc>
 8012bd2:	4681      	mov	r9, r0
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	d076      	beq.n	8012cc6 <__mdiff+0x13e>
 8012bd8:	692e      	ldr	r6, [r5, #16]
 8012bda:	60c7      	str	r7, [r0, #12]
 8012bdc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012be0:	f105 0b14 	add.w	fp, r5, #20
 8012be4:	f108 0e14 	add.w	lr, r8, #20
 8012be8:	f109 0a14 	add.w	sl, r9, #20
 8012bec:	f105 0110 	add.w	r1, r5, #16
 8012bf0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8012bf4:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
 8012bf8:	4657      	mov	r7, sl
 8012bfa:	f04f 0c00 	mov.w	ip, #0
 8012bfe:	f8cd b004 	str.w	fp, [sp, #4]
 8012c02:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012c06:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8012c0a:	fa1f fb84 	uxth.w	fp, r4
 8012c0e:	b2ab      	uxth	r3, r5
 8012c10:	eba3 030b 	sub.w	r3, r3, fp
 8012c14:	0c24      	lsrs	r4, r4, #16
 8012c16:	4463      	add	r3, ip
 8012c18:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8012c1c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012c26:	4570      	cmp	r0, lr
 8012c28:	f847 3b04 	str.w	r3, [r7], #4
 8012c2c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8012c30:	d8e7      	bhi.n	8012c02 <__mdiff+0x7a>
 8012c32:	eba0 0108 	sub.w	r1, r0, r8
 8012c36:	3915      	subs	r1, #21
 8012c38:	0889      	lsrs	r1, r1, #2
 8012c3a:	1c4c      	adds	r4, r1, #1
 8012c3c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8012c40:	f108 0815 	add.w	r8, r8, #21
 8012c44:	00a4      	lsls	r4, r4, #2
 8012c46:	4540      	cmp	r0, r8
 8012c48:	bf38      	it	cc
 8012c4a:	2404      	movcc	r4, #4
 8012c4c:	eb0b 0504 	add.w	r5, fp, r4
 8012c50:	42aa      	cmp	r2, r5
 8012c52:	4454      	add	r4, sl
 8012c54:	d930      	bls.n	8012cb8 <__mdiff+0x130>
 8012c56:	4627      	mov	r7, r4
 8012c58:	4628      	mov	r0, r5
 8012c5a:	f850 3b04 	ldr.w	r3, [r0], #4
 8012c5e:	fa1c fe83 	uxtah	lr, ip, r3
 8012c62:	0c19      	lsrs	r1, r3, #16
 8012c64:	4463      	add	r3, ip
 8012c66:	eb01 412e 	add.w	r1, r1, lr, asr #16
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8012c70:	4282      	cmp	r2, r0
 8012c72:	f847 3b04 	str.w	r3, [r7], #4
 8012c76:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8012c7a:	d8ee      	bhi.n	8012c5a <__mdiff+0xd2>
 8012c7c:	3a01      	subs	r2, #1
 8012c7e:	1b52      	subs	r2, r2, r5
 8012c80:	f022 0203 	bic.w	r2, r2, #3
 8012c84:	4414      	add	r4, r2
 8012c86:	b923      	cbnz	r3, 8012c92 <__mdiff+0x10a>
 8012c88:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8012c8c:	3e01      	subs	r6, #1
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d0fa      	beq.n	8012c88 <__mdiff+0x100>
 8012c92:	4648      	mov	r0, r9
 8012c94:	f8c9 6010 	str.w	r6, [r9, #16]
 8012c98:	b003      	add	sp, #12
 8012c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9e:	2100      	movs	r1, #0
 8012ca0:	f7ff fcc8 	bl	8012634 <_Balloc>
 8012ca4:	4681      	mov	r9, r0
 8012ca6:	b1a8      	cbz	r0, 8012cd4 <__mdiff+0x14c>
 8012ca8:	2201      	movs	r2, #1
 8012caa:	2300      	movs	r3, #0
 8012cac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012cb0:	4648      	mov	r0, r9
 8012cb2:	b003      	add	sp, #12
 8012cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb8:	0089      	lsls	r1, r1, #2
 8012cba:	4540      	cmp	r0, r8
 8012cbc:	bf38      	it	cc
 8012cbe:	2100      	movcc	r1, #0
 8012cc0:	eb0a 0401 	add.w	r4, sl, r1
 8012cc4:	e7df      	b.n	8012c86 <__mdiff+0xfe>
 8012cc6:	4b07      	ldr	r3, [pc, #28]	; (8012ce4 <__mdiff+0x15c>)
 8012cc8:	4807      	ldr	r0, [pc, #28]	; (8012ce8 <__mdiff+0x160>)
 8012cca:	464a      	mov	r2, r9
 8012ccc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012cd0:	f001 f89c 	bl	8013e0c <__assert_func>
 8012cd4:	4b03      	ldr	r3, [pc, #12]	; (8012ce4 <__mdiff+0x15c>)
 8012cd6:	4804      	ldr	r0, [pc, #16]	; (8012ce8 <__mdiff+0x160>)
 8012cd8:	464a      	mov	r2, r9
 8012cda:	f240 2132 	movw	r1, #562	; 0x232
 8012cde:	f001 f895 	bl	8013e0c <__assert_func>
 8012ce2:	bf00      	nop
 8012ce4:	0801b480 	.word	0x0801b480
 8012ce8:	0801b4ec 	.word	0x0801b4ec

08012cec <__d2b>:
 8012cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cf0:	460e      	mov	r6, r1
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	2101      	movs	r1, #1
 8012cf6:	ec59 8b10 	vmov	r8, r9, d0
 8012cfa:	4615      	mov	r5, r2
 8012cfc:	f7ff fc9a 	bl	8012634 <_Balloc>
 8012d00:	4604      	mov	r4, r0
 8012d02:	2800      	cmp	r0, #0
 8012d04:	d046      	beq.n	8012d94 <__d2b+0xa8>
 8012d06:	f3c9 570a 	ubfx	r7, r9, #20, #11
 8012d0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012d0e:	b10f      	cbz	r7, 8012d14 <__d2b+0x28>
 8012d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012d14:	9301      	str	r3, [sp, #4]
 8012d16:	f1b8 0300 	subs.w	r3, r8, #0
 8012d1a:	d113      	bne.n	8012d44 <__d2b+0x58>
 8012d1c:	a801      	add	r0, sp, #4
 8012d1e:	f7ff fd2b 	bl	8012778 <__lo0bits>
 8012d22:	9b01      	ldr	r3, [sp, #4]
 8012d24:	6163      	str	r3, [r4, #20]
 8012d26:	2201      	movs	r2, #1
 8012d28:	3020      	adds	r0, #32
 8012d2a:	6122      	str	r2, [r4, #16]
 8012d2c:	b30f      	cbz	r7, 8012d72 <__d2b+0x86>
 8012d2e:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8012d32:	4407      	add	r7, r0
 8012d34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012d38:	6037      	str	r7, [r6, #0]
 8012d3a:	6028      	str	r0, [r5, #0]
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	b003      	add	sp, #12
 8012d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d44:	4668      	mov	r0, sp
 8012d46:	9300      	str	r3, [sp, #0]
 8012d48:	f7ff fd16 	bl	8012778 <__lo0bits>
 8012d4c:	9b01      	ldr	r3, [sp, #4]
 8012d4e:	b1f8      	cbz	r0, 8012d90 <__d2b+0xa4>
 8012d50:	9900      	ldr	r1, [sp, #0]
 8012d52:	f1c0 0220 	rsb	r2, r0, #32
 8012d56:	fa03 f202 	lsl.w	r2, r3, r2
 8012d5a:	40c3      	lsrs	r3, r0
 8012d5c:	430a      	orrs	r2, r1
 8012d5e:	9301      	str	r3, [sp, #4]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	6162      	str	r2, [r4, #20]
 8012d64:	bf0c      	ite	eq
 8012d66:	2201      	moveq	r2, #1
 8012d68:	2202      	movne	r2, #2
 8012d6a:	61a3      	str	r3, [r4, #24]
 8012d6c:	6122      	str	r2, [r4, #16]
 8012d6e:	2f00      	cmp	r7, #0
 8012d70:	d1dd      	bne.n	8012d2e <__d2b+0x42>
 8012d72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012d76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012d7a:	6030      	str	r0, [r6, #0]
 8012d7c:	6918      	ldr	r0, [r3, #16]
 8012d7e:	f7ff fcd9 	bl	8012734 <__hi0bits>
 8012d82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012d86:	6028      	str	r0, [r5, #0]
 8012d88:	4620      	mov	r0, r4
 8012d8a:	b003      	add	sp, #12
 8012d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d90:	9a00      	ldr	r2, [sp, #0]
 8012d92:	e7e5      	b.n	8012d60 <__d2b+0x74>
 8012d94:	4b03      	ldr	r3, [pc, #12]	; (8012da4 <__d2b+0xb8>)
 8012d96:	4804      	ldr	r0, [pc, #16]	; (8012da8 <__d2b+0xbc>)
 8012d98:	4622      	mov	r2, r4
 8012d9a:	f240 310a 	movw	r1, #778	; 0x30a
 8012d9e:	f001 f835 	bl	8013e0c <__assert_func>
 8012da2:	bf00      	nop
 8012da4:	0801b480 	.word	0x0801b480
 8012da8:	0801b4ec 	.word	0x0801b4ec

08012dac <frexp>:
 8012dac:	ec53 2b10 	vmov	r2, r3, d0
 8012db0:	b570      	push	{r4, r5, r6, lr}
 8012db2:	4e15      	ldr	r6, [pc, #84]	; (8012e08 <frexp+0x5c>)
 8012db4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012db8:	2500      	movs	r5, #0
 8012dba:	42b1      	cmp	r1, r6
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	6005      	str	r5, [r0, #0]
 8012dc0:	d81f      	bhi.n	8012e02 <frexp+0x56>
 8012dc2:	4616      	mov	r6, r2
 8012dc4:	430e      	orrs	r6, r1
 8012dc6:	d01c      	beq.n	8012e02 <frexp+0x56>
 8012dc8:	4e10      	ldr	r6, [pc, #64]	; (8012e0c <frexp+0x60>)
 8012dca:	401e      	ands	r6, r3
 8012dcc:	4618      	mov	r0, r3
 8012dce:	b95e      	cbnz	r6, 8012de8 <frexp+0x3c>
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	4b0e      	ldr	r3, [pc, #56]	; (8012e10 <frexp+0x64>)
 8012dd8:	f7ed fdde 	bl	8000998 <__aeabi_dmul>
 8012ddc:	f06f 0535 	mvn.w	r5, #53	; 0x35
 8012de0:	4602      	mov	r2, r0
 8012de2:	4608      	mov	r0, r1
 8012de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012de8:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8012dec:	1509      	asrs	r1, r1, #20
 8012dee:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
 8012df2:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 8012df6:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8012dfa:	4429      	add	r1, r5
 8012dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e00:	6021      	str	r1, [r4, #0]
 8012e02:	ec43 2b10 	vmov	d0, r2, r3
 8012e06:	bd70      	pop	{r4, r5, r6, pc}
 8012e08:	7fefffff 	.word	0x7fefffff
 8012e0c:	7ff00000 	.word	0x7ff00000
 8012e10:	43500000 	.word	0x43500000

08012e14 <__sread>:
 8012e14:	b510      	push	{r4, lr}
 8012e16:	460c      	mov	r4, r1
 8012e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e1c:	f001 fa40 	bl	80142a0 <_read_r>
 8012e20:	2800      	cmp	r0, #0
 8012e22:	db03      	blt.n	8012e2c <__sread+0x18>
 8012e24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012e26:	4403      	add	r3, r0
 8012e28:	6523      	str	r3, [r4, #80]	; 0x50
 8012e2a:	bd10      	pop	{r4, pc}
 8012e2c:	89a3      	ldrh	r3, [r4, #12]
 8012e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e32:	81a3      	strh	r3, [r4, #12]
 8012e34:	bd10      	pop	{r4, pc}
 8012e36:	bf00      	nop

08012e38 <__swrite>:
 8012e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e3c:	460c      	mov	r4, r1
 8012e3e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8012e42:	461f      	mov	r7, r3
 8012e44:	05cb      	lsls	r3, r1, #23
 8012e46:	4605      	mov	r5, r0
 8012e48:	4616      	mov	r6, r2
 8012e4a:	d40b      	bmi.n	8012e64 <__swrite+0x2c>
 8012e4c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8012e50:	81a1      	strh	r1, [r4, #12]
 8012e52:	463b      	mov	r3, r7
 8012e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e58:	4632      	mov	r2, r6
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e60:	f000 bfbe 	b.w	8013de0 <_write_r>
 8012e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e68:	2302      	movs	r3, #2
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	f001 f9ec 	bl	8014248 <_lseek_r>
 8012e70:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8012e74:	e7ea      	b.n	8012e4c <__swrite+0x14>
 8012e76:	bf00      	nop

08012e78 <__sseek>:
 8012e78:	b510      	push	{r4, lr}
 8012e7a:	460c      	mov	r4, r1
 8012e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e80:	f001 f9e2 	bl	8014248 <_lseek_r>
 8012e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e88:	1c42      	adds	r2, r0, #1
 8012e8a:	bf0e      	itee	eq
 8012e8c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e90:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e94:	6520      	strne	r0, [r4, #80]	; 0x50
 8012e96:	81a3      	strh	r3, [r4, #12]
 8012e98:	bd10      	pop	{r4, pc}
 8012e9a:	bf00      	nop

08012e9c <__sclose>:
 8012e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ea0:	f001 b804 	b.w	8013eac <_close_r>

08012ea4 <__ssprint_r>:
 8012ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea8:	6893      	ldr	r3, [r2, #8]
 8012eaa:	6817      	ldr	r7, [r2, #0]
 8012eac:	b083      	sub	sp, #12
 8012eae:	4692      	mov	sl, r2
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d074      	beq.n	8012f9e <__ssprint_r+0xfa>
 8012eb4:	f04f 0b00 	mov.w	fp, #0
 8012eb8:	688b      	ldr	r3, [r1, #8]
 8012eba:	680a      	ldr	r2, [r1, #0]
 8012ebc:	4681      	mov	r9, r0
 8012ebe:	460c      	mov	r4, r1
 8012ec0:	465d      	mov	r5, fp
 8012ec2:	e045      	b.n	8012f50 <__ssprint_r+0xac>
 8012ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ec8:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8012ecc:	d02c      	beq.n	8012f28 <__ssprint_r+0x84>
 8012ece:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8012ed2:	1a16      	subs	r6, r2, r0
 8012ed4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8012ed8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8012edc:	1c71      	adds	r1, r6, #1
 8012ede:	1052      	asrs	r2, r2, #1
 8012ee0:	4429      	add	r1, r5
 8012ee2:	4291      	cmp	r1, r2
 8012ee4:	bf92      	itee	ls
 8012ee6:	4690      	movls	r8, r2
 8012ee8:	4688      	movhi	r8, r1
 8012eea:	460a      	movhi	r2, r1
 8012eec:	055b      	lsls	r3, r3, #21
 8012eee:	d539      	bpl.n	8012f64 <__ssprint_r+0xc0>
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	4648      	mov	r0, r9
 8012ef4:	f7fd fe64 	bl	8010bc0 <_malloc_r>
 8012ef8:	9001      	str	r0, [sp, #4]
 8012efa:	2800      	cmp	r0, #0
 8012efc:	d03d      	beq.n	8012f7a <__ssprint_r+0xd6>
 8012efe:	4632      	mov	r2, r6
 8012f00:	6921      	ldr	r1, [r4, #16]
 8012f02:	f7ee f8c5 	bl	8001090 <memcpy>
 8012f06:	89a2      	ldrh	r2, [r4, #12]
 8012f08:	9b01      	ldr	r3, [sp, #4]
 8012f0a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8012f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012f12:	81a2      	strh	r2, [r4, #12]
 8012f14:	1998      	adds	r0, r3, r6
 8012f16:	eba8 0606 	sub.w	r6, r8, r6
 8012f1a:	60a6      	str	r6, [r4, #8]
 8012f1c:	f8c4 8014 	str.w	r8, [r4, #20]
 8012f20:	6123      	str	r3, [r4, #16]
 8012f22:	6020      	str	r0, [r4, #0]
 8012f24:	46a8      	mov	r8, r5
 8012f26:	462e      	mov	r6, r5
 8012f28:	4632      	mov	r2, r6
 8012f2a:	4659      	mov	r1, fp
 8012f2c:	f7fe f934 	bl	8011198 <memmove>
 8012f30:	f8da 1008 	ldr.w	r1, [sl, #8]
 8012f34:	68a3      	ldr	r3, [r4, #8]
 8012f36:	6822      	ldr	r2, [r4, #0]
 8012f38:	eba3 0308 	sub.w	r3, r3, r8
 8012f3c:	4432      	add	r2, r6
 8012f3e:	1b49      	subs	r1, r1, r5
 8012f40:	60a3      	str	r3, [r4, #8]
 8012f42:	6022      	str	r2, [r4, #0]
 8012f44:	f8ca 1008 	str.w	r1, [sl, #8]
 8012f48:	b349      	cbz	r1, 8012f9e <__ssprint_r+0xfa>
 8012f4a:	e9d7 b500 	ldrd	fp, r5, [r7]
 8012f4e:	3708      	adds	r7, #8
 8012f50:	4698      	mov	r8, r3
 8012f52:	4610      	mov	r0, r2
 8012f54:	2d00      	cmp	r5, #0
 8012f56:	d0f8      	beq.n	8012f4a <__ssprint_r+0xa6>
 8012f58:	429d      	cmp	r5, r3
 8012f5a:	461e      	mov	r6, r3
 8012f5c:	d2b2      	bcs.n	8012ec4 <__ssprint_r+0x20>
 8012f5e:	46a8      	mov	r8, r5
 8012f60:	462e      	mov	r6, r5
 8012f62:	e7e1      	b.n	8012f28 <__ssprint_r+0x84>
 8012f64:	4601      	mov	r1, r0
 8012f66:	4648      	mov	r0, r9
 8012f68:	f001 f9b0 	bl	80142cc <_realloc_r>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	d1d0      	bne.n	8012f14 <__ssprint_r+0x70>
 8012f72:	6921      	ldr	r1, [r4, #16]
 8012f74:	4648      	mov	r0, r9
 8012f76:	f7ff f9d5 	bl	8012324 <_free_r>
 8012f7a:	89a3      	ldrh	r3, [r4, #12]
 8012f7c:	220c      	movs	r2, #12
 8012f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f82:	f8c9 2000 	str.w	r2, [r9]
 8012f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f8a:	81a3      	strh	r3, [r4, #12]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	2300      	movs	r3, #0
 8012f90:	f8ca 2008 	str.w	r2, [sl, #8]
 8012f94:	f8ca 3004 	str.w	r3, [sl, #4]
 8012f98:	b003      	add	sp, #12
 8012f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f9e:	2000      	movs	r0, #0
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f8ca 3004 	str.w	r3, [sl, #4]
 8012fa6:	b003      	add	sp, #12
 8012fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012fac <__sprint_r>:
 8012fac:	6893      	ldr	r3, [r2, #8]
 8012fae:	b510      	push	{r4, lr}
 8012fb0:	4614      	mov	r4, r2
 8012fb2:	b91b      	cbnz	r3, 8012fbc <__sprint_r+0x10>
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	6063      	str	r3, [r4, #4]
 8012fba:	bd10      	pop	{r4, pc}
 8012fbc:	f000 ffb2 	bl	8013f24 <__sfvwrite_r>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	60a3      	str	r3, [r4, #8]
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	6063      	str	r3, [r4, #4]
 8012fc8:	bd10      	pop	{r4, pc}
 8012fca:	bf00      	nop

08012fcc <_vfiprintf_r>:
 8012fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd0:	b0bd      	sub	sp, #244	; 0xf4
 8012fd2:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8012fd6:	461c      	mov	r4, r3
 8012fd8:	9104      	str	r1, [sp, #16]
 8012fda:	4691      	mov	r9, r2
 8012fdc:	b118      	cbz	r0, 8012fe6 <_vfiprintf_r+0x1a>
 8012fde:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	f000 8234 	beq.w	801344e <_vfiprintf_r+0x482>
 8012fe6:	9a04      	ldr	r2, [sp, #16]
 8012fe8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012fea:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8012fee:	07d8      	lsls	r0, r3, #31
 8012ff0:	d402      	bmi.n	8012ff8 <_vfiprintf_r+0x2c>
 8012ff2:	0591      	lsls	r1, r2, #22
 8012ff4:	f140 85ae 	bpl.w	8013b54 <_vfiprintf_r+0xb88>
 8012ff8:	0713      	lsls	r3, r2, #28
 8012ffa:	f140 80ed 	bpl.w	80131d8 <_vfiprintf_r+0x20c>
 8012ffe:	9b04      	ldr	r3, [sp, #16]
 8013000:	691b      	ldr	r3, [r3, #16]
 8013002:	2b00      	cmp	r3, #0
 8013004:	f000 80e8 	beq.w	80131d8 <_vfiprintf_r+0x20c>
 8013008:	f002 031a 	and.w	r3, r2, #26
 801300c:	2b0a      	cmp	r3, #10
 801300e:	f000 80f2 	beq.w	80131f6 <_vfiprintf_r+0x22a>
 8013012:	ab13      	add	r3, sp, #76	; 0x4c
 8013014:	9310      	str	r3, [sp, #64]	; 0x40
 8013016:	2300      	movs	r3, #0
 8013018:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 801301c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8013020:	9309      	str	r3, [sp, #36]	; 0x24
 8013022:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8013026:	930a      	str	r3, [sp, #40]	; 0x28
 8013028:	9303      	str	r3, [sp, #12]
 801302a:	f899 3000 	ldrb.w	r3, [r9]
 801302e:	2b00      	cmp	r3, #0
 8013030:	f000 81c2 	beq.w	80133b8 <_vfiprintf_r+0x3ec>
 8013034:	464c      	mov	r4, r9
 8013036:	e004      	b.n	8013042 <_vfiprintf_r+0x76>
 8013038:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801303c:	2b00      	cmp	r3, #0
 801303e:	f000 80f8 	beq.w	8013232 <_vfiprintf_r+0x266>
 8013042:	2b25      	cmp	r3, #37	; 0x25
 8013044:	d1f8      	bne.n	8013038 <_vfiprintf_r+0x6c>
 8013046:	ebb4 0509 	subs.w	r5, r4, r9
 801304a:	f040 80f6 	bne.w	801323a <_vfiprintf_r+0x26e>
 801304e:	7823      	ldrb	r3, [r4, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	f000 81b1 	beq.w	80133b8 <_vfiprintf_r+0x3ec>
 8013056:	f04f 0300 	mov.w	r3, #0
 801305a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801305e:	7862      	ldrb	r2, [r4, #1]
 8013060:	2300      	movs	r3, #0
 8013062:	9302      	str	r3, [sp, #8]
 8013064:	f104 0901 	add.w	r9, r4, #1
 8013068:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801306c:	469b      	mov	fp, r3
 801306e:	f109 0901 	add.w	r9, r9, #1
 8013072:	f1a2 0320 	sub.w	r3, r2, #32
 8013076:	2b5a      	cmp	r3, #90	; 0x5a
 8013078:	f200 810c 	bhi.w	8013294 <_vfiprintf_r+0x2c8>
 801307c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013080:	010a02ef 	.word	0x010a02ef
 8013084:	02ea010a 	.word	0x02ea010a
 8013088:	010a010a 	.word	0x010a010a
 801308c:	006a010a 	.word	0x006a010a
 8013090:	010a010a 	.word	0x010a010a
 8013094:	02d902df 	.word	0x02d902df
 8013098:	00d4010a 	.word	0x00d4010a
 801309c:	010a02c0 	.word	0x010a02c0
 80130a0:	005b02bb 	.word	0x005b02bb
 80130a4:	005b005b 	.word	0x005b005b
 80130a8:	005b005b 	.word	0x005b005b
 80130ac:	005b005b 	.word	0x005b005b
 80130b0:	005b005b 	.word	0x005b005b
 80130b4:	010a010a 	.word	0x010a010a
 80130b8:	010a010a 	.word	0x010a010a
 80130bc:	010a010a 	.word	0x010a010a
 80130c0:	010a010a 	.word	0x010a010a
 80130c4:	01d9010a 	.word	0x01d9010a
 80130c8:	010a0085 	.word	0x010a0085
 80130cc:	010a010a 	.word	0x010a010a
 80130d0:	010a010a 	.word	0x010a010a
 80130d4:	010a010a 	.word	0x010a010a
 80130d8:	010a010a 	.word	0x010a010a
 80130dc:	0247010a 	.word	0x0247010a
 80130e0:	010a010a 	.word	0x010a010a
 80130e4:	01bc010a 	.word	0x01bc010a
 80130e8:	0211010a 	.word	0x0211010a
 80130ec:	010a010a 	.word	0x010a010a
 80130f0:	010a0572 	.word	0x010a0572
 80130f4:	010a010a 	.word	0x010a010a
 80130f8:	010a010a 	.word	0x010a010a
 80130fc:	010a010a 	.word	0x010a010a
 8013100:	010a010a 	.word	0x010a010a
 8013104:	01d9010a 	.word	0x01d9010a
 8013108:	010a0087 	.word	0x010a0087
 801310c:	010a010a 	.word	0x010a010a
 8013110:	008702ae 	.word	0x008702ae
 8013114:	010a0080 	.word	0x010a0080
 8013118:	010a02a1 	.word	0x010a02a1
 801311c:	05680293 	.word	0x05680293
 8013120:	008002fa 	.word	0x008002fa
 8013124:	01bc010a 	.word	0x01bc010a
 8013128:	0566007d 	.word	0x0566007d
 801312c:	010a010a 	.word	0x010a010a
 8013130:	010a0590 	.word	0x010a0590
 8013134:	007d      	.short	0x007d
 8013136:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801313a:	2100      	movs	r1, #0
 801313c:	f819 2b01 	ldrb.w	r2, [r9], #1
 8013140:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8013144:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8013148:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801314c:	2b09      	cmp	r3, #9
 801314e:	d9f5      	bls.n	801313c <_vfiprintf_r+0x170>
 8013150:	9102      	str	r1, [sp, #8]
 8013152:	e78e      	b.n	8013072 <_vfiprintf_r+0xa6>
 8013154:	9d06      	ldr	r5, [sp, #24]
 8013156:	4628      	mov	r0, r5
 8013158:	f7ff fa06 	bl	8012568 <_localeconv_r>
 801315c:	6843      	ldr	r3, [r0, #4]
 801315e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013160:	4618      	mov	r0, r3
 8013162:	f7ed f82d 	bl	80001c0 <strlen>
 8013166:	900c      	str	r0, [sp, #48]	; 0x30
 8013168:	4604      	mov	r4, r0
 801316a:	4628      	mov	r0, r5
 801316c:	f7ff f9fc 	bl	8012568 <_localeconv_r>
 8013170:	6883      	ldr	r3, [r0, #8]
 8013172:	930a      	str	r3, [sp, #40]	; 0x28
 8013174:	2c00      	cmp	r4, #0
 8013176:	f040 84ca 	bne.w	8013b0e <_vfiprintf_r+0xb42>
 801317a:	f899 2000 	ldrb.w	r2, [r9]
 801317e:	e776      	b.n	801306e <_vfiprintf_r+0xa2>
 8013180:	f899 2000 	ldrb.w	r2, [r9]
 8013184:	f04b 0b20 	orr.w	fp, fp, #32
 8013188:	e771      	b.n	801306e <_vfiprintf_r+0xa2>
 801318a:	f04b 0b10 	orr.w	fp, fp, #16
 801318e:	f01b 0f20 	tst.w	fp, #32
 8013192:	f000 8122 	beq.w	80133da <_vfiprintf_r+0x40e>
 8013196:	9b07      	ldr	r3, [sp, #28]
 8013198:	3307      	adds	r3, #7
 801319a:	f023 0307 	bic.w	r3, r3, #7
 801319e:	4619      	mov	r1, r3
 80131a0:	685a      	ldr	r2, [r3, #4]
 80131a2:	f851 3b08 	ldr.w	r3, [r1], #8
 80131a6:	9107      	str	r1, [sp, #28]
 80131a8:	4611      	mov	r1, r2
 80131aa:	2a00      	cmp	r2, #0
 80131ac:	f2c0 815b 	blt.w	8013466 <_vfiprintf_r+0x49a>
 80131b0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80131b4:	f000 8162 	beq.w	801347c <_vfiprintf_r+0x4b0>
 80131b8:	ea53 0201 	orrs.w	r2, r3, r1
 80131bc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80131c0:	f040 815c 	bne.w	801347c <_vfiprintf_r+0x4b0>
 80131c4:	f1b8 0f00 	cmp.w	r8, #0
 80131c8:	f040 857b 	bne.w	8013cc2 <_vfiprintf_r+0xcf6>
 80131cc:	f8cd 8004 	str.w	r8, [sp, #4]
 80131d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80131d4:	ac3c      	add	r4, sp, #240	; 0xf0
 80131d6:	e191      	b.n	80134fc <_vfiprintf_r+0x530>
 80131d8:	9d04      	ldr	r5, [sp, #16]
 80131da:	9806      	ldr	r0, [sp, #24]
 80131dc:	4629      	mov	r1, r5
 80131de:	f7fe fe11 	bl	8011e04 <__swsetup_r>
 80131e2:	2800      	cmp	r0, #0
 80131e4:	f040 8592 	bne.w	8013d0c <_vfiprintf_r+0xd40>
 80131e8:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 80131ec:	f002 031a 	and.w	r3, r2, #26
 80131f0:	2b0a      	cmp	r3, #10
 80131f2:	f47f af0e 	bne.w	8013012 <_vfiprintf_r+0x46>
 80131f6:	9904      	ldr	r1, [sp, #16]
 80131f8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f6ff af08 	blt.w	8013012 <_vfiprintf_r+0x46>
 8013202:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8013204:	07dd      	lsls	r5, r3, #31
 8013206:	d402      	bmi.n	801320e <_vfiprintf_r+0x242>
 8013208:	0590      	lsls	r0, r2, #22
 801320a:	f140 855d 	bpl.w	8013cc8 <_vfiprintf_r+0xcfc>
 801320e:	9904      	ldr	r1, [sp, #16]
 8013210:	9806      	ldr	r0, [sp, #24]
 8013212:	4623      	mov	r3, r4
 8013214:	464a      	mov	r2, r9
 8013216:	b03d      	add	sp, #244	; 0xf4
 8013218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801321c:	f000 bda0 	b.w	8013d60 <__sbprintf>
 8013220:	9a02      	ldr	r2, [sp, #8]
 8013222:	9307      	str	r3, [sp, #28]
 8013224:	4252      	negs	r2, r2
 8013226:	9202      	str	r2, [sp, #8]
 8013228:	f899 2000 	ldrb.w	r2, [r9]
 801322c:	f04b 0b04 	orr.w	fp, fp, #4
 8013230:	e71d      	b.n	801306e <_vfiprintf_r+0xa2>
 8013232:	ebb4 0509 	subs.w	r5, r4, r9
 8013236:	f000 80bf 	beq.w	80133b8 <_vfiprintf_r+0x3ec>
 801323a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801323c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801323e:	3301      	adds	r3, #1
 8013240:	442a      	add	r2, r5
 8013242:	2b07      	cmp	r3, #7
 8013244:	e9ca 9500 	strd	r9, r5, [sl]
 8013248:	9212      	str	r2, [sp, #72]	; 0x48
 801324a:	9311      	str	r3, [sp, #68]	; 0x44
 801324c:	dc05      	bgt.n	801325a <_vfiprintf_r+0x28e>
 801324e:	f10a 0a08 	add.w	sl, sl, #8
 8013252:	9b03      	ldr	r3, [sp, #12]
 8013254:	442b      	add	r3, r5
 8013256:	9303      	str	r3, [sp, #12]
 8013258:	e6f9      	b.n	801304e <_vfiprintf_r+0x82>
 801325a:	b91a      	cbnz	r2, 8013264 <_vfiprintf_r+0x298>
 801325c:	9211      	str	r2, [sp, #68]	; 0x44
 801325e:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8013262:	e7f6      	b.n	8013252 <_vfiprintf_r+0x286>
 8013264:	9904      	ldr	r1, [sp, #16]
 8013266:	9806      	ldr	r0, [sp, #24]
 8013268:	aa10      	add	r2, sp, #64	; 0x40
 801326a:	f000 fe5b 	bl	8013f24 <__sfvwrite_r>
 801326e:	2300      	movs	r3, #0
 8013270:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8013274:	2800      	cmp	r0, #0
 8013276:	d0f2      	beq.n	801325e <_vfiprintf_r+0x292>
 8013278:	9b04      	ldr	r3, [sp, #16]
 801327a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801327c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013280:	07d1      	lsls	r1, r2, #31
 8013282:	f140 80a0 	bpl.w	80133c6 <_vfiprintf_r+0x3fa>
 8013286:	065b      	lsls	r3, r3, #25
 8013288:	f100 854c 	bmi.w	8013d24 <_vfiprintf_r+0xd58>
 801328c:	9803      	ldr	r0, [sp, #12]
 801328e:	b03d      	add	sp, #244	; 0xf4
 8013290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013294:	2a00      	cmp	r2, #0
 8013296:	f000 808f 	beq.w	80133b8 <_vfiprintf_r+0x3ec>
 801329a:	2300      	movs	r3, #0
 801329c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80132a0:	2301      	movs	r3, #1
 80132a2:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80132a6:	9301      	str	r3, [sp, #4]
 80132a8:	9305      	str	r3, [sp, #20]
 80132aa:	ac23      	add	r4, sp, #140	; 0x8c
 80132ac:	f04f 0800 	mov.w	r8, #0
 80132b0:	f01b 0602 	ands.w	r6, fp, #2
 80132b4:	d002      	beq.n	80132bc <_vfiprintf_r+0x2f0>
 80132b6:	9b01      	ldr	r3, [sp, #4]
 80132b8:	3302      	adds	r3, #2
 80132ba:	9301      	str	r3, [sp, #4]
 80132bc:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
 80132c0:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80132c4:	f102 0c01 	add.w	ip, r2, #1
 80132c8:	4661      	mov	r1, ip
 80132ca:	9308      	str	r3, [sp, #32]
 80132cc:	d105      	bne.n	80132da <_vfiprintf_r+0x30e>
 80132ce:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 80132d2:	1b5d      	subs	r5, r3, r5
 80132d4:	2d00      	cmp	r5, #0
 80132d6:	f300 8336 	bgt.w	8013946 <_vfiprintf_r+0x97a>
 80132da:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 80132de:	2d00      	cmp	r5, #0
 80132e0:	f000 81fb 	beq.w	80136da <_vfiprintf_r+0x70e>
 80132e4:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 80132e8:	3001      	adds	r0, #1
 80132ea:	f8ca 2000 	str.w	r2, [sl]
 80132ee:	2907      	cmp	r1, #7
 80132f0:	f04f 0201 	mov.w	r2, #1
 80132f4:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
 80132f8:	f8ca 2004 	str.w	r2, [sl, #4]
 80132fc:	f340 81e9 	ble.w	80136d2 <_vfiprintf_r+0x706>
 8013300:	b148      	cbz	r0, 8013316 <_vfiprintf_r+0x34a>
 8013302:	aa10      	add	r2, sp, #64	; 0x40
 8013304:	9904      	ldr	r1, [sp, #16]
 8013306:	9806      	ldr	r0, [sp, #24]
 8013308:	f000 fe0c 	bl	8013f24 <__sfvwrite_r>
 801330c:	2200      	movs	r2, #0
 801330e:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
 8013312:	2800      	cmp	r0, #0
 8013314:	d1b0      	bne.n	8013278 <_vfiprintf_r+0x2ac>
 8013316:	2e00      	cmp	r6, #0
 8013318:	f000 81f2 	beq.w	8013700 <_vfiprintf_r+0x734>
 801331c:	2002      	movs	r0, #2
 801331e:	ab0f      	add	r3, sp, #60	; 0x3c
 8013320:	9014      	str	r0, [sp, #80]	; 0x50
 8013322:	9313      	str	r3, [sp, #76]	; 0x4c
 8013324:	2101      	movs	r1, #1
 8013326:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 801332a:	460a      	mov	r2, r1
 801332c:	f10a 0a08 	add.w	sl, sl, #8
 8013330:	3101      	adds	r1, #1
 8013332:	9b08      	ldr	r3, [sp, #32]
 8013334:	2b80      	cmp	r3, #128	; 0x80
 8013336:	f000 81ed 	beq.w	8013714 <_vfiprintf_r+0x748>
 801333a:	9b05      	ldr	r3, [sp, #20]
 801333c:	eba8 0703 	sub.w	r7, r8, r3
 8013340:	2f00      	cmp	r7, #0
 8013342:	f300 8230 	bgt.w	80137a6 <_vfiprintf_r+0x7da>
 8013346:	9b05      	ldr	r3, [sp, #20]
 8013348:	f8ca 4000 	str.w	r4, [sl]
 801334c:	4418      	add	r0, r3
 801334e:	2907      	cmp	r1, #7
 8013350:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
 8013354:	f8ca 3004 	str.w	r3, [sl, #4]
 8013358:	f340 8274 	ble.w	8013844 <_vfiprintf_r+0x878>
 801335c:	2800      	cmp	r0, #0
 801335e:	f040 82cf 	bne.w	8013900 <_vfiprintf_r+0x934>
 8013362:	9011      	str	r0, [sp, #68]	; 0x44
 8013364:	f01b 0f04 	tst.w	fp, #4
 8013368:	f000 82ac 	beq.w	80138c4 <_vfiprintf_r+0x8f8>
 801336c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013370:	1a9c      	subs	r4, r3, r2
 8013372:	2c00      	cmp	r4, #0
 8013374:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013376:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 801337a:	f300 826f 	bgt.w	801385c <_vfiprintf_r+0x890>
 801337e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013382:	9901      	ldr	r1, [sp, #4]
 8013384:	428a      	cmp	r2, r1
 8013386:	bfac      	ite	ge
 8013388:	189b      	addge	r3, r3, r2
 801338a:	185b      	addlt	r3, r3, r1
 801338c:	9303      	str	r3, [sp, #12]
 801338e:	b150      	cbz	r0, 80133a6 <_vfiprintf_r+0x3da>
 8013390:	9904      	ldr	r1, [sp, #16]
 8013392:	9806      	ldr	r0, [sp, #24]
 8013394:	aa10      	add	r2, sp, #64	; 0x40
 8013396:	f000 fdc5 	bl	8013f24 <__sfvwrite_r>
 801339a:	2300      	movs	r3, #0
 801339c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80133a0:	2800      	cmp	r0, #0
 80133a2:	f47f af69 	bne.w	8013278 <_vfiprintf_r+0x2ac>
 80133a6:	2300      	movs	r3, #0
 80133a8:	9311      	str	r3, [sp, #68]	; 0x44
 80133aa:	f899 3000 	ldrb.w	r3, [r9]
 80133ae:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f47f ae3e 	bne.w	8013034 <_vfiprintf_r+0x68>
 80133b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f040 8493 	bne.w	8013ce6 <_vfiprintf_r+0xd1a>
 80133c0:	2300      	movs	r3, #0
 80133c2:	9311      	str	r3, [sp, #68]	; 0x44
 80133c4:	e758      	b.n	8013278 <_vfiprintf_r+0x2ac>
 80133c6:	059a      	lsls	r2, r3, #22
 80133c8:	f53f af5d 	bmi.w	8013286 <_vfiprintf_r+0x2ba>
 80133cc:	9c04      	ldr	r4, [sp, #16]
 80133ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133d0:	f002 ff2c 	bl	801622c <__retarget_lock_release_recursive>
 80133d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133d8:	e755      	b.n	8013286 <_vfiprintf_r+0x2ba>
 80133da:	9a07      	ldr	r2, [sp, #28]
 80133dc:	f01b 0f10 	tst.w	fp, #16
 80133e0:	f852 3b04 	ldr.w	r3, [r2], #4
 80133e4:	9207      	str	r2, [sp, #28]
 80133e6:	d139      	bne.n	801345c <_vfiprintf_r+0x490>
 80133e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80133ec:	d032      	beq.n	8013454 <_vfiprintf_r+0x488>
 80133ee:	f343 31c0 	sbfx	r1, r3, #15, #1
 80133f2:	460a      	mov	r2, r1
 80133f4:	b21b      	sxth	r3, r3
 80133f6:	e6d8      	b.n	80131aa <_vfiprintf_r+0x1de>
 80133f8:	9d07      	ldr	r5, [sp, #28]
 80133fa:	f855 4b04 	ldr.w	r4, [r5], #4
 80133fe:	2600      	movs	r6, #0
 8013400:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
 8013404:	2c00      	cmp	r4, #0
 8013406:	f000 8434 	beq.w	8013c72 <_vfiprintf_r+0xca6>
 801340a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 801340e:	f000 83fc 	beq.w	8013c0a <_vfiprintf_r+0xc3e>
 8013412:	4642      	mov	r2, r8
 8013414:	4631      	mov	r1, r6
 8013416:	4620      	mov	r0, r4
 8013418:	f7ed f8b2 	bl	8000580 <memchr>
 801341c:	2800      	cmp	r0, #0
 801341e:	f000 8458 	beq.w	8013cd2 <_vfiprintf_r+0xd06>
 8013422:	1b03      	subs	r3, r0, r4
 8013424:	9305      	str	r3, [sp, #20]
 8013426:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801342a:	9507      	str	r5, [sp, #28]
 801342c:	46b0      	mov	r8, r6
 801342e:	9301      	str	r3, [sp, #4]
 8013430:	e064      	b.n	80134fc <_vfiprintf_r+0x530>
 8013432:	9b07      	ldr	r3, [sp, #28]
 8013434:	2200      	movs	r2, #0
 8013436:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801343a:	f853 2b04 	ldr.w	r2, [r3], #4
 801343e:	9307      	str	r3, [sp, #28]
 8013440:	2301      	movs	r3, #1
 8013442:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8013446:	9301      	str	r3, [sp, #4]
 8013448:	9305      	str	r3, [sp, #20]
 801344a:	ac23      	add	r4, sp, #140	; 0x8c
 801344c:	e72e      	b.n	80132ac <_vfiprintf_r+0x2e0>
 801344e:	f7fe fe95 	bl	801217c <__sinit>
 8013452:	e5c8      	b.n	8012fe6 <_vfiprintf_r+0x1a>
 8013454:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8013458:	f040 8428 	bne.w	8013cac <_vfiprintf_r+0xce0>
 801345c:	17d9      	asrs	r1, r3, #31
 801345e:	460a      	mov	r2, r1
 8013460:	2a00      	cmp	r2, #0
 8013462:	f6bf aea5 	bge.w	80131b0 <_vfiprintf_r+0x1e4>
 8013466:	425b      	negs	r3, r3
 8013468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801346c:	222d      	movs	r2, #45	; 0x2d
 801346e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8013472:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8013476:	d001      	beq.n	801347c <_vfiprintf_r+0x4b0>
 8013478:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801347c:	2b0a      	cmp	r3, #10
 801347e:	f171 0200 	sbcs.w	r2, r1, #0
 8013482:	f080 82e2 	bcs.w	8013a4a <_vfiprintf_r+0xa7e>
 8013486:	3330      	adds	r3, #48	; 0x30
 8013488:	b2db      	uxtb	r3, r3
 801348a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 801348e:	4643      	mov	r3, r8
 8013490:	2b01      	cmp	r3, #1
 8013492:	bfb8      	it	lt
 8013494:	2301      	movlt	r3, #1
 8013496:	9301      	str	r3, [sp, #4]
 8013498:	2301      	movs	r3, #1
 801349a:	9305      	str	r3, [sp, #20]
 801349c:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 80134a0:	e02c      	b.n	80134fc <_vfiprintf_r+0x530>
 80134a2:	f04b 0210 	orr.w	r2, fp, #16
 80134a6:	f012 0120 	ands.w	r1, r2, #32
 80134aa:	f000 82bf 	beq.w	8013a2c <_vfiprintf_r+0xa60>
 80134ae:	9b07      	ldr	r3, [sp, #28]
 80134b0:	3307      	adds	r3, #7
 80134b2:	f023 0307 	bic.w	r3, r3, #7
 80134b6:	4618      	mov	r0, r3
 80134b8:	6859      	ldr	r1, [r3, #4]
 80134ba:	f850 3b08 	ldr.w	r3, [r0], #8
 80134be:	9007      	str	r0, [sp, #28]
 80134c0:	2000      	movs	r0, #0
 80134c2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80134c6:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
 80134ca:	f000 83cb 	beq.w	8013c64 <_vfiprintf_r+0xc98>
 80134ce:	ea53 0001 	orrs.w	r0, r3, r1
 80134d2:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
 80134d6:	d1d1      	bne.n	801347c <_vfiprintf_r+0x4b0>
 80134d8:	2001      	movs	r0, #1
 80134da:	f1b8 0f00 	cmp.w	r8, #0
 80134de:	d138      	bne.n	8013552 <_vfiprintf_r+0x586>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	f47f ae73 	bne.w	80131cc <_vfiprintf_r+0x200>
 80134e6:	f012 0201 	ands.w	r2, r2, #1
 80134ea:	9205      	str	r2, [sp, #20]
 80134ec:	f000 82fc 	beq.w	8013ae8 <_vfiprintf_r+0xb1c>
 80134f0:	2330      	movs	r3, #48	; 0x30
 80134f2:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 80134f6:	9201      	str	r2, [sp, #4]
 80134f8:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 80134fc:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8013500:	2b00      	cmp	r3, #0
 8013502:	f43f aed5 	beq.w	80132b0 <_vfiprintf_r+0x2e4>
 8013506:	9b01      	ldr	r3, [sp, #4]
 8013508:	3301      	adds	r3, #1
 801350a:	9301      	str	r3, [sp, #4]
 801350c:	e6d0      	b.n	80132b0 <_vfiprintf_r+0x2e4>
 801350e:	f04b 0210 	orr.w	r2, fp, #16
 8013512:	f012 0120 	ands.w	r1, r2, #32
 8013516:	f000 827a 	beq.w	8013a0e <_vfiprintf_r+0xa42>
 801351a:	9b07      	ldr	r3, [sp, #28]
 801351c:	3307      	adds	r3, #7
 801351e:	f023 0307 	bic.w	r3, r3, #7
 8013522:	4618      	mov	r0, r3
 8013524:	6859      	ldr	r1, [r3, #4]
 8013526:	f850 3b08 	ldr.w	r3, [r0], #8
 801352a:	9007      	str	r0, [sp, #28]
 801352c:	2000      	movs	r0, #0
 801352e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8013532:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
 8013536:	f422 6b80 	bic.w	fp, r2, #1024	; 0x400
 801353a:	d012      	beq.n	8013562 <_vfiprintf_r+0x596>
 801353c:	f422 6490 	bic.w	r4, r2, #1152	; 0x480
 8013540:	ea53 0201 	orrs.w	r2, r3, r1
 8013544:	f040 838c 	bne.w	8013c60 <_vfiprintf_r+0xc94>
 8013548:	465a      	mov	r2, fp
 801354a:	46a3      	mov	fp, r4
 801354c:	f1b8 0f00 	cmp.w	r8, #0
 8013550:	d0c6      	beq.n	80134e0 <_vfiprintf_r+0x514>
 8013552:	2801      	cmp	r0, #1
 8013554:	f000 83b5 	beq.w	8013cc2 <_vfiprintf_r+0xcf6>
 8013558:	2300      	movs	r3, #0
 801355a:	2802      	cmp	r0, #2
 801355c:	4619      	mov	r1, r3
 801355e:	f000 81dc 	beq.w	801391a <_vfiprintf_r+0x94e>
 8013562:	ac3c      	add	r4, sp, #240	; 0xf0
 8013564:	f003 0207 	and.w	r2, r3, #7
 8013568:	08db      	lsrs	r3, r3, #3
 801356a:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
 801356e:	08c9      	lsrs	r1, r1, #3
 8013570:	3230      	adds	r2, #48	; 0x30
 8013572:	ea53 0501 	orrs.w	r5, r3, r1
 8013576:	4620      	mov	r0, r4
 8013578:	f804 2d01 	strb.w	r2, [r4, #-1]!
 801357c:	d1f2      	bne.n	8013564 <_vfiprintf_r+0x598>
 801357e:	f01b 0f01 	tst.w	fp, #1
 8013582:	f000 81d8 	beq.w	8013936 <_vfiprintf_r+0x96a>
 8013586:	2a30      	cmp	r2, #48	; 0x30
 8013588:	f000 81d5 	beq.w	8013936 <_vfiprintf_r+0x96a>
 801358c:	2330      	movs	r3, #48	; 0x30
 801358e:	3802      	subs	r0, #2
 8013590:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013594:	ab3c      	add	r3, sp, #240	; 0xf0
 8013596:	1a1b      	subs	r3, r3, r0
 8013598:	4543      	cmp	r3, r8
 801359a:	9305      	str	r3, [sp, #20]
 801359c:	bfb8      	it	lt
 801359e:	4643      	movlt	r3, r8
 80135a0:	4604      	mov	r4, r0
 80135a2:	9301      	str	r3, [sp, #4]
 80135a4:	e7aa      	b.n	80134fc <_vfiprintf_r+0x530>
 80135a6:	f01b 0f20 	tst.w	fp, #32
 80135aa:	f000 82be 	beq.w	8013b2a <_vfiprintf_r+0xb5e>
 80135ae:	9b07      	ldr	r3, [sp, #28]
 80135b0:	9a03      	ldr	r2, [sp, #12]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	601a      	str	r2, [r3, #0]
 80135b6:	17d2      	asrs	r2, r2, #31
 80135b8:	605a      	str	r2, [r3, #4]
 80135ba:	9b07      	ldr	r3, [sp, #28]
 80135bc:	3304      	adds	r3, #4
 80135be:	9307      	str	r3, [sp, #28]
 80135c0:	e533      	b.n	801302a <_vfiprintf_r+0x5e>
 80135c2:	f899 2000 	ldrb.w	r2, [r9]
 80135c6:	2a6c      	cmp	r2, #108	; 0x6c
 80135c8:	bf03      	ittte	eq
 80135ca:	f899 2001 	ldrbeq.w	r2, [r9, #1]
 80135ce:	f04b 0b20 	orreq.w	fp, fp, #32
 80135d2:	f109 0901 	addeq.w	r9, r9, #1
 80135d6:	f04b 0b10 	orrne.w	fp, fp, #16
 80135da:	e548      	b.n	801306e <_vfiprintf_r+0xa2>
 80135dc:	f899 2000 	ldrb.w	r2, [r9]
 80135e0:	2a68      	cmp	r2, #104	; 0x68
 80135e2:	bf03      	ittte	eq
 80135e4:	f899 2001 	ldrbeq.w	r2, [r9, #1]
 80135e8:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80135ec:	f109 0901 	addeq.w	r9, r9, #1
 80135f0:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80135f4:	e53b      	b.n	801306e <_vfiprintf_r+0xa2>
 80135f6:	f899 2000 	ldrb.w	r2, [r9]
 80135fa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80135fe:	e536      	b.n	801306e <_vfiprintf_r+0xa2>
 8013600:	4649      	mov	r1, r9
 8013602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013606:	2a2a      	cmp	r2, #42	; 0x2a
 8013608:	f000 839e 	beq.w	8013d48 <_vfiprintf_r+0xd7c>
 801360c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013610:	2b09      	cmp	r3, #9
 8013612:	4689      	mov	r9, r1
 8013614:	f04f 0800 	mov.w	r8, #0
 8013618:	f63f ad2b 	bhi.w	8013072 <_vfiprintf_r+0xa6>
 801361c:	f819 2b01 	ldrb.w	r2, [r9], #1
 8013620:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8013624:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8013628:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801362c:	2b09      	cmp	r3, #9
 801362e:	d9f5      	bls.n	801361c <_vfiprintf_r+0x650>
 8013630:	e51f      	b.n	8013072 <_vfiprintf_r+0xa6>
 8013632:	232b      	movs	r3, #43	; 0x2b
 8013634:	f899 2000 	ldrb.w	r2, [r9]
 8013638:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801363c:	e517      	b.n	801306e <_vfiprintf_r+0xa2>
 801363e:	9b07      	ldr	r3, [sp, #28]
 8013640:	f853 2b04 	ldr.w	r2, [r3], #4
 8013644:	9202      	str	r2, [sp, #8]
 8013646:	2a00      	cmp	r2, #0
 8013648:	f6ff adea 	blt.w	8013220 <_vfiprintf_r+0x254>
 801364c:	f899 2000 	ldrb.w	r2, [r9]
 8013650:	9307      	str	r3, [sp, #28]
 8013652:	e50c      	b.n	801306e <_vfiprintf_r+0xa2>
 8013654:	f899 2000 	ldrb.w	r2, [r9]
 8013658:	f04b 0b01 	orr.w	fp, fp, #1
 801365c:	e507      	b.n	801306e <_vfiprintf_r+0xa2>
 801365e:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8013662:	f899 2000 	ldrb.w	r2, [r9]
 8013666:	2b00      	cmp	r3, #0
 8013668:	f47f ad01 	bne.w	801306e <_vfiprintf_r+0xa2>
 801366c:	2320      	movs	r3, #32
 801366e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8013672:	e4fc      	b.n	801306e <_vfiprintf_r+0xa2>
 8013674:	9a07      	ldr	r2, [sp, #28]
 8013676:	f852 3b04 	ldr.w	r3, [r2], #4
 801367a:	9207      	str	r2, [sp, #28]
 801367c:	f647 0230 	movw	r2, #30768	; 0x7830
 8013680:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8013684:	4ab6      	ldr	r2, [pc, #728]	; (8013960 <_vfiprintf_r+0x994>)
 8013686:	9209      	str	r2, [sp, #36]	; 0x24
 8013688:	f04b 0b02 	orr.w	fp, fp, #2
 801368c:	2100      	movs	r1, #0
 801368e:	f04f 0200 	mov.w	r2, #0
 8013692:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8013696:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801369a:	f000 813e 	beq.w	801391a <_vfiprintf_r+0x94e>
 801369e:	ea53 0201 	orrs.w	r2, r3, r1
 80136a2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
 80136a6:	f040 8137 	bne.w	8013918 <_vfiprintf_r+0x94c>
 80136aa:	465a      	mov	r2, fp
 80136ac:	4683      	mov	fp, r0
 80136ae:	2002      	movs	r0, #2
 80136b0:	e713      	b.n	80134da <_vfiprintf_r+0x50e>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	f040 828a 	bne.w	8013bcc <_vfiprintf_r+0xc00>
 80136b8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80136bc:	2101      	movs	r1, #1
 80136be:	2a00      	cmp	r2, #0
 80136c0:	f000 8280 	beq.w	8013bc4 <_vfiprintf_r+0xbf8>
 80136c4:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 80136c8:	9114      	str	r1, [sp, #80]	; 0x50
 80136ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80136cc:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 80136d0:	4608      	mov	r0, r1
 80136d2:	460a      	mov	r2, r1
 80136d4:	f10a 0a08 	add.w	sl, sl, #8
 80136d8:	3101      	adds	r1, #1
 80136da:	2e00      	cmp	r6, #0
 80136dc:	f43f ae29 	beq.w	8013332 <_vfiprintf_r+0x366>
 80136e0:	ab0f      	add	r3, sp, #60	; 0x3c
 80136e2:	3002      	adds	r0, #2
 80136e4:	f8ca 3000 	str.w	r3, [sl]
 80136e8:	2907      	cmp	r1, #7
 80136ea:	f04f 0302 	mov.w	r3, #2
 80136ee:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
 80136f2:	f8ca 3004 	str.w	r3, [sl, #4]
 80136f6:	f77f ae18 	ble.w	801332a <_vfiprintf_r+0x35e>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	f040 817b 	bne.w	80139f6 <_vfiprintf_r+0xa2a>
 8013700:	9b08      	ldr	r3, [sp, #32]
 8013702:	2200      	movs	r2, #0
 8013704:	2b80      	cmp	r3, #128	; 0x80
 8013706:	f04f 0101 	mov.w	r1, #1
 801370a:	4610      	mov	r0, r2
 801370c:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8013710:	f47f ae13 	bne.w	801333a <_vfiprintf_r+0x36e>
 8013714:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 8013718:	1b5f      	subs	r7, r3, r5
 801371a:	2f00      	cmp	r7, #0
 801371c:	f77f ae0d 	ble.w	801333a <_vfiprintf_r+0x36e>
 8013720:	2f10      	cmp	r7, #16
 8013722:	f340 82f0 	ble.w	8013d06 <_vfiprintf_r+0xd3a>
 8013726:	46d6      	mov	lr, sl
 8013728:	4d8e      	ldr	r5, [pc, #568]	; (8013964 <_vfiprintf_r+0x998>)
 801372a:	46ca      	mov	sl, r9
 801372c:	2600      	movs	r6, #0
 801372e:	46c1      	mov	r9, r8
 8013730:	46a0      	mov	r8, r4
 8013732:	9c06      	ldr	r4, [sp, #24]
 8013734:	e007      	b.n	8013746 <_vfiprintf_r+0x77a>
 8013736:	3f10      	subs	r7, #16
 8013738:	2f10      	cmp	r7, #16
 801373a:	f102 0c02 	add.w	ip, r2, #2
 801373e:	f10e 0e08 	add.w	lr, lr, #8
 8013742:	460a      	mov	r2, r1
 8013744:	dd17      	ble.n	8013776 <_vfiprintf_r+0x7aa>
 8013746:	1c51      	adds	r1, r2, #1
 8013748:	3010      	adds	r0, #16
 801374a:	2310      	movs	r3, #16
 801374c:	2907      	cmp	r1, #7
 801374e:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
 8013752:	f8ce 5000 	str.w	r5, [lr]
 8013756:	f8ce 3004 	str.w	r3, [lr, #4]
 801375a:	ddec      	ble.n	8013736 <_vfiprintf_r+0x76a>
 801375c:	aa10      	add	r2, sp, #64	; 0x40
 801375e:	2800      	cmp	r0, #0
 8013760:	f040 80b9 	bne.w	80138d6 <_vfiprintf_r+0x90a>
 8013764:	3f10      	subs	r7, #16
 8013766:	2200      	movs	r2, #0
 8013768:	2f10      	cmp	r7, #16
 801376a:	f04f 0c01 	mov.w	ip, #1
 801376e:	4610      	mov	r0, r2
 8013770:	f10d 0e4c 	add.w	lr, sp, #76	; 0x4c
 8013774:	dce7      	bgt.n	8013746 <_vfiprintf_r+0x77a>
 8013776:	4644      	mov	r4, r8
 8013778:	46c8      	mov	r8, r9
 801377a:	46d1      	mov	r9, sl
 801377c:	46f2      	mov	sl, lr
 801377e:	4438      	add	r0, r7
 8013780:	f1bc 0f07 	cmp.w	ip, #7
 8013784:	e9ca 5700 	strd	r5, r7, [sl]
 8013788:	e9cd c011 	strd	ip, r0, [sp, #68]	; 0x44
 801378c:	f300 81b0 	bgt.w	8013af0 <_vfiprintf_r+0xb24>
 8013790:	9b05      	ldr	r3, [sp, #20]
 8013792:	eba8 0703 	sub.w	r7, r8, r3
 8013796:	2f00      	cmp	r7, #0
 8013798:	f10a 0a08 	add.w	sl, sl, #8
 801379c:	f10c 0101 	add.w	r1, ip, #1
 80137a0:	4662      	mov	r2, ip
 80137a2:	f77f add0 	ble.w	8013346 <_vfiprintf_r+0x37a>
 80137a6:	4d6f      	ldr	r5, [pc, #444]	; (8013964 <_vfiprintf_r+0x998>)
 80137a8:	2f10      	cmp	r7, #16
 80137aa:	dd2a      	ble.n	8013802 <_vfiprintf_r+0x836>
 80137ac:	462b      	mov	r3, r5
 80137ae:	46d4      	mov	ip, sl
 80137b0:	4625      	mov	r5, r4
 80137b2:	9e06      	ldr	r6, [sp, #24]
 80137b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80137b8:	f04f 0810 	mov.w	r8, #16
 80137bc:	461c      	mov	r4, r3
 80137be:	e007      	b.n	80137d0 <_vfiprintf_r+0x804>
 80137c0:	3f10      	subs	r7, #16
 80137c2:	2f10      	cmp	r7, #16
 80137c4:	f102 0102 	add.w	r1, r2, #2
 80137c8:	f10c 0c08 	add.w	ip, ip, #8
 80137cc:	461a      	mov	r2, r3
 80137ce:	dd14      	ble.n	80137fa <_vfiprintf_r+0x82e>
 80137d0:	1c53      	adds	r3, r2, #1
 80137d2:	3010      	adds	r0, #16
 80137d4:	2b07      	cmp	r3, #7
 80137d6:	e9cc 4800 	strd	r4, r8, [ip]
 80137da:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
 80137de:	ddef      	ble.n	80137c0 <_vfiprintf_r+0x7f4>
 80137e0:	aa10      	add	r2, sp, #64	; 0x40
 80137e2:	2800      	cmp	r0, #0
 80137e4:	f040 8081 	bne.w	80138ea <_vfiprintf_r+0x91e>
 80137e8:	3f10      	subs	r7, #16
 80137ea:	2200      	movs	r2, #0
 80137ec:	2f10      	cmp	r7, #16
 80137ee:	f04f 0101 	mov.w	r1, #1
 80137f2:	4610      	mov	r0, r2
 80137f4:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 80137f8:	dcea      	bgt.n	80137d0 <_vfiprintf_r+0x804>
 80137fa:	4623      	mov	r3, r4
 80137fc:	46e2      	mov	sl, ip
 80137fe:	462c      	mov	r4, r5
 8013800:	461d      	mov	r5, r3
 8013802:	4438      	add	r0, r7
 8013804:	2907      	cmp	r1, #7
 8013806:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
 801380a:	f8ca 5000 	str.w	r5, [sl]
 801380e:	f8ca 7004 	str.w	r7, [sl, #4]
 8013812:	dc03      	bgt.n	801381c <_vfiprintf_r+0x850>
 8013814:	f10a 0a08 	add.w	sl, sl, #8
 8013818:	3101      	adds	r1, #1
 801381a:	e594      	b.n	8013346 <_vfiprintf_r+0x37a>
 801381c:	b150      	cbz	r0, 8013834 <_vfiprintf_r+0x868>
 801381e:	9904      	ldr	r1, [sp, #16]
 8013820:	9806      	ldr	r0, [sp, #24]
 8013822:	aa10      	add	r2, sp, #64	; 0x40
 8013824:	f000 fb7e 	bl	8013f24 <__sfvwrite_r>
 8013828:	2300      	movs	r3, #0
 801382a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 801382e:	2800      	cmp	r0, #0
 8013830:	f47f ad22 	bne.w	8013278 <_vfiprintf_r+0x2ac>
 8013834:	9805      	ldr	r0, [sp, #20]
 8013836:	9413      	str	r4, [sp, #76]	; 0x4c
 8013838:	2301      	movs	r3, #1
 801383a:	9014      	str	r0, [sp, #80]	; 0x50
 801383c:	9012      	str	r0, [sp, #72]	; 0x48
 801383e:	9311      	str	r3, [sp, #68]	; 0x44
 8013840:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8013844:	f01b 0f04 	tst.w	fp, #4
 8013848:	f43f ad99 	beq.w	801337e <_vfiprintf_r+0x3b2>
 801384c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013850:	1a9c      	subs	r4, r3, r2
 8013852:	2c00      	cmp	r4, #0
 8013854:	f10a 0a08 	add.w	sl, sl, #8
 8013858:	f77f ad91 	ble.w	801337e <_vfiprintf_r+0x3b2>
 801385c:	2c10      	cmp	r4, #16
 801385e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013860:	f340 824e 	ble.w	8013d00 <_vfiprintf_r+0xd34>
 8013864:	4f40      	ldr	r7, [pc, #256]	; (8013968 <_vfiprintf_r+0x99c>)
 8013866:	9e06      	ldr	r6, [sp, #24]
 8013868:	f8dd b010 	ldr.w	fp, [sp, #16]
 801386c:	2510      	movs	r5, #16
 801386e:	f04f 0800 	mov.w	r8, #0
 8013872:	e007      	b.n	8013884 <_vfiprintf_r+0x8b8>
 8013874:	3c10      	subs	r4, #16
 8013876:	2c10      	cmp	r4, #16
 8013878:	f102 0102 	add.w	r1, r2, #2
 801387c:	f10a 0a08 	add.w	sl, sl, #8
 8013880:	461a      	mov	r2, r3
 8013882:	dd14      	ble.n	80138ae <_vfiprintf_r+0x8e2>
 8013884:	1c53      	adds	r3, r2, #1
 8013886:	3010      	adds	r0, #16
 8013888:	2b07      	cmp	r3, #7
 801388a:	e9ca 7500 	strd	r7, r5, [sl]
 801388e:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
 8013892:	ddef      	ble.n	8013874 <_vfiprintf_r+0x8a8>
 8013894:	aa10      	add	r2, sp, #64	; 0x40
 8013896:	2800      	cmp	r0, #0
 8013898:	f040 80a3 	bne.w	80139e2 <_vfiprintf_r+0xa16>
 801389c:	3c10      	subs	r4, #16
 801389e:	2200      	movs	r2, #0
 80138a0:	2c10      	cmp	r4, #16
 80138a2:	f04f 0101 	mov.w	r1, #1
 80138a6:	4610      	mov	r0, r2
 80138a8:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 80138ac:	dcea      	bgt.n	8013884 <_vfiprintf_r+0x8b8>
 80138ae:	4420      	add	r0, r4
 80138b0:	2907      	cmp	r1, #7
 80138b2:	e9ca 7400 	strd	r7, r4, [sl]
 80138b6:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
 80138ba:	f77f ad60 	ble.w	801337e <_vfiprintf_r+0x3b2>
 80138be:	2800      	cmp	r0, #0
 80138c0:	f040 8196 	bne.w	8013bf0 <_vfiprintf_r+0xc24>
 80138c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80138c8:	9901      	ldr	r1, [sp, #4]
 80138ca:	428a      	cmp	r2, r1
 80138cc:	bfac      	ite	ge
 80138ce:	189b      	addge	r3, r3, r2
 80138d0:	185b      	addlt	r3, r3, r1
 80138d2:	9303      	str	r3, [sp, #12]
 80138d4:	e567      	b.n	80133a6 <_vfiprintf_r+0x3da>
 80138d6:	9904      	ldr	r1, [sp, #16]
 80138d8:	4620      	mov	r0, r4
 80138da:	f000 fb23 	bl	8013f24 <__sfvwrite_r>
 80138de:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
 80138e2:	2800      	cmp	r0, #0
 80138e4:	f43f af3e 	beq.w	8013764 <_vfiprintf_r+0x798>
 80138e8:	e4c6      	b.n	8013278 <_vfiprintf_r+0x2ac>
 80138ea:	4651      	mov	r1, sl
 80138ec:	4630      	mov	r0, r6
 80138ee:	f000 fb19 	bl	8013f24 <__sfvwrite_r>
 80138f2:	2300      	movs	r3, #0
 80138f4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80138f8:	2800      	cmp	r0, #0
 80138fa:	f43f af75 	beq.w	80137e8 <_vfiprintf_r+0x81c>
 80138fe:	e4bb      	b.n	8013278 <_vfiprintf_r+0x2ac>
 8013900:	9904      	ldr	r1, [sp, #16]
 8013902:	9806      	ldr	r0, [sp, #24]
 8013904:	aa10      	add	r2, sp, #64	; 0x40
 8013906:	f000 fb0d 	bl	8013f24 <__sfvwrite_r>
 801390a:	2300      	movs	r3, #0
 801390c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8013910:	2800      	cmp	r0, #0
 8013912:	f43f ad27 	beq.w	8013364 <_vfiprintf_r+0x398>
 8013916:	e4af      	b.n	8013278 <_vfiprintf_r+0x2ac>
 8013918:	4683      	mov	fp, r0
 801391a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801391c:	ac3c      	add	r4, sp, #240	; 0xf0
 801391e:	f003 020f 	and.w	r2, r3, #15
 8013922:	091b      	lsrs	r3, r3, #4
 8013924:	5c82      	ldrb	r2, [r0, r2]
 8013926:	f804 2d01 	strb.w	r2, [r4, #-1]!
 801392a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 801392e:	0909      	lsrs	r1, r1, #4
 8013930:	ea53 0201 	orrs.w	r2, r3, r1
 8013934:	d1f3      	bne.n	801391e <_vfiprintf_r+0x952>
 8013936:	ab3c      	add	r3, sp, #240	; 0xf0
 8013938:	1b1b      	subs	r3, r3, r4
 801393a:	4543      	cmp	r3, r8
 801393c:	9305      	str	r3, [sp, #20]
 801393e:	bfb8      	it	lt
 8013940:	4643      	movlt	r3, r8
 8013942:	9301      	str	r3, [sp, #4]
 8013944:	e5da      	b.n	80134fc <_vfiprintf_r+0x530>
 8013946:	2d10      	cmp	r5, #16
 8013948:	f340 81ca 	ble.w	8013ce0 <_vfiprintf_r+0xd14>
 801394c:	960d      	str	r6, [sp, #52]	; 0x34
 801394e:	46d4      	mov	ip, sl
 8013950:	4f05      	ldr	r7, [pc, #20]	; (8013968 <_vfiprintf_r+0x99c>)
 8013952:	9e04      	ldr	r6, [sp, #16]
 8013954:	46ca      	mov	sl, r9
 8013956:	2310      	movs	r3, #16
 8013958:	46c1      	mov	r9, r8
 801395a:	46a0      	mov	r8, r4
 801395c:	9c08      	ldr	r4, [sp, #32]
 801395e:	e00e      	b.n	801397e <_vfiprintf_r+0x9b2>
 8013960:	0801b3fc 	.word	0x0801b3fc
 8013964:	0801b550 	.word	0x0801b550
 8013968:	0801b560 	.word	0x0801b560
 801396c:	3d10      	subs	r5, #16
 801396e:	2d10      	cmp	r5, #16
 8013970:	f102 0e02 	add.w	lr, r2, #2
 8013974:	f10c 0c08 	add.w	ip, ip, #8
 8013978:	460a      	mov	r2, r1
 801397a:	dd13      	ble.n	80139a4 <_vfiprintf_r+0x9d8>
 801397c:	1c51      	adds	r1, r2, #1
 801397e:	3010      	adds	r0, #16
 8013980:	2907      	cmp	r1, #7
 8013982:	e9cc 7300 	strd	r7, r3, [ip]
 8013986:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
 801398a:	ddef      	ble.n	801396c <_vfiprintf_r+0x9a0>
 801398c:	aa10      	add	r2, sp, #64	; 0x40
 801398e:	4631      	mov	r1, r6
 8013990:	b9f0      	cbnz	r0, 80139d0 <_vfiprintf_r+0xa04>
 8013992:	3d10      	subs	r5, #16
 8013994:	2200      	movs	r2, #0
 8013996:	2d10      	cmp	r5, #16
 8013998:	f04f 0e01 	mov.w	lr, #1
 801399c:	4610      	mov	r0, r2
 801399e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 80139a2:	dceb      	bgt.n	801397c <_vfiprintf_r+0x9b0>
 80139a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80139a6:	4644      	mov	r4, r8
 80139a8:	46c8      	mov	r8, r9
 80139aa:	46d1      	mov	r9, sl
 80139ac:	46e2      	mov	sl, ip
 80139ae:	4428      	add	r0, r5
 80139b0:	f1be 0f07 	cmp.w	lr, #7
 80139b4:	e9cd e011 	strd	lr, r0, [sp, #68]	; 0x44
 80139b8:	f8ca 7000 	str.w	r7, [sl]
 80139bc:	f8ca 5004 	str.w	r5, [sl, #4]
 80139c0:	f73f ae77 	bgt.w	80136b2 <_vfiprintf_r+0x6e6>
 80139c4:	f10a 0a08 	add.w	sl, sl, #8
 80139c8:	f10e 0101 	add.w	r1, lr, #1
 80139cc:	4672      	mov	r2, lr
 80139ce:	e484      	b.n	80132da <_vfiprintf_r+0x30e>
 80139d0:	9806      	ldr	r0, [sp, #24]
 80139d2:	f000 faa7 	bl	8013f24 <__sfvwrite_r>
 80139d6:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80139da:	2310      	movs	r3, #16
 80139dc:	2800      	cmp	r0, #0
 80139de:	d0d8      	beq.n	8013992 <_vfiprintf_r+0x9c6>
 80139e0:	e44a      	b.n	8013278 <_vfiprintf_r+0x2ac>
 80139e2:	4659      	mov	r1, fp
 80139e4:	4630      	mov	r0, r6
 80139e6:	f000 fa9d 	bl	8013f24 <__sfvwrite_r>
 80139ea:	e9cd 8811 	strd	r8, r8, [sp, #68]	; 0x44
 80139ee:	2800      	cmp	r0, #0
 80139f0:	f43f af54 	beq.w	801389c <_vfiprintf_r+0x8d0>
 80139f4:	e440      	b.n	8013278 <_vfiprintf_r+0x2ac>
 80139f6:	9904      	ldr	r1, [sp, #16]
 80139f8:	9806      	ldr	r0, [sp, #24]
 80139fa:	aa10      	add	r2, sp, #64	; 0x40
 80139fc:	f000 fa92 	bl	8013f24 <__sfvwrite_r>
 8013a00:	2300      	movs	r3, #0
 8013a02:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8013a06:	2800      	cmp	r0, #0
 8013a08:	f43f ae7a 	beq.w	8013700 <_vfiprintf_r+0x734>
 8013a0c:	e434      	b.n	8013278 <_vfiprintf_r+0x2ac>
 8013a0e:	9807      	ldr	r0, [sp, #28]
 8013a10:	f850 3b04 	ldr.w	r3, [r0], #4
 8013a14:	9007      	str	r0, [sp, #28]
 8013a16:	f012 0010 	ands.w	r0, r2, #16
 8013a1a:	f47f ad87 	bne.w	801352c <_vfiprintf_r+0x560>
 8013a1e:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8013a22:	f000 8136 	beq.w	8013c92 <_vfiprintf_r+0xcc6>
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	4601      	mov	r1, r0
 8013a2a:	e57f      	b.n	801352c <_vfiprintf_r+0x560>
 8013a2c:	9807      	ldr	r0, [sp, #28]
 8013a2e:	f850 3b04 	ldr.w	r3, [r0], #4
 8013a32:	9007      	str	r0, [sp, #28]
 8013a34:	f012 0010 	ands.w	r0, r2, #16
 8013a38:	f47f ad42 	bne.w	80134c0 <_vfiprintf_r+0x4f4>
 8013a3c:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8013a40:	f000 812d 	beq.w	8013c9e <_vfiprintf_r+0xcd2>
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	4601      	mov	r1, r0
 8013a48:	e53a      	b.n	80134c0 <_vfiprintf_r+0x4f4>
 8013a4a:	f8cd 8014 	str.w	r8, [sp, #20]
 8013a4e:	4fb8      	ldr	r7, [pc, #736]	; (8013d30 <_vfiprintf_r+0xd64>)
 8013a50:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8013a54:	f8cd b004 	str.w	fp, [sp, #4]
 8013a58:	f40b 6680 	and.w	r6, fp, #1024	; 0x400
 8013a5c:	f04f 0c00 	mov.w	ip, #0
 8013a60:	ac3c      	add	r4, sp, #240	; 0xf0
 8013a62:	e005      	b.n	8013a70 <_vfiprintf_r+0xaa4>
 8013a64:	2b0a      	cmp	r3, #10
 8013a66:	f171 0100 	sbcs.w	r1, r1, #0
 8013a6a:	d336      	bcc.n	8013ada <_vfiprintf_r+0xb0e>
 8013a6c:	465b      	mov	r3, fp
 8013a6e:	4629      	mov	r1, r5
 8013a70:	185a      	adds	r2, r3, r1
 8013a72:	f142 0200 	adc.w	r2, r2, #0
 8013a76:	fba7 0502 	umull	r0, r5, r7, r2
 8013a7a:	f025 0003 	bic.w	r0, r5, #3
 8013a7e:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8013a82:	1a12      	subs	r2, r2, r0
 8013a84:	1a98      	subs	r0, r3, r2
 8013a86:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
 8013a8a:	f161 0e00 	sbc.w	lr, r1, #0
 8013a8e:	fb05 f500 	mul.w	r5, r5, r0
 8013a92:	fb07 550e 	mla	r5, r7, lr, r5
 8013a96:	fba0 b007 	umull	fp, r0, r0, r7
 8013a9a:	4405      	add	r5, r0
 8013a9c:	f00b 0e01 	and.w	lr, fp, #1
 8013aa0:	2005      	movs	r0, #5
 8013aa2:	fbae 0e00 	umull	r0, lr, lr, r0
 8013aa6:	1880      	adds	r0, r0, r2
 8013aa8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8013aac:	3030      	adds	r0, #48	; 0x30
 8013aae:	f804 0c01 	strb.w	r0, [r4, #-1]
 8013ab2:	ea4b 7bc5 	orr.w	fp, fp, r5, lsl #31
 8013ab6:	f10c 0c01 	add.w	ip, ip, #1
 8013aba:	3c01      	subs	r4, #1
 8013abc:	086d      	lsrs	r5, r5, #1
 8013abe:	2e00      	cmp	r6, #0
 8013ac0:	d0d0      	beq.n	8013a64 <_vfiprintf_r+0xa98>
 8013ac2:	f898 2000 	ldrb.w	r2, [r8]
 8013ac6:	4562      	cmp	r2, ip
 8013ac8:	d1cc      	bne.n	8013a64 <_vfiprintf_r+0xa98>
 8013aca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8013ace:	d0c9      	beq.n	8013a64 <_vfiprintf_r+0xa98>
 8013ad0:	2b0a      	cmp	r3, #10
 8013ad2:	f171 0100 	sbcs.w	r1, r1, #0
 8013ad6:	f080 80b4 	bcs.w	8013c42 <_vfiprintf_r+0xc76>
 8013ada:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013ade:	f8dd b004 	ldr.w	fp, [sp, #4]
 8013ae2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013ae6:	e726      	b.n	8013936 <_vfiprintf_r+0x96a>
 8013ae8:	f8cd 8004 	str.w	r8, [sp, #4]
 8013aec:	ac3c      	add	r4, sp, #240	; 0xf0
 8013aee:	e505      	b.n	80134fc <_vfiprintf_r+0x530>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	f040 8094 	bne.w	8013c1e <_vfiprintf_r+0xc52>
 8013af6:	9b05      	ldr	r3, [sp, #20]
 8013af8:	eba8 0703 	sub.w	r7, r8, r3
 8013afc:	2f00      	cmp	r7, #0
 8013afe:	f77f ae99 	ble.w	8013834 <_vfiprintf_r+0x868>
 8013b02:	2000      	movs	r0, #0
 8013b04:	4602      	mov	r2, r0
 8013b06:	2101      	movs	r1, #1
 8013b08:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8013b0c:	e64c      	b.n	80137a8 <_vfiprintf_r+0x7dc>
 8013b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b10:	f899 2000 	ldrb.w	r2, [r9]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	f43f aaaa 	beq.w	801306e <_vfiprintf_r+0xa2>
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f43f aaa6 	beq.w	801306e <_vfiprintf_r+0xa2>
 8013b22:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8013b26:	f7ff baa2 	b.w	801306e <_vfiprintf_r+0xa2>
 8013b2a:	f01b 0f10 	tst.w	fp, #16
 8013b2e:	f040 809b 	bne.w	8013c68 <_vfiprintf_r+0xc9c>
 8013b32:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8013b36:	f040 80bf 	bne.w	8013cb8 <_vfiprintf_r+0xcec>
 8013b3a:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8013b3e:	f000 8093 	beq.w	8013c68 <_vfiprintf_r+0xc9c>
 8013b42:	9b07      	ldr	r3, [sp, #28]
 8013b44:	9a03      	ldr	r2, [sp, #12]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	701a      	strb	r2, [r3, #0]
 8013b4a:	e536      	b.n	80135ba <_vfiprintf_r+0x5ee>
 8013b4c:	465a      	mov	r2, fp
 8013b4e:	e4aa      	b.n	80134a6 <_vfiprintf_r+0x4da>
 8013b50:	465a      	mov	r2, fp
 8013b52:	e4de      	b.n	8013512 <_vfiprintf_r+0x546>
 8013b54:	9d04      	ldr	r5, [sp, #16]
 8013b56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b58:	f002 fb62 	bl	8016220 <__retarget_lock_acquire_recursive>
 8013b5c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8013b60:	f7ff ba4a 	b.w	8012ff8 <_vfiprintf_r+0x2c>
 8013b64:	4b73      	ldr	r3, [pc, #460]	; (8013d34 <_vfiprintf_r+0xd68>)
 8013b66:	9309      	str	r3, [sp, #36]	; 0x24
 8013b68:	f01b 0120 	ands.w	r1, fp, #32
 8013b6c:	d01d      	beq.n	8013baa <_vfiprintf_r+0xbde>
 8013b6e:	9b07      	ldr	r3, [sp, #28]
 8013b70:	3307      	adds	r3, #7
 8013b72:	f023 0307 	bic.w	r3, r3, #7
 8013b76:	4618      	mov	r0, r3
 8013b78:	6859      	ldr	r1, [r3, #4]
 8013b7a:	f850 3b08 	ldr.w	r3, [r0], #8
 8013b7e:	9007      	str	r0, [sp, #28]
 8013b80:	f01b 0f01 	tst.w	fp, #1
 8013b84:	d009      	beq.n	8013b9a <_vfiprintf_r+0xbce>
 8013b86:	ea53 0001 	orrs.w	r0, r3, r1
 8013b8a:	d006      	beq.n	8013b9a <_vfiprintf_r+0xbce>
 8013b8c:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
 8013b90:	2230      	movs	r2, #48	; 0x30
 8013b92:	f04b 0b02 	orr.w	fp, fp, #2
 8013b96:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 8013b9a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8013b9e:	e576      	b.n	801368e <_vfiprintf_r+0x6c2>
 8013ba0:	4b65      	ldr	r3, [pc, #404]	; (8013d38 <_vfiprintf_r+0xd6c>)
 8013ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ba4:	f01b 0120 	ands.w	r1, fp, #32
 8013ba8:	d1e1      	bne.n	8013b6e <_vfiprintf_r+0xba2>
 8013baa:	9807      	ldr	r0, [sp, #28]
 8013bac:	f850 3b04 	ldr.w	r3, [r0], #4
 8013bb0:	9007      	str	r0, [sp, #28]
 8013bb2:	f01b 0010 	ands.w	r0, fp, #16
 8013bb6:	d1e3      	bne.n	8013b80 <_vfiprintf_r+0xbb4>
 8013bb8:	f01b 0440 	ands.w	r4, fp, #64	; 0x40
 8013bbc:	d063      	beq.n	8013c86 <_vfiprintf_r+0xcba>
 8013bbe:	b29b      	uxth	r3, r3
 8013bc0:	4601      	mov	r1, r0
 8013bc2:	e7dd      	b.n	8013b80 <_vfiprintf_r+0xbb4>
 8013bc4:	4610      	mov	r0, r2
 8013bc6:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 8013bca:	e586      	b.n	80136da <_vfiprintf_r+0x70e>
 8013bcc:	aa10      	add	r2, sp, #64	; 0x40
 8013bce:	9904      	ldr	r1, [sp, #16]
 8013bd0:	9806      	ldr	r0, [sp, #24]
 8013bd2:	f000 f9a7 	bl	8013f24 <__sfvwrite_r>
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	f47f ab4b 	bne.w	8013278 <_vfiprintf_r+0x2ac>
 8013be2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8013be6:	2101      	movs	r1, #1
 8013be8:	2a00      	cmp	r2, #0
 8013bea:	f47f ad6b 	bne.w	80136c4 <_vfiprintf_r+0x6f8>
 8013bee:	e7e9      	b.n	8013bc4 <_vfiprintf_r+0xbf8>
 8013bf0:	9904      	ldr	r1, [sp, #16]
 8013bf2:	9806      	ldr	r0, [sp, #24]
 8013bf4:	aa10      	add	r2, sp, #64	; 0x40
 8013bf6:	f000 f995 	bl	8013f24 <__sfvwrite_r>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8013c00:	2800      	cmp	r0, #0
 8013c02:	f43f ae5f 	beq.w	80138c4 <_vfiprintf_r+0x8f8>
 8013c06:	f7ff bb37 	b.w	8013278 <_vfiprintf_r+0x2ac>
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	9507      	str	r5, [sp, #28]
 8013c0e:	f7ec fad7 	bl	80001c0 <strlen>
 8013c12:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8013c16:	46b0      	mov	r8, r6
 8013c18:	9005      	str	r0, [sp, #20]
 8013c1a:	9301      	str	r3, [sp, #4]
 8013c1c:	e46e      	b.n	80134fc <_vfiprintf_r+0x530>
 8013c1e:	9904      	ldr	r1, [sp, #16]
 8013c20:	9806      	ldr	r0, [sp, #24]
 8013c22:	aa10      	add	r2, sp, #64	; 0x40
 8013c24:	f000 f97e 	bl	8013f24 <__sfvwrite_r>
 8013c28:	2300      	movs	r3, #0
 8013c2a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	f47f ab22 	bne.w	8013278 <_vfiprintf_r+0x2ac>
 8013c34:	9b05      	ldr	r3, [sp, #20]
 8013c36:	eba8 0703 	sub.w	r7, r8, r3
 8013c3a:	2f00      	cmp	r7, #0
 8013c3c:	f77f adfa 	ble.w	8013834 <_vfiprintf_r+0x868>
 8013c40:	e75f      	b.n	8013b02 <_vfiprintf_r+0xb36>
 8013c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c46:	1ae4      	subs	r4, r4, r3
 8013c48:	461a      	mov	r2, r3
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f7fd fcfc 	bl	8011648 <strncpy>
 8013c50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013c54:	b10b      	cbz	r3, 8013c5a <_vfiprintf_r+0xc8e>
 8013c56:	f108 0801 	add.w	r8, r8, #1
 8013c5a:	f04f 0c00 	mov.w	ip, #0
 8013c5e:	e705      	b.n	8013a6c <_vfiprintf_r+0xaa0>
 8013c60:	46a3      	mov	fp, r4
 8013c62:	e47e      	b.n	8013562 <_vfiprintf_r+0x596>
 8013c64:	4693      	mov	fp, r2
 8013c66:	e409      	b.n	801347c <_vfiprintf_r+0x4b0>
 8013c68:	9b07      	ldr	r3, [sp, #28]
 8013c6a:	9a03      	ldr	r2, [sp, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	601a      	str	r2, [r3, #0]
 8013c70:	e4a3      	b.n	80135ba <_vfiprintf_r+0x5ee>
 8013c72:	4643      	mov	r3, r8
 8013c74:	2b06      	cmp	r3, #6
 8013c76:	bf28      	it	cs
 8013c78:	2306      	movcs	r3, #6
 8013c7a:	4c30      	ldr	r4, [pc, #192]	; (8013d3c <_vfiprintf_r+0xd70>)
 8013c7c:	9305      	str	r3, [sp, #20]
 8013c7e:	9507      	str	r5, [sp, #28]
 8013c80:	9301      	str	r3, [sp, #4]
 8013c82:	f7ff bb13 	b.w	80132ac <_vfiprintf_r+0x2e0>
 8013c86:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
 8013c8a:	bf1c      	itt	ne
 8013c8c:	b2db      	uxtbne	r3, r3
 8013c8e:	4621      	movne	r1, r4
 8013c90:	e776      	b.n	8013b80 <_vfiprintf_r+0xbb4>
 8013c92:	f412 7100 	ands.w	r1, r2, #512	; 0x200
 8013c96:	bf1c      	itt	ne
 8013c98:	b2db      	uxtbne	r3, r3
 8013c9a:	4621      	movne	r1, r4
 8013c9c:	e446      	b.n	801352c <_vfiprintf_r+0x560>
 8013c9e:	f412 7100 	ands.w	r1, r2, #512	; 0x200
 8013ca2:	f43f ac0d 	beq.w	80134c0 <_vfiprintf_r+0x4f4>
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	4621      	mov	r1, r4
 8013caa:	e409      	b.n	80134c0 <_vfiprintf_r+0x4f4>
 8013cac:	f343 11c0 	sbfx	r1, r3, #7, #1
 8013cb0:	460a      	mov	r2, r1
 8013cb2:	b25b      	sxtb	r3, r3
 8013cb4:	f7ff ba79 	b.w	80131aa <_vfiprintf_r+0x1de>
 8013cb8:	9b07      	ldr	r3, [sp, #28]
 8013cba:	9a03      	ldr	r2, [sp, #12]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	801a      	strh	r2, [r3, #0]
 8013cc0:	e47b      	b.n	80135ba <_vfiprintf_r+0x5ee>
 8013cc2:	2330      	movs	r3, #48	; 0x30
 8013cc4:	f7ff bbe1 	b.w	801348a <_vfiprintf_r+0x4be>
 8013cc8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8013cca:	f002 faaf 	bl	801622c <__retarget_lock_release_recursive>
 8013cce:	f7ff ba9e 	b.w	801320e <_vfiprintf_r+0x242>
 8013cd2:	f8cd 8004 	str.w	r8, [sp, #4]
 8013cd6:	f8cd 8014 	str.w	r8, [sp, #20]
 8013cda:	9507      	str	r5, [sp, #28]
 8013cdc:	4680      	mov	r8, r0
 8013cde:	e40d      	b.n	80134fc <_vfiprintf_r+0x530>
 8013ce0:	4f17      	ldr	r7, [pc, #92]	; (8013d40 <_vfiprintf_r+0xd74>)
 8013ce2:	46e6      	mov	lr, ip
 8013ce4:	e663      	b.n	80139ae <_vfiprintf_r+0x9e2>
 8013ce6:	9904      	ldr	r1, [sp, #16]
 8013ce8:	9806      	ldr	r0, [sp, #24]
 8013cea:	aa10      	add	r2, sp, #64	; 0x40
 8013cec:	f000 f91a 	bl	8013f24 <__sfvwrite_r>
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	f43f ab62 	beq.w	80133c0 <_vfiprintf_r+0x3f4>
 8013cfc:	f7ff babc 	b.w	8013278 <_vfiprintf_r+0x2ac>
 8013d00:	4f0f      	ldr	r7, [pc, #60]	; (8013d40 <_vfiprintf_r+0xd74>)
 8013d02:	1c51      	adds	r1, r2, #1
 8013d04:	e5d3      	b.n	80138ae <_vfiprintf_r+0x8e2>
 8013d06:	4d0f      	ldr	r5, [pc, #60]	; (8013d44 <_vfiprintf_r+0xd78>)
 8013d08:	468c      	mov	ip, r1
 8013d0a:	e538      	b.n	801377e <_vfiprintf_r+0x7b2>
 8013d0c:	9b04      	ldr	r3, [sp, #16]
 8013d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013d10:	07df      	lsls	r7, r3, #31
 8013d12:	d407      	bmi.n	8013d24 <_vfiprintf_r+0xd58>
 8013d14:	9b04      	ldr	r3, [sp, #16]
 8013d16:	899b      	ldrh	r3, [r3, #12]
 8013d18:	059e      	lsls	r6, r3, #22
 8013d1a:	d403      	bmi.n	8013d24 <_vfiprintf_r+0xd58>
 8013d1c:	9b04      	ldr	r3, [sp, #16]
 8013d1e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8013d20:	f002 fa84 	bl	801622c <__retarget_lock_release_recursive>
 8013d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d28:	9303      	str	r3, [sp, #12]
 8013d2a:	f7ff baaf 	b.w	801328c <_vfiprintf_r+0x2c0>
 8013d2e:	bf00      	nop
 8013d30:	cccccccd 	.word	0xcccccccd
 8013d34:	0801b410 	.word	0x0801b410
 8013d38:	0801b3fc 	.word	0x0801b3fc
 8013d3c:	0801b424 	.word	0x0801b424
 8013d40:	0801b560 	.word	0x0801b560
 8013d44:	0801b550 	.word	0x0801b550
 8013d48:	9b07      	ldr	r3, [sp, #28]
 8013d4a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8013d4e:	4689      	mov	r9, r1
 8013d50:	f853 1b04 	ldr.w	r1, [r3], #4
 8013d54:	9307      	str	r3, [sp, #28]
 8013d56:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
 8013d5a:	f7ff b988 	b.w	801306e <_vfiprintf_r+0xa2>
 8013d5e:	bf00      	nop

08013d60 <__sbprintf>:
 8013d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d62:	461f      	mov	r7, r3
 8013d64:	898b      	ldrh	r3, [r1, #12]
 8013d66:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8013d6a:	f023 0302 	bic.w	r3, r3, #2
 8013d6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013d72:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8013d74:	9319      	str	r3, [sp, #100]	; 0x64
 8013d76:	89cb      	ldrh	r3, [r1, #14]
 8013d78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013d7c:	69cb      	ldr	r3, [r1, #28]
 8013d7e:	9307      	str	r3, [sp, #28]
 8013d80:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8013d82:	9309      	str	r3, [sp, #36]	; 0x24
 8013d84:	ab1a      	add	r3, sp, #104	; 0x68
 8013d86:	9300      	str	r3, [sp, #0]
 8013d88:	9304      	str	r3, [sp, #16]
 8013d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d8e:	4615      	mov	r5, r2
 8013d90:	4606      	mov	r6, r0
 8013d92:	9302      	str	r3, [sp, #8]
 8013d94:	9305      	str	r3, [sp, #20]
 8013d96:	a816      	add	r0, sp, #88	; 0x58
 8013d98:	2300      	movs	r3, #0
 8013d9a:	460c      	mov	r4, r1
 8013d9c:	9306      	str	r3, [sp, #24]
 8013d9e:	f002 fa33 	bl	8016208 <__retarget_lock_init_recursive>
 8013da2:	462a      	mov	r2, r5
 8013da4:	463b      	mov	r3, r7
 8013da6:	4669      	mov	r1, sp
 8013da8:	4630      	mov	r0, r6
 8013daa:	f7ff f90f 	bl	8012fcc <_vfiprintf_r>
 8013dae:	1e05      	subs	r5, r0, #0
 8013db0:	db07      	blt.n	8013dc2 <__sbprintf+0x62>
 8013db2:	4669      	mov	r1, sp
 8013db4:	4630      	mov	r0, r6
 8013db6:	f7fe f9ad 	bl	8012114 <_fflush_r>
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	bf18      	it	ne
 8013dbe:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8013dc2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013dc6:	065b      	lsls	r3, r3, #25
 8013dc8:	d503      	bpl.n	8013dd2 <__sbprintf+0x72>
 8013dca:	89a3      	ldrh	r3, [r4, #12]
 8013dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dd0:	81a3      	strh	r3, [r4, #12]
 8013dd2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013dd4:	f002 fa22 	bl	801621c <__retarget_lock_close_recursive>
 8013dd8:	4628      	mov	r0, r5
 8013dda:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8013dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013de0 <_write_r>:
 8013de0:	b538      	push	{r3, r4, r5, lr}
 8013de2:	460c      	mov	r4, r1
 8013de4:	4d08      	ldr	r5, [pc, #32]	; (8013e08 <_write_r+0x28>)
 8013de6:	4684      	mov	ip, r0
 8013de8:	4611      	mov	r1, r2
 8013dea:	4620      	mov	r0, r4
 8013dec:	461a      	mov	r2, r3
 8013dee:	2300      	movs	r3, #0
 8013df0:	602b      	str	r3, [r5, #0]
 8013df2:	4664      	mov	r4, ip
 8013df4:	f002 f9f1 	bl	80161da <_write>
 8013df8:	1c43      	adds	r3, r0, #1
 8013dfa:	d000      	beq.n	8013dfe <_write_r+0x1e>
 8013dfc:	bd38      	pop	{r3, r4, r5, pc}
 8013dfe:	682b      	ldr	r3, [r5, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d0fb      	beq.n	8013dfc <_write_r+0x1c>
 8013e04:	6023      	str	r3, [r4, #0]
 8013e06:	bd38      	pop	{r3, r4, r5, pc}
 8013e08:	2000227c 	.word	0x2000227c

08013e0c <__assert_func>:
 8013e0c:	b500      	push	{lr}
 8013e0e:	4c0b      	ldr	r4, [pc, #44]	; (8013e3c <__assert_func+0x30>)
 8013e10:	6825      	ldr	r5, [r4, #0]
 8013e12:	4614      	mov	r4, r2
 8013e14:	68ee      	ldr	r6, [r5, #12]
 8013e16:	461a      	mov	r2, r3
 8013e18:	b085      	sub	sp, #20
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	460d      	mov	r5, r1
 8013e1e:	b14c      	cbz	r4, 8013e34 <__assert_func+0x28>
 8013e20:	4907      	ldr	r1, [pc, #28]	; (8013e40 <__assert_func+0x34>)
 8013e22:	9500      	str	r5, [sp, #0]
 8013e24:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8013e28:	4630      	mov	r0, r6
 8013e2a:	4906      	ldr	r1, [pc, #24]	; (8013e44 <__assert_func+0x38>)
 8013e2c:	f000 f850 	bl	8013ed0 <fiprintf>
 8013e30:	f000 fbfc 	bl	801462c <abort>
 8013e34:	4904      	ldr	r1, [pc, #16]	; (8013e48 <__assert_func+0x3c>)
 8013e36:	460c      	mov	r4, r1
 8013e38:	e7f3      	b.n	8013e22 <__assert_func+0x16>
 8013e3a:	bf00      	nop
 8013e3c:	20000894 	.word	0x20000894
 8013e40:	0801b570 	.word	0x0801b570
 8013e44:	0801b580 	.word	0x0801b580
 8013e48:	0801b57c 	.word	0x0801b57c

08013e4c <_calloc_r>:
 8013e4c:	b510      	push	{r4, lr}
 8013e4e:	fb02 f101 	mul.w	r1, r2, r1
 8013e52:	f7fc feb5 	bl	8010bc0 <_malloc_r>
 8013e56:	4604      	mov	r4, r0
 8013e58:	b168      	cbz	r0, 8013e76 <_calloc_r+0x2a>
 8013e5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013e5e:	f022 0203 	bic.w	r2, r2, #3
 8013e62:	3a04      	subs	r2, #4
 8013e64:	2a24      	cmp	r2, #36	; 0x24
 8013e66:	d818      	bhi.n	8013e9a <_calloc_r+0x4e>
 8013e68:	2a13      	cmp	r2, #19
 8013e6a:	d806      	bhi.n	8013e7a <_calloc_r+0x2e>
 8013e6c:	4602      	mov	r2, r0
 8013e6e:	2300      	movs	r3, #0
 8013e70:	6013      	str	r3, [r2, #0]
 8013e72:	6053      	str	r3, [r2, #4]
 8013e74:	6093      	str	r3, [r2, #8]
 8013e76:	4620      	mov	r0, r4
 8013e78:	bd10      	pop	{r4, pc}
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	2a1b      	cmp	r2, #27
 8013e7e:	6003      	str	r3, [r0, #0]
 8013e80:	6043      	str	r3, [r0, #4]
 8013e82:	d90f      	bls.n	8013ea4 <_calloc_r+0x58>
 8013e84:	2a24      	cmp	r2, #36	; 0x24
 8013e86:	6083      	str	r3, [r0, #8]
 8013e88:	60c3      	str	r3, [r0, #12]
 8013e8a:	bf11      	iteee	ne
 8013e8c:	f100 0210 	addne.w	r2, r0, #16
 8013e90:	f100 0218 	addeq.w	r2, r0, #24
 8013e94:	6103      	streq	r3, [r0, #16]
 8013e96:	6143      	streq	r3, [r0, #20]
 8013e98:	e7e9      	b.n	8013e6e <_calloc_r+0x22>
 8013e9a:	2100      	movs	r1, #0
 8013e9c:	f7fd f9fc 	bl	8011298 <memset>
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	bd10      	pop	{r4, pc}
 8013ea4:	f100 0208 	add.w	r2, r0, #8
 8013ea8:	e7e1      	b.n	8013e6e <_calloc_r+0x22>
 8013eaa:	bf00      	nop

08013eac <_close_r>:
 8013eac:	b538      	push	{r3, r4, r5, lr}
 8013eae:	4d07      	ldr	r5, [pc, #28]	; (8013ecc <_close_r+0x20>)
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	4604      	mov	r4, r0
 8013eb4:	4608      	mov	r0, r1
 8013eb6:	602a      	str	r2, [r5, #0]
 8013eb8:	f002 f993 	bl	80161e2 <_close>
 8013ebc:	1c43      	adds	r3, r0, #1
 8013ebe:	d000      	beq.n	8013ec2 <_close_r+0x16>
 8013ec0:	bd38      	pop	{r3, r4, r5, pc}
 8013ec2:	682b      	ldr	r3, [r5, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d0fb      	beq.n	8013ec0 <_close_r+0x14>
 8013ec8:	6023      	str	r3, [r4, #0]
 8013eca:	bd38      	pop	{r3, r4, r5, pc}
 8013ecc:	2000227c 	.word	0x2000227c

08013ed0 <fiprintf>:
 8013ed0:	b40e      	push	{r1, r2, r3}
 8013ed2:	b510      	push	{r4, lr}
 8013ed4:	b083      	sub	sp, #12
 8013ed6:	ab05      	add	r3, sp, #20
 8013ed8:	4c06      	ldr	r4, [pc, #24]	; (8013ef4 <fiprintf+0x24>)
 8013eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ede:	9301      	str	r3, [sp, #4]
 8013ee0:	4601      	mov	r1, r0
 8013ee2:	6820      	ldr	r0, [r4, #0]
 8013ee4:	f7ff f872 	bl	8012fcc <_vfiprintf_r>
 8013ee8:	b003      	add	sp, #12
 8013eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eee:	b003      	add	sp, #12
 8013ef0:	4770      	bx	lr
 8013ef2:	bf00      	nop
 8013ef4:	20000894 	.word	0x20000894

08013ef8 <_fstat_r>:
 8013ef8:	b570      	push	{r4, r5, r6, lr}
 8013efa:	460c      	mov	r4, r1
 8013efc:	4d08      	ldr	r5, [pc, #32]	; (8013f20 <_fstat_r+0x28>)
 8013efe:	4603      	mov	r3, r0
 8013f00:	2600      	movs	r6, #0
 8013f02:	4620      	mov	r0, r4
 8013f04:	4611      	mov	r1, r2
 8013f06:	461c      	mov	r4, r3
 8013f08:	602e      	str	r6, [r5, #0]
 8013f0a:	f002 f978 	bl	80161fe <_fstat>
 8013f0e:	1c43      	adds	r3, r0, #1
 8013f10:	d000      	beq.n	8013f14 <_fstat_r+0x1c>
 8013f12:	bd70      	pop	{r4, r5, r6, pc}
 8013f14:	682b      	ldr	r3, [r5, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d0fb      	beq.n	8013f12 <_fstat_r+0x1a>
 8013f1a:	6023      	str	r3, [r4, #0]
 8013f1c:	bd70      	pop	{r4, r5, r6, pc}
 8013f1e:	bf00      	nop
 8013f20:	2000227c 	.word	0x2000227c

08013f24 <__sfvwrite_r>:
 8013f24:	6893      	ldr	r3, [r2, #8]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	f000 80f8 	beq.w	801411c <__sfvwrite_r+0x1f8>
 8013f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f30:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 8013f34:	f01c 0f08 	tst.w	ip, #8
 8013f38:	b083      	sub	sp, #12
 8013f3a:	4690      	mov	r8, r2
 8013f3c:	4681      	mov	r9, r0
 8013f3e:	460c      	mov	r4, r1
 8013f40:	d031      	beq.n	8013fa6 <__sfvwrite_r+0x82>
 8013f42:	690b      	ldr	r3, [r1, #16]
 8013f44:	b37b      	cbz	r3, 8013fa6 <__sfvwrite_r+0x82>
 8013f46:	f01c 0702 	ands.w	r7, ip, #2
 8013f4a:	f8d8 6000 	ldr.w	r6, [r8]
 8013f4e:	d038      	beq.n	8013fc2 <__sfvwrite_r+0x9e>
 8013f50:	2700      	movs	r7, #0
 8013f52:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8013f56:	69e1      	ldr	r1, [r4, #28]
 8013f58:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8014220 <__sfvwrite_r+0x2fc>
 8013f5c:	463d      	mov	r5, r7
 8013f5e:	4555      	cmp	r5, sl
 8013f60:	462b      	mov	r3, r5
 8013f62:	463a      	mov	r2, r7
 8013f64:	bf28      	it	cs
 8013f66:	4653      	movcs	r3, sl
 8013f68:	4648      	mov	r0, r9
 8013f6a:	b1c5      	cbz	r5, 8013f9e <__sfvwrite_r+0x7a>
 8013f6c:	47d8      	blx	fp
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	f340 80ca 	ble.w	8014108 <__sfvwrite_r+0x1e4>
 8013f74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013f78:	1a1b      	subs	r3, r3, r0
 8013f7a:	4407      	add	r7, r0
 8013f7c:	1a2d      	subs	r5, r5, r0
 8013f7e:	f8c8 3008 	str.w	r3, [r8, #8]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f000 80b6 	beq.w	80140f4 <__sfvwrite_r+0x1d0>
 8013f88:	4555      	cmp	r5, sl
 8013f8a:	462b      	mov	r3, r5
 8013f8c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8013f90:	69e1      	ldr	r1, [r4, #28]
 8013f92:	bf28      	it	cs
 8013f94:	4653      	movcs	r3, sl
 8013f96:	463a      	mov	r2, r7
 8013f98:	4648      	mov	r0, r9
 8013f9a:	2d00      	cmp	r5, #0
 8013f9c:	d1e6      	bne.n	8013f6c <__sfvwrite_r+0x48>
 8013f9e:	e9d6 7500 	ldrd	r7, r5, [r6]
 8013fa2:	3608      	adds	r6, #8
 8013fa4:	e7db      	b.n	8013f5e <__sfvwrite_r+0x3a>
 8013fa6:	4621      	mov	r1, r4
 8013fa8:	4648      	mov	r0, r9
 8013faa:	f7fd ff2b 	bl	8011e04 <__swsetup_r>
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	f040 80af 	bne.w	8014112 <__sfvwrite_r+0x1ee>
 8013fb4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8013fb8:	f8d8 6000 	ldr.w	r6, [r8]
 8013fbc:	f01c 0702 	ands.w	r7, ip, #2
 8013fc0:	d1c6      	bne.n	8013f50 <__sfvwrite_r+0x2c>
 8013fc2:	f01c 0a01 	ands.w	sl, ip, #1
 8013fc6:	d163      	bne.n	8014090 <__sfvwrite_r+0x16c>
 8013fc8:	6823      	ldr	r3, [r4, #0]
 8013fca:	68a1      	ldr	r1, [r4, #8]
 8013fcc:	4657      	mov	r7, sl
 8013fce:	4618      	mov	r0, r3
 8013fd0:	468b      	mov	fp, r1
 8013fd2:	2f00      	cmp	r7, #0
 8013fd4:	d058      	beq.n	8014088 <__sfvwrite_r+0x164>
 8013fd6:	f41c 7f00 	tst.w	ip, #512	; 0x200
 8013fda:	f000 80b5 	beq.w	8014148 <__sfvwrite_r+0x224>
 8013fde:	42b9      	cmp	r1, r7
 8013fe0:	460a      	mov	r2, r1
 8013fe2:	f200 80e1 	bhi.w	80141a8 <__sfvwrite_r+0x284>
 8013fe6:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 8013fea:	d02f      	beq.n	801404c <__sfvwrite_r+0x128>
 8013fec:	6921      	ldr	r1, [r4, #16]
 8013fee:	6962      	ldr	r2, [r4, #20]
 8013ff0:	1a5d      	subs	r5, r3, r1
 8013ff2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013ff6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8013ffa:	1c6b      	adds	r3, r5, #1
 8013ffc:	1052      	asrs	r2, r2, #1
 8013ffe:	443b      	add	r3, r7
 8014000:	4293      	cmp	r3, r2
 8014002:	bf92      	itee	ls
 8014004:	4693      	movls	fp, r2
 8014006:	469b      	movhi	fp, r3
 8014008:	461a      	movhi	r2, r3
 801400a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 801400e:	f000 80ea 	beq.w	80141e6 <__sfvwrite_r+0x2c2>
 8014012:	4611      	mov	r1, r2
 8014014:	4648      	mov	r0, r9
 8014016:	f7fc fdd3 	bl	8010bc0 <_malloc_r>
 801401a:	2800      	cmp	r0, #0
 801401c:	f000 80f9 	beq.w	8014212 <__sfvwrite_r+0x2ee>
 8014020:	462a      	mov	r2, r5
 8014022:	6921      	ldr	r1, [r4, #16]
 8014024:	9000      	str	r0, [sp, #0]
 8014026:	f7ed f833 	bl	8001090 <memcpy>
 801402a:	89a2      	ldrh	r2, [r4, #12]
 801402c:	9b00      	ldr	r3, [sp, #0]
 801402e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8014032:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014036:	81a2      	strh	r2, [r4, #12]
 8014038:	1958      	adds	r0, r3, r5
 801403a:	ebab 0505 	sub.w	r5, fp, r5
 801403e:	f8c4 b014 	str.w	fp, [r4, #20]
 8014042:	6123      	str	r3, [r4, #16]
 8014044:	60a5      	str	r5, [r4, #8]
 8014046:	6020      	str	r0, [r4, #0]
 8014048:	46bb      	mov	fp, r7
 801404a:	463a      	mov	r2, r7
 801404c:	4651      	mov	r1, sl
 801404e:	9200      	str	r2, [sp, #0]
 8014050:	f7fd f8a2 	bl	8011198 <memmove>
 8014054:	68a1      	ldr	r1, [r4, #8]
 8014056:	6823      	ldr	r3, [r4, #0]
 8014058:	9a00      	ldr	r2, [sp, #0]
 801405a:	eba1 010b 	sub.w	r1, r1, fp
 801405e:	441a      	add	r2, r3
 8014060:	463d      	mov	r5, r7
 8014062:	60a1      	str	r1, [r4, #8]
 8014064:	6022      	str	r2, [r4, #0]
 8014066:	2700      	movs	r7, #0
 8014068:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801406c:	1b5b      	subs	r3, r3, r5
 801406e:	44aa      	add	sl, r5
 8014070:	f8c8 3008 	str.w	r3, [r8, #8]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d03d      	beq.n	80140f4 <__sfvwrite_r+0x1d0>
 8014078:	6823      	ldr	r3, [r4, #0]
 801407a:	68a1      	ldr	r1, [r4, #8]
 801407c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8014080:	4618      	mov	r0, r3
 8014082:	468b      	mov	fp, r1
 8014084:	2f00      	cmp	r7, #0
 8014086:	d1a6      	bne.n	8013fd6 <__sfvwrite_r+0xb2>
 8014088:	e9d6 a700 	ldrd	sl, r7, [r6]
 801408c:	3608      	adds	r6, #8
 801408e:	e79e      	b.n	8013fce <__sfvwrite_r+0xaa>
 8014090:	4638      	mov	r0, r7
 8014092:	46bb      	mov	fp, r7
 8014094:	463d      	mov	r5, r7
 8014096:	9700      	str	r7, [sp, #0]
 8014098:	2d00      	cmp	r5, #0
 801409a:	d041      	beq.n	8014120 <__sfvwrite_r+0x1fc>
 801409c:	2800      	cmp	r0, #0
 801409e:	d046      	beq.n	801412e <__sfvwrite_r+0x20a>
 80140a0:	9a00      	ldr	r2, [sp, #0]
 80140a2:	6820      	ldr	r0, [r4, #0]
 80140a4:	68a1      	ldr	r1, [r4, #8]
 80140a6:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
 80140aa:	42aa      	cmp	r2, r5
 80140ac:	bf28      	it	cs
 80140ae:	462a      	movcs	r2, r5
 80140b0:	42b8      	cmp	r0, r7
 80140b2:	d904      	bls.n	80140be <__sfvwrite_r+0x19a>
 80140b4:	eb01 0a03 	add.w	sl, r1, r3
 80140b8:	4552      	cmp	r2, sl
 80140ba:	f300 8085 	bgt.w	80141c8 <__sfvwrite_r+0x2a4>
 80140be:	4293      	cmp	r3, r2
 80140c0:	dc75      	bgt.n	80141ae <__sfvwrite_r+0x28a>
 80140c2:	69e1      	ldr	r1, [r4, #28]
 80140c4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80140c6:	465a      	mov	r2, fp
 80140c8:	4648      	mov	r0, r9
 80140ca:	47b8      	blx	r7
 80140cc:	f1b0 0a00 	subs.w	sl, r0, #0
 80140d0:	dd1a      	ble.n	8014108 <__sfvwrite_r+0x1e4>
 80140d2:	9b00      	ldr	r3, [sp, #0]
 80140d4:	ebb3 030a 	subs.w	r3, r3, sl
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	d00f      	beq.n	80140fc <__sfvwrite_r+0x1d8>
 80140dc:	2001      	movs	r0, #1
 80140de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80140e2:	eba3 030a 	sub.w	r3, r3, sl
 80140e6:	44d3      	add	fp, sl
 80140e8:	eba5 050a 	sub.w	r5, r5, sl
 80140ec:	f8c8 3008 	str.w	r3, [r8, #8]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d1d1      	bne.n	8014098 <__sfvwrite_r+0x174>
 80140f4:	2000      	movs	r0, #0
 80140f6:	b003      	add	sp, #12
 80140f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140fc:	4621      	mov	r1, r4
 80140fe:	4648      	mov	r0, r9
 8014100:	f7fe f808 	bl	8012114 <_fflush_r>
 8014104:	2800      	cmp	r0, #0
 8014106:	d0ea      	beq.n	80140de <__sfvwrite_r+0x1ba>
 8014108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801410c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014110:	81a3      	strh	r3, [r4, #12]
 8014112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014116:	b003      	add	sp, #12
 8014118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801411c:	2000      	movs	r0, #0
 801411e:	4770      	bx	lr
 8014120:	6875      	ldr	r5, [r6, #4]
 8014122:	4633      	mov	r3, r6
 8014124:	3608      	adds	r6, #8
 8014126:	2d00      	cmp	r5, #0
 8014128:	d0fa      	beq.n	8014120 <__sfvwrite_r+0x1fc>
 801412a:	f8d3 b000 	ldr.w	fp, [r3]
 801412e:	462a      	mov	r2, r5
 8014130:	210a      	movs	r1, #10
 8014132:	4658      	mov	r0, fp
 8014134:	f7ec fa24 	bl	8000580 <memchr>
 8014138:	2800      	cmp	r0, #0
 801413a:	d067      	beq.n	801420c <__sfvwrite_r+0x2e8>
 801413c:	3001      	adds	r0, #1
 801413e:	eba0 030b 	sub.w	r3, r0, fp
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	461a      	mov	r2, r3
 8014146:	e7ac      	b.n	80140a2 <__sfvwrite_r+0x17e>
 8014148:	6922      	ldr	r2, [r4, #16]
 801414a:	429a      	cmp	r2, r3
 801414c:	d314      	bcc.n	8014178 <__sfvwrite_r+0x254>
 801414e:	6962      	ldr	r2, [r4, #20]
 8014150:	42ba      	cmp	r2, r7
 8014152:	d811      	bhi.n	8014178 <__sfvwrite_r+0x254>
 8014154:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014158:	42bb      	cmp	r3, r7
 801415a:	bf28      	it	cs
 801415c:	463b      	movcs	r3, r7
 801415e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014160:	fb93 f3f2 	sdiv	r3, r3, r2
 8014164:	69e1      	ldr	r1, [r4, #28]
 8014166:	fb02 f303 	mul.w	r3, r2, r3
 801416a:	4648      	mov	r0, r9
 801416c:	4652      	mov	r2, sl
 801416e:	47a8      	blx	r5
 8014170:	1e05      	subs	r5, r0, #0
 8014172:	ddc9      	ble.n	8014108 <__sfvwrite_r+0x1e4>
 8014174:	1b7f      	subs	r7, r7, r5
 8014176:	e777      	b.n	8014068 <__sfvwrite_r+0x144>
 8014178:	42b9      	cmp	r1, r7
 801417a:	bf28      	it	cs
 801417c:	4639      	movcs	r1, r7
 801417e:	460d      	mov	r5, r1
 8014180:	4618      	mov	r0, r3
 8014182:	460a      	mov	r2, r1
 8014184:	4651      	mov	r1, sl
 8014186:	f7fd f807 	bl	8011198 <memmove>
 801418a:	68a1      	ldr	r1, [r4, #8]
 801418c:	6823      	ldr	r3, [r4, #0]
 801418e:	1b49      	subs	r1, r1, r5
 8014190:	442b      	add	r3, r5
 8014192:	60a1      	str	r1, [r4, #8]
 8014194:	6023      	str	r3, [r4, #0]
 8014196:	2900      	cmp	r1, #0
 8014198:	d1ec      	bne.n	8014174 <__sfvwrite_r+0x250>
 801419a:	4621      	mov	r1, r4
 801419c:	4648      	mov	r0, r9
 801419e:	f7fd ffb9 	bl	8012114 <_fflush_r>
 80141a2:	2800      	cmp	r0, #0
 80141a4:	d0e6      	beq.n	8014174 <__sfvwrite_r+0x250>
 80141a6:	e7af      	b.n	8014108 <__sfvwrite_r+0x1e4>
 80141a8:	46bb      	mov	fp, r7
 80141aa:	463a      	mov	r2, r7
 80141ac:	e74e      	b.n	801404c <__sfvwrite_r+0x128>
 80141ae:	4659      	mov	r1, fp
 80141b0:	9201      	str	r2, [sp, #4]
 80141b2:	f7fc fff1 	bl	8011198 <memmove>
 80141b6:	9a01      	ldr	r2, [sp, #4]
 80141b8:	68a3      	ldr	r3, [r4, #8]
 80141ba:	1a9b      	subs	r3, r3, r2
 80141bc:	60a3      	str	r3, [r4, #8]
 80141be:	6823      	ldr	r3, [r4, #0]
 80141c0:	4413      	add	r3, r2
 80141c2:	6023      	str	r3, [r4, #0]
 80141c4:	4692      	mov	sl, r2
 80141c6:	e784      	b.n	80140d2 <__sfvwrite_r+0x1ae>
 80141c8:	4659      	mov	r1, fp
 80141ca:	4652      	mov	r2, sl
 80141cc:	f7fc ffe4 	bl	8011198 <memmove>
 80141d0:	6823      	ldr	r3, [r4, #0]
 80141d2:	4453      	add	r3, sl
 80141d4:	6023      	str	r3, [r4, #0]
 80141d6:	4621      	mov	r1, r4
 80141d8:	4648      	mov	r0, r9
 80141da:	f7fd ff9b 	bl	8012114 <_fflush_r>
 80141de:	2800      	cmp	r0, #0
 80141e0:	f43f af77 	beq.w	80140d2 <__sfvwrite_r+0x1ae>
 80141e4:	e790      	b.n	8014108 <__sfvwrite_r+0x1e4>
 80141e6:	4648      	mov	r0, r9
 80141e8:	f000 f870 	bl	80142cc <_realloc_r>
 80141ec:	4603      	mov	r3, r0
 80141ee:	2800      	cmp	r0, #0
 80141f0:	f47f af22 	bne.w	8014038 <__sfvwrite_r+0x114>
 80141f4:	6921      	ldr	r1, [r4, #16]
 80141f6:	4648      	mov	r0, r9
 80141f8:	f7fe f894 	bl	8012324 <_free_r>
 80141fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014200:	220c      	movs	r2, #12
 8014202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014206:	f8c9 2000 	str.w	r2, [r9]
 801420a:	e77f      	b.n	801410c <__sfvwrite_r+0x1e8>
 801420c:	1c6a      	adds	r2, r5, #1
 801420e:	9200      	str	r2, [sp, #0]
 8014210:	e747      	b.n	80140a2 <__sfvwrite_r+0x17e>
 8014212:	220c      	movs	r2, #12
 8014214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014218:	f8c9 2000 	str.w	r2, [r9]
 801421c:	e776      	b.n	801410c <__sfvwrite_r+0x1e8>
 801421e:	bf00      	nop
 8014220:	7ffffc00 	.word	0x7ffffc00

08014224 <_isatty_r>:
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	4d07      	ldr	r5, [pc, #28]	; (8014244 <_isatty_r+0x20>)
 8014228:	2200      	movs	r2, #0
 801422a:	4604      	mov	r4, r0
 801422c:	4608      	mov	r0, r1
 801422e:	602a      	str	r2, [r5, #0]
 8014230:	f001 ffdc 	bl	80161ec <_isatty>
 8014234:	1c43      	adds	r3, r0, #1
 8014236:	d000      	beq.n	801423a <_isatty_r+0x16>
 8014238:	bd38      	pop	{r3, r4, r5, pc}
 801423a:	682b      	ldr	r3, [r5, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d0fb      	beq.n	8014238 <_isatty_r+0x14>
 8014240:	6023      	str	r3, [r4, #0]
 8014242:	bd38      	pop	{r3, r4, r5, pc}
 8014244:	2000227c 	.word	0x2000227c

08014248 <_lseek_r>:
 8014248:	b538      	push	{r3, r4, r5, lr}
 801424a:	460c      	mov	r4, r1
 801424c:	4d08      	ldr	r5, [pc, #32]	; (8014270 <_lseek_r+0x28>)
 801424e:	4684      	mov	ip, r0
 8014250:	4611      	mov	r1, r2
 8014252:	4620      	mov	r0, r4
 8014254:	461a      	mov	r2, r3
 8014256:	2300      	movs	r3, #0
 8014258:	602b      	str	r3, [r5, #0]
 801425a:	4664      	mov	r4, ip
 801425c:	f001 ffc4 	bl	80161e8 <_lseek>
 8014260:	1c43      	adds	r3, r0, #1
 8014262:	d000      	beq.n	8014266 <_lseek_r+0x1e>
 8014264:	bd38      	pop	{r3, r4, r5, pc}
 8014266:	682b      	ldr	r3, [r5, #0]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d0fb      	beq.n	8014264 <_lseek_r+0x1c>
 801426c:	6023      	str	r3, [r4, #0]
 801426e:	bd38      	pop	{r3, r4, r5, pc}
 8014270:	2000227c 	.word	0x2000227c

08014274 <__ascii_mbtowc>:
 8014274:	b082      	sub	sp, #8
 8014276:	b149      	cbz	r1, 801428c <__ascii_mbtowc+0x18>
 8014278:	b15a      	cbz	r2, 8014292 <__ascii_mbtowc+0x1e>
 801427a:	b16b      	cbz	r3, 8014298 <__ascii_mbtowc+0x24>
 801427c:	7813      	ldrb	r3, [r2, #0]
 801427e:	600b      	str	r3, [r1, #0]
 8014280:	7812      	ldrb	r2, [r2, #0]
 8014282:	1e10      	subs	r0, r2, #0
 8014284:	bf18      	it	ne
 8014286:	2001      	movne	r0, #1
 8014288:	b002      	add	sp, #8
 801428a:	4770      	bx	lr
 801428c:	a901      	add	r1, sp, #4
 801428e:	2a00      	cmp	r2, #0
 8014290:	d1f3      	bne.n	801427a <__ascii_mbtowc+0x6>
 8014292:	4610      	mov	r0, r2
 8014294:	b002      	add	sp, #8
 8014296:	4770      	bx	lr
 8014298:	f06f 0001 	mvn.w	r0, #1
 801429c:	e7f4      	b.n	8014288 <__ascii_mbtowc+0x14>
 801429e:	bf00      	nop

080142a0 <_read_r>:
 80142a0:	b538      	push	{r3, r4, r5, lr}
 80142a2:	460c      	mov	r4, r1
 80142a4:	4d08      	ldr	r5, [pc, #32]	; (80142c8 <_read_r+0x28>)
 80142a6:	4684      	mov	ip, r0
 80142a8:	4611      	mov	r1, r2
 80142aa:	4620      	mov	r0, r4
 80142ac:	461a      	mov	r2, r3
 80142ae:	2300      	movs	r3, #0
 80142b0:	602b      	str	r3, [r5, #0]
 80142b2:	4664      	mov	r4, ip
 80142b4:	f001 ff8d 	bl	80161d2 <_read>
 80142b8:	1c43      	adds	r3, r0, #1
 80142ba:	d000      	beq.n	80142be <_read_r+0x1e>
 80142bc:	bd38      	pop	{r3, r4, r5, pc}
 80142be:	682b      	ldr	r3, [r5, #0]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d0fb      	beq.n	80142bc <_read_r+0x1c>
 80142c4:	6023      	str	r3, [r4, #0]
 80142c6:	bd38      	pop	{r3, r4, r5, pc}
 80142c8:	2000227c 	.word	0x2000227c

080142cc <_realloc_r>:
 80142cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d0:	4616      	mov	r6, r2
 80142d2:	2900      	cmp	r1, #0
 80142d4:	f000 8096 	beq.w	8014404 <_realloc_r+0x138>
 80142d8:	460c      	mov	r4, r1
 80142da:	4680      	mov	r8, r0
 80142dc:	f106 050b 	add.w	r5, r6, #11
 80142e0:	f7fd f834 	bl	801134c <__malloc_lock>
 80142e4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80142e8:	2d16      	cmp	r5, #22
 80142ea:	f1a4 0908 	sub.w	r9, r4, #8
 80142ee:	f021 0703 	bic.w	r7, r1, #3
 80142f2:	d858      	bhi.n	80143a6 <_realloc_r+0xda>
 80142f4:	2510      	movs	r5, #16
 80142f6:	42ae      	cmp	r6, r5
 80142f8:	d858      	bhi.n	80143ac <_realloc_r+0xe0>
 80142fa:	42af      	cmp	r7, r5
 80142fc:	da60      	bge.n	80143c0 <_realloc_r+0xf4>
 80142fe:	4bbe      	ldr	r3, [pc, #760]	; (80145f8 <_realloc_r+0x32c>)
 8014300:	689a      	ldr	r2, [r3, #8]
 8014302:	eb09 0c07 	add.w	ip, r9, r7
 8014306:	4562      	cmp	r2, ip
 8014308:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801430c:	f000 8090 	beq.w	8014430 <_realloc_r+0x164>
 8014310:	f020 0301 	bic.w	r3, r0, #1
 8014314:	4463      	add	r3, ip
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	07da      	lsls	r2, r3, #31
 801431a:	d468      	bmi.n	80143ee <_realloc_r+0x122>
 801431c:	f020 0003 	bic.w	r0, r0, #3
 8014320:	183b      	adds	r3, r7, r0
 8014322:	429d      	cmp	r5, r3
 8014324:	dd47      	ble.n	80143b6 <_realloc_r+0xea>
 8014326:	07cb      	lsls	r3, r1, #31
 8014328:	d412      	bmi.n	8014350 <_realloc_r+0x84>
 801432a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801432e:	eba9 0b03 	sub.w	fp, r9, r3
 8014332:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014336:	f023 0203 	bic.w	r2, r3, #3
 801433a:	4410      	add	r0, r2
 801433c:	eb00 0a07 	add.w	sl, r0, r7
 8014340:	4555      	cmp	r5, sl
 8014342:	f340 80f6 	ble.w	8014532 <_realloc_r+0x266>
 8014346:	eb07 0a02 	add.w	sl, r7, r2
 801434a:	4555      	cmp	r5, sl
 801434c:	f340 80cc 	ble.w	80144e8 <_realloc_r+0x21c>
 8014350:	4631      	mov	r1, r6
 8014352:	4640      	mov	r0, r8
 8014354:	f7fc fc34 	bl	8010bc0 <_malloc_r>
 8014358:	4606      	mov	r6, r0
 801435a:	2800      	cmp	r0, #0
 801435c:	f000 8120 	beq.w	80145a0 <_realloc_r+0x2d4>
 8014360:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014364:	f023 0301 	bic.w	r3, r3, #1
 8014368:	444b      	add	r3, r9
 801436a:	f1a0 0208 	sub.w	r2, r0, #8
 801436e:	4293      	cmp	r3, r2
 8014370:	f000 80b4 	beq.w	80144dc <_realloc_r+0x210>
 8014374:	1f3a      	subs	r2, r7, #4
 8014376:	2a24      	cmp	r2, #36	; 0x24
 8014378:	f200 80d7 	bhi.w	801452a <_realloc_r+0x25e>
 801437c:	2a13      	cmp	r2, #19
 801437e:	f200 80a2 	bhi.w	80144c6 <_realloc_r+0x1fa>
 8014382:	4603      	mov	r3, r0
 8014384:	4622      	mov	r2, r4
 8014386:	6811      	ldr	r1, [r2, #0]
 8014388:	6019      	str	r1, [r3, #0]
 801438a:	6851      	ldr	r1, [r2, #4]
 801438c:	6059      	str	r1, [r3, #4]
 801438e:	6892      	ldr	r2, [r2, #8]
 8014390:	609a      	str	r2, [r3, #8]
 8014392:	4621      	mov	r1, r4
 8014394:	4640      	mov	r0, r8
 8014396:	f7fd ffc5 	bl	8012324 <_free_r>
 801439a:	4640      	mov	r0, r8
 801439c:	f7fc ffdc 	bl	8011358 <__malloc_unlock>
 80143a0:	4630      	mov	r0, r6
 80143a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a6:	f035 0507 	bics.w	r5, r5, #7
 80143aa:	d5a4      	bpl.n	80142f6 <_realloc_r+0x2a>
 80143ac:	230c      	movs	r3, #12
 80143ae:	f8c8 3000 	str.w	r3, [r8]
 80143b2:	2600      	movs	r6, #0
 80143b4:	e018      	b.n	80143e8 <_realloc_r+0x11c>
 80143b6:	461f      	mov	r7, r3
 80143b8:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
 80143bc:	60d3      	str	r3, [r2, #12]
 80143be:	609a      	str	r2, [r3, #8]
 80143c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80143c4:	1b7a      	subs	r2, r7, r5
 80143c6:	2a0f      	cmp	r2, #15
 80143c8:	f003 0301 	and.w	r3, r3, #1
 80143cc:	eb09 0007 	add.w	r0, r9, r7
 80143d0:	d81d      	bhi.n	801440e <_realloc_r+0x142>
 80143d2:	433b      	orrs	r3, r7
 80143d4:	f8c9 3004 	str.w	r3, [r9, #4]
 80143d8:	6843      	ldr	r3, [r0, #4]
 80143da:	f043 0301 	orr.w	r3, r3, #1
 80143de:	6043      	str	r3, [r0, #4]
 80143e0:	4640      	mov	r0, r8
 80143e2:	f7fc ffb9 	bl	8011358 <__malloc_unlock>
 80143e6:	4626      	mov	r6, r4
 80143e8:	4630      	mov	r0, r6
 80143ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ee:	07c9      	lsls	r1, r1, #31
 80143f0:	d4ae      	bmi.n	8014350 <_realloc_r+0x84>
 80143f2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80143f6:	eba9 0b03 	sub.w	fp, r9, r3
 80143fa:	f8db 3004 	ldr.w	r3, [fp, #4]
 80143fe:	f023 0203 	bic.w	r2, r3, #3
 8014402:	e7a0      	b.n	8014346 <_realloc_r+0x7a>
 8014404:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014408:	4611      	mov	r1, r2
 801440a:	f7fc bbd9 	b.w	8010bc0 <_malloc_r>
 801440e:	eb09 0105 	add.w	r1, r9, r5
 8014412:	432b      	orrs	r3, r5
 8014414:	f042 0201 	orr.w	r2, r2, #1
 8014418:	f8c9 3004 	str.w	r3, [r9, #4]
 801441c:	604a      	str	r2, [r1, #4]
 801441e:	6843      	ldr	r3, [r0, #4]
 8014420:	f043 0301 	orr.w	r3, r3, #1
 8014424:	6043      	str	r3, [r0, #4]
 8014426:	3108      	adds	r1, #8
 8014428:	4640      	mov	r0, r8
 801442a:	f7fd ff7b 	bl	8012324 <_free_r>
 801442e:	e7d7      	b.n	80143e0 <_realloc_r+0x114>
 8014430:	f020 0003 	bic.w	r0, r0, #3
 8014434:	19c2      	adds	r2, r0, r7
 8014436:	f105 0c10 	add.w	ip, r5, #16
 801443a:	4562      	cmp	r2, ip
 801443c:	f280 8091 	bge.w	8014562 <_realloc_r+0x296>
 8014440:	07ca      	lsls	r2, r1, #31
 8014442:	d485      	bmi.n	8014350 <_realloc_r+0x84>
 8014444:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8014448:	eba9 0b02 	sub.w	fp, r9, r2
 801444c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8014450:	f022 0203 	bic.w	r2, r2, #3
 8014454:	4410      	add	r0, r2
 8014456:	eb00 0a07 	add.w	sl, r0, r7
 801445a:	45d4      	cmp	ip, sl
 801445c:	f73f af73 	bgt.w	8014346 <_realloc_r+0x7a>
 8014460:	465e      	mov	r6, fp
 8014462:	f8db 100c 	ldr.w	r1, [fp, #12]
 8014466:	f856 0f08 	ldr.w	r0, [r6, #8]!
 801446a:	1f3a      	subs	r2, r7, #4
 801446c:	2a24      	cmp	r2, #36	; 0x24
 801446e:	60c1      	str	r1, [r0, #12]
 8014470:	6088      	str	r0, [r1, #8]
 8014472:	f200 80ae 	bhi.w	80145d2 <_realloc_r+0x306>
 8014476:	2a13      	cmp	r2, #19
 8014478:	f240 80a9 	bls.w	80145ce <_realloc_r+0x302>
 801447c:	6821      	ldr	r1, [r4, #0]
 801447e:	f8cb 1008 	str.w	r1, [fp, #8]
 8014482:	6861      	ldr	r1, [r4, #4]
 8014484:	f8cb 100c 	str.w	r1, [fp, #12]
 8014488:	2a1b      	cmp	r2, #27
 801448a:	f200 80a8 	bhi.w	80145de <_realloc_r+0x312>
 801448e:	3408      	adds	r4, #8
 8014490:	f10b 0210 	add.w	r2, fp, #16
 8014494:	6821      	ldr	r1, [r4, #0]
 8014496:	6011      	str	r1, [r2, #0]
 8014498:	6861      	ldr	r1, [r4, #4]
 801449a:	6051      	str	r1, [r2, #4]
 801449c:	68a1      	ldr	r1, [r4, #8]
 801449e:	6091      	str	r1, [r2, #8]
 80144a0:	eb0b 0105 	add.w	r1, fp, r5
 80144a4:	ebaa 0205 	sub.w	r2, sl, r5
 80144a8:	f042 0201 	orr.w	r2, r2, #1
 80144ac:	6099      	str	r1, [r3, #8]
 80144ae:	604a      	str	r2, [r1, #4]
 80144b0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80144b4:	f003 0301 	and.w	r3, r3, #1
 80144b8:	432b      	orrs	r3, r5
 80144ba:	4640      	mov	r0, r8
 80144bc:	f8cb 3004 	str.w	r3, [fp, #4]
 80144c0:	f7fc ff4a 	bl	8011358 <__malloc_unlock>
 80144c4:	e790      	b.n	80143e8 <_realloc_r+0x11c>
 80144c6:	6823      	ldr	r3, [r4, #0]
 80144c8:	6003      	str	r3, [r0, #0]
 80144ca:	6863      	ldr	r3, [r4, #4]
 80144cc:	6043      	str	r3, [r0, #4]
 80144ce:	2a1b      	cmp	r2, #27
 80144d0:	d83c      	bhi.n	801454c <_realloc_r+0x280>
 80144d2:	f104 0208 	add.w	r2, r4, #8
 80144d6:	f100 0308 	add.w	r3, r0, #8
 80144da:	e754      	b.n	8014386 <_realloc_r+0xba>
 80144dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80144e0:	f023 0303 	bic.w	r3, r3, #3
 80144e4:	441f      	add	r7, r3
 80144e6:	e76b      	b.n	80143c0 <_realloc_r+0xf4>
 80144e8:	1f3a      	subs	r2, r7, #4
 80144ea:	465e      	mov	r6, fp
 80144ec:	f8db 300c 	ldr.w	r3, [fp, #12]
 80144f0:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80144f4:	2a24      	cmp	r2, #36	; 0x24
 80144f6:	60cb      	str	r3, [r1, #12]
 80144f8:	6099      	str	r1, [r3, #8]
 80144fa:	d822      	bhi.n	8014542 <_realloc_r+0x276>
 80144fc:	2a13      	cmp	r2, #19
 80144fe:	d91e      	bls.n	801453e <_realloc_r+0x272>
 8014500:	6823      	ldr	r3, [r4, #0]
 8014502:	f8cb 3008 	str.w	r3, [fp, #8]
 8014506:	6863      	ldr	r3, [r4, #4]
 8014508:	f8cb 300c 	str.w	r3, [fp, #12]
 801450c:	2a1b      	cmp	r2, #27
 801450e:	d83b      	bhi.n	8014588 <_realloc_r+0x2bc>
 8014510:	3408      	adds	r4, #8
 8014512:	f10b 0310 	add.w	r3, fp, #16
 8014516:	6822      	ldr	r2, [r4, #0]
 8014518:	601a      	str	r2, [r3, #0]
 801451a:	6862      	ldr	r2, [r4, #4]
 801451c:	605a      	str	r2, [r3, #4]
 801451e:	68a2      	ldr	r2, [r4, #8]
 8014520:	609a      	str	r2, [r3, #8]
 8014522:	4634      	mov	r4, r6
 8014524:	4657      	mov	r7, sl
 8014526:	46d9      	mov	r9, fp
 8014528:	e74a      	b.n	80143c0 <_realloc_r+0xf4>
 801452a:	4621      	mov	r1, r4
 801452c:	f7fc fe34 	bl	8011198 <memmove>
 8014530:	e72f      	b.n	8014392 <_realloc_r+0xc6>
 8014532:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
 8014536:	1f3a      	subs	r2, r7, #4
 8014538:	60cb      	str	r3, [r1, #12]
 801453a:	6099      	str	r1, [r3, #8]
 801453c:	e7d5      	b.n	80144ea <_realloc_r+0x21e>
 801453e:	4633      	mov	r3, r6
 8014540:	e7e9      	b.n	8014516 <_realloc_r+0x24a>
 8014542:	4621      	mov	r1, r4
 8014544:	4630      	mov	r0, r6
 8014546:	f7fc fe27 	bl	8011198 <memmove>
 801454a:	e7ea      	b.n	8014522 <_realloc_r+0x256>
 801454c:	68a3      	ldr	r3, [r4, #8]
 801454e:	6083      	str	r3, [r0, #8]
 8014550:	68e3      	ldr	r3, [r4, #12]
 8014552:	60c3      	str	r3, [r0, #12]
 8014554:	2a24      	cmp	r2, #36	; 0x24
 8014556:	d027      	beq.n	80145a8 <_realloc_r+0x2dc>
 8014558:	f104 0210 	add.w	r2, r4, #16
 801455c:	f100 0310 	add.w	r3, r0, #16
 8014560:	e711      	b.n	8014386 <_realloc_r+0xba>
 8014562:	eb09 0105 	add.w	r1, r9, r5
 8014566:	6099      	str	r1, [r3, #8]
 8014568:	1b53      	subs	r3, r2, r5
 801456a:	f043 0301 	orr.w	r3, r3, #1
 801456e:	604b      	str	r3, [r1, #4]
 8014570:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014574:	f003 0301 	and.w	r3, r3, #1
 8014578:	432b      	orrs	r3, r5
 801457a:	4640      	mov	r0, r8
 801457c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014580:	f7fc feea 	bl	8011358 <__malloc_unlock>
 8014584:	4626      	mov	r6, r4
 8014586:	e72f      	b.n	80143e8 <_realloc_r+0x11c>
 8014588:	68a3      	ldr	r3, [r4, #8]
 801458a:	f8cb 3010 	str.w	r3, [fp, #16]
 801458e:	68e3      	ldr	r3, [r4, #12]
 8014590:	f8cb 3014 	str.w	r3, [fp, #20]
 8014594:	2a24      	cmp	r2, #36	; 0x24
 8014596:	d010      	beq.n	80145ba <_realloc_r+0x2ee>
 8014598:	3410      	adds	r4, #16
 801459a:	f10b 0318 	add.w	r3, fp, #24
 801459e:	e7ba      	b.n	8014516 <_realloc_r+0x24a>
 80145a0:	4640      	mov	r0, r8
 80145a2:	f7fc fed9 	bl	8011358 <__malloc_unlock>
 80145a6:	e704      	b.n	80143b2 <_realloc_r+0xe6>
 80145a8:	6923      	ldr	r3, [r4, #16]
 80145aa:	6103      	str	r3, [r0, #16]
 80145ac:	6961      	ldr	r1, [r4, #20]
 80145ae:	6141      	str	r1, [r0, #20]
 80145b0:	f104 0218 	add.w	r2, r4, #24
 80145b4:	f100 0318 	add.w	r3, r0, #24
 80145b8:	e6e5      	b.n	8014386 <_realloc_r+0xba>
 80145ba:	6923      	ldr	r3, [r4, #16]
 80145bc:	f8cb 3018 	str.w	r3, [fp, #24]
 80145c0:	6963      	ldr	r3, [r4, #20]
 80145c2:	f8cb 301c 	str.w	r3, [fp, #28]
 80145c6:	3418      	adds	r4, #24
 80145c8:	f10b 0320 	add.w	r3, fp, #32
 80145cc:	e7a3      	b.n	8014516 <_realloc_r+0x24a>
 80145ce:	4632      	mov	r2, r6
 80145d0:	e760      	b.n	8014494 <_realloc_r+0x1c8>
 80145d2:	4621      	mov	r1, r4
 80145d4:	4630      	mov	r0, r6
 80145d6:	f7fc fddf 	bl	8011198 <memmove>
 80145da:	4b07      	ldr	r3, [pc, #28]	; (80145f8 <_realloc_r+0x32c>)
 80145dc:	e760      	b.n	80144a0 <_realloc_r+0x1d4>
 80145de:	68a1      	ldr	r1, [r4, #8]
 80145e0:	f8cb 1010 	str.w	r1, [fp, #16]
 80145e4:	68e1      	ldr	r1, [r4, #12]
 80145e6:	f8cb 1014 	str.w	r1, [fp, #20]
 80145ea:	2a24      	cmp	r2, #36	; 0x24
 80145ec:	d006      	beq.n	80145fc <_realloc_r+0x330>
 80145ee:	3410      	adds	r4, #16
 80145f0:	f10b 0218 	add.w	r2, fp, #24
 80145f4:	e74e      	b.n	8014494 <_realloc_r+0x1c8>
 80145f6:	bf00      	nop
 80145f8:	20000000 	.word	0x20000000
 80145fc:	6922      	ldr	r2, [r4, #16]
 80145fe:	f8cb 2018 	str.w	r2, [fp, #24]
 8014602:	6962      	ldr	r2, [r4, #20]
 8014604:	f8cb 201c 	str.w	r2, [fp, #28]
 8014608:	3418      	adds	r4, #24
 801460a:	f10b 0220 	add.w	r2, fp, #32
 801460e:	e741      	b.n	8014494 <_realloc_r+0x1c8>

08014610 <__ascii_wctomb>:
 8014610:	b149      	cbz	r1, 8014626 <__ascii_wctomb+0x16>
 8014612:	2aff      	cmp	r2, #255	; 0xff
 8014614:	d802      	bhi.n	801461c <__ascii_wctomb+0xc>
 8014616:	700a      	strb	r2, [r1, #0]
 8014618:	2001      	movs	r0, #1
 801461a:	4770      	bx	lr
 801461c:	238a      	movs	r3, #138	; 0x8a
 801461e:	6003      	str	r3, [r0, #0]
 8014620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014624:	4770      	bx	lr
 8014626:	4608      	mov	r0, r1
 8014628:	4770      	bx	lr
 801462a:	bf00      	nop

0801462c <abort>:
 801462c:	b508      	push	{r3, lr}
 801462e:	2006      	movs	r0, #6
 8014630:	f000 f804 	bl	801463c <raise>
 8014634:	2001      	movs	r0, #1
 8014636:	f7f7 fb2b 	bl	800bc90 <_exit>
 801463a:	bf00      	nop

0801463c <raise>:
 801463c:	b538      	push	{r3, r4, r5, lr}
 801463e:	4b14      	ldr	r3, [pc, #80]	; (8014690 <raise+0x54>)
 8014640:	281f      	cmp	r0, #31
 8014642:	681d      	ldr	r5, [r3, #0]
 8014644:	d81e      	bhi.n	8014684 <raise+0x48>
 8014646:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
 801464a:	4604      	mov	r4, r0
 801464c:	b162      	cbz	r2, 8014668 <raise+0x2c>
 801464e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8014652:	b14b      	cbz	r3, 8014668 <raise+0x2c>
 8014654:	2b01      	cmp	r3, #1
 8014656:	d005      	beq.n	8014664 <raise+0x28>
 8014658:	1c59      	adds	r1, r3, #1
 801465a:	d00f      	beq.n	801467c <raise+0x40>
 801465c:	2100      	movs	r1, #0
 801465e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8014662:	4798      	blx	r3
 8014664:	2000      	movs	r0, #0
 8014666:	bd38      	pop	{r3, r4, r5, pc}
 8014668:	4628      	mov	r0, r5
 801466a:	f000 f829 	bl	80146c0 <_getpid_r>
 801466e:	4622      	mov	r2, r4
 8014670:	4601      	mov	r1, r0
 8014672:	4628      	mov	r0, r5
 8014674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014678:	f000 b80c 	b.w	8014694 <_kill_r>
 801467c:	2316      	movs	r3, #22
 801467e:	602b      	str	r3, [r5, #0]
 8014680:	2001      	movs	r0, #1
 8014682:	bd38      	pop	{r3, r4, r5, pc}
 8014684:	2316      	movs	r3, #22
 8014686:	602b      	str	r3, [r5, #0]
 8014688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801468c:	bd38      	pop	{r3, r4, r5, pc}
 801468e:	bf00      	nop
 8014690:	20000894 	.word	0x20000894

08014694 <_kill_r>:
 8014694:	b570      	push	{r4, r5, r6, lr}
 8014696:	460c      	mov	r4, r1
 8014698:	4d08      	ldr	r5, [pc, #32]	; (80146bc <_kill_r+0x28>)
 801469a:	4603      	mov	r3, r0
 801469c:	2600      	movs	r6, #0
 801469e:	4620      	mov	r0, r4
 80146a0:	4611      	mov	r1, r2
 80146a2:	461c      	mov	r4, r3
 80146a4:	602e      	str	r6, [r5, #0]
 80146a6:	f001 fda6 	bl	80161f6 <_kill>
 80146aa:	1c43      	adds	r3, r0, #1
 80146ac:	d000      	beq.n	80146b0 <_kill_r+0x1c>
 80146ae:	bd70      	pop	{r4, r5, r6, pc}
 80146b0:	682b      	ldr	r3, [r5, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d0fb      	beq.n	80146ae <_kill_r+0x1a>
 80146b6:	6023      	str	r3, [r4, #0]
 80146b8:	bd70      	pop	{r4, r5, r6, pc}
 80146ba:	bf00      	nop
 80146bc:	2000227c 	.word	0x2000227c

080146c0 <_getpid_r>:
 80146c0:	f001 bd9b 	b.w	80161fa <_getpid>

080146c4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80146c4:	4770      	bx	lr

080146c6 <gpio_pin_configure_dt>:
{
 80146c6:	b4f0      	push	{r4, r5, r6, r7}
 80146c8:	4603      	mov	r3, r0
 80146ca:	460a      	mov	r2, r1
				  spec->pin,
 80146cc:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
 80146ce:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
 80146d0:	6800      	ldr	r0, [r0, #0]
 80146d2:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80146d4:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 80146d6:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 80146d8:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80146da:	d506      	bpl.n	80146ea <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80146dc:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 80146e0:	d003      	beq.n	80146ea <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80146e2:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80146e4:	bf48      	it	mi
 80146e6:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80146ea:	6834      	ldr	r4, [r6, #0]
 80146ec:	2501      	movs	r5, #1
 80146ee:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80146f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80146f4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80146f6:	bf4c      	ite	mi
 80146f8:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80146fa:	43ac      	bicpl	r4, r5
 80146fc:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80146fe:	683b      	ldr	r3, [r7, #0]
}
 8014700:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 8014702:	4718      	bx	r3

08014704 <i2c_write_read.constprop.0.isra.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
 8014704:	b510      	push	{r4, lr}
 8014706:	b086      	sub	sp, #24
	msg[0].buf = (uint8_t *)write_buf;
 8014708:	9200      	str	r2, [sp, #0]
	msg[1].buf = (uint8_t *)read_buf;
 801470a:	9303      	str	r3, [sp, #12]
	msg[0].len = num_write;
 801470c:	2201      	movs	r2, #1
	msg[1].len = num_read;
 801470e:	9b08      	ldr	r3, [sp, #32]
	msg[0].len = num_write;
 8014710:	9201      	str	r2, [sp, #4]
	msg[1].len = num_read;
 8014712:	9304      	str	r3, [sp, #16]
	msg[0].flags = I2C_MSG_WRITE;
 8014714:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8014716:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
 8014718:	f88d 2008 	strb.w	r2, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 801471c:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8014720:	6883      	ldr	r3, [r0, #8]
 8014722:	2202      	movs	r2, #2
 8014724:	689c      	ldr	r4, [r3, #8]
 8014726:	460b      	mov	r3, r1
 8014728:	4669      	mov	r1, sp
 801472a:	47a0      	blx	r4
}
 801472c:	b006      	add	sp, #24
 801472e:	bd10      	pop	{r4, pc}

08014730 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8014730:	4603      	mov	r3, r0
 8014732:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 8014734:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8014736:	7919      	ldrb	r1, [r3, #4]
 8014738:	2301      	movs	r3, #1
 801473a:	fa03 f101 	lsl.w	r1, r3, r1
 801473e:	6903      	ldr	r3, [r0, #16]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	4219      	tst	r1, r3
 8014744:	d003      	beq.n	801474e <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
 8014746:	b122      	cbz	r2, 8014752 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
 8014748:	6883      	ldr	r3, [r0, #8]
 801474a:	691b      	ldr	r3, [r3, #16]
 801474c:	e003      	b.n	8014756 <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
 801474e:	2a00      	cmp	r2, #0
 8014750:	d0fa      	beq.n	8014748 <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
 8014752:	6883      	ldr	r3, [r0, #8]
 8014754:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8014756:	4718      	bx	r3

08014758 <cbpprintf_external>:
{
 8014758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801475c:	4606      	mov	r6, r0
 801475e:	460d      	mov	r5, r1
 8014760:	4617      	mov	r7, r2
	if (buf == NULL) {
 8014762:	4698      	mov	r8, r3
 8014764:	b32b      	cbz	r3, 80147b2 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
 8014766:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
 801476a:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 801476e:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
 8014770:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 8014772:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 8014776:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 801477a:	441c      	add	r4, r3
 801477c:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
 801477e:	f04f 0a00 	mov.w	sl, #0
 8014782:	45ca      	cmp	sl, r9
 8014784:	d309      	bcc.n	801479a <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
 8014786:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801478a:	f108 0308 	add.w	r3, r8, #8
 801478e:	4639      	mov	r1, r7
 8014790:	4630      	mov	r0, r6
 8014792:	46ac      	mov	ip, r5
}
 8014794:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8014798:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 801479a:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 801479e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
 80147a2:	4620      	mov	r0, r4
 80147a4:	f7eb fd0c 	bl	80001c0 <strlen>
 80147a8:	3001      	adds	r0, #1
 80147aa:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 80147ac:	f10a 0a01 	add.w	sl, sl, #1
 80147b0:	e7e7      	b.n	8014782 <cbpprintf_external+0x2a>
}
 80147b2:	f06f 0015 	mvn.w	r0, #21
 80147b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080147ba <is_ptr>:
{
 80147ba:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
 80147bc:	2500      	movs	r5, #0
{
 80147be:	4602      	mov	r2, r0
	bool mod = false;
 80147c0:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
 80147c2:	4614      	mov	r4, r2
 80147c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80147c8:	b90b      	cbnz	r3, 80147ce <is_ptr+0x14>
					return false;
 80147ca:	4618      	mov	r0, r3
 80147cc:	e009      	b.n	80147e2 <is_ptr+0x28>
		if (mod) {
 80147ce:	b198      	cbz	r0, 80147f8 <is_ptr+0x3e>
			if (cnt == n) {
 80147d0:	428d      	cmp	r5, r1
 80147d2:	d107      	bne.n	80147e4 <is_ptr+0x2a>
				if (c == 'p') {
 80147d4:	2b70      	cmp	r3, #112	; 0x70
 80147d6:	d004      	beq.n	80147e2 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
 80147d8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80147dc:	2a3a      	cmp	r2, #58	; 0x3a
 80147de:	d80b      	bhi.n	80147f8 <is_ptr+0x3e>
					return false;
 80147e0:	2000      	movs	r0, #0
}
 80147e2:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
 80147e4:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
 80147e8:	2e3a      	cmp	r6, #58	; 0x3a
 80147ea:	d805      	bhi.n	80147f8 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
 80147ec:	7853      	ldrb	r3, [r2, #1]
				cnt++;
 80147ee:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
 80147f0:	1c94      	adds	r4, r2, #2
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d0e9      	beq.n	80147ca <is_ptr+0x10>
 80147f6:	2000      	movs	r0, #0
		if (c == '%') {
 80147f8:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
 80147fa:	bf08      	it	eq
 80147fc:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
 8014800:	4622      	mov	r2, r4
 8014802:	e7de      	b.n	80147c2 <is_ptr+0x8>

08014804 <arch_printk_char_out>:
}
 8014804:	2000      	movs	r0, #0
 8014806:	4770      	bx	lr

08014808 <str_out>:
{
 8014808:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 801480a:	688a      	ldr	r2, [r1, #8]
 801480c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 801480e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8014810:	b114      	cbz	r4, 8014818 <str_out+0x10>
 8014812:	684b      	ldr	r3, [r1, #4]
 8014814:	4293      	cmp	r3, r2
 8014816:	dc01      	bgt.n	801481c <str_out+0x14>
		ctx->count++;
 8014818:	608d      	str	r5, [r1, #8]
}
 801481a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 801481c:	3b01      	subs	r3, #1
 801481e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8014820:	bf08      	it	eq
 8014822:	2200      	moveq	r2, #0
 8014824:	608d      	str	r5, [r1, #8]
 8014826:	bf0c      	ite	eq
 8014828:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 801482a:	54a0      	strbne	r0, [r4, r2]
 801482c:	e7f5      	b.n	801481a <str_out+0x12>

0801482e <printk>:
{
 801482e:	b40f      	push	{r0, r1, r2, r3}
 8014830:	b507      	push	{r0, r1, r2, lr}
 8014832:	a904      	add	r1, sp, #16
 8014834:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8014838:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 801483a:	f7f3 f83f 	bl	80078bc <vprintk>
}
 801483e:	b003      	add	sp, #12
 8014840:	f85d eb04 	ldr.w	lr, [sp], #4
 8014844:	b004      	add	sp, #16
 8014846:	4770      	bx	lr

08014848 <snprintk>:
{
 8014848:	b40c      	push	{r2, r3}
 801484a:	b507      	push	{r0, r1, r2, lr}
 801484c:	ab04      	add	r3, sp, #16
 801484e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8014852:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8014854:	f7f3 f840 	bl	80078d8 <vsnprintk>
}
 8014858:	b003      	add	sp, #12
 801485a:	f85d eb04 	ldr.w	lr, [sp], #4
 801485e:	b002      	add	sp, #8
 8014860:	4770      	bx	lr

08014862 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8014862:	4604      	mov	r4, r0
 8014864:	b508      	push	{r3, lr}
 8014866:	4608      	mov	r0, r1
 8014868:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 801486a:	461a      	mov	r2, r3
 801486c:	47a0      	blx	r4
	return z_impl_z_current_get();
 801486e:	f7fb fd3d 	bl	80102ec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8014872:	f7f7 f8cd 	bl	800ba10 <z_impl_k_thread_abort>

08014876 <_ldiv5>:
	uint32_t v_lo = *v;
 8014876:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 801487a:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 801487c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8014880:	fba2 2403 	umull	r2, r4, r2, r3
 8014884:	18d5      	adds	r5, r2, r3
 8014886:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 801488a:	fba1 1303 	umull	r1, r3, r1, r3
 801488e:	1852      	adds	r2, r2, r1
 8014890:	eb44 0403 	adc.w	r4, r4, r3
 8014894:	1952      	adds	r2, r2, r5
 8014896:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 801489a:	1889      	adds	r1, r1, r2
 801489c:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 80148a0:	e9c0 1300 	strd	r1, r3, [r0]
}
 80148a4:	bd30      	pop	{r4, r5, pc}

080148a6 <_get_digit>:
{
 80148a6:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 80148a8:	680a      	ldr	r2, [r1, #0]
 80148aa:	2a00      	cmp	r2, #0
{
 80148ac:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 80148ae:	dd0f      	ble.n	80148d0 <_get_digit+0x2a>
		--*digit_count;
 80148b0:	3a01      	subs	r2, #1
 80148b2:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	6844      	ldr	r4, [r0, #4]
 80148b8:	200a      	movs	r0, #10
 80148ba:	fba2 1200 	umull	r1, r2, r2, r0
 80148be:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 80148c2:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 80148c4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80148c8:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 80148cc:	3030      	adds	r0, #48	; 0x30
}
 80148ce:	bd10      	pop	{r4, pc}
		rval = '0';
 80148d0:	2030      	movs	r0, #48	; 0x30
 80148d2:	e7fc      	b.n	80148ce <_get_digit+0x28>

080148d4 <outs>:
{
 80148d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d8:	4607      	mov	r7, r0
 80148da:	4688      	mov	r8, r1
 80148dc:	4615      	mov	r5, r2
 80148de:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80148e0:	4614      	mov	r4, r2
 80148e2:	42b4      	cmp	r4, r6
 80148e4:	d305      	bcc.n	80148f2 <outs+0x1e>
 80148e6:	b10e      	cbz	r6, 80148ec <outs+0x18>
	return (int)count;
 80148e8:	1b60      	subs	r0, r4, r5
 80148ea:	e008      	b.n	80148fe <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80148ec:	7823      	ldrb	r3, [r4, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d0fa      	beq.n	80148e8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 80148f2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80148f6:	4641      	mov	r1, r8
 80148f8:	47b8      	blx	r7
		if (rc < 0) {
 80148fa:	2800      	cmp	r0, #0
 80148fc:	daf1      	bge.n	80148e2 <outs+0xe>
}
 80148fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014902 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 8014902:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
 8014904:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
 8014906:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
 8014908:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
 801490a:	1baf      	subs	r7, r5, r6
{
 801490c:	4604      	mov	r4, r0
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
 801490e:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
 8014910:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
 8014912:	bf98      	it	ls
 8014914:	1aff      	subls	r7, r7, r3
 8014916:	eba5 0000 	sub.w	r0, r5, r0
{
 801491a:	4694      	mov	ip, r2
		base += buf->size;
 801491c:	bf98      	it	ls
 801491e:	18f6      	addls	r6, r6, r3
 8014920:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
 8014922:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
 8014924:	6823      	ldr	r3, [r4, #0]
 8014926:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
 8014928:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
 801492a:	442b      	add	r3, r5
	size = MIN(size, free_space);
 801492c:	bf28      	it	cs
 801492e:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
 8014930:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
 8014932:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
 8014934:	4290      	cmp	r0, r2
 8014936:	bf28      	it	cs
 8014938:	4610      	movcs	r0, r2
	buf->put_head += size;
 801493a:	4403      	add	r3, r0
 801493c:	6063      	str	r3, [r4, #4]

	return size;
}
 801493e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014940 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
 8014940:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8014944:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 8014946:	428a      	cmp	r2, r1
 8014948:	d30c      	bcc.n	8014964 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
 801494a:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
 801494c:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
 801494e:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
 8014950:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
 8014954:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 8014956:	428a      	cmp	r2, r1
 8014958:	d901      	bls.n	801495e <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
 801495a:	2000      	movs	r0, #0
 801495c:	4770      	bx	lr
		buf->put_base += buf->size;
 801495e:	4413      	add	r3, r2
 8014960:	60c3      	str	r3, [r0, #12]
 8014962:	e7fa      	b.n	801495a <ring_buf_put_finish+0x1a>
		return -EINVAL;
 8014964:	f06f 0015 	mvn.w	r0, #21
}
 8014968:	4770      	bx	lr

0801496a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 801496a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801496e:	4680      	mov	r8, r0
 8014970:	460e      	mov	r6, r1
 8014972:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 8014974:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 8014976:	462a      	mov	r2, r5
 8014978:	a901      	add	r1, sp, #4
 801497a:	4640      	mov	r0, r8
 801497c:	f7ff ffc1 	bl	8014902 <ring_buf_put_claim>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8014980:	4631      	mov	r1, r6
 8014982:	4604      	mov	r4, r0
 8014984:	4602      	mov	r2, r0
 8014986:	9801      	ldr	r0, [sp, #4]
 8014988:	f7ec fb82 	bl	8001090 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 801498c:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
 801498e:	4427      	add	r7, r4
		data += partial_size;
 8014990:	4426      	add	r6, r4
	} while (size && partial_size);
 8014992:	d001      	beq.n	8014998 <ring_buf_put+0x2e>
 8014994:	2c00      	cmp	r4, #0
 8014996:	d1ee      	bne.n	8014976 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 8014998:	4639      	mov	r1, r7
 801499a:	4640      	mov	r0, r8
 801499c:	f7ff ffd0 	bl	8014940 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
 80149a0:	4638      	mov	r0, r7
 80149a2:	b002      	add	sp, #8
 80149a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080149a8 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 80149a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149aa:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
 80149ac:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
 80149ae:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
 80149b0:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
 80149b2:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
 80149b4:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
 80149b6:	42b8      	cmp	r0, r7
{
 80149b8:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
 80149ba:	bf98      	it	ls
 80149bc:	1836      	addls	r6, r6, r0
 80149be:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
 80149c2:	6823      	ldr	r3, [r4, #0]
 80149c4:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
 80149c8:	bf98      	it	ls
 80149ca:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
 80149cc:	442b      	add	r3, r5
	size = MIN(size, available_size);
 80149ce:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
 80149d0:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
 80149d4:	bf28      	it	cs
 80149d6:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
 80149d8:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
 80149da:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
 80149dc:	4290      	cmp	r0, r2
 80149de:	bf28      	it	cs
 80149e0:	4610      	movcs	r0, r2
	buf->get_head += size;
 80149e2:	4403      	add	r3, r0
 80149e4:	6123      	str	r3, [r4, #16]

	return size;
}
 80149e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080149e8 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
 80149e8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80149ec:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 80149ee:	428a      	cmp	r2, r1
 80149f0:	d30c      	bcc.n	8014a0c <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
 80149f2:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
 80149f4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
 80149f8:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
 80149fc:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 80149fe:	428a      	cmp	r2, r1
 8014a00:	d901      	bls.n	8014a06 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
 8014a02:	2000      	movs	r0, #0
 8014a04:	4770      	bx	lr
		buf->get_base += buf->size;
 8014a06:	4413      	add	r3, r2
 8014a08:	6183      	str	r3, [r0, #24]
 8014a0a:	e7fa      	b.n	8014a02 <ring_buf_get_finish+0x1a>
		return -EINVAL;
 8014a0c:	f06f 0015 	mvn.w	r0, #21
}
 8014a10:	4770      	bx	lr

08014a12 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 8014a12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014a16:	4680      	mov	r8, r0
 8014a18:	460d      	mov	r5, r1
 8014a1a:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 8014a1c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 8014a1e:	4632      	mov	r2, r6
 8014a20:	a901      	add	r1, sp, #4
 8014a22:	4640      	mov	r0, r8
 8014a24:	f7ff ffc0 	bl	80149a8 <ring_buf_get_claim>
 8014a28:	4604      	mov	r4, r0
		if (data) {
 8014a2a:	b12d      	cbz	r5, 8014a38 <ring_buf_get+0x26>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	9901      	ldr	r1, [sp, #4]
 8014a30:	4628      	mov	r0, r5
 8014a32:	f7ec fb2d 	bl	8001090 <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
 8014a36:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
 8014a38:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 8014a3a:	4427      	add	r7, r4
	} while (size && partial_size);
 8014a3c:	d001      	beq.n	8014a42 <ring_buf_get+0x30>
 8014a3e:	2c00      	cmp	r4, #0
 8014a40:	d1ed      	bne.n	8014a1e <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 8014a42:	4639      	mov	r1, r7
 8014a44:	4640      	mov	r0, r8
 8014a46:	f7ff ffcf 	bl	80149e8 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	b002      	add	sp, #8
 8014a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a52 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 8014a52:	68c3      	ldr	r3, [r0, #12]
 8014a54:	6802      	ldr	r2, [r0, #0]
 8014a56:	4293      	cmp	r3, r2
 8014a58:	d904      	bls.n	8014a64 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 8014a5a:	3b01      	subs	r3, #1
 8014a5c:	1a9a      	subs	r2, r3, r2

		return false;
 8014a5e:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 8014a60:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
 8014a62:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 8014a64:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
 8014a66:	b913      	cbnz	r3, 8014a6e <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 8014a68:	3801      	subs	r0, #1
 8014a6a:	1a82      	subs	r2, r0, r2
		return false;
 8014a6c:	e7f7      	b.n	8014a5e <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
 8014a6e:	1a82      	subs	r2, r0, r2
	return true;
 8014a70:	2001      	movs	r0, #1
 8014a72:	e7f5      	b.n	8014a60 <free_space+0xe>

08014a74 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 8014a74:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 8014a76:	a901      	add	r1, sp, #4
{
 8014a78:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 8014a7a:	f7ff ffea 	bl	8014a52 <free_space>
 8014a7e:	b120      	cbz	r0, 8014a8a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 8014a80:	9b01      	ldr	r3, [sp, #4]
 8014a82:	68e2      	ldr	r2, [r4, #12]
 8014a84:	3b01      	subs	r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 8014a8a:	6a20      	ldr	r0, [r4, #32]
 8014a8c:	9b01      	ldr	r3, [sp, #4]
 8014a8e:	1ac0      	subs	r0, r0, r3
}
 8014a90:	3801      	subs	r0, #1
 8014a92:	b002      	add	sp, #8
 8014a94:	bd10      	pop	{r4, pc}

08014a96 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
 8014a96:	b510      	push	{r4, lr}
 8014a98:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 8014a9a:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8014a9c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 8014a9e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8014aa0:	07d2      	lsls	r2, r2, #31
 8014aa2:	d502      	bpl.n	8014aaa <idx_inc+0x14>
		return i & (buffer->size - 1);
 8014aa4:	3b01      	subs	r3, #1
 8014aa6:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 8014aa8:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 8014aaa:	4298      	cmp	r0, r3
 8014aac:	bf28      	it	cs
 8014aae:	1ac0      	subcs	r0, r0, r3
 8014ab0:	e7fa      	b.n	8014aa8 <idx_inc+0x12>

08014ab2 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 8014ab2:	b538      	push	{r3, r4, r5, lr}
 8014ab4:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8014ab6:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
 8014ab8:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8014aba:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 8014abc:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8014ac0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8014ac4:	462a      	mov	r2, r5
 8014ac6:	6801      	ldr	r1, [r0, #0]
{
 8014ac8:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8014aca:	f7ff ffe4 	bl	8014a96 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8014ace:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8014ad0:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8014ad2:	462a      	mov	r2, r5
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f7ff ffde 	bl	8014a96 <idx_inc>
 8014ada:	6060      	str	r0, [r4, #4]
}
 8014adc:	bd38      	pop	{r3, r4, r5, pc}

08014ade <max_utilization_update>:
{
 8014ade:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8014ae0:	6903      	ldr	r3, [r0, #16]
 8014ae2:	075b      	lsls	r3, r3, #29
{
 8014ae4:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8014ae6:	d506      	bpl.n	8014af6 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8014ae8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014aea:	f7ff ffc3 	bl	8014a74 <get_usage>
 8014aee:	4285      	cmp	r5, r0
 8014af0:	bf2c      	ite	cs
 8014af2:	6265      	strcs	r5, [r4, #36]	; 0x24
 8014af4:	6260      	strcc	r0, [r4, #36]	; 0x24
}
 8014af6:	bd38      	pop	{r3, r4, r5, pc}

08014af8 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 8014af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 8014afe:	2300      	movs	r3, #0
 8014b00:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 8014b02:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8014b06:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
 8014b0a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 8014b0e:	f003 0303 	and.w	r3, r3, #3
 8014b12:	2b02      	cmp	r3, #2
{
 8014b14:	4604      	mov	r4, r0
 8014b16:	468b      	mov	fp, r1
 8014b18:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 8014b1a:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 8014b1e:	d103      	bne.n	8014b28 <drop_item_locked+0x30>
		return item->skip.len;
 8014b20:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 8014b24:	08ad      	lsrs	r5, r5, #2
 8014b26:	d12e      	bne.n	8014b86 <drop_item_locked+0x8e>
 8014b28:	69a3      	ldr	r3, [r4, #24]
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	4798      	blx	r3
 8014b2e:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
 8014b30:	f1b8 0f00 	cmp.w	r8, #0
 8014b34:	d038      	beq.n	8014ba8 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
 8014b36:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 8014b3a:	079b      	lsls	r3, r3, #30
 8014b3c:	d531      	bpl.n	8014ba2 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
 8014b3e:	f10b 0101 	add.w	r1, fp, #1
 8014b42:	4620      	mov	r0, r4
 8014b44:	f7ff ffb5 	bl	8014ab2 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 8014b48:	6861      	ldr	r1, [r4, #4]
 8014b4a:	462a      	mov	r2, r5
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	f7ff ffa2 	bl	8014a96 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 8014b52:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 8014b54:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 8014b56:	462a      	mov	r2, r5
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f7ff ff9c 	bl	8014a96 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8014b5e:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 8014b60:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8014b62:	68e1      	ldr	r1, [r4, #12]
 8014b64:	4620      	mov	r0, r4
 8014b66:	f7ff ff96 	bl	8014a96 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 8014b6a:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
 8014b6c:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 8014b70:	f002 0203 	and.w	r2, r2, #3
 8014b74:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 8014b76:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 8014b7a:	d10e      	bne.n	8014b9a <drop_item_locked+0xa2>
		return item->skip.len;
 8014b7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
 8014b80:	089b      	lsrs	r3, r3, #2
 8014b82:	d00a      	beq.n	8014b9a <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
 8014b84:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8014b86:	68e1      	ldr	r1, [r4, #12]
 8014b88:	462a      	mov	r2, r5
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f7ff ff83 	bl	8014a96 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 8014b90:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
 8014b94:	4630      	mov	r0, r6
 8014b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
 8014b9a:	69a3      	ldr	r3, [r4, #24]
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	4798      	blx	r3
 8014ba0:	4405      	add	r5, r0
			*user_packet = true;
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
 8014ba6:	e7ee      	b.n	8014b86 <drop_item_locked+0x8e>
		item = NULL;
 8014ba8:	4646      	mov	r6, r8
	return item;
 8014baa:	e7f3      	b.n	8014b94 <drop_item_locked+0x9c>

08014bac <mpsc_pbuf_init>:
{
 8014bac:	b538      	push	{r3, r4, r5, lr}
 8014bae:	460d      	mov	r5, r1
 8014bb0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
 8014bb2:	221c      	movs	r2, #28
 8014bb4:	2100      	movs	r1, #0
 8014bb6:	f7fc fb6f 	bl	8011298 <memset>
	buffer->get_wlen = cfg->get_wlen;
 8014bba:	68eb      	ldr	r3, [r5, #12]
 8014bbc:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 8014bbe:	68ab      	ldr	r3, [r5, #8]
 8014bc0:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 8014bc2:	682b      	ldr	r3, [r5, #0]
 8014bc4:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
 8014bc6:	686b      	ldr	r3, [r5, #4]
 8014bc8:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
 8014bca:	2200      	movs	r2, #0
 8014bcc:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 8014bce:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 8014bd0:	b123      	cbz	r3, 8014bdc <mpsc_pbuf_init+0x30>
 8014bd2:	1e59      	subs	r1, r3, #1
 8014bd4:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 8014bd6:	bf08      	it	eq
 8014bd8:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
 8014bdc:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8014bde:	2201      	movs	r2, #1
 8014be0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014be4:	2100      	movs	r1, #0
}
 8014be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bea:	f004 bd79 	b.w	80196e0 <z_impl_k_sem_init>

08014bee <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 8014bee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014bf2:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 8014bf4:	6a03      	ldr	r3, [r0, #32]
 8014bf6:	3b01      	subs	r3, #1
 8014bf8:	428b      	cmp	r3, r1
{
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	460e      	mov	r6, r1
 8014bfe:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
 8014c00:	d351      	bcc.n	8014ca6 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
 8014c02:	2500      	movs	r5, #0
	__asm__ volatile(
 8014c04:	f04f 0310 	mov.w	r3, #16
 8014c08:	f3ef 8911 	mrs	r9, BASEPRI
 8014c0c:	f383 8812 	msr	BASEPRI_MAX, r3
 8014c10:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
 8014c14:	a901      	add	r1, sp, #4
 8014c16:	4620      	mov	r0, r4
 8014c18:	f7ff ff1b 	bl	8014a52 <free_space>

		if (free_wlen >= wlen) {
 8014c1c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8014c20:	45b2      	cmp	sl, r6
 8014c22:	d317      	bcc.n	8014c54 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 8014c24:	6822      	ldr	r2, [r4, #0]
			item =
 8014c26:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
 8014c28:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8014c2c:	f021 0103 	bic.w	r1, r1, #3
 8014c30:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
 8014c34:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 8014c38:	6821      	ldr	r1, [r4, #0]
 8014c3a:	4632      	mov	r2, r6
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f7ff ff2a 	bl	8014a96 <idx_inc>
 8014c42:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
 8014c44:	f389 8811 	msr	BASEPRI, r9
 8014c48:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	b002      	add	sp, #8
 8014c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
 8014c54:	b150      	cbz	r0, 8014c6c <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
 8014c56:	4651      	mov	r1, sl
 8014c58:	4620      	mov	r0, r4
 8014c5a:	f7ff ff2a 	bl	8014ab2 <add_skip_item>
 8014c5e:	f389 8811 	msr	BASEPRI, r9
 8014c62:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
 8014c66:	2d00      	cmp	r5, #0
 8014c68:	d0cb      	beq.n	8014c02 <mpsc_pbuf_alloc+0x14>
 8014c6a:	e033      	b.n	8014cd4 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8014c6c:	ea57 0308 	orrs.w	r3, r7, r8
 8014c70:	d020      	beq.n	8014cb4 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
 8014c72:	f004 fcff 	bl	8019674 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8014c76:	b9e8      	cbnz	r0, 8014cb4 <mpsc_pbuf_alloc+0xc6>
 8014c78:	f389 8811 	msr	BASEPRI, r9
 8014c7c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 8014c80:	463a      	mov	r2, r7
 8014c82:	4643      	mov	r3, r8
 8014c84:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014c88:	f7fa ff9c 	bl	800fbc4 <z_impl_k_sem_take>
	__asm__ volatile(
 8014c8c:	f04f 0210 	mov.w	r2, #16
 8014c90:	f3ef 8311 	mrs	r3, BASEPRI
 8014c94:	f382 8812 	msr	BASEPRI_MAX, r2
 8014c98:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 8014c9c:	b128      	cbz	r0, 8014caa <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
 8014c9e:	f383 8811 	msr	BASEPRI, r3
 8014ca2:	f3bf 8f6f 	isb	sy
		return NULL;
 8014ca6:	2500      	movs	r5, #0
 8014ca8:	e7d0      	b.n	8014c4c <mpsc_pbuf_alloc+0x5e>
 8014caa:	f383 8811 	msr	BASEPRI, r3
 8014cae:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
 8014cb2:	e7d8      	b.n	8014c66 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 8014cb4:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 8014cb6:	f10d 0303 	add.w	r3, sp, #3
 8014cba:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8014cbe:	4651      	mov	r1, sl
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f7ff ff19 	bl	8014af8 <drop_item_locked>
 8014cc6:	4605      	mov	r5, r0
 8014cc8:	f389 8811 	msr	BASEPRI, r9
 8014ccc:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d0e8      	beq.n	8014ca6 <mpsc_pbuf_alloc+0xb8>
 8014cd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d093      	beq.n	8014c04 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
 8014cdc:	6963      	ldr	r3, [r4, #20]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d08f      	beq.n	8014c02 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
 8014ce2:	4629      	mov	r1, r5
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	4798      	blx	r3
 8014ce8:	e78b      	b.n	8014c02 <mpsc_pbuf_alloc+0x14>

08014cea <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 8014cea:	b570      	push	{r4, r5, r6, lr}
 8014cec:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8014cee:	6983      	ldr	r3, [r0, #24]
 8014cf0:	4608      	mov	r0, r1
{
 8014cf2:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8014cf4:	4798      	blx	r3
 8014cf6:	4602      	mov	r2, r0
	__asm__ volatile(
 8014cf8:	f04f 0310 	mov.w	r3, #16
 8014cfc:	f3ef 8611 	mrs	r6, BASEPRI
 8014d00:	f383 8812 	msr	BASEPRI_MAX, r3
 8014d04:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 8014d08:	782b      	ldrb	r3, [r5, #0]
 8014d0a:	f043 0301 	orr.w	r3, r3, #1
 8014d0e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8014d10:	6861      	ldr	r1, [r4, #4]
 8014d12:	4620      	mov	r0, r4
 8014d14:	f7ff febf 	bl	8014a96 <idx_inc>
 8014d18:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f7ff fedf 	bl	8014ade <max_utilization_update>
	__asm__ volatile(
 8014d20:	f386 8811 	msr	BASEPRI, r6
 8014d24:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 8014d28:	bd70      	pop	{r4, r5, r6, pc}

08014d2a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 8014d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d2c:	4604      	mov	r4, r0
	__asm__ volatile(
 8014d2e:	f04f 0310 	mov.w	r3, #16
 8014d32:	f3ef 8611 	mrs	r6, BASEPRI
 8014d36:	f383 8812 	msr	BASEPRI_MAX, r3
 8014d3a:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 8014d3e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8014d42:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 8014d44:	bf88      	it	hi
 8014d46:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
 8014d48:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
 8014d4a:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
 8014d4c:	b132      	cbz	r2, 8014d5c <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
 8014d4e:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
 8014d52:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
 8014d56:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
 8014d5a:	d105      	bne.n	8014d68 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
 8014d5c:	f386 8811 	msr	BASEPRI, r6
 8014d60:	f3bf 8f6f 	isb	sy
			item = NULL;
 8014d64:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
 8014d66:	e02e      	b.n	8014dc6 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
 8014d68:	2802      	cmp	r0, #2
 8014d6a:	d103      	bne.n	8014d74 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
 8014d6c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
 8014d70:	08ad      	lsrs	r5, r5, #2
 8014d72:	d105      	bne.n	8014d80 <mpsc_pbuf_claim+0x56>
 8014d74:	07d0      	lsls	r0, r2, #31
 8014d76:	d414      	bmi.n	8014da2 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
 8014d78:	69a3      	ldr	r3, [r4, #24]
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	4798      	blx	r3
 8014d7e:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 8014d80:	68a1      	ldr	r1, [r4, #8]
 8014d82:	462a      	mov	r2, r5
 8014d84:	4620      	mov	r0, r4
 8014d86:	f7ff fe86 	bl	8014a96 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
 8014d8a:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 8014d8c:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 8014d8e:	462a      	mov	r2, r5
 8014d90:	4620      	mov	r0, r4
 8014d92:	f7ff fe80 	bl	8014a96 <idx_inc>
				buffer->rd_idx =
 8014d96:	60e0      	str	r0, [r4, #12]
 8014d98:	f386 8811 	msr	BASEPRI, r6
 8014d9c:	f3bf 8f6f 	isb	sy
	} while (cont);
 8014da0:	e7c5      	b.n	8014d2e <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
 8014da2:	f042 0202 	orr.w	r2, r2, #2
 8014da6:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 8014daa:	4638      	mov	r0, r7
 8014dac:	69a3      	ldr	r3, [r4, #24]
 8014dae:	68a5      	ldr	r5, [r4, #8]
 8014db0:	4798      	blx	r3
 8014db2:	4629      	mov	r1, r5
 8014db4:	4602      	mov	r2, r0
 8014db6:	4620      	mov	r0, r4
 8014db8:	f7ff fe6d 	bl	8014a96 <idx_inc>
				buffer->tmp_rd_idx =
 8014dbc:	60a0      	str	r0, [r4, #8]
 8014dbe:	f386 8811 	msr	BASEPRI, r6
 8014dc2:	f3bf 8f6f 	isb	sy
}
 8014dc6:	4638      	mov	r0, r7
 8014dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014dca <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 8014dca:	b570      	push	{r4, r5, r6, lr}
 8014dcc:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8014dce:	6983      	ldr	r3, [r0, #24]
 8014dd0:	4608      	mov	r0, r1
{
 8014dd2:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8014dd4:	4798      	blx	r3
 8014dd6:	4602      	mov	r2, r0
	__asm__ volatile(
 8014dd8:	f04f 0310 	mov.w	r3, #16
 8014ddc:	f3ef 8611 	mrs	r6, BASEPRI
 8014de0:	f383 8812 	msr	BASEPRI_MAX, r3
 8014de4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 8014de8:	782b      	ldrb	r3, [r5, #0]
 8014dea:	f36f 0300 	bfc	r3, #0, #1
 8014dee:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8014df0:	6923      	ldr	r3, [r4, #16]
 8014df2:	079b      	lsls	r3, r3, #30
 8014df4:	d505      	bpl.n	8014e02 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 8014df6:	68e1      	ldr	r1, [r4, #12]
 8014df8:	69e3      	ldr	r3, [r4, #28]
 8014dfa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8014dfe:	429d      	cmp	r5, r3
 8014e00:	d112      	bne.n	8014e28 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
 8014e02:	782b      	ldrb	r3, [r5, #0]
 8014e04:	f36f 0341 	bfc	r3, #1, #1
 8014e08:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 8014e0a:	68e1      	ldr	r1, [r4, #12]
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	f7ff fe42 	bl	8014a96 <idx_inc>
 8014e12:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8014e14:	f386 8811 	msr	BASEPRI, r6
 8014e18:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 8014e1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 8014e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e24:	f7fa bea8 	b.w	800fb78 <z_impl_k_sem_give>
		witem->skip.len = wlen;
 8014e28:	682b      	ldr	r3, [r5, #0]
 8014e2a:	f360 039f 	bfi	r3, r0, #2, #30
 8014e2e:	602b      	str	r3, [r5, #0]
 8014e30:	e7f0      	b.n	8014e14 <mpsc_pbuf_free+0x4a>

08014e32 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 8014e32:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8014e36:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 8014e38:	bf88      	it	hi
 8014e3a:	6a02      	ldrhi	r2, [r0, #32]
 8014e3c:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 8014e3e:	1e18      	subs	r0, r3, #0
 8014e40:	bf18      	it	ne
 8014e42:	2001      	movne	r0, #1
 8014e44:	4770      	bx	lr

08014e46 <mpsc_pbuf_get_utilization>:

void mpsc_pbuf_get_utilization(struct mpsc_pbuf_buffer *buffer,
			       uint32_t *size, uint32_t *now)
{
 8014e46:	b510      	push	{r4, lr}
	/* One byte is left for full/empty distinction. */
	*size = (buffer->size - 1) * sizeof(int);
 8014e48:	6a03      	ldr	r3, [r0, #32]
 8014e4a:	3b01      	subs	r3, #1
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	600b      	str	r3, [r1, #0]
{
 8014e50:	4614      	mov	r4, r2
	*now = get_usage(buffer) * sizeof(int);
 8014e52:	f7ff fe0f 	bl	8014a74 <get_usage>
 8014e56:	0080      	lsls	r0, r0, #2
 8014e58:	6020      	str	r0, [r4, #0]
}
 8014e5a:	bd10      	pop	{r4, pc}

08014e5c <mpsc_pbuf_get_max_utilization>:

int mpsc_pbuf_get_max_utilization(struct mpsc_pbuf_buffer *buffer, uint32_t *max)
{

	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8014e5c:	6903      	ldr	r3, [r0, #16]
 8014e5e:	075b      	lsls	r3, r3, #29
		return -ENOTSUP;
	}

	*max = buffer->max_usage * sizeof(int);
 8014e60:	bf41      	itttt	mi
 8014e62:	6a43      	ldrmi	r3, [r0, #36]	; 0x24
 8014e64:	009b      	lslmi	r3, r3, #2
	return 0;
 8014e66:	2000      	movmi	r0, #0
	*max = buffer->max_usage * sizeof(int);
 8014e68:	600b      	strmi	r3, [r1, #0]
		return -ENOTSUP;
 8014e6a:	bf58      	it	pl
 8014e6c:	f06f 0085 	mvnpl.w	r0, #133	; 0x85
}
 8014e70:	4770      	bx	lr

08014e72 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 8014e72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e76:	b087      	sub	sp, #28
 8014e78:	4614      	mov	r4, r2
 8014e7a:	9101      	str	r1, [sp, #4]
 8014e7c:	9303      	str	r3, [sp, #12]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
 8014e7e:	4605      	mov	r5, r0
 8014e80:	b918      	cbnz	r0, 8014e8a <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
 8014e82:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
 8014e84:	b007      	add	sp, #28
 8014e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
 8014e8a:	9b01      	ldr	r3, [sp, #4]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d0f8      	beq.n	8014e82 <fnmatchx+0x10>
    if (recursion-- == 0)
 8014e90:	9b03      	ldr	r3, [sp, #12]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	f000 810f 	beq.w	80150b6 <fnmatchx+0x244>
 8014e98:	9a01      	ldr	r2, [sp, #4]
        switch (c = FOLDCASE(*pattern++, flags)) {
 8014e9a:	46a9      	mov	r9, r5
 8014e9c:	4621      	mov	r1, r4
 8014e9e:	f819 0b01 	ldrb.w	r0, [r9], #1
 8014ea2:	f7f2 fd91 	bl	80079c8 <foldcase>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	b2c0      	uxtb	r0, r0
 8014eaa:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 8014eac:	7816      	ldrb	r6, [r2, #0]
 8014eae:	4607      	mov	r7, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
 8014eb0:	d025      	beq.n	8014efe <fnmatchx+0x8c>
 8014eb2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8014eb6:	d10b      	bne.n	8014ed0 <fnmatchx+0x5e>
 8014eb8:	b1c8      	cbz	r0, 8014eee <fnmatchx+0x7c>
 8014eba:	282a      	cmp	r0, #42	; 0x2a
 8014ebc:	d036      	beq.n	8014f2c <fnmatchx+0xba>
            if (c != FOLDCASE(*string++, flags))
 8014ebe:	4621      	mov	r1, r4
 8014ec0:	4630      	mov	r0, r6
 8014ec2:	f7f2 fd81 	bl	80079c8 <foldcase>
 8014ec6:	4287      	cmp	r7, r0
 8014ec8:	f102 0201 	add.w	r2, r2, #1
 8014ecc:	d01e      	beq.n	8014f0c <fnmatchx+0x9a>
 8014ece:	e7d8      	b.n	8014e82 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 8014ed0:	285b      	cmp	r0, #91	; 0x5b
 8014ed2:	d07d      	beq.n	8014fd0 <fnmatchx+0x15e>
 8014ed4:	285c      	cmp	r0, #92	; 0x5c
 8014ed6:	d1f2      	bne.n	8014ebe <fnmatchx+0x4c>
            if (!(flags & FNM_NOESCAPE)) {
 8014ed8:	07e3      	lsls	r3, r4, #31
 8014eda:	d4f0      	bmi.n	8014ebe <fnmatchx+0x4c>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
 8014edc:	7868      	ldrb	r0, [r5, #1]
 8014ede:	f7f2 fd73 	bl	80079c8 <foldcase>
 8014ee2:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 8014ee6:	bf18      	it	ne
 8014ee8:	f105 0902 	addne.w	r9, r5, #2
 8014eec:	e7e7      	b.n	8014ebe <fnmatchx+0x4c>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 8014eee:	06e7      	lsls	r7, r4, #27
 8014ef0:	d501      	bpl.n	8014ef6 <fnmatchx+0x84>
 8014ef2:	2e2f      	cmp	r6, #47	; 0x2f
 8014ef4:	d0c6      	beq.n	8014e84 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
 8014ef6:	1e30      	subs	r0, r6, #0
                        0 : FNM_NOMATCH;
 8014ef8:	bf18      	it	ne
 8014efa:	2001      	movne	r0, #1
 8014efc:	e7c2      	b.n	8014e84 <fnmatchx+0x12>
            if (*string == EOS)
 8014efe:	2e00      	cmp	r6, #0
 8014f00:	d0bf      	beq.n	8014e82 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
 8014f02:	2e2f      	cmp	r6, #47	; 0x2f
 8014f04:	d104      	bne.n	8014f10 <fnmatchx+0x9e>
 8014f06:	07a5      	lsls	r5, r4, #30
 8014f08:	d4bb      	bmi.n	8014e82 <fnmatchx+0x10>
            ++string;
 8014f0a:	3201      	adds	r2, #1
            break;
 8014f0c:	464d      	mov	r5, r9
 8014f0e:	e7c4      	b.n	8014e9a <fnmatchx+0x28>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8014f10:	2e2e      	cmp	r6, #46	; 0x2e
 8014f12:	d1fa      	bne.n	8014f0a <fnmatchx+0x98>
 8014f14:	0760      	lsls	r0, r4, #29
 8014f16:	d5f8      	bpl.n	8014f0a <fnmatchx+0x98>
 8014f18:	9b01      	ldr	r3, [sp, #4]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d0b1      	beq.n	8014e82 <fnmatchx+0x10>
                (string == stringstart ||
 8014f1e:	07a1      	lsls	r1, r4, #30
 8014f20:	d5f3      	bpl.n	8014f0a <fnmatchx+0x98>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 8014f22:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014f26:	2b2f      	cmp	r3, #47	; 0x2f
 8014f28:	d1ef      	bne.n	8014f0a <fnmatchx+0x98>
 8014f2a:	e7aa      	b.n	8014e82 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
 8014f2c:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
 8014f2e:	f7f2 fd4b 	bl	80079c8 <foldcase>
 8014f32:	b2c1      	uxtb	r1, r0
            while (c == '*')
 8014f34:	292a      	cmp	r1, #42	; 0x2a
 8014f36:	d019      	beq.n	8014f6c <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8014f38:	2e2e      	cmp	r6, #46	; 0x2e
 8014f3a:	d10a      	bne.n	8014f52 <fnmatchx+0xe0>
 8014f3c:	0763      	lsls	r3, r4, #29
 8014f3e:	d508      	bpl.n	8014f52 <fnmatchx+0xe0>
 8014f40:	9b01      	ldr	r3, [sp, #4]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d09d      	beq.n	8014e82 <fnmatchx+0x10>
                (string == stringstart ||
 8014f46:	07a7      	lsls	r7, r4, #30
 8014f48:	d503      	bpl.n	8014f52 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 8014f4a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014f4e:	2b2f      	cmp	r3, #47	; 0x2f
 8014f50:	d097      	beq.n	8014e82 <fnmatchx+0x10>
            if (c == EOS) {
 8014f52:	b979      	cbnz	r1, 8014f74 <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
 8014f54:	f014 0002 	ands.w	r0, r4, #2
 8014f58:	d094      	beq.n	8014e84 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
 8014f5a:	06e6      	lsls	r6, r4, #27
 8014f5c:	f100 80ad 	bmi.w	80150ba <fnmatchx+0x248>
                        strchr(string, '/') == NULL ?
 8014f60:	212f      	movs	r1, #47	; 0x2f
 8014f62:	4610      	mov	r0, r2
 8014f64:	f7fc fa68 	bl	8011438 <strchr>
                        0 : FNM_NOMATCH;
 8014f68:	3800      	subs	r0, #0
 8014f6a:	e7c5      	b.n	8014ef8 <fnmatchx+0x86>
                c = FOLDCASE(*++pattern, flags);
 8014f6c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 8014f70:	4621      	mov	r1, r4
 8014f72:	e7dc      	b.n	8014f2e <fnmatchx+0xbc>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 8014f74:	292f      	cmp	r1, #47	; 0x2f
 8014f76:	d123      	bne.n	8014fc0 <fnmatchx+0x14e>
 8014f78:	07a5      	lsls	r5, r4, #30
 8014f7a:	d521      	bpl.n	8014fc0 <fnmatchx+0x14e>
                if ((string = strchr(string, '/')) == NULL)
 8014f7c:	4610      	mov	r0, r2
 8014f7e:	f7fc fa5b 	bl	8011438 <strchr>
 8014f82:	4602      	mov	r2, r0
 8014f84:	2800      	cmp	r0, #0
 8014f86:	d1c1      	bne.n	8014f0c <fnmatchx+0x9a>
 8014f88:	e77b      	b.n	8014e82 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
 8014f8a:	463b      	mov	r3, r7
 8014f8c:	4642      	mov	r2, r8
 8014f8e:	4659      	mov	r1, fp
 8014f90:	4648      	mov	r0, r9
 8014f92:	f7ff ff6e 	bl	8014e72 <fnmatchx>
 8014f96:	2801      	cmp	r0, #1
 8014f98:	f47f af74 	bne.w	8014e84 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
 8014f9c:	2d2f      	cmp	r5, #47	; 0x2f
 8014f9e:	d103      	bne.n	8014fa8 <fnmatchx+0x136>
 8014fa0:	f1ba 0f00 	cmp.w	sl, #0
 8014fa4:	f47f af6d 	bne.w	8014e82 <fnmatchx+0x10>
 8014fa8:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
 8014faa:	4621      	mov	r1, r4
 8014fac:	f89b 0000 	ldrb.w	r0, [fp]
 8014fb0:	f7f2 fd0a 	bl	80079c8 <foldcase>
 8014fb4:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8014fb8:	f106 0601 	add.w	r6, r6, #1
 8014fbc:	d1e5      	bne.n	8014f8a <fnmatchx+0x118>
 8014fbe:	e760      	b.n	8014e82 <fnmatchx+0x10>
    if (recursion-- == 0)
 8014fc0:	9b03      	ldr	r3, [sp, #12]
 8014fc2:	4616      	mov	r6, r2
 8014fc4:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
 8014fc6:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
 8014fca:	f004 0a02 	and.w	sl, r4, #2
 8014fce:	e7eb      	b.n	8014fa8 <fnmatchx+0x136>
            if (*string == EOS)
 8014fd0:	2e00      	cmp	r6, #0
 8014fd2:	f43f af56 	beq.w	8014e82 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
 8014fd6:	2e2f      	cmp	r6, #47	; 0x2f
 8014fd8:	d102      	bne.n	8014fe0 <fnmatchx+0x16e>
 8014fda:	07a0      	lsls	r0, r4, #30
 8014fdc:	f53f af51 	bmi.w	8014e82 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	f7f2 fcf1 	bl	80079c8 <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8014fe6:	786b      	ldrb	r3, [r5, #1]
 8014fe8:	2b21      	cmp	r3, #33	; 0x21
            if ((r = rangematch(pattern,
 8014fea:	4682      	mov	sl, r0
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8014fec:	d001      	beq.n	8014ff2 <fnmatchx+0x180>
 8014fee:	2b5e      	cmp	r3, #94	; 0x5e
 8014ff0:	d123      	bne.n	801503a <fnmatchx+0x1c8>
        ++pattern;
 8014ff2:	3502      	adds	r5, #2
 8014ff4:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8014ff6:	9302      	str	r3, [sp, #8]
    need = 1;
 8014ff8:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8014ffa:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8014ffe:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8015002:	9104      	str	r1, [sp, #16]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8015004:	462f      	mov	r7, r5
 8015006:	4621      	mov	r1, r4
 8015008:	f817 0b01 	ldrb.w	r0, [r7], #1
 801500c:	9305      	str	r3, [sp, #20]
 801500e:	f7f2 fcdb 	bl	80079c8 <foldcase>
 8015012:	fa5f f880 	uxtb.w	r8, r0
 8015016:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 801501a:	9b05      	ldr	r3, [sp, #20]
 801501c:	d110      	bne.n	8015040 <fnmatchx+0x1ce>
 801501e:	bb0b      	cbnz	r3, 8015064 <fnmatchx+0x1f2>
    return ok == negate ? NULL : pattern;
 8015020:	9b02      	ldr	r3, [sp, #8]
 8015022:	455b      	cmp	r3, fp
 8015024:	f43f af2d 	beq.w	8014e82 <fnmatchx+0x10>
            if (r == (void *)-1) {
 8015028:	1c79      	adds	r1, r7, #1
 801502a:	d103      	bne.n	8015034 <fnmatchx+0x1c2>
                if (*string != '[')
 801502c:	2e5b      	cmp	r6, #91	; 0x5b
 801502e:	f47f af28 	bne.w	8014e82 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 8015032:	464f      	mov	r7, r9
            ++string;
 8015034:	3201      	adds	r2, #1
            break;
 8015036:	46b9      	mov	r9, r7
 8015038:	e768      	b.n	8014f0c <fnmatchx+0x9a>
 801503a:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 801503c:	2300      	movs	r3, #0
 801503e:	e7da      	b.n	8014ff6 <fnmatchx+0x184>
        if (c == '/')
 8015040:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
 8015044:	d0f2      	beq.n	801502c <fnmatchx+0x1ba>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8015046:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
 801504a:	d107      	bne.n	801505c <fnmatchx+0x1ea>
 801504c:	9b04      	ldr	r3, [sp, #16]
 801504e:	b94b      	cbnz	r3, 8015064 <fnmatchx+0x1f2>
            c = FOLDCASE(*pattern++, flags);
 8015050:	7868      	ldrb	r0, [r5, #1]
 8015052:	f7f2 fcb9 	bl	80079c8 <foldcase>
 8015056:	1caf      	adds	r7, r5, #2
 8015058:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
 801505c:	f1b8 0f00 	cmp.w	r8, #0
 8015060:	f43f af0f 	beq.w	8014e82 <fnmatchx+0x10>
        if (*pattern == '-' 
 8015064:	783b      	ldrb	r3, [r7, #0]
 8015066:	2b2d      	cmp	r3, #45	; 0x2d
 8015068:	d11f      	bne.n	80150aa <fnmatchx+0x238>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
 801506a:	7878      	ldrb	r0, [r7, #1]
 801506c:	4621      	mov	r1, r4
 801506e:	f7f2 fcab 	bl	80079c8 <foldcase>
 8015072:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8015076:	d018      	beq.n	80150aa <fnmatchx+0x238>
 8015078:	285d      	cmp	r0, #93	; 0x5d
 801507a:	d016      	beq.n	80150aa <fnmatchx+0x238>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 801507c:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
 801507e:	f107 0502 	add.w	r5, r7, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 8015082:	d10a      	bne.n	801509a <fnmatchx+0x228>
 8015084:	07e3      	lsls	r3, r4, #31
 8015086:	d408      	bmi.n	801509a <fnmatchx+0x228>
                c2 = FOLDCASE(*pattern++, flags);
 8015088:	78b8      	ldrb	r0, [r7, #2]
 801508a:	f7f2 fc9d 	bl	80079c8 <foldcase>
            if (c2 == EOS)
 801508e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
 8015092:	f107 0503 	add.w	r5, r7, #3
            if (c2 == EOS)
 8015096:	f43f aef4 	beq.w	8014e82 <fnmatchx+0x10>
            if (c <= test && test <= c2)
 801509a:	45d0      	cmp	r8, sl
 801509c:	dc03      	bgt.n	80150a6 <fnmatchx+0x234>
                ok = 1;
 801509e:	4550      	cmp	r0, sl
 80150a0:	bfa8      	it	ge
 80150a2:	f04f 0b01 	movge.w	fp, #1
        } else if (c == test)
 80150a6:	2300      	movs	r3, #0
 80150a8:	e7ac      	b.n	8015004 <fnmatchx+0x192>
 80150aa:	463d      	mov	r5, r7
 80150ac:	45d0      	cmp	r8, sl
 80150ae:	bf08      	it	eq
 80150b0:	f04f 0b01 	moveq.w	fp, #1
 80150b4:	e7f7      	b.n	80150a6 <fnmatchx+0x234>
        return FNM_NORES;
 80150b6:	2003      	movs	r0, #3
 80150b8:	e6e4      	b.n	8014e84 <fnmatchx+0x12>
                return 0;
 80150ba:	4608      	mov	r0, r1
 80150bc:	e6e2      	b.n	8014e84 <fnmatchx+0x12>

080150be <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
 80150be:	2340      	movs	r3, #64	; 0x40
 80150c0:	f7ff bed7 	b.w	8014e72 <fnmatchx>

080150c4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80150c4:	4770      	bx	lr

080150c6 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 80150c6:	2000      	movs	r0, #0
 80150c8:	4770      	bx	lr

080150ca <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 80150ca:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 80150cc:	075b      	lsls	r3, r3, #29
 80150ce:	d40b      	bmi.n	80150e8 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 80150d0:	6803      	ldr	r3, [r0, #0]
 80150d2:	8842      	ldrh	r2, [r0, #2]
 80150d4:	f3c3 2349 	ubfx	r3, r3, #9, #10
 80150d8:	f3c2 02cb 	ubfx	r2, r2, #3, #12
 80150dc:	1898      	adds	r0, r3, r2
 80150de:	3017      	adds	r0, #23
 80150e0:	f020 0007 	bic.w	r0, r0, #7
 80150e4:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
 80150e6:	4770      	bx	lr
	return 0;
 80150e8:	2000      	movs	r0, #0
}
 80150ea:	4770      	bx	lr

080150ec <dummy_timestamp>:
}
 80150ec:	2000      	movs	r0, #0
 80150ee:	4770      	bx	lr

080150f0 <atomic_inc>:
{
 80150f0:	4603      	mov	r3, r0
}
 80150f2:	f3bf 8f5b 	dmb	ish
 80150f6:	e853 0f00 	ldrex	r0, [r3]
 80150fa:	1c42      	adds	r2, r0, #1
 80150fc:	e843 2100 	strex	r1, r2, [r3]
 8015100:	2900      	cmp	r1, #0
 8015102:	d1f8      	bne.n	80150f6 <atomic_inc+0x6>
 8015104:	f3bf 8f5b 	dmb	ish
 8015108:	4770      	bx	lr

0801510a <default_lf_get_timestamp>:
{
 801510a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 801510c:	f004 fc86 	bl	8019a1c <z_impl_k_uptime_ticks>
 8015110:	220a      	movs	r2, #10
 8015112:	2300      	movs	r3, #0
 8015114:	f7eb ff1a 	bl	8000f4c <__aeabi_uldivmod>
}
 8015118:	bd08      	pop	{r3, pc}

0801511a <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
 801511a:	2001      	movs	r0, #1
 801511c:	f7f2 bd40 	b.w	8007ba0 <z_log_dropped>

08015120 <z_log_get_tag>:
}
 8015120:	2000      	movs	r0, #0
 8015122:	4770      	bx	lr

08015124 <z_cbprintf_cpy>:
{
 8015124:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
 8015126:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
 801512a:	1b9b      	subs	r3, r3, r6
 801512c:	428b      	cmp	r3, r1
{
 801512e:	460c      	mov	r4, r1
 8015130:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
 8015132:	d30a      	bcc.n	801514a <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
 8015134:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015136:	460a      	mov	r2, r1
 8015138:	4601      	mov	r1, r0
 801513a:	1998      	adds	r0, r3, r6
 801513c:	f7eb ffa8 	bl	8001090 <memcpy>
	desc->off += len;
 8015140:	68ab      	ldr	r3, [r5, #8]
 8015142:	4423      	add	r3, r4
 8015144:	60ab      	str	r3, [r5, #8]
	return len;
 8015146:	4620      	mov	r0, r4
}
 8015148:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
 801514a:	f06f 001b 	mvn.w	r0, #27
 801514e:	e7fb      	b.n	8015148 <z_cbprintf_cpy+0x24>

08015150 <z_log_msg_finalize>:
{
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	460e      	mov	r6, r1
 8015154:	4615      	mov	r5, r2
 8015156:	4619      	mov	r1, r3
 8015158:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
 801515c:	4604      	mov	r4, r0
 801515e:	b918      	cbnz	r0, 8015168 <z_log_msg_finalize+0x18>
}
 8015160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 8015164:	f7f2 bd1c 	b.w	8007ba0 <z_log_dropped>
	if (data) {
 8015168:	b12b      	cbz	r3, 8015176 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
 801516a:	3010      	adds	r0, #16
 801516c:	f3c5 2349 	ubfx	r3, r5, #9, #10
 8015170:	4418      	add	r0, r3
 8015172:	f7eb ff8d 	bl	8001090 <memcpy>
	msg->hdr.source = source;
 8015176:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
 801517a:	4620      	mov	r0, r4
}
 801517c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 8015180:	f7f2 beb0 	b.w	8007ee4 <z_log_msg_commit>

08015184 <buffer_write>:
{
 8015184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015186:	4606      	mov	r6, r0
 8015188:	460d      	mov	r5, r1
 801518a:	4614      	mov	r4, r2
 801518c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 801518e:	4621      	mov	r1, r4
 8015190:	4628      	mov	r0, r5
 8015192:	463a      	mov	r2, r7
 8015194:	47b0      	blx	r6
	} while (len != 0);
 8015196:	1a24      	subs	r4, r4, r0
		buf += processed;
 8015198:	4405      	add	r5, r0
	} while (len != 0);
 801519a:	d1f8      	bne.n	801518e <buffer_write+0xa>
}
 801519c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801519e <cbvprintf>:
{
 801519e:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80151a0:	2400      	movs	r4, #0
 80151a2:	9400      	str	r4, [sp, #0]
 80151a4:	f7ec fc7c 	bl	8001aa0 <z_cbvprintf_impl>
}
 80151a8:	b002      	add	sp, #8
 80151aa:	bd10      	pop	{r4, pc}

080151ac <log_output_flush>:
{
 80151ac:	b510      	push	{r4, lr}
		     output->control_block->offset,
 80151ae:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 80151b0:	6881      	ldr	r1, [r0, #8]
{
 80151b2:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 80151b4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80151b8:	6800      	ldr	r0, [r0, #0]
 80151ba:	f7ff ffe3 	bl	8015184 <buffer_write>
	output->control_block->offset = 0;
 80151be:	6863      	ldr	r3, [r4, #4]
 80151c0:	2200      	movs	r2, #0
 80151c2:	601a      	str	r2, [r3, #0]
}
 80151c4:	bd10      	pop	{r4, pc}

080151c6 <out_func>:
{
 80151c6:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 80151c8:	684b      	ldr	r3, [r1, #4]
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	68cb      	ldr	r3, [r1, #12]
 80151ce:	429a      	cmp	r2, r3
{
 80151d0:	4605      	mov	r5, r0
 80151d2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 80151d4:	d102      	bne.n	80151dc <out_func+0x16>
		log_output_flush(out_ctx);
 80151d6:	4608      	mov	r0, r1
 80151d8:	f7ff ffe8 	bl	80151ac <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80151dc:	6863      	ldr	r3, [r4, #4]
 80151de:	f3bf 8f5b 	dmb	ish
 80151e2:	e853 2f00 	ldrex	r2, [r3]
 80151e6:	1c51      	adds	r1, r2, #1
 80151e8:	e843 1000 	strex	r0, r1, [r3]
 80151ec:	2800      	cmp	r0, #0
 80151ee:	d1f8      	bne.n	80151e2 <out_func+0x1c>
 80151f0:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 80151f4:	68a3      	ldr	r3, [r4, #8]
 80151f6:	549d      	strb	r5, [r3, r2]
}
 80151f8:	2000      	movs	r0, #0
 80151fa:	bd38      	pop	{r3, r4, r5, pc}

080151fc <cr_out_func>:
	if (c == '\n') {
 80151fc:	280a      	cmp	r0, #10
{
 80151fe:	b538      	push	{r3, r4, r5, lr}
 8015200:	4604      	mov	r4, r0
 8015202:	460d      	mov	r5, r1
	if (c == '\n') {
 8015204:	d102      	bne.n	801520c <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 8015206:	200d      	movs	r0, #13
 8015208:	f7ff ffdd 	bl	80151c6 <out_func>
	out_func(c, ctx);
 801520c:	4629      	mov	r1, r5
 801520e:	4620      	mov	r0, r4
 8015210:	f7ff ffd9 	bl	80151c6 <out_func>
}
 8015214:	2000      	movs	r0, #0
 8015216:	bd38      	pop	{r3, r4, r5, pc}

08015218 <log_halt>:
	backend->cb->active = false;
 8015218:	684b      	ldr	r3, [r1, #4]
 801521a:	2000      	movs	r0, #0
 801521c:	7158      	strb	r0, [r3, #5]
}
 801521e:	4770      	bx	lr

08015220 <log_go>:
	log_backend_activate(backend, backend->cb->ctx);
 8015220:	684b      	ldr	r3, [r1, #4]
	backend->cb->active = true;
 8015222:	2201      	movs	r2, #1
 8015224:	715a      	strb	r2, [r3, #5]
}
 8015226:	2000      	movs	r0, #0
 8015228:	4770      	bx	lr

0801522a <cmd_log_self_status>:
{
 801522a:	b570      	push	{r4, r5, r6, lr}
 801522c:	4604      	mov	r4, r0
 801522e:	460d      	mov	r5, r1
 8015230:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
 8015232:	f7f3 fb11 	bl	8008858 <shell_state_precheck>
 8015236:	b130      	cbz	r0, 8015246 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
 8015238:	69e1      	ldr	r1, [r4, #28]
 801523a:	4633      	mov	r3, r6
 801523c:	6809      	ldr	r1, [r1, #0]
 801523e:	462a      	mov	r2, r5
 8015240:	4620      	mov	r0, r4
 8015242:	f7f3 fa25 	bl	8008690 <log_status>
}
 8015246:	2000      	movs	r0, #0
 8015248:	bd70      	pop	{r4, r5, r6, pc}

0801524a <cmd_log_self_enable>:
{
 801524a:	b570      	push	{r4, r5, r6, lr}
 801524c:	4604      	mov	r4, r0
 801524e:	460d      	mov	r5, r1
 8015250:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
 8015252:	f7f3 fb01 	bl	8008858 <shell_state_precheck>
 8015256:	b140      	cbz	r0, 801526a <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 8015258:	69e1      	ldr	r1, [r4, #28]
 801525a:	4633      	mov	r3, r6
 801525c:	462a      	mov	r2, r5
 801525e:	4620      	mov	r0, r4
 8015260:	6809      	ldr	r1, [r1, #0]
}
 8015262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 8015266:	f7f3 bb75 	b.w	8008954 <log_enable>
}
 801526a:	bd70      	pop	{r4, r5, r6, pc}

0801526c <log_disable>:
{
 801526c:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
 801526e:	2400      	movs	r4, #0
 8015270:	9400      	str	r4, [sp, #0]
 8015272:	3304      	adds	r3, #4
 8015274:	3a01      	subs	r2, #1
 8015276:	f7f3 faff 	bl	8008878 <filters_set>
}
 801527a:	4620      	mov	r0, r4
 801527c:	b002      	add	sp, #8
 801527e:	bd10      	pop	{r4, pc}

08015280 <cmd_log_self_disable>:
{
 8015280:	b570      	push	{r4, r5, r6, lr}
 8015282:	4604      	mov	r4, r0
 8015284:	460d      	mov	r5, r1
 8015286:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
 8015288:	f7f3 fae6 	bl	8008858 <shell_state_precheck>
 801528c:	b140      	cbz	r0, 80152a0 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 801528e:	69e1      	ldr	r1, [r4, #28]
 8015290:	4633      	mov	r3, r6
 8015292:	462a      	mov	r2, r5
 8015294:	4620      	mov	r0, r4
 8015296:	6809      	ldr	r1, [r1, #0]
}
 8015298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 801529c:	f7ff bfe6 	b.w	801526c <log_disable>
}
 80152a0:	bd70      	pop	{r4, r5, r6, pc}

080152a2 <cmd_log_self_go>:
{
 80152a2:	b510      	push	{r4, lr}
 80152a4:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 80152a6:	f7f3 fad7 	bl	8008858 <shell_state_precheck>
 80152aa:	b120      	cbz	r0, 80152b6 <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
 80152ac:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	685b      	ldr	r3, [r3, #4]
 80152b2:	2201      	movs	r2, #1
 80152b4:	715a      	strb	r2, [r3, #5]
}
 80152b6:	2000      	movs	r0, #0
 80152b8:	bd10      	pop	{r4, pc}

080152ba <cmd_log_self_halt>:
{
 80152ba:	b510      	push	{r4, lr}
 80152bc:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 80152be:	f7f3 facb 	bl	8008858 <shell_state_precheck>
 80152c2:	b120      	cbz	r0, 80152ce <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
 80152c4:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	685b      	ldr	r3, [r3, #4]
 80152ca:	2200      	movs	r2, #0
 80152cc:	715a      	strb	r2, [r3, #5]
}
 80152ce:	2000      	movs	r0, #0
 80152d0:	bd10      	pop	{r4, pc}

080152d2 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 80152d2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 80152d4:	075b      	lsls	r3, r3, #29
 80152d6:	d40b      	bmi.n	80152f0 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 80152d8:	6803      	ldr	r3, [r0, #0]
 80152da:	8842      	ldrh	r2, [r0, #2]
 80152dc:	f3c3 2349 	ubfx	r3, r3, #9, #10
 80152e0:	f3c2 02cb 	ubfx	r2, r2, #3, #12
 80152e4:	1898      	adds	r0, r3, r2
 80152e6:	3017      	adds	r0, #23
 80152e8:	f020 0007 	bic.w	r0, r0, #7
 80152ec:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
 80152ee:	4770      	bx	lr
	return 0;
 80152f0:	2000      	movs	r0, #0
}
 80152f2:	4770      	bx	lr

080152f4 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 80152f4:	6883      	ldr	r3, [r0, #8]
 80152f6:	6a1b      	ldr	r3, [r3, #32]
 80152f8:	b103      	cbz	r3, 80152fc <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 80152fa:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
 80152fc:	4770      	bx	lr

080152fe <uninit>:
{
 80152fe:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
 8015300:	6843      	ldr	r3, [r0, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
 8015306:	4620      	mov	r0, r4
 8015308:	f7ff fff4 	bl	80152f4 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
 801530c:	68a3      	ldr	r3, [r4, #8]
 801530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015310:	b10b      	cbz	r3, 8015316 <uninit+0x18>
		api->irq_rx_disable(dev);
 8015312:	4620      	mov	r0, r4
 8015314:	4798      	blx	r3
}
 8015316:	2000      	movs	r0, #0
 8015318:	bd10      	pop	{r4, pc}

0801531a <enable>:
{
 801531a:	b508      	push	{r3, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 801531c:	6843      	ldr	r3, [r0, #4]
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 801531e:	681a      	ldr	r2, [r3, #0]
 8015320:	7411      	strb	r1, [r2, #16]
	if (blocking_tx) {
 8015322:	b119      	cbz	r1, 801532c <enable+0x12>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	6818      	ldr	r0, [r3, #0]
 8015328:	f7ff ffe4 	bl	80152f4 <uart_irq_tx_disable>
}
 801532c:	2000      	movs	r0, #0
 801532e:	bd08      	pop	{r3, pc}

08015330 <read>:
{
 8015330:	b510      	push	{r4, lr}
 8015332:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 8015334:	6843      	ldr	r3, [r0, #4]
 8015336:	68d8      	ldr	r0, [r3, #12]
 8015338:	f7ff fb6b 	bl	8014a12 <ring_buf_get>
 801533c:	6020      	str	r0, [r4, #0]
}
 801533e:	2000      	movs	r0, #0
 8015340:	bd10      	pop	{r4, pc}

08015342 <write>:
{
 8015342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8015346:	6845      	ldr	r5, [r0, #4]
{
 8015348:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
 801534a:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 801534c:	7c1b      	ldrb	r3, [r3, #16]
{
 801534e:	460c      	mov	r4, r1
 8015350:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 8015352:	b153      	cbz	r3, 801536a <write+0x28>
 8015354:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 8015358:	45a0      	cmp	r8, r4
 801535a:	d121      	bne.n	80153a0 <write+0x5e>
		*cnt = length;
 801535c:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 801535e:	682b      	ldr	r3, [r5, #0]
 8015360:	2001      	movs	r0, #1
 8015362:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8015366:	4790      	blx	r2
 8015368:	e017      	b.n	801539a <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 801536a:	68a8      	ldr	r0, [r5, #8]
 801536c:	f7ff fafd 	bl	801496a <ring_buf_put>
 8015370:	6030      	str	r0, [r6, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8015372:	682b      	ldr	r3, [r5, #0]
 8015374:	f3bf 8f5b 	dmb	ish
 8015378:	330c      	adds	r3, #12
 801537a:	2101      	movs	r1, #1
 801537c:	e853 2f00 	ldrex	r2, [r3]
 8015380:	e843 1000 	strex	r0, r1, [r3]
 8015384:	2800      	cmp	r0, #0
 8015386:	d1f9      	bne.n	801537c <write+0x3a>
 8015388:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 801538c:	b92a      	cbnz	r2, 801539a <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 801538e:	682b      	ldr	r3, [r5, #0]
 8015390:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
 8015392:	6883      	ldr	r3, [r0, #8]
 8015394:	69db      	ldr	r3, [r3, #28]
 8015396:	b103      	cbz	r3, 801539a <write+0x58>
		api->irq_tx_enable(dev);
 8015398:	4798      	blx	r3
}
 801539a:	2000      	movs	r0, #0
 801539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153a6:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
 80153a8:	6883      	ldr	r3, [r0, #8]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80153ae:	e7d3      	b.n	8015358 <write+0x16>

080153b0 <atomic_or>:
 * @param value Value to OR.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
 80153b0:	b510      	push	{r4, lr}
 80153b2:	4603      	mov	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
 80153b4:	f3bf 8f5b 	dmb	ish
 80153b8:	e853 0f00 	ldrex	r0, [r3]
 80153bc:	ea40 0201 	orr.w	r2, r0, r1
 80153c0:	e843 2400 	strex	r4, r2, [r3]
 80153c4:	2c00      	cmp	r4, #0
 80153c6:	d1f7      	bne.n	80153b8 <atomic_or+0x8>
 80153c8:	f3bf 8f5b 	dmb	ish
 80153cc:	bd10      	pop	{r4, pc}

080153ce <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 80153ce:	b510      	push	{r4, lr}
 80153d0:	4603      	mov	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
 80153d2:	f3bf 8f5b 	dmb	ish
 80153d6:	e853 0f00 	ldrex	r0, [r3]
 80153da:	ea00 0201 	and.w	r2, r0, r1
 80153de:	e843 2400 	strex	r4, r2, [r3]
 80153e2:	2c00      	cmp	r4, #0
 80153e4:	d1f7      	bne.n	80153d6 <atomic_and+0x8>
 80153e6:	f3bf 8f5b 	dmb	ish
 80153ea:	bd10      	pop	{r4, pc}

080153ec <shell_signal_handle>:
{
 80153ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80153ee:	0109      	lsls	r1, r1, #4
 80153f0:	6885      	ldr	r5, [r0, #8]
 80153f2:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
 80153f6:	4604      	mov	r4, r0
 80153f8:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80153fa:	440d      	add	r5, r1
		(void) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
 80153fc:	aa01      	add	r2, sp, #4
 80153fe:	4669      	mov	r1, sp
 8015400:	4628      	mov	r0, r5
 8015402:	f004 fc8c 	bl	8019d1e <z_impl_k_poll_signal_check>
	if (set) {
 8015406:	9b00      	ldr	r3, [sp, #0]
 8015408:	b123      	cbz	r3, 8015414 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
 801540a:	4628      	mov	r0, r5
 801540c:	f004 fc84 	bl	8019d18 <z_impl_k_poll_signal_reset>
		handler(shell);
 8015410:	4620      	mov	r0, r4
 8015412:	47b0      	blx	r6
}
 8015414:	b002      	add	sp, #8
 8015416:	bd70      	pop	{r4, r5, r6, pc}

08015418 <z_shell_strlen>:
{
 8015418:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 801541a:	b110      	cbz	r0, 8015422 <z_shell_strlen+0xa>
 801541c:	f7ea fed0 	bl	80001c0 <strlen>
 8015420:	b280      	uxth	r0, r0
}
 8015422:	bd08      	pop	{r3, pc}

08015424 <z_shell_raw_fprintf>:
{
 8015424:	b40e      	push	{r1, r2, r3}
 8015426:	b503      	push	{r0, r1, lr}
 8015428:	aa03      	add	r2, sp, #12
 801542a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 801542e:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8015430:	f7f4 fe94 	bl	800a15c <z_shell_fprintf_fmt>
}
 8015434:	b002      	add	sp, #8
 8015436:	f85d eb04 	ldr.w	lr, [sp], #4
 801543a:	b003      	add	sp, #12
 801543c:	4770      	bx	lr

0801543e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 801543e:	f7fa bae3 	b.w	800fa08 <z_impl_k_mutex_lock>

08015442 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
 8015442:	688b      	ldr	r3, [r1, #8]
 8015444:	b920      	cbnz	r0, 8015450 <transport_evt_handler+0xe>
 8015446:	f503 701a 	add.w	r0, r3, #616	; 0x268
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 801544a:	2100      	movs	r1, #0
 801544c:	f7fb ba4e 	b.w	80108ec <z_impl_k_poll_signal_raise>
 8015450:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8015454:	e7f9      	b.n	801544a <transport_evt_handler+0x8>

08015456 <kill_handler>:
{
 8015456:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
 8015458:	6883      	ldr	r3, [r0, #8]
 801545a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
 801545e:	07db      	lsls	r3, r3, #31
{
 8015460:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
 8015462:	d41d      	bmi.n	80154a0 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
 8015464:	69c0      	ldr	r0, [r0, #28]
 8015466:	f000 fca5 	bl	8015db4 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
 801546a:	6860      	ldr	r0, [r4, #4]
 801546c:	6803      	ldr	r3, [r0, #0]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	4798      	blx	r3
	if (err != 0) {
 8015472:	4605      	mov	r5, r0
 8015474:	b920      	cbnz	r0, 8015480 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
 8015476:	68e0      	ldr	r0, [r4, #12]
 8015478:	f000 fdd4 	bl	8016024 <z_shell_history_purge>
	shell->ctx->state = state;
 801547c:	68a3      	ldr	r3, [r4, #8]
 801547e:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
 8015480:	68a3      	ldr	r3, [r4, #8]
 8015482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015484:	b113      	cbz	r3, 801548c <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
 8015486:	4629      	mov	r1, r5
 8015488:	4620      	mov	r0, r4
 801548a:	4798      	blx	r3
	shell->ctx->tid = NULL;
 801548c:	68a3      	ldr	r3, [r4, #8]
 801548e:	2200      	movs	r2, #0
 8015490:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
 8015494:	f7fa ff2a 	bl	80102ec <z_impl_z_current_get>
}
 8015498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
 801549c:	f7f6 bab8 	b.w	800ba10 <z_impl_k_thread_abort>
		return -EBUSY;
 80154a0:	f06f 050f 	mvn.w	r5, #15
 80154a4:	e7ec      	b.n	8015480 <kill_handler+0x2a>

080154a6 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
 80154a6:	f500 7019 	add.w	r0, r0, #612	; 0x264
 80154aa:	b111      	cbz	r1, 80154b2 <z_flag_history_exit_set.isra.0+0xc>
 80154ac:	2104      	movs	r1, #4
 80154ae:	f7ff bf7f 	b.w	80153b0 <atomic_or>
 80154b2:	f06f 0104 	mvn.w	r1, #4
 80154b6:	f7ff bf8a 	b.w	80153ce <atomic_and>

080154ba <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
 80154ba:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
 80154bc:	f500 7018 	add.w	r0, r0, #608	; 0x260
 80154c0:	b129      	cbz	r1, 80154ce <z_flag_insert_mode_set.isra.0+0x14>
 80154c2:	2101      	movs	r1, #1
 80154c4:	f7ff ff74 	bl	80153b0 <atomic_or>
}
 80154c8:	f000 0001 	and.w	r0, r0, #1
 80154cc:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
 80154ce:	f06f 0101 	mvn.w	r1, #1
 80154d2:	f7ff ff7c 	bl	80153ce <atomic_and>
 80154d6:	e7f7      	b.n	80154c8 <z_flag_insert_mode_set.isra.0+0xe>

080154d8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 80154d8:	f7fa bb10 	b.w	800fafc <z_impl_k_mutex_unlock>

080154dc <shell_log_process>:
{
 80154dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
 80154de:	2300      	movs	r3, #0
{
 80154e0:	4604      	mov	r4, r0
	int signaled = 0;
 80154e2:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
 80154e4:	4620      	mov	r0, r4
 80154e6:	f000 fa91 	bl	8015a0c <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
 80154ea:	69e0      	ldr	r0, [r4, #28]
 80154ec:	f000 fca3 	bl	8015e36 <z_shell_log_backend_process>
 80154f0:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
 80154f2:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
 80154f4:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
 80154f6:	f7f5 f95d 	bl	800a7b4 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
 80154fa:	68a3      	ldr	r3, [r4, #8]
 80154fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
 80154fe:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
 8015502:	b11b      	cbz	r3, 801550c <shell_log_process+0x30>
	return z_impl_k_sleep(timeout);
 8015504:	2096      	movs	r0, #150	; 0x96
 8015506:	2100      	movs	r1, #0
 8015508:	f7fa fed8 	bl	80102bc <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
 801550c:	aa01      	add	r2, sp, #4
 801550e:	4669      	mov	r1, sp
 8015510:	4630      	mov	r0, r6
 8015512:	f004 fc04 	bl	8019d1e <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
 8015516:	b115      	cbz	r5, 801551e <shell_log_process+0x42>
 8015518:	9b00      	ldr	r3, [sp, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d0e2      	beq.n	80154e4 <shell_log_process+0x8>
}
 801551e:	b002      	add	sp, #8
 8015520:	bd70      	pop	{r4, r5, r6, pc}

08015522 <shell_vfprintf>:
{
 8015522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015524:	4604      	mov	r4, r0
	return shell->ctx->state;
 8015526:	6880      	ldr	r0, [r0, #8]
{
 8015528:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
 801552a:	7903      	ldrb	r3, [r0, #4]
 801552c:	2b02      	cmp	r3, #2
{
 801552e:	460d      	mov	r5, r1
 8015530:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
 8015532:	d007      	beq.n	8015544 <shell_vfprintf+0x22>
}
 8015534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
 8015538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801553c:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8015540:	f7ff bf36 	b.w	80153b0 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8015544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801554c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8015550:	f7ff ff75 	bl	801543e <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
 8015554:	68a3      	ldr	r3, [r4, #8]
 8015556:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
 801555a:	0511      	lsls	r1, r2, #20
 801555c:	d404      	bmi.n	8015568 <shell_vfprintf+0x46>
 801555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015560:	b913      	cbnz	r3, 8015568 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
 8015562:	4620      	mov	r0, r4
 8015564:	f000 fa52 	bl	8015a0c <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
 8015568:	463b      	mov	r3, r7
 801556a:	4632      	mov	r2, r6
 801556c:	4629      	mov	r1, r5
 801556e:	4620      	mov	r0, r4
 8015570:	f000 faac 	bl	8015acc <z_shell_vfprintf>
 8015574:	68a3      	ldr	r3, [r4, #8]
 8015576:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
 801557a:	0512      	lsls	r2, r2, #20
 801557c:	d404      	bmi.n	8015588 <shell_vfprintf+0x66>
 801557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015580:	b913      	cbnz	r3, 8015588 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
 8015582:	4620      	mov	r0, r4
 8015584:	f7f5 f916 	bl	800a7b4 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8015588:	6960      	ldr	r0, [r4, #20]
 801558a:	f000 f844 	bl	8015616 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
 801558e:	68a0      	ldr	r0, [r4, #8]
}
 8015590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
 8015594:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8015598:	f7ff bf9e 	b.w	80154d8 <k_mutex_unlock.isra.0>

0801559c <shell_fprintf>:
{
 801559c:	b40c      	push	{r2, r3}
 801559e:	b507      	push	{r0, r1, r2, lr}
 80155a0:	ab04      	add	r3, sp, #16
 80155a2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 80155a6:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
 80155a8:	f7ff ffbb 	bl	8015522 <shell_vfprintf>
}
 80155ac:	b003      	add	sp, #12
 80155ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80155b2:	b002      	add	sp, #8
 80155b4:	4770      	bx	lr

080155b6 <shell_hexdump>:
{
 80155b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ba:	4607      	mov	r7, r0
 80155bc:	460e      	mov	r6, r1
 80155be:	4614      	mov	r4, r2
	const uint8_t *p = data;
 80155c0:	460d      	mov	r5, r1
	while (len) {
 80155c2:	b90c      	cbnz	r4, 80155c8 <shell_hexdump+0x12>
}
 80155c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
 80155c8:	2c10      	cmp	r4, #16
 80155ca:	46a0      	mov	r8, r4
 80155cc:	bf28      	it	cs
 80155ce:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
 80155d2:	462a      	mov	r2, r5
 80155d4:	1ba9      	subs	r1, r5, r6
 80155d6:	4643      	mov	r3, r8
 80155d8:	4638      	mov	r0, r7
 80155da:	f7f4 fd4b 	bl	800a074 <shell_hexdump_line>
		len -= line_len;
 80155de:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
 80155e2:	4445      	add	r5, r8
 80155e4:	e7ed      	b.n	80155c2 <shell_hexdump+0xc>

080155e6 <shell_help>:
{
 80155e6:	b510      	push	{r4, lr}
 80155e8:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 80155ea:	6880      	ldr	r0, [r0, #8]
 80155ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80155f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155f4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 80155f8:	f7ff ff21 	bl	801543e <k_mutex_lock.constprop.0.isra.0>
	shell_internal_help_print(shell);
 80155fc:	4620      	mov	r0, r4
 80155fe:	f7f3 feb1 	bl	8009364 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8015602:	68a0      	ldr	r0, [r4, #8]
}
 8015604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8015608:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 801560c:	f7ff bf64 	b.w	80154d8 <k_mutex_unlock.isra.0>

08015610 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
 8015610:	6883      	ldr	r3, [r0, #8]
 8015612:	6399      	str	r1, [r3, #56]	; 0x38
}
 8015614:	4770      	bx	lr

08015616 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
 8015616:	b510      	push	{r4, lr}
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8015618:	6902      	ldr	r2, [r0, #16]
 801561a:	6883      	ldr	r3, [r0, #8]
 801561c:	6812      	ldr	r2, [r2, #0]
 801561e:	6801      	ldr	r1, [r0, #0]
{
 8015620:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8015622:	68c0      	ldr	r0, [r0, #12]
 8015624:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 8015626:	6923      	ldr	r3, [r4, #16]
 8015628:	2200      	movs	r2, #0
 801562a:	601a      	str	r2, [r3, #0]
}
 801562c:	bd10      	pop	{r4, pc}

0801562e <out_func>:
{
 801562e:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8015630:	68cb      	ldr	r3, [r1, #12]
 8015632:	7c1b      	ldrb	r3, [r3, #16]
 8015634:	2b02      	cmp	r3, #2
{
 8015636:	4605      	mov	r5, r0
 8015638:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 801563a:	d104      	bne.n	8015646 <out_func+0x18>
 801563c:	280a      	cmp	r0, #10
 801563e:	d102      	bne.n	8015646 <out_func+0x18>
		(void)out_func('\r', ctx);
 8015640:	200d      	movs	r0, #13
 8015642:	f7ff fff4 	bl	801562e <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
 8015646:	6923      	ldr	r3, [r4, #16]
 8015648:	6822      	ldr	r2, [r4, #0]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 801564e:	6922      	ldr	r2, [r4, #16]
 8015650:	6813      	ldr	r3, [r2, #0]
 8015652:	3301      	adds	r3, #1
 8015654:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 8015656:	6923      	ldr	r3, [r4, #16]
 8015658:	681a      	ldr	r2, [r3, #0]
 801565a:	6863      	ldr	r3, [r4, #4]
 801565c:	429a      	cmp	r2, r3
 801565e:	d102      	bne.n	8015666 <out_func+0x38>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 8015660:	4620      	mov	r0, r4
 8015662:	f7ff ffd8 	bl	8015616 <z_shell_fprintf_buffer_flush>
}
 8015666:	2000      	movs	r0, #0
 8015668:	bd38      	pop	{r3, r4, r5, pc}

0801566a <z_shell_strlen>:
{
 801566a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 801566c:	b110      	cbz	r0, 8015674 <z_shell_strlen+0xa>
 801566e:	f7ea fda7 	bl	80001c0 <strlen>
 8015672:	b280      	uxth	r0, r0
}
 8015674:	bd08      	pop	{r3, pc}

08015676 <z_column_span_with_buffer_offsets_get>:
{
 8015676:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 8015678:	7b04      	ldrb	r4, [r0, #12]
 801567a:	8943      	ldrh	r3, [r0, #10]
 801567c:	4422      	add	r2, r4
 801567e:	4421      	add	r1, r4
 8015680:	fbb2 f0f3 	udiv	r0, r2, r3
 8015684:	fb03 2210 	mls	r2, r3, r0, r2
 8015688:	fbb1 f0f3 	udiv	r0, r1, r3
 801568c:	fb03 1010 	mls	r0, r3, r0, r1
}
 8015690:	1a10      	subs	r0, r2, r0
 8015692:	bd10      	pop	{r4, pc}

08015694 <z_row_span_with_buffer_offsets_get>:
{
 8015694:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 8015696:	7b04      	ldrb	r4, [r0, #12]
 8015698:	8943      	ldrh	r3, [r0, #10]
 801569a:	4421      	add	r1, r4
 801569c:	1910      	adds	r0, r2, r4
 801569e:	fbb1 f1f3 	udiv	r1, r1, r3
 80156a2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80156a6:	1a40      	subs	r0, r0, r1
 80156a8:	bd10      	pop	{r4, pc}

080156aa <z_shell_multiline_data_calc>:
{
 80156aa:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 80156ac:	7b05      	ldrb	r5, [r0, #12]
 80156ae:	8943      	ldrh	r3, [r0, #10]
 80156b0:	4429      	add	r1, r5
 80156b2:	fbb1 f4f3 	udiv	r4, r1, r3
 80156b6:	fb03 1114 	mls	r1, r3, r4, r1
 80156ba:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 80156bc:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 80156be:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 80156c0:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 80156c2:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 80156c6:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 80156ca:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 80156cc:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 80156ce:	1c4c      	adds	r4, r1, #1
 80156d0:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 80156d2:	8042      	strh	r2, [r0, #2]
}
 80156d4:	bd30      	pop	{r4, r5, pc}

080156d6 <z_shell_pattern_remove>:
{
 80156d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d8:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 80156da:	4611      	mov	r1, r2
{
 80156dc:	4615      	mov	r5, r2
 80156de:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 80156e0:	f7fc f948 	bl	8011974 <strstr>
 80156e4:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
 80156e6:	4628      	mov	r0, r5
 80156e8:	f7ff ffbf 	bl	801566a <z_shell_strlen>
 80156ec:	4605      	mov	r5, r0
	if (!pattern_addr) {
 80156ee:	b1c4      	cbz	r4, 8015722 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 80156f0:	42a7      	cmp	r7, r4
 80156f2:	d207      	bcs.n	8015704 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 80156f4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80156f8:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 80156fa:	bf02      	ittt	eq
 80156fc:	3501      	addeq	r5, #1
 80156fe:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
 8015700:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8015704:	4620      	mov	r0, r4
 8015706:	f7ff ffb0 	bl	801566a <z_shell_strlen>
	*buff_len -= pattern_len;
 801570a:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 801570c:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
 801570e:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8015710:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
 8015712:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
 8015714:	1961      	adds	r1, r4, r5
 8015716:	4620      	mov	r0, r4
 8015718:	b292      	uxth	r2, r2
}
 801571a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801571e:	f7fb bd3b 	b.w	8011198 <memmove>
 8015722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015724 <z_shell_find_cmd>:
{
 8015724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015728:	460f      	mov	r7, r1
 801572a:	b086      	sub	sp, #24
 801572c:	4616      	mov	r6, r2
	if (parent) {
 801572e:	4604      	mov	r4, r0
 8015730:	b170      	cbz	r0, 8015750 <z_shell_find_cmd+0x2c>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
 8015732:	4603      	mov	r3, r0
 8015734:	ac01      	add	r4, sp, #4
 8015736:	f100 0510 	add.w	r5, r0, #16
 801573a:	6818      	ldr	r0, [r3, #0]
 801573c:	6859      	ldr	r1, [r3, #4]
 801573e:	4622      	mov	r2, r4
 8015740:	c203      	stmia	r2!, {r0, r1}
 8015742:	3308      	adds	r3, #8
 8015744:	42ab      	cmp	r3, r5
 8015746:	4614      	mov	r4, r2
 8015748:	d1f7      	bne.n	801573a <z_shell_find_cmd+0x16>
 801574a:	6818      	ldr	r0, [r3, #0]
 801574c:	6010      	str	r0, [r2, #0]
		parent = &parent_cpy;
 801574e:	ac01      	add	r4, sp, #4
 8015750:	f04f 0800 	mov.w	r8, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
 8015754:	4641      	mov	r1, r8
 8015756:	4632      	mov	r2, r6
 8015758:	4620      	mov	r0, r4
 801575a:	f7f4 fdf3 	bl	800a344 <z_shell_cmd_get>
 801575e:	f108 0801 	add.w	r8, r8, #1
 8015762:	4605      	mov	r5, r0
 8015764:	b128      	cbz	r0, 8015772 <z_shell_find_cmd+0x4e>
		if (strcmp(cmd_str, entry->syntax) == 0) {
 8015766:	6829      	ldr	r1, [r5, #0]
 8015768:	4638      	mov	r0, r7
 801576a:	f7ea fd9d 	bl	80002a8 <strcmp>
 801576e:	2800      	cmp	r0, #0
 8015770:	d1f0      	bne.n	8015754 <z_shell_find_cmd+0x30>
}
 8015772:	4628      	mov	r0, r5
 8015774:	b006      	add	sp, #24
 8015776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801577a <z_shell_get_last_command>:
{
 801577a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801577e:	461c      	mov	r4, r3
 8015780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015784:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 8015788:	2300      	movs	r3, #0
{
 801578a:	460f      	mov	r7, r1
 801578c:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 801578e:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
 8015790:	6823      	ldr	r3, [r4, #0]
 8015792:	42bb      	cmp	r3, r7
				continue;
 8015794:	4605      	mov	r5, r0
	while (*match_arg < argc) {
 8015796:	d21b      	bcs.n	80157d0 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
 8015798:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801579c:	f000 fcbc 	bl	8016118 <z_shell_has_wildcard>
 80157a0:	6823      	ldr	r3, [r4, #0]
 80157a2:	4682      	mov	sl, r0
 80157a4:	b118      	cbz	r0, 80157ae <z_shell_get_last_command+0x34>
				(*match_arg)++;
 80157a6:	3301      	adds	r3, #1
 80157a8:	6023      	str	r3, [r4, #0]
				continue;
 80157aa:	4628      	mov	r0, r5
 80157ac:	e7f0      	b.n	8015790 <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
 80157ae:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80157b2:	4642      	mov	r2, r8
 80157b4:	4628      	mov	r0, r5
 80157b6:	f7ff ffb5 	bl	8015724 <z_shell_find_cmd>
		if (entry) {
 80157ba:	b148      	cbz	r0, 80157d0 <z_shell_get_last_command+0x56>
			(*match_arg)++;
 80157bc:	6823      	ldr	r3, [r4, #0]
 80157be:	1c5a      	adds	r2, r3, #1
 80157c0:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
 80157c2:	f1b9 0f00 	cmp.w	r9, #0
 80157c6:	d0e3      	beq.n	8015790 <z_shell_get_last_command+0x16>
 80157c8:	4580      	cmp	r8, r0
 80157ca:	d1e1      	bne.n	8015790 <z_shell_get_last_command+0x16>
			(*match_arg)--;
 80157cc:	6023      	str	r3, [r4, #0]
			return NULL;
 80157ce:	4655      	mov	r5, sl
}
 80157d0:	4628      	mov	r0, r5
 80157d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080157d6 <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
 80157d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80157da:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
 80157dc:	a801      	add	r0, sp, #4
{
 80157de:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
 80157e0:	f7f9 fdc2 	bl	800f368 <z_device_get_all_static>
	const struct device *dev_end = dev + len;
 80157e4:	9d01      	ldr	r5, [sp, #4]
 80157e6:	2318      	movs	r3, #24
 80157e8:	fb03 5500 	mla	r5, r3, r0, r5
	size_t match_idx = 0;
 80157ec:	2600      	movs	r6, #0

	while (dev < dev_end) {
 80157ee:	9801      	ldr	r0, [sp, #4]
 80157f0:	42a8      	cmp	r0, r5
 80157f2:	d301      	bcc.n	80157f8 <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
 80157f4:	2000      	movs	r0, #0
 80157f6:	e00d      	b.n	8015814 <shell_device_lookup+0x3e>
	return z_device_is_ready(dev);
 80157f8:	f003 ff0c 	bl	8019614 <z_device_is_ready>
		if (device_is_ready(dev)
 80157fc:	b1c8      	cbz	r0, 8015832 <shell_device_lookup+0x5c>
		    && (dev->name != NULL)
 80157fe:	9b01      	ldr	r3, [sp, #4]
 8015800:	6818      	ldr	r0, [r3, #0]
 8015802:	b1b0      	cbz	r0, 8015832 <shell_device_lookup+0x5c>
		    && (strlen(dev->name) != 0)
 8015804:	f7ea fcdc 	bl	80001c0 <strlen>
 8015808:	b198      	cbz	r0, 8015832 <shell_device_lookup+0x5c>
			|| (strncmp(prefix, dev->name,
 801580a:	9b01      	ldr	r3, [sp, #4]
		    && ((prefix == NULL)
 801580c:	b92c      	cbnz	r4, 801581a <shell_device_lookup+0x44>
			if (match_idx == idx) {
 801580e:	42be      	cmp	r6, r7
 8015810:	d113      	bne.n	801583a <shell_device_lookup+0x64>
				return dev;
 8015812:	9801      	ldr	r0, [sp, #4]
}
 8015814:	b002      	add	sp, #8
 8015816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (strncmp(prefix, dev->name,
 801581a:	4620      	mov	r0, r4
 801581c:	f8d3 8000 	ldr.w	r8, [r3]
 8015820:	f7ea fcce 	bl	80001c0 <strlen>
 8015824:	4641      	mov	r1, r8
 8015826:	4602      	mov	r2, r0
 8015828:	4620      	mov	r0, r4
 801582a:	f7fb fecb 	bl	80115c4 <strncmp>
 801582e:	2800      	cmp	r0, #0
 8015830:	d0ed      	beq.n	801580e <shell_device_lookup+0x38>
		++dev;
 8015832:	9b01      	ldr	r3, [sp, #4]
 8015834:	3318      	adds	r3, #24
 8015836:	9301      	str	r3, [sp, #4]
 8015838:	e7d9      	b.n	80157ee <shell_device_lookup+0x18>
			++match_idx;
 801583a:	3601      	adds	r6, #1
 801583c:	e7f9      	b.n	8015832 <shell_device_lookup+0x5c>

0801583e <shell_strtoul>:

	return val;
}

unsigned long shell_strtoul(const char *str, int base, int *err)
{
 801583e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	unsigned long val;
	char *endptr = NULL;

	if (*str == '-') {
 8015840:	7803      	ldrb	r3, [r0, #0]
	char *endptr = NULL;
 8015842:	2700      	movs	r7, #0
	if (*str == '-') {
 8015844:	2b2d      	cmp	r3, #45	; 0x2d
{
 8015846:	4604      	mov	r4, r0
 8015848:	460d      	mov	r5, r1
 801584a:	4616      	mov	r6, r2
	char *endptr = NULL;
 801584c:	9701      	str	r7, [sp, #4]
	if (*str == '-') {
 801584e:	d106      	bne.n	801585e <shell_strtoul+0x20>
		*err = -EINVAL;
		return 0;
 8015850:	f06f 0315 	mvn.w	r3, #21
	}

	errno = 0;
	val = strtoul(str, &endptr, base);
	if (errno == ERANGE) {
		*err = -ERANGE;
 8015854:	6033      	str	r3, [r6, #0]
		return 0;
 8015856:	2500      	movs	r5, #0
		*err = -EINVAL;
		return 0;
	}

	return val;
}
 8015858:	4628      	mov	r0, r5
 801585a:	b003      	add	sp, #12
 801585c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	errno = 0;
 801585e:	f000 fce7 	bl	8016230 <__errno>
	val = strtoul(str, &endptr, base);
 8015862:	462a      	mov	r2, r5
	errno = 0;
 8015864:	6007      	str	r7, [r0, #0]
	val = strtoul(str, &endptr, base);
 8015866:	a901      	add	r1, sp, #4
 8015868:	4620      	mov	r0, r4
 801586a:	f7fc fa7d 	bl	8011d68 <strtoul>
 801586e:	4605      	mov	r5, r0
	if (errno == ERANGE) {
 8015870:	f000 fcde 	bl	8016230 <__errno>
 8015874:	6803      	ldr	r3, [r0, #0]
 8015876:	2b22      	cmp	r3, #34	; 0x22
 8015878:	d102      	bne.n	8015880 <shell_strtoul+0x42>
 801587a:	f06f 0321 	mvn.w	r3, #33	; 0x21
 801587e:	e7e9      	b.n	8015854 <shell_strtoul+0x16>
	} else if (errno || endptr == str || *endptr) {
 8015880:	f000 fcd6 	bl	8016230 <__errno>
 8015884:	6803      	ldr	r3, [r0, #0]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d1e2      	bne.n	8015850 <shell_strtoul+0x12>
 801588a:	9b01      	ldr	r3, [sp, #4]
 801588c:	42a3      	cmp	r3, r4
 801588e:	d0df      	beq.n	8015850 <shell_strtoul+0x12>
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d0e0      	beq.n	8015858 <shell_strtoul+0x1a>
 8015896:	e7db      	b.n	8015850 <shell_strtoul+0x12>

08015898 <z_shell_raw_fprintf>:
{
 8015898:	b40e      	push	{r1, r2, r3}
 801589a:	b503      	push	{r0, r1, lr}
 801589c:	aa03      	add	r2, sp, #12
 801589e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 80158a2:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 80158a4:	f7f4 fc5a 	bl	800a15c <z_shell_fprintf_fmt>
}
 80158a8:	b002      	add	sp, #8
 80158aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80158ae:	b003      	add	sp, #12
 80158b0:	4770      	bx	lr

080158b2 <full_line_cmd>:
{
 80158b2:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 80158b4:	6883      	ldr	r3, [r0, #8]
{
 80158b6:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 80158b8:	6818      	ldr	r0, [r3, #0]
 80158ba:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
 80158bc:	b110      	cbz	r0, 80158c4 <full_line_cmd+0x12>
 80158be:	f7ea fc7f 	bl	80001c0 <strlen>
 80158c2:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 80158c4:	68a2      	ldr	r2, [r4, #8]
 80158c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 80158c8:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 80158ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80158ce:	fb02 3011 	mls	r0, r2, r1, r3
}
 80158d2:	fab0 f080 	clz	r0, r0
 80158d6:	0940      	lsrs	r0, r0, #5
 80158d8:	bd38      	pop	{r3, r4, r5, pc}

080158da <z_shell_cursor_in_empty_line>:
{
 80158da:	b538      	push	{r3, r4, r5, lr}
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
 80158dc:	6883      	ldr	r3, [r0, #8]
 80158de:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 80158e2:	8fdd      	ldrh	r5, [r3, #62]	; 0x3e
{
 80158e4:	4604      	mov	r4, r0
		 z_shell_strlen(shell->ctx->prompt)) %
 80158e6:	6818      	ldr	r0, [r3, #0]
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
 80158e8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80158ec:	4355      	muls	r5, r2
 80158ee:	b110      	cbz	r0, 80158f6 <z_shell_cursor_in_empty_line+0x1c>
 80158f0:	f7ea fc66 	bl	80001c0 <strlen>
 80158f4:	b280      	uxth	r0, r0
			shell->ctx->vt100_ctx.cons.terminal_wid ==
 80158f6:	68a2      	ldr	r2, [r4, #8]
 80158f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
 80158fa:	1943      	adds	r3, r0, r5
		 z_shell_strlen(shell->ctx->prompt)) %
 80158fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8015900:	fb02 3011 	mls	r0, r2, r1, r3
}
 8015904:	fab0 f080 	clz	r0, r0
 8015908:	0940      	lsrs	r0, r0, #5
 801590a:	bd38      	pop	{r3, r4, r5, pc}

0801590c <z_shell_op_cond_next_line>:
{
 801590c:	b510      	push	{r4, lr}
 801590e:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 8015910:	f7ff ffe3 	bl	80158da <z_shell_cursor_in_empty_line>
 8015914:	b120      	cbz	r0, 8015920 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
 8015916:	6960      	ldr	r0, [r4, #20]
}
 8015918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
 801591c:	f7f4 bdc6 	b.w	800a4ac <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 8015920:	4620      	mov	r0, r4
 8015922:	f7ff ffc6 	bl	80158b2 <full_line_cmd>
 8015926:	2800      	cmp	r0, #0
 8015928:	d1f5      	bne.n	8015916 <z_shell_op_cond_next_line+0xa>
}
 801592a:	bd10      	pop	{r4, pc}

0801592c <z_shell_op_cursor_position_synchronize>:
{
 801592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 801592e:	6884      	ldr	r4, [r0, #8]
{
 8015930:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8015932:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8015934:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8015936:	f104 0020 	add.w	r0, r4, #32
 801593a:	f7ff feb6 	bl	80156aa <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
 801593e:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
 8015940:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 8015942:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
 8015944:	f7ff ffb5 	bl	80158b2 <full_line_cmd>
 8015948:	b110      	cbz	r0, 8015950 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
 801594a:	6968      	ldr	r0, [r5, #20]
 801594c:	f7f4 fdae 	bl	800a4ac <z_cursor_next_line_move.isra.0>
	if (last_line) {
 8015950:	42b7      	cmp	r7, r6
 8015952:	d107      	bne.n	8015964 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 8015954:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
 8015956:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 8015958:	4628      	mov	r0, r5
 801595a:	1ac9      	subs	r1, r1, r3
}
 801595c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 8015960:	f7f4 bdc0 	b.w	800a4e4 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
 8015964:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8015966:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8015968:	4628      	mov	r0, r5
 801596a:	1ac9      	subs	r1, r1, r3
 801596c:	f7f4 fda4 	bl	800a4b8 <z_shell_op_cursor_vert_move>
 8015970:	e7f0      	b.n	8015954 <z_shell_op_cursor_position_synchronize+0x28>

08015972 <z_shell_op_cursor_move>:
{
 8015972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015974:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 8015976:	6880      	ldr	r0, [r0, #8]
{
 8015978:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 801597a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 801597c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 801597e:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8015980:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8015982:	f7ff fe92 	bl	80156aa <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
 8015986:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8015988:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
 801598a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 801598c:	462a      	mov	r2, r5
 801598e:	3020      	adds	r0, #32
 8015990:	f7ff fe80 	bl	8015694 <z_row_span_with_buffer_offsets_get>
 8015994:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
 8015996:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
 8015998:	462a      	mov	r2, r5
 801599a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 801599c:	3020      	adds	r0, #32
 801599e:	f7ff fe6a 	bl	8015676 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
 80159a2:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
 80159a4:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
 80159a6:	4620      	mov	r0, r4
 80159a8:	f7f4 fd86 	bl	800a4b8 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
 80159ac:	4631      	mov	r1, r6
 80159ae:	4620      	mov	r0, r4
 80159b0:	f7f4 fd98 	bl	800a4e4 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
 80159b4:	68a3      	ldr	r3, [r4, #8]
 80159b6:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
 80159b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159ba <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
 80159ba:	6883      	ldr	r3, [r0, #8]
 80159bc:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80159be:	4249      	negs	r1, r1
 80159c0:	b209      	sxth	r1, r1
 80159c2:	f7ff bfd6 	b.w	8015972 <z_shell_op_cursor_move>

080159c6 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
 80159c6:	6883      	ldr	r3, [r0, #8]
 80159c8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80159ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80159cc:	1ac9      	subs	r1, r1, r3
 80159ce:	b209      	sxth	r1, r1
 80159d0:	f7ff bfcf 	b.w	8015972 <z_shell_op_cursor_move>

080159d4 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
 80159d4:	6883      	ldr	r3, [r0, #8]
 80159d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80159d8:	b11b      	cbz	r3, 80159e2 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
 80159da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80159de:	f7ff bfc8 	b.w	8015972 <z_shell_op_cursor_move>
}
 80159e2:	4770      	bx	lr

080159e4 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
 80159e4:	6883      	ldr	r3, [r0, #8]
 80159e6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80159e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d202      	bcs.n	80159f4 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
 80159ee:	2101      	movs	r1, #1
 80159f0:	f7ff bfbf 	b.w	8015972 <z_shell_op_cursor_move>
}
 80159f4:	4770      	bx	lr

080159f6 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
 80159f6:	6882      	ldr	r2, [r0, #8]
 80159f8:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 80159fa:	8791      	strh	r1, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
 80159fc:	6883      	ldr	r3, [r0, #8]
 80159fe:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8015a00:	4413      	add	r3, r2
 8015a02:	2200      	movs	r2, #0
 8015a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
 8015a08:	f7f4 bd44 	b.w	800a494 <z_clear_eos>

08015a0c <z_shell_cmd_line_erase>:
{
 8015a0c:	b510      	push	{r4, lr}
 8015a0e:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 8015a10:	6880      	ldr	r0, [r0, #8]
 8015a12:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8015a14:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8015a16:	3020      	adds	r0, #32
 8015a18:	f7ff fe47 	bl	80156aa <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 8015a1c:	68a3      	ldr	r3, [r4, #8]
 8015a1e:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
 8015a20:	4620      	mov	r0, r4
 8015a22:	f1c1 0101 	rsb	r1, r1, #1
 8015a26:	f7f4 fd5d 	bl	800a4e4 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
 8015a2a:	68a3      	ldr	r3, [r4, #8]
 8015a2c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8015a2e:	4620      	mov	r0, r4
 8015a30:	3901      	subs	r1, #1
 8015a32:	f7f4 fd41 	bl	800a4b8 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
 8015a36:	4620      	mov	r0, r4
}
 8015a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
 8015a3c:	f7f4 bd2a 	b.w	800a494 <z_clear_eos>

08015a40 <z_shell_write>:
{
 8015a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a44:	4605      	mov	r5, r0
 8015a46:	b086      	sub	sp, #24
 8015a48:	460f      	mov	r7, r1
 8015a4a:	4614      	mov	r4, r2
	size_t offset = 0;
 8015a4c:	2600      	movs	r6, #0
	while (length) {
 8015a4e:	b9a4      	cbnz	r4, 8015a7a <z_shell_write+0x3a>
}
 8015a50:	b006      	add	sp, #24
 8015a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return sh->ctx->ctx.flags.tx_rdy == 1;
 8015a56:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
 8015a5a:	0792      	lsls	r2, r2, #30
 8015a5c:	d5fb      	bpl.n	8015a56 <z_shell_write+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015a5e:	f3bf 8f5b 	dmb	ish
 8015a62:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8015a66:	e853 1f00 	ldrex	r1, [r3]
 8015a6a:	f021 0102 	bic.w	r1, r1, #2
 8015a6e:	e843 1200 	strex	r2, r1, [r3]
 8015a72:	2a00      	cmp	r2, #0
 8015a74:	d1f7      	bne.n	8015a66 <z_shell_write+0x26>
 8015a76:	f3bf 8f5b 	dmb	ish
		int err = shell->iface->api->write(shell->iface,
 8015a7a:	6868      	ldr	r0, [r5, #4]
 8015a7c:	6803      	ldr	r3, [r0, #0]
 8015a7e:	4622      	mov	r2, r4
 8015a80:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8015a84:	19b9      	adds	r1, r7, r6
 8015a86:	466b      	mov	r3, sp
 8015a88:	47c0      	blx	r8
		offset += tmp_cnt;
 8015a8a:	9a00      	ldr	r2, [sp, #0]
 8015a8c:	4416      	add	r6, r2
		length -= tmp_cnt;
 8015a8e:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
 8015a90:	2a00      	cmp	r2, #0
 8015a92:	d1dc      	bne.n	8015a4e <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 8015a94:	68ab      	ldr	r3, [r5, #8]
 8015a96:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
 8015a98:	2903      	cmp	r1, #3
 8015a9a:	d0ee      	beq.n	8015a7a <z_shell_write+0x3a>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 8015a9c:	2902      	cmp	r1, #2
 8015a9e:	d8da      	bhi.n	8015a56 <z_shell_write+0x16>
		k_poll_event_init(&event,
 8015aa0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015aa4:	2101      	movs	r1, #1
 8015aa6:	a801      	add	r0, sp, #4
 8015aa8:	f004 f914 	bl	8019cd4 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
 8015aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ab4:	2101      	movs	r1, #1
 8015ab6:	a801      	add	r0, sp, #4
 8015ab8:	f7fa febc 	bl	8010834 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
 8015abc:	68a8      	ldr	r0, [r5, #8]
 8015abe:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
 8015ac2:	f004 f929 	bl	8019d18 <z_impl_k_poll_signal_reset>
	while (length) {
 8015ac6:	e7d8      	b.n	8015a7a <z_shell_write+0x3a>

08015ac8 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
 8015ac8:	f7ff bfba 	b.w	8015a40 <z_shell_write>

08015acc <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
 8015acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ace:	461e      	mov	r6, r3
	return sh->ctx->cfg.flags.use_colors == 1;
 8015ad0:	6883      	ldr	r3, [r0, #8]
 8015ad2:	4615      	mov	r5, r2
 8015ad4:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8015ad8:	06d2      	lsls	r2, r2, #27
{
 8015ada:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8015adc:	d513      	bpl.n	8015b06 <z_shell_vfprintf+0x3a>
	    z_flag_use_colors_get(shell)	  &&
 8015ade:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8015ae2:	428a      	cmp	r2, r1
 8015ae4:	d00f      	beq.n	8015b06 <z_shell_vfprintf+0x3a>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
 8015ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015ae8:	f8ad 3004 	strh.w	r3, [sp, #4]
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
 8015aec:	f7f4 fd54 	bl	800a598 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8015af0:	6960      	ldr	r0, [r4, #20]
 8015af2:	4632      	mov	r2, r6
 8015af4:	4629      	mov	r1, r5
 8015af6:	f7f4 fb31 	bl	800a15c <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
 8015afa:	a901      	add	r1, sp, #4
 8015afc:	4620      	mov	r0, r4
 8015afe:	f7f4 fd6b 	bl	800a5d8 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
 8015b02:	b003      	add	sp, #12
 8015b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8015b06:	6960      	ldr	r0, [r4, #20]
 8015b08:	4632      	mov	r2, r6
 8015b0a:	4629      	mov	r1, r5
}
 8015b0c:	b003      	add	sp, #12
 8015b0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8015b12:	f7f4 bb23 	b.w	800a15c <z_shell_fprintf_fmt>

08015b16 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
 8015b16:	b40c      	push	{r2, r3}
 8015b18:	b507      	push	{r0, r1, r2, lr}
 8015b1a:	ab04      	add	r3, sp, #16
 8015b1c:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
 8015b20:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
 8015b22:	f7ff ffd3 	bl	8015acc <z_shell_vfprintf>
	va_end(args);
}
 8015b26:	b003      	add	sp, #12
 8015b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b2c:	b002      	add	sp, #8
 8015b2e:	4770      	bx	lr

08015b30 <data_insert>:
{
 8015b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8015b34:	6887      	ldr	r7, [r0, #8]
 8015b36:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8015b38:	18b3      	adds	r3, r6, r2
 8015b3a:	2bff      	cmp	r3, #255	; 0xff
{
 8015b3c:	4605      	mov	r5, r0
 8015b3e:	4688      	mov	r8, r1
 8015b40:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8015b42:	dc20      	bgt.n	8015b86 <data_insert+0x56>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8015b44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015b46:	1af6      	subs	r6, r6, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8015b48:	3342      	adds	r3, #66	; 0x42
 8015b4a:	441f      	add	r7, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8015b4c:	b2b6      	uxth	r6, r6
 8015b4e:	4632      	mov	r2, r6
 8015b50:	4639      	mov	r1, r7
 8015b52:	1938      	adds	r0, r7, r4
 8015b54:	f7fb fb20 	bl	8011198 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015b58:	4622      	mov	r2, r4
 8015b5a:	4641      	mov	r1, r8
 8015b5c:	4638      	mov	r0, r7
 8015b5e:	f7eb fa97 	bl	8001090 <memcpy>
	shell->ctx->cmd_buff_len += len;
 8015b62:	68aa      	ldr	r2, [r5, #8]
 8015b64:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 8015b66:	4423      	add	r3, r4
 8015b68:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8015b6a:	68ab      	ldr	r3, [r5, #8]
 8015b6c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8015b6e:	4413      	add	r3, r2
 8015b70:	2200      	movs	r2, #0
 8015b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
 8015b76:	68ab      	ldr	r3, [r5, #8]
 8015b78:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
 8015b7c:	0789      	lsls	r1, r1, #30
 8015b7e:	d404      	bmi.n	8015b8a <data_insert+0x5a>
		shell->ctx->cmd_buff_pos += len;
 8015b80:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8015b82:	4414      	add	r4, r2
 8015b84:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
 8015b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
 8015b8a:	4631      	mov	r1, r6
 8015b8c:	4628      	mov	r0, r5
}
 8015b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
 8015b92:	f7f4 bd9f 	b.w	800a6d4 <reprint_from_cursor>

08015b96 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
 8015b96:	f7ff bfcb 	b.w	8015b30 <data_insert>

08015b9a <z_shell_op_char_delete>:
{
 8015b9a:	b538      	push	{r3, r4, r5, lr}
 8015b9c:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8015b9e:	6880      	ldr	r0, [r0, #8]
 8015ba0:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8015ba2:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
 8015ba4:	1aa4      	subs	r4, r4, r2
 8015ba6:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 8015ba8:	b18c      	cbz	r4, 8015bce <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8015baa:	3242      	adds	r2, #66	; 0x42
 8015bac:	4410      	add	r0, r2
__ssp_bos_icheck3(memmove, void *, const void *)
 8015bae:	1c41      	adds	r1, r0, #1
 8015bb0:	4622      	mov	r2, r4
 8015bb2:	f7fb faf1 	bl	8011198 <memmove>
	--shell->ctx->cmd_buff_len;
 8015bb6:	68aa      	ldr	r2, [r5, #8]
 8015bb8:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 8015bba:	3b01      	subs	r3, #1
 8015bbc:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
 8015bbe:	1e61      	subs	r1, r4, #1
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	2201      	movs	r2, #1
}
 8015bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
 8015bc8:	b289      	uxth	r1, r1
 8015bca:	f7f4 bd83 	b.w	800a6d4 <reprint_from_cursor>
}
 8015bce:	bd38      	pop	{r3, r4, r5, pc}

08015bd0 <z_shell_op_char_backspace>:
{
 8015bd0:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
 8015bd2:	6883      	ldr	r3, [r0, #8]
 8015bd4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
 8015bd6:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8015bd8:	b152      	cbz	r2, 8015bf0 <z_shell_op_char_backspace+0x20>
 8015bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015bdc:	b143      	cbz	r3, 8015bf0 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
 8015bde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015be2:	f7ff fec6 	bl	8015972 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
 8015be6:	4620      	mov	r0, r4
}
 8015be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
 8015bec:	f7ff bfd5 	b.w	8015b9a <z_shell_op_char_delete>
}
 8015bf0:	bd10      	pop	{r4, pc}

08015bf2 <process_msg_from_buffer>:
		}
	}
}

static bool process_msg_from_buffer(const struct shell *sh)
{
 8015bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = sh->log_backend;
 8015bf4:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
 8015bf6:	695e      	ldr	r6, [r3, #20]
	const struct log_output *log_output = log_backend->log_output;
 8015bf8:	685f      	ldr	r7, [r3, #4]
	return sh->ctx->cfg.flags.use_colors == 1;
 8015bfa:	6883      	ldr	r3, [r0, #8]
	union log_msg_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);

	msg = (union log_msg_generic *)mpsc_pbuf_claim(mpsc_buffer);
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
 8015c02:	f7ff f892 	bl	8014d2a <mpsc_pbuf_claim>
 8015c06:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
 8015c0a:	4604      	mov	r4, r0
 8015c0c:	b150      	cbz	r0, 8015c24 <process_msg_from_buffer+0x32>
	log_output_msg_process(log_output, &msg->log, flags);
 8015c0e:	4601      	mov	r1, r0
 8015c10:	f105 020e 	add.w	r2, r5, #14
 8015c14:	4638      	mov	r0, r7
 8015c16:	f7f2 fc63 	bl	80084e0 <log_output_msg_process>
		return false;
	}

	process_log_msg(sh, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
 8015c1a:	4630      	mov	r0, r6
 8015c1c:	4621      	mov	r1, r4
 8015c1e:	f7ff f8d4 	bl	8014dca <mpsc_pbuf_free>

	return true;
 8015c22:	2001      	movs	r0, #1
}
 8015c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015c26 <process>:

static void process(const struct log_backend *const backend,
		    union log_msg_generic *msg)
{
 8015c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
 8015c2a:	6843      	ldr	r3, [r0, #4]
 8015c2c:	681e      	ldr	r6, [r3, #0]
	const struct shell_log_backend *log_backend = sh->log_backend;
 8015c2e:	69f3      	ldr	r3, [r6, #28]
 8015c30:	68b2      	ldr	r2, [r6, #8]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
 8015c32:	695f      	ldr	r7, [r3, #20]
 8015c34:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);
	struct k_poll_signal *signal;

	switch (sh->log_backend->control_block->state) {
 8015c38:	689a      	ldr	r2, [r3, #8]
	const struct log_output *log_output = log_backend->log_output;
 8015c3a:	f8d3 8004 	ldr.w	r8, [r3, #4]
	switch (sh->log_backend->control_block->state) {
 8015c3e:	7912      	ldrb	r2, [r2, #4]
 8015c40:	2a01      	cmp	r2, #1
{
 8015c42:	460d      	mov	r5, r1
 8015c44:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (sh->log_backend->control_block->state) {
 8015c48:	d003      	beq.n	8015c52 <process+0x2c>
 8015c4a:	2a03      	cmp	r2, #3
 8015c4c:	d035      	beq.n	8015cba <process+0x94>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
 8015c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					log_backend->timeout);
 8015c52:	68da      	ldr	r2, [r3, #12]
	return msg->generic.type == Z_LOG_MSG2_LOG;
 8015c54:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
 8015c56:	0759      	lsls	r1, r3, #29
 8015c58:	d42d      	bmi.n	8015cb6 <process+0x90>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8015c5a:	6828      	ldr	r0, [r5, #0]
 8015c5c:	8869      	ldrh	r1, [r5, #2]
 8015c5e:	f3c0 2449 	ubfx	r4, r0, #9, #10
 8015c62:	f3c1 01cb 	ubfx	r1, r1, #3, #12
 8015c66:	440c      	add	r4, r1
 8015c68:	3417      	adds	r4, #23
 8015c6a:	f024 0407 	bic.w	r4, r4, #7
 8015c6e:	08a4      	lsrs	r4, r4, #2
			return t * ((uint64_t)to_hz / from_hz);
 8015c70:	230a      	movs	r3, #10
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
 8015c72:	fba2 2303 	umull	r2, r3, r2, r3
 8015c76:	4621      	mov	r1, r4
 8015c78:	4638      	mov	r0, r7
 8015c7a:	f7fe ffb8 	bl	8014bee <mpsc_pbuf_alloc>
	if (!dst) {
 8015c7e:	4680      	mov	r8, r0
 8015c80:	b188      	cbz	r0, 8015ca6 <process+0x80>
	dst->hdr.data = msg->buf.hdr.data;
 8015c82:	4629      	mov	r1, r5
 8015c84:	6802      	ldr	r2, [r0, #0]
 8015c86:	f851 3b04 	ldr.w	r3, [r1], #4
 8015c8a:	f3c3 039d 	ubfx	r3, r3, #2, #30
 8015c8e:	f363 029f 	bfi	r2, r3, #2, #30
 8015c92:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
 8015c96:	1e62      	subs	r2, r4, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015c98:	0092      	lsls	r2, r2, #2
 8015c9a:	f7eb f9f9 	bl	8001090 <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
 8015c9e:	4641      	mov	r1, r8
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	f7ff f822 	bl	8014cea <mpsc_pbuf_commit>
				signal =
 8015ca6:	68b0      	ldr	r0, [r6, #8]
 8015ca8:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
 8015cac:	2100      	movs	r1, #0
}
 8015cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb2:	f7fa be1b 	b.w	80108ec <z_impl_k_poll_signal_raise>
	return 0;
 8015cb6:	2400      	movs	r4, #0
 8015cb8:	e7da      	b.n	8015c70 <process+0x4a>
		z_shell_cmd_line_erase(sh);
 8015cba:	4630      	mov	r0, r6
 8015cbc:	f7ff fea6 	bl	8015a0c <z_shell_cmd_line_erase>
		if (k_is_in_isr()) {
 8015cc0:	f003 fcd8 	bl	8019674 <k_is_in_isr>
 8015cc4:	f104 070e 	add.w	r7, r4, #14
 8015cc8:	4604      	mov	r4, r0
 8015cca:	b308      	cbz	r0, 8015d10 <process+0xea>
	__asm__ volatile(
 8015ccc:	f04f 0310 	mov.w	r3, #16
 8015cd0:	f3ef 8411 	mrs	r4, BASEPRI
 8015cd4:	f383 8812 	msr	BASEPRI_MAX, r3
 8015cd8:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
 8015cdc:	68b3      	ldr	r3, [r6, #8]
 8015cde:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
 8015ce2:	051a      	lsls	r2, r3, #20
 8015ce4:	d51e      	bpl.n	8015d24 <process+0xfe>
	log_output_msg_process(log_output, &msg->log, flags);
 8015ce6:	463a      	mov	r2, r7
 8015ce8:	4629      	mov	r1, r5
 8015cea:	4640      	mov	r0, r8
 8015cec:	f7f2 fbf8 	bl	80084e0 <log_output_msg_process>
 8015cf0:	68b3      	ldr	r3, [r6, #8]
 8015cf2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
 8015cf6:	051b      	lsls	r3, r3, #20
 8015cf8:	d402      	bmi.n	8015d00 <process+0xda>
			z_shell_print_prompt_and_cmd(sh);
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	f7f4 fd5a 	bl	800a7b4 <z_shell_print_prompt_and_cmd>
		if (k_is_in_isr()) {
 8015d00:	f003 fcb8 	bl	8019674 <k_is_in_isr>
 8015d04:	b190      	cbz	r0, 8015d2c <process+0x106>
	__asm__ volatile(
 8015d06:	f384 8811 	msr	BASEPRI, r4
 8015d0a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8015d0e:	e79e      	b.n	8015c4e <process+0x28>
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8015d10:	68b0      	ldr	r0, [r6, #8]
 8015d12:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
 8015d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d1e:	f7f9 fe73 	bl	800fa08 <z_impl_k_mutex_lock>
 8015d22:	e7db      	b.n	8015cdc <process+0xb6>
			z_shell_cmd_line_erase(sh);
 8015d24:	4630      	mov	r0, r6
 8015d26:	f7ff fe71 	bl	8015a0c <z_shell_cmd_line_erase>
 8015d2a:	e7dc      	b.n	8015ce6 <process+0xc0>
			k_mutex_unlock(&sh->ctx->wr_mtx);
 8015d2c:	68b0      	ldr	r0, [r6, #8]
 8015d2e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
}
 8015d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_unlock(mutex);
 8015d36:	f7f9 bee1 	b.w	800fafc <z_impl_k_mutex_unlock>

08015d3a <dropped>:
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
 8015d3a:	6843      	ldr	r3, [r0, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8015d3e:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
 8015d42:	f3bf 8f5b 	dmb	ish
 8015d46:	e853 cf00 	ldrex	ip, [r3]
 8015d4a:	448c      	add	ip, r1
 8015d4c:	e843 c000 	strex	r0, ip, [r3]
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d1f8      	bne.n	8015d46 <dropped+0xc>
 8015d54:	f3bf 8f5b 	dmb	ish
 8015d58:	6893      	ldr	r3, [r2, #8]
 8015d5a:	f3bf 8f5b 	dmb	ish
 8015d5e:	e853 0f00 	ldrex	r0, [r3]
 8015d62:	4408      	add	r0, r1
 8015d64:	e843 0200 	strex	r2, r0, [r3]
 8015d68:	2a00      	cmp	r2, #0
 8015d6a:	d1f8      	bne.n	8015d5e <dropped+0x24>
 8015d6c:	f3bf 8f5b 	dmb	ish
}
 8015d70:	4770      	bx	lr

08015d72 <z_shell_log_backend_output_func>:
{
 8015d72:	b510      	push	{r4, lr}
 8015d74:	4613      	mov	r3, r2
 8015d76:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
 8015d78:	460a      	mov	r2, r1
 8015d7a:	4601      	mov	r1, r0
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7ff fea3 	bl	8015ac8 <z_shell_print_stream>
}
 8015d82:	4620      	mov	r0, r4
 8015d84:	bd10      	pop	{r4, pc}

08015d86 <z_shell_log_backend_enable>:
{
 8015d86:	b570      	push	{r4, r5, r6, lr}
 8015d88:	4604      	mov	r4, r0
 8015d8a:	460d      	mov	r5, r1
 8015d8c:	4616      	mov	r6, r2
	mpsc_pbuf_init(backend->mpsc_buffer, backend->mpsc_buffer_config);
 8015d8e:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
 8015d92:	f7fe ff0b 	bl	8014bac <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
 8015d96:	4632      	mov	r2, r6
 8015d98:	6820      	ldr	r0, [r4, #0]
 8015d9a:	4629      	mov	r1, r5
 8015d9c:	f7f2 f96a 	bl	8008074 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
 8015da0:	6863      	ldr	r3, [r4, #4]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
 8015da6:	68a3      	ldr	r3, [r4, #8]
 8015da8:	2200      	movs	r2, #0
 8015daa:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
 8015dac:	68a3      	ldr	r3, [r4, #8]
 8015dae:	2201      	movs	r2, #1
 8015db0:	711a      	strb	r2, [r3, #4]
}
 8015db2:	bd70      	pop	{r4, r5, r6, pc}

08015db4 <z_shell_log_backend_disable>:
{
 8015db4:	b510      	push	{r4, lr}
 8015db6:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
 8015db8:	6800      	ldr	r0, [r0, #0]
 8015dba:	f7f2 f989 	bl	80080d0 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
 8015dbe:	68a3      	ldr	r3, [r4, #8]
 8015dc0:	2202      	movs	r2, #2
 8015dc2:	711a      	strb	r2, [r3, #4]
}
 8015dc4:	bd10      	pop	{r4, pc}

08015dc6 <panic>:
{
 8015dc6:	b510      	push	{r4, lr}
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
 8015dc8:	6843      	ldr	r3, [r0, #4]
 8015dca:	681c      	ldr	r4, [r3, #0]
	err = sh->iface->api->enable(sh->iface, true);
 8015dcc:	6860      	ldr	r0, [r4, #4]
 8015dce:	6803      	ldr	r3, [r0, #0]
 8015dd0:	2101      	movs	r1, #1
 8015dd2:	689b      	ldr	r3, [r3, #8]
 8015dd4:	4798      	blx	r3
	if (err == 0) {
 8015dd6:	bb48      	cbnz	r0, 8015e2c <panic+0x66>
		sh->log_backend->control_block->state =
 8015dd8:	69e3      	ldr	r3, [r4, #28]
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	2203      	movs	r2, #3
 8015dde:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015de0:	68a3      	ldr	r3, [r4, #8]
 8015de2:	f3bf 8f5b 	dmb	ish
 8015de6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8015dea:	e853 1f00 	ldrex	r1, [r3]
 8015dee:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8015df2:	e843 1200 	strex	r2, r1, [r3]
 8015df6:	2a00      	cmp	r2, #0
 8015df8:	d1f7      	bne.n	8015dea <panic+0x24>
 8015dfa:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&sh->ctx->vt100_ctx.cons,
 8015dfe:	68a0      	ldr	r0, [r4, #8]
 8015e00:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8015e02:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8015e04:	3020      	adds	r0, #32
 8015e06:	f7ff fc50 	bl	80156aa <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(sh, -1);
 8015e0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f7f4 fb52 	bl	800a4b8 <z_shell_op_cursor_vert_move>
					   -sh->ctx->vt100_ctx.cons.cur_x);
 8015e14:	68a3      	ldr	r3, [r4, #8]
 8015e16:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(sh,
 8015e18:	4620      	mov	r0, r4
 8015e1a:	4249      	negs	r1, r1
 8015e1c:	f7f4 fb62 	bl	800a4e4 <z_shell_op_cursor_horiz_move>
		while (process_msg_from_buffer(sh)) {
 8015e20:	4620      	mov	r0, r4
 8015e22:	f7ff fee6 	bl	8015bf2 <process_msg_from_buffer>
 8015e26:	2800      	cmp	r0, #0
 8015e28:	d1fa      	bne.n	8015e20 <panic+0x5a>
}
 8015e2a:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(sh->log_backend);
 8015e2c:	69e0      	ldr	r0, [r4, #28]
}
 8015e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(sh->log_backend);
 8015e32:	f7ff bfbf 	b.w	8015db4 <z_shell_log_backend_disable>

08015e36 <z_shell_log_backend_process>:
{
 8015e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
			(const struct shell *)backend->backend->cb->ctx;
 8015e38:	6803      	ldr	r3, [r0, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8015e3a:	6882      	ldr	r2, [r0, #8]
	const struct shell *sh =
 8015e3c:	685b      	ldr	r3, [r3, #4]
 8015e3e:	681d      	ldr	r5, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
 8015e40:	68ab      	ldr	r3, [r5, #8]
 8015e42:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8015e46:	f3bf 8f5b 	dmb	ish
{
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015e50:	2100      	movs	r1, #0
 8015e52:	e852 6f00 	ldrex	r6, [r2]
 8015e56:	e842 1000 	strex	r0, r1, [r2]
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	d1f9      	bne.n	8015e52 <z_shell_log_backend_process+0x1c>
 8015e5e:	f3bf 8f5b 	dmb	ish
	if (dropped) {
 8015e62:	b126      	cbz	r6, 8015e6e <z_shell_log_backend_process+0x38>
		if (colors) {
 8015e64:	b94b      	cbnz	r3, 8015e7a <z_shell_log_backend_process+0x44>
		log_output_dropped_process(backend->log_output, dropped);
 8015e66:	6860      	ldr	r0, [r4, #4]
 8015e68:	4631      	mov	r1, r6
 8015e6a:	f7f2 fb6f 	bl	800854c <log_output_dropped_process>
	return process_msg_from_buffer(sh);
 8015e6e:	4628      	mov	r0, r5
}
 8015e70:	b002      	add	sp, #8
 8015e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return process_msg_from_buffer(sh);
 8015e76:	f7ff bebc 	b.w	8015bf2 <process_msg_from_buffer>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
 8015e7a:	68ab      	ldr	r3, [r5, #8]
			z_shell_vt100_color_set(sh, SHELL_VT100_COLOR_RED);
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015e80:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015e84:	2101      	movs	r1, #1
 8015e86:	f7f4 fb87 	bl	800a598 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
 8015e8a:	6860      	ldr	r0, [r4, #4]
 8015e8c:	4631      	mov	r1, r6
 8015e8e:	f7f2 fb5d 	bl	800854c <log_output_dropped_process>
			z_shell_vt100_colors_restore(sh, &col);
 8015e92:	a901      	add	r1, sp, #4
 8015e94:	4628      	mov	r0, r5
 8015e96:	f7f4 fb9f 	bl	800a5d8 <z_shell_vt100_colors_restore>
 8015e9a:	e7e8      	b.n	8015e6e <z_shell_log_backend_process+0x38>

08015e9c <z_shell_raw_fprintf>:
{
 8015e9c:	b40e      	push	{r1, r2, r3}
 8015e9e:	b503      	push	{r0, r1, lr}
 8015ea0:	aa03      	add	r2, sp, #12
 8015ea2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8015ea6:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8015ea8:	f7f4 f958 	bl	800a15c <z_shell_fprintf_fmt>
}
 8015eac:	b002      	add	sp, #8
 8015eae:	f85d eb04 	ldr.w	lr, [sp], #4
 8015eb2:	b003      	add	sp, #12
 8015eb4:	4770      	bx	lr

08015eb6 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
 8015eb6:	6983      	ldr	r3, [r0, #24]
 8015eb8:	2000      	movs	r0, #0
 8015eba:	6018      	str	r0, [r3, #0]
}
 8015ebc:	4770      	bx	lr

08015ebe <z_shell_raw_fprintf>:
{
 8015ebe:	b40e      	push	{r1, r2, r3}
 8015ec0:	b503      	push	{r0, r1, lr}
 8015ec2:	aa03      	add	r2, sp, #12
 8015ec4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8015ec8:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8015eca:	f7f4 f947 	bl	800a15c <z_shell_fprintf_fmt>
}
 8015ece:	b002      	add	sp, #8
 8015ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ed4:	b003      	add	sp, #12
 8015ed6:	4770      	bx	lr

08015ed8 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015ed8:	6883      	ldr	r3, [r0, #8]
 8015eda:	f3bf 8f5b 	dmb	ish
 8015ede:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015ee2:	e853 1f00 	ldrex	r1, [r3]
 8015ee6:	f021 0108 	bic.w	r1, r1, #8
 8015eea:	e843 1200 	strex	r2, r1, [r3]
 8015eee:	2a00      	cmp	r2, #0
 8015ef0:	d1f7      	bne.n	8015ee2 <cmd_bacskpace_mode_backspace+0xa>
 8015ef2:	f3bf 8f5b 	dmb	ish
}
 8015ef6:	2000      	movs	r0, #0
 8015ef8:	4770      	bx	lr

08015efa <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015efa:	6883      	ldr	r3, [r0, #8]
 8015efc:	f3bf 8f5b 	dmb	ish
 8015f00:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015f04:	e853 1f00 	ldrex	r1, [r3]
 8015f08:	f041 0108 	orr.w	r1, r1, #8
 8015f0c:	e843 1200 	strex	r2, r1, [r3]
 8015f10:	2a00      	cmp	r2, #0
 8015f12:	d1f7      	bne.n	8015f04 <cmd_bacskpace_mode_delete+0xa>
 8015f14:	f3bf 8f5b 	dmb	ish
}
 8015f18:	2000      	movs	r0, #0
 8015f1a:	4770      	bx	lr

08015f1c <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015f1c:	6883      	ldr	r3, [r0, #8]
 8015f1e:	f3bf 8f5b 	dmb	ish
 8015f22:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015f26:	e853 1f00 	ldrex	r1, [r3]
 8015f2a:	f021 0102 	bic.w	r1, r1, #2
 8015f2e:	e843 1200 	strex	r2, r1, [r3]
 8015f32:	2a00      	cmp	r2, #0
 8015f34:	d1f7      	bne.n	8015f26 <cmd_echo_off+0xa>
 8015f36:	f3bf 8f5b 	dmb	ish
}
 8015f3a:	2000      	movs	r0, #0
 8015f3c:	4770      	bx	lr

08015f3e <cmd_colors_off>:
 8015f3e:	6883      	ldr	r3, [r0, #8]
 8015f40:	f3bf 8f5b 	dmb	ish
 8015f44:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015f48:	e853 1f00 	ldrex	r1, [r3]
 8015f4c:	f021 0110 	bic.w	r1, r1, #16
 8015f50:	e843 1200 	strex	r2, r1, [r3]
 8015f54:	2a00      	cmp	r2, #0
 8015f56:	d1f7      	bne.n	8015f48 <cmd_colors_off+0xa>
 8015f58:	f3bf 8f5b 	dmb	ish
}
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	4770      	bx	lr

08015f60 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8015f60:	6883      	ldr	r3, [r0, #8]
 8015f62:	f3bf 8f5b 	dmb	ish
 8015f66:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015f6a:	e853 1f00 	ldrex	r1, [r3]
 8015f6e:	f041 0110 	orr.w	r1, r1, #16
 8015f72:	e843 1200 	strex	r2, r1, [r3]
 8015f76:	2a00      	cmp	r2, #0
 8015f78:	d1f7      	bne.n	8015f6a <cmd_colors_on+0xa>
 8015f7a:	f3bf 8f5b 	dmb	ish
}
 8015f7e:	2000      	movs	r0, #0
 8015f80:	4770      	bx	lr

08015f82 <cmd_echo_on>:
 8015f82:	6883      	ldr	r3, [r0, #8]
 8015f84:	f3bf 8f5b 	dmb	ish
 8015f88:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015f8c:	e853 1f00 	ldrex	r1, [r3]
 8015f90:	f041 0102 	orr.w	r1, r1, #2
 8015f94:	e843 1200 	strex	r2, r1, [r3]
 8015f98:	2a00      	cmp	r2, #0
 8015f9a:	d1f7      	bne.n	8015f8c <cmd_echo_on+0xa>
 8015f9c:	f3bf 8f5b 	dmb	ish
}
 8015fa0:	2000      	movs	r0, #0
 8015fa2:	4770      	bx	lr

08015fa4 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 8015fa4:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8015fa6:	6883      	ldr	r3, [r0, #8]
	sys_dnode_t *const next = node->next;
 8015fa8:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 8015fac:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 8015fae:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 8015fb0:	2100      	movs	r1, #0
	node->prev = NULL;
 8015fb2:	e9c3 1100 	strd	r1, r1, [r3]
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
 8015fb6:	891a      	ldrh	r2, [r3, #8]
 8015fb8:	895b      	ldrh	r3, [r3, #10]
	ring_buf_get(history->ring_buf, NULL, total_len);
 8015fba:	6800      	ldr	r0, [r0, #0]
			h_item->len + h_item->padding;
 8015fbc:	441a      	add	r2, r3
	ring_buf_get(history->ring_buf, NULL, total_len);
 8015fbe:	320c      	adds	r2, #12
 8015fc0:	f7fe fd27 	bl	8014a12 <ring_buf_get>

	return true;
}
 8015fc4:	2001      	movs	r0, #1
 8015fc6:	bd08      	pop	{r3, pc}

08015fc8 <z_shell_history_mode_exit>:
	history->current = NULL;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	60c3      	str	r3, [r0, #12]
}
 8015fcc:	4770      	bx	lr

08015fce <z_shell_history_get>:
{
 8015fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fd0:	461f      	mov	r7, r3
	return list->head == list;
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	4616      	mov	r6, r2
 8015fd6:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 8015fda:	429c      	cmp	r4, r3
 8015fdc:	d102      	bne.n	8015fe4 <z_shell_history_get+0x16>
		*len = 0U;
 8015fde:	2000      	movs	r0, #0
 8015fe0:	8038      	strh	r0, [r7, #0]
}
 8015fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
 8015fe4:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
 8015fe6:	b9b1      	cbnz	r1, 8016016 <z_shell_history_get+0x48>
		if (history->current == NULL) {
 8015fe8:	2d00      	cmp	r5, #0
 8015fea:	d0f8      	beq.n	8015fde <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 8015fec:	42a5      	cmp	r5, r4
 8015fee:	d102      	bne.n	8015ff6 <z_shell_history_get+0x28>
	history->current = l_item;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 8015ff4:	e7f3      	b.n	8015fde <z_shell_history_get+0x10>
 8015ff6:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
 8015ff8:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 8015ffa:	2c00      	cmp	r4, #0
 8015ffc:	d0ef      	beq.n	8015fde <z_shell_history_get+0x10>
 8015ffe:	8922      	ldrh	r2, [r4, #8]
 8016000:	f104 010c 	add.w	r1, r4, #12
 8016004:	4630      	mov	r0, r6
 8016006:	f7eb f843 	bl	8001090 <memcpy>
		*len = h_item->len;
 801600a:	8923      	ldrh	r3, [r4, #8]
 801600c:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
 801600e:	2200      	movs	r2, #0
 8016010:	54f2      	strb	r2, [r6, r3]
		return true;
 8016012:	2001      	movs	r0, #1
 8016014:	e7e5      	b.n	8015fe2 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 8016016:	2d00      	cmp	r5, #0
 8016018:	d0ee      	beq.n	8015ff8 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 801601a:	6883      	ldr	r3, [r0, #8]
 801601c:	429d      	cmp	r5, r3
 801601e:	d0e7      	beq.n	8015ff0 <z_shell_history_get+0x22>
 8016020:	682c      	ldr	r4, [r5, #0]
 8016022:	e7e9      	b.n	8015ff8 <z_shell_history_get+0x2a>

08016024 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
 8016024:	b538      	push	{r3, r4, r5, lr}
 8016026:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 8016028:	1d05      	adds	r5, r0, #4
 801602a:	6863      	ldr	r3, [r4, #4]
 801602c:	42ab      	cmp	r3, r5
 801602e:	d004      	beq.n	801603a <z_shell_history_purge+0x16>
 8016030:	4620      	mov	r0, r4
 8016032:	f7ff ffb7 	bl	8015fa4 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
 8016036:	2800      	cmp	r0, #0
 8016038:	d1f7      	bne.n	801602a <z_shell_history_purge+0x6>
	}
}
 801603a:	bd38      	pop	{r3, r4, r5, pc}

0801603c <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
 801603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item, *h_prev_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
 8016040:	f102 050c 	add.w	r5, r2, #12
	return buf->size;
 8016044:	6803      	ldr	r3, [r0, #0]
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 8016046:	f1c5 0900 	rsb	r9, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 801604a:	69db      	ldr	r3, [r3, #28]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 801604c:	f009 0903 	and.w	r9, r9, #3
{
 8016050:	b085      	sub	sp, #20
	total_len += padding;
 8016052:	444d      	add	r5, r9
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8016054:	429d      	cmp	r5, r3
{
 8016056:	4604      	mov	r4, r0
 8016058:	9101      	str	r1, [sp, #4]
 801605a:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 801605c:	d810      	bhi.n	8016080 <z_shell_history_put+0x44>
	history->current = NULL;
 801605e:	2300      	movs	r3, #0
 8016060:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
 8016062:	b16a      	cbz	r2, 8016080 <z_shell_history_put+0x44>
	return list->head == list;
 8016064:	6846      	ldr	r6, [r0, #4]
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 8016066:	f100 0a04 	add.w	sl, r0, #4
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801606a:	45b2      	cmp	sl, r6
 801606c:	d00b      	beq.n	8016086 <z_shell_history_put+0x4a>
	h_prev_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	if (l_item &&
 801606e:	b15e      	cbz	r6, 8016088 <z_shell_history_put+0x4c>
	   (h_prev_item->len == len) &&
 8016070:	8933      	ldrh	r3, [r6, #8]
	if (l_item &&
 8016072:	4293      	cmp	r3, r2
 8016074:	d108      	bne.n	8016088 <z_shell_history_put+0x4c>
	   (memcmp(h_prev_item->data, line, len) == 0)) {
 8016076:	f106 000c 	add.w	r0, r6, #12
 801607a:	f7fb f85d 	bl	8011138 <memcmp>
	   (h_prev_item->len == len) &&
 801607e:	b918      	cbnz	r0, 8016088 <z_shell_history_put+0x4c>
		}

		ring_buf_put_finish(history->ring_buf, 0);
		remove_from_tail(history);
	} while (1);
}
 8016080:	b005      	add	sp, #20
 8016082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016086:	461e      	mov	r6, r3
		ring_buf_put_finish(history->ring_buf, 0);
 8016088:	f04f 0800 	mov.w	r8, #0
		if (ring_buf_is_empty(history->ring_buf)) {
 801608c:	6823      	ldr	r3, [r4, #0]
 801608e:	6919      	ldr	r1, [r3, #16]
 8016090:	689a      	ldr	r2, [r3, #8]
 8016092:	4291      	cmp	r1, r2
	buf->put_head = buf->put_tail = buf->put_base = value;
 8016094:	bf01      	itttt	eq
 8016096:	e9c3 8802 	strdeq	r8, r8, [r3, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
 801609a:	e9c3 8805 	strdeq	r8, r8, [r3, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
 801609e:	f8c3 8004 	streq.w	r8, [r3, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
 80160a2:	f8c3 8010 	streq.w	r8, [r3, #16]
		claim_len = ring_buf_put_claim(history->ring_buf,
 80160a6:	6820      	ldr	r0, [r4, #0]
 80160a8:	462a      	mov	r2, r5
 80160aa:	a903      	add	r1, sp, #12
 80160ac:	f7fe fc29 	bl	8014902 <ring_buf_put_claim>
		if (claim_len < total_len) {
 80160b0:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 80160b2:	4683      	mov	fp, r0
		if (claim_len < total_len) {
 80160b4:	d91e      	bls.n	80160f4 <z_shell_history_put+0xb8>
				ring_buf_put_claim(history->ring_buf,
 80160b6:	6820      	ldr	r0, [r4, #0]
 80160b8:	462a      	mov	r2, r5
 80160ba:	a903      	add	r1, sp, #12
 80160bc:	f7fe fc21 	bl	8014902 <ring_buf_put_claim>
			if (claim2_len == total_len) {
 80160c0:	4285      	cmp	r5, r0
 80160c2:	d118      	bne.n	80160f6 <z_shell_history_put+0xba>
				h_prev_item->padding += claim_len;
 80160c4:	8972      	ldrh	r2, [r6, #10]
 80160c6:	445a      	add	r2, fp
 80160c8:	8172      	strh	r2, [r6, #10]
				total_len += claim_len;
 80160ca:	44ab      	add	fp, r5
			add_to_head(history, h_item, line, len, padding);
 80160cc:	9d03      	ldr	r5, [sp, #12]
 80160ce:	9901      	ldr	r1, [sp, #4]
	item->len = len;
 80160d0:	812f      	strh	r7, [r5, #8]
 80160d2:	463a      	mov	r2, r7
	item->padding = padding;
 80160d4:	f8a5 900a 	strh.w	r9, [r5, #10]
 80160d8:	f105 000c 	add.w	r0, r5, #12
 80160dc:	f7ea ffd8 	bl	8001090 <memcpy>
	sys_dnode_t *const head = list->head;
 80160e0:	6862      	ldr	r2, [r4, #4]
	node->prev = list;
 80160e2:	e9c5 2a00 	strd	r2, sl, [r5]
	head->prev = node;
 80160e6:	6055      	str	r5, [r2, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 80160e8:	6820      	ldr	r0, [r4, #0]
	list->head = node;
 80160ea:	6065      	str	r5, [r4, #4]
 80160ec:	4659      	mov	r1, fp
 80160ee:	f7fe fc27 	bl	8014940 <ring_buf_put_finish>
			break;
 80160f2:	e7c5      	b.n	8016080 <z_shell_history_put+0x44>
		if (claim_len == total_len) {
 80160f4:	d0ea      	beq.n	80160cc <z_shell_history_put+0x90>
		ring_buf_put_finish(history->ring_buf, 0);
 80160f6:	6820      	ldr	r0, [r4, #0]
 80160f8:	2100      	movs	r1, #0
 80160fa:	f7fe fc21 	bl	8014940 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 80160fe:	6863      	ldr	r3, [r4, #4]
 8016100:	459a      	cmp	sl, r3
 8016102:	d0c3      	beq.n	801608c <z_shell_history_put+0x50>
 8016104:	4620      	mov	r0, r4
 8016106:	f7ff ff4d 	bl	8015fa4 <remove_from_tail.part.0>
 801610a:	e7bf      	b.n	801608c <z_shell_history_put+0x50>

0801610c <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 801610c:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 801610e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 8016112:	2300      	movs	r3, #0
 8016114:	60c3      	str	r3, [r0, #12]
}
 8016116:	4770      	bx	lr

08016118 <z_shell_has_wildcard>:
{
 8016118:	b510      	push	{r4, lr}
 801611a:	4604      	mov	r4, r0
 801611c:	b128      	cbz	r0, 801612a <z_shell_has_wildcard+0x12>
 801611e:	f7ea f84f 	bl	80001c0 <strlen>
	for (size_t i = 0; i < str_len; i++) {
 8016122:	2300      	movs	r3, #0
 8016124:	b280      	uxth	r0, r0
 8016126:	4298      	cmp	r0, r3
 8016128:	d801      	bhi.n	801612e <z_shell_has_wildcard+0x16>
	return false;
 801612a:	2000      	movs	r0, #0
}
 801612c:	bd10      	pop	{r4, pc}
		if ((str[i] == '?') || (str[i] == '*')) {
 801612e:	5ce2      	ldrb	r2, [r4, r3]
 8016130:	2a3f      	cmp	r2, #63	; 0x3f
 8016132:	d003      	beq.n	801613c <z_shell_has_wildcard+0x24>
 8016134:	2a2a      	cmp	r2, #42	; 0x2a
 8016136:	d001      	beq.n	801613c <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
 8016138:	3301      	adds	r3, #1
 801613a:	e7f4      	b.n	8016126 <z_shell_has_wildcard+0xe>
			return true;
 801613c:	2001      	movs	r0, #1
 801613e:	e7f5      	b.n	801612c <z_shell_has_wildcard+0x14>

08016140 <z_shell_wildcard_prepare>:
{
 8016140:	b510      	push	{r4, lr}
 8016142:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
 8016144:	6880      	ldr	r0, [r0, #8]
 8016146:	f44f 7280 	mov.w	r2, #256	; 0x100
 801614a:	2100      	movs	r1, #0
 801614c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8016150:	f7fb f8a2 	bl	8011298 <memset>
	memcpy(shell->ctx->temp_buff,
 8016154:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8016156:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8016158:	f100 0142 	add.w	r1, r0, #66	; 0x42
 801615c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8016160:	f7ea ff96 	bl	8001090 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
 8016164:	68a0      	ldr	r0, [r4, #8]
 8016166:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 801616a:	f7f4 f925 	bl	800a3b8 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
 801616e:	68a0      	ldr	r0, [r4, #8]
 8016170:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8016174:	f7ea f824 	bl	80001c0 <strlen>
 8016178:	68a3      	ldr	r3, [r4, #8]
 801617a:	3001      	adds	r0, #1
 801617c:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
 8016180:	bd10      	pop	{r4, pc}

08016182 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
 8016182:	b510      	push	{r4, lr}
 8016184:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
 8016186:	6880      	ldr	r0, [r0, #8]
 8016188:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801618c:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 8016190:	3042      	adds	r0, #66	; 0x42
 8016192:	f7ea ff7d 	bl	8001090 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
 8016196:	68a3      	ldr	r3, [r4, #8]
 8016198:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 801619c:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 801619e:	bd10      	pop	{r4, pc}

080161a0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 80161a0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80161a2:	6800      	ldr	r0, [r0, #0]
 80161a4:	f7f4 be4a 	b.w	800ae3c <z_arm_fatal_error>

080161a8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80161a8:	2100      	movs	r1, #0
 80161aa:	2001      	movs	r0, #1
 80161ac:	f7f4 be46 	b.w	800ae3c <z_arm_fatal_error>

080161b0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 80161b0:	b508      	push	{r3, lr}
	handler();
 80161b2:	f7f4 ff33 	bl	800b01c <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80161b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80161ba:	f7f5 b8a1 	b.w	800b300 <z_arm_exc_exit>

080161be <z_log_msg_static_create.constprop.0>:
 80161be:	2300      	movs	r3, #0
 80161c0:	f7f1 bfc6 	b.w	8008150 <z_impl_z_log_msg_static_create>

080161c4 <malloc_prepare>:
}
 80161c4:	2000      	movs	r0, #0
 80161c6:	4770      	bx	lr

080161c8 <_stdout_hook_default>:
}
 80161c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161cc:	4770      	bx	lr

080161ce <_stdin_hook_default>:
}
 80161ce:	2000      	movs	r0, #0
 80161d0:	4770      	bx	lr

080161d2 <_read>:
{
 80161d2:	4608      	mov	r0, r1
 80161d4:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 80161d6:	f7f5 bd2f 	b.w	800bc38 <z_impl_zephyr_read_stdin>

080161da <_write>:
{
 80161da:	4608      	mov	r0, r1
 80161dc:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 80161de:	f7f5 bd3f 	b.w	800bc60 <z_impl_zephyr_write_stdout>

080161e2 <_close>:
int _close(int file)
 80161e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161e6:	4770      	bx	lr

080161e8 <_lseek>:
}
 80161e8:	2000      	movs	r0, #0
 80161ea:	4770      	bx	lr

080161ec <_isatty>:
}
 80161ec:	2802      	cmp	r0, #2
 80161ee:	bfcc      	ite	gt
 80161f0:	2000      	movgt	r0, #0
 80161f2:	2001      	movle	r0, #1
 80161f4:	4770      	bx	lr

080161f6 <_kill>:
}
 80161f6:	2000      	movs	r0, #0
 80161f8:	4770      	bx	lr

080161fa <_getpid>:
}
 80161fa:	2000      	movs	r0, #0
 80161fc:	4770      	bx	lr

080161fe <_fstat>:
	st->st_mode = S_IFCHR;
 80161fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016202:	604b      	str	r3, [r1, #4]
}
 8016204:	2000      	movs	r0, #0
 8016206:	4770      	bx	lr

08016208 <__retarget_lock_init_recursive>:
{
 8016208:	b510      	push	{r4, lr}
 801620a:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 801620c:	2014      	movs	r0, #20
 801620e:	f7fa fcc7 	bl	8010ba0 <malloc>
 8016212:	6020      	str	r0, [r4, #0]
}
 8016214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 8016218:	f003 ba5b 	b.w	80196d2 <z_impl_k_mutex_init>

0801621c <__retarget_lock_close_recursive>:
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
 801621c:	f7fa bcc8 	b.w	8010bb0 <free>

08016220 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8016220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016228:	f7f9 bbee 	b.w	800fa08 <z_impl_k_mutex_lock>

0801622c <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 801622c:	f7f9 bc66 	b.w	800fafc <z_impl_k_mutex_unlock>

08016230 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8016230:	f7f9 b8d2 	b.w	800f3d8 <z_impl_z_errno>

08016234 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8016234:	2200      	movs	r2, #0
{
 8016236:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8016238:	4611      	mov	r1, r2
 801623a:	2006      	movs	r0, #6
 801623c:	f7f4 fed6 	bl	800afec <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8016240:	2200      	movs	r2, #0
 8016242:	4611      	mov	r1, r2
 8016244:	2007      	movs	r0, #7
 8016246:	f7f4 fed1 	bl	800afec <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 801624a:	2200      	movs	r2, #0
 801624c:	4611      	mov	r1, r2
 801624e:	2008      	movs	r0, #8
 8016250:	f7f4 fecc 	bl	800afec <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8016254:	2200      	movs	r2, #0
 8016256:	4611      	mov	r1, r2
 8016258:	2009      	movs	r0, #9
 801625a:	f7f4 fec7 	bl	800afec <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 801625e:	2200      	movs	r2, #0
 8016260:	4611      	mov	r1, r2
 8016262:	200a      	movs	r0, #10
 8016264:	f7f4 fec2 	bl	800afec <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8016268:	2200      	movs	r2, #0
 801626a:	4611      	mov	r1, r2
 801626c:	2017      	movs	r0, #23
 801626e:	f7f4 febd 	bl	800afec <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8016272:	2200      	movs	r2, #0
 8016274:	4611      	mov	r1, r2
 8016276:	2028      	movs	r0, #40	; 0x28
 8016278:	f7f4 feb8 	bl	800afec <z_arm_irq_priority_set>
}
 801627c:	2000      	movs	r0, #0
 801627e:	bd08      	pop	{r3, pc}

08016280 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8016280:	6902      	ldr	r2, [r0, #16]
 8016282:	2110      	movs	r1, #16
 8016284:	200a      	movs	r0, #10
 8016286:	f7f5 bd2d 	b.w	800bce4 <__stm32_exti_isr.isra.0>

0801628a <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 801628a:	6902      	ldr	r2, [r0, #16]
 801628c:	210a      	movs	r1, #10
 801628e:	2005      	movs	r0, #5
 8016290:	f7f5 bd28 	b.w	800bce4 <__stm32_exti_isr.isra.0>

08016294 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8016294:	6902      	ldr	r2, [r0, #16]
 8016296:	2105      	movs	r1, #5
 8016298:	2004      	movs	r0, #4
 801629a:	f7f5 bd23 	b.w	800bce4 <__stm32_exti_isr.isra.0>

0801629e <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 801629e:	6902      	ldr	r2, [r0, #16]
 80162a0:	2104      	movs	r1, #4
 80162a2:	2003      	movs	r0, #3
 80162a4:	f7f5 bd1e 	b.w	800bce4 <__stm32_exti_isr.isra.0>

080162a8 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 80162a8:	6902      	ldr	r2, [r0, #16]
 80162aa:	2103      	movs	r1, #3
 80162ac:	2002      	movs	r0, #2
 80162ae:	f7f5 bd19 	b.w	800bce4 <__stm32_exti_isr.isra.0>

080162b2 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 80162b2:	6902      	ldr	r2, [r0, #16]
 80162b4:	2102      	movs	r1, #2
 80162b6:	2001      	movs	r0, #1
 80162b8:	f7f5 bd14 	b.w	800bce4 <__stm32_exti_isr.isra.0>

080162bc <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 80162bc:	6902      	ldr	r2, [r0, #16]
 80162be:	2101      	movs	r1, #1
 80162c0:	2000      	movs	r0, #0
 80162c2:	f7f5 bd0f 	b.w	800bce4 <__stm32_exti_isr.isra.0>

080162c6 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80162c6:	680b      	ldr	r3, [r1, #0]
 80162c8:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 80162cc:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 80162ce:	bf9f      	itttt	ls
 80162d0:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 80162d4:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val |= pclken->enr;
 80162d8:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 80162da:	681a      	ldrls	r2, [r3, #0]
	reg_val |= pclken->enr;
 80162dc:	bf9d      	ittte	ls
 80162de:	430a      	orrls	r2, r1
	return 0;
 80162e0:	2000      	movls	r0, #0
	*reg = reg_val;
 80162e2:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 80162e4:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 80162e8:	4770      	bx	lr

080162ea <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80162ea:	680b      	ldr	r3, [r1, #0]
 80162ec:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 80162f0:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 80162f2:	bf9f      	itttt	ls
 80162f4:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 80162f8:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val &= ~pclken->enr;
 80162fc:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 80162fe:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 8016300:	bf9d      	ittte	ls
 8016302:	438a      	bicls	r2, r1
	return 0;
 8016304:	2000      	movls	r0, #0
	*reg = reg_val;
 8016306:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8016308:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 801630c:	4770      	bx	lr

0801630e <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 801630e:	680a      	ldr	r2, [r1, #0]
	switch (src_clk) {
 8016310:	2a0a      	cmp	r2, #10
 8016312:	d814      	bhi.n	801633e <stm32_clock_control_configure+0x30>
 8016314:	f240 73ca 	movw	r3, #1994	; 0x7ca
 8016318:	40d3      	lsrs	r3, r2
 801631a:	07db      	lsls	r3, r3, #31
 801631c:	d50f      	bpl.n	801633e <stm32_clock_control_configure+0x30>
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 801631e:	6849      	ldr	r1, [r1, #4]
					STM32_CLOCK_REG_GET(pclken->enr));
 8016320:	b2cb      	uxtb	r3, r1
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
 8016322:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016326:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 801632a:	f3c1 4202 	ubfx	r2, r1, #16, #3
	reg_val = *reg;
 801632e:	6818      	ldr	r0, [r3, #0]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
 8016330:	f3c1 2104 	ubfx	r1, r1, #8, #5
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 8016334:	408a      	lsls	r2, r1
	reg_val |= dt_val;
 8016336:	4302      	orrs	r2, r0
	*reg = reg_val;
 8016338:	601a      	str	r2, [r3, #0]
	return 0;
 801633a:	2000      	movs	r0, #0
 801633c:	4770      	bx	lr
	switch (src_clk) {
 801633e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8016342:	4770      	bx	lr

08016344 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016344:	6843      	ldr	r3, [r0, #4]
 8016346:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8016348:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 801634a:	600b      	str	r3, [r1, #0]
}
 801634c:	2000      	movs	r0, #0
 801634e:	4770      	bx	lr

08016350 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016350:	6843      	ldr	r3, [r0, #4]
 8016352:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8016354:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8016356:	4042      	eors	r2, r0
 8016358:	400a      	ands	r2, r1
 801635a:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 801635c:	615a      	str	r2, [r3, #20]
}
 801635e:	2000      	movs	r0, #0
 8016360:	4770      	bx	lr

08016362 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016362:	6843      	ldr	r3, [r0, #4]
 8016364:	685b      	ldr	r3, [r3, #4]
}
 8016366:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8016368:	6199      	str	r1, [r3, #24]
}
 801636a:	4770      	bx	lr

0801636c <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801636c:	6843      	ldr	r3, [r0, #4]
 801636e:	685b      	ldr	r3, [r3, #4]
}
 8016370:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8016372:	6299      	str	r1, [r3, #40]	; 0x28
 8016374:	4770      	bx	lr

08016376 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016376:	6843      	ldr	r3, [r0, #4]
 8016378:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 801637a:	6953      	ldr	r3, [r2, #20]
 801637c:	404b      	eors	r3, r1
 801637e:	6153      	str	r3, [r2, #20]
}
 8016380:	2000      	movs	r0, #0
 8016382:	4770      	bx	lr

08016384 <gpio_stm32_manage_callback>:
{
 8016384:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8016386:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8016388:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 801638a:	b1f8      	cbz	r0, 80163cc <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801638c:	4288      	cmp	r0, r1
 801638e:	d119      	bne.n	80163c4 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8016390:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8016392:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8016394:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8016396:	42a1      	cmp	r1, r4
 8016398:	d100      	bne.n	801639c <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 801639a:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 801639c:	2000      	movs	r0, #0
 801639e:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 80163a0:	b12a      	cbz	r2, 80163ae <gpio_stm32_manage_callback+0x2a>
	return list->head;
 80163a2:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 80163a4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80163a6:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 80163a8:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 80163aa:	b902      	cbnz	r2, 80163ae <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 80163ac:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 80163ae:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 80163b0:	e010      	b.n	80163d4 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80163b2:	4281      	cmp	r1, r0
 80163b4:	d106      	bne.n	80163c4 <gpio_stm32_manage_callback+0x40>
	return node->next;
 80163b6:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 80163b8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80163ba:	68d8      	ldr	r0, [r3, #12]
 80163bc:	4281      	cmp	r1, r0
 80163be:	d1ed      	bne.n	801639c <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 80163c0:	60dc      	str	r4, [r3, #12]
}
 80163c2:	e7eb      	b.n	801639c <gpio_stm32_manage_callback+0x18>
	return node->next;
 80163c4:	4604      	mov	r4, r0
 80163c6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d1f2      	bne.n	80163b2 <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 80163cc:	2a00      	cmp	r2, #0
 80163ce:	d1e8      	bne.n	80163a2 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 80163d0:	f06f 0015 	mvn.w	r0, #21
}
 80163d4:	bd10      	pop	{r4, pc}

080163d6 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80163d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163d8:	f002 0530 	and.w	r5, r2, #48	; 0x30
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80163dc:	6844      	ldr	r4, [r0, #4]
	if (mode == STM32_MODER_ANALOG_MODE) {
 80163de:	2d30      	cmp	r5, #48	; 0x30
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80163e0:	461e      	mov	r6, r3
	pinval = 1 << pin;
 80163e2:	f04f 0001 	mov.w	r0, #1
  SET_BIT(GPIOx->ASCR, PinMask);
 80163e6:	bf08      	it	eq
 80163e8:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 80163ea:	fa00 f001 	lsl.w	r0, r0, r1
 80163ee:	bf04      	itt	eq
 80163f0:	4303      	orreq	r3, r0
 80163f2:	62e3      	streq	r3, [r4, #44]	; 0x2c
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80163f4:	6867      	ldr	r7, [r4, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80163f6:	f3c2 1380 	ubfx	r3, r2, #6, #1
 80163fa:	ea27 0700 	bic.w	r7, r7, r0
 80163fe:	408b      	lsls	r3, r1
 8016400:	433b      	orrs	r3, r7
 8016402:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016404:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8016408:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801640c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8016410:	f04f 0e03 	mov.w	lr, #3
 8016414:	007f      	lsls	r7, r7, #1
 8016416:	fa0e f707 	lsl.w	r7, lr, r7
 801641a:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801641e:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8016422:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8016426:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 801642a:	007f      	lsls	r7, r7, #1
 801642c:	40bb      	lsls	r3, r7
 801642e:	ea43 030c 	orr.w	r3, r3, ip
 8016432:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016434:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8016438:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801643c:	68e7      	ldr	r7, [r4, #12]
 801643e:	005b      	lsls	r3, r3, #1
 8016440:	fa0e f303 	lsl.w	r3, lr, r3
 8016444:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016448:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 801644c:	fab3 f383 	clz	r3, r3
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8016450:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8016454:	005b      	lsls	r3, r3, #1
 8016456:	409a      	lsls	r2, r3
 8016458:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 801645a:	2d20      	cmp	r5, #32
 801645c:	60e2      	str	r2, [r4, #12]
 801645e:	d116      	bne.n	801648e <gpio_stm32_configure_raw.isra.0+0xb8>
		if (pin < 8) {
 8016460:	2907      	cmp	r1, #7
 8016462:	dc2b      	bgt.n	80164bc <gpio_stm32_configure_raw.isra.0+0xe6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016464:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8016468:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 801646a:	b32b      	cbz	r3, 80164b8 <gpio_stm32_configure_raw.isra.0+0xe2>
  return __builtin_clz(value);
 801646c:	fab3 f383 	clz	r3, r3
 8016470:	009b      	lsls	r3, r3, #2
 8016472:	210f      	movs	r1, #15
 8016474:	fa01 f303 	lsl.w	r3, r1, r3
 8016478:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801647c:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8016480:	fab3 f383 	clz	r3, r3
 8016484:	009b      	lsls	r3, r3, #2
 8016486:	fa06 f303 	lsl.w	r3, r6, r3
 801648a:	4313      	orrs	r3, r2
 801648c:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801648e:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8016492:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8016496:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016498:	fa90 f0a0 	rbit	r0, r0
 801649c:	005b      	lsls	r3, r3, #1
 801649e:	2103      	movs	r1, #3
  return __builtin_clz(value);
 80164a0:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80164a4:	092d      	lsrs	r5, r5, #4
 80164a6:	fa01 f303 	lsl.w	r3, r1, r3
 80164aa:	0040      	lsls	r0, r0, #1
 80164ac:	ea22 0303 	bic.w	r3, r2, r3
 80164b0:	4085      	lsls	r5, r0
 80164b2:	431d      	orrs	r5, r3
 80164b4:	6025      	str	r5, [r4, #0]
}
 80164b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 80164b8:	462b      	mov	r3, r5
 80164ba:	e7d9      	b.n	8016470 <gpio_stm32_configure_raw.isra.0+0x9a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80164bc:	0a03      	lsrs	r3, r0, #8
 80164be:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80164c0:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80164c4:	b182      	cbz	r2, 80164e8 <gpio_stm32_configure_raw.isra.0+0x112>
  return __builtin_clz(value);
 80164c6:	fab2 f282 	clz	r2, r2
 80164ca:	0092      	lsls	r2, r2, #2
 80164cc:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80164ce:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80164d2:	fab3 f383 	clz	r3, r3
 80164d6:	fa07 f202 	lsl.w	r2, r7, r2
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	ea21 0202 	bic.w	r2, r1, r2
 80164e0:	409e      	lsls	r6, r3
 80164e2:	4316      	orrs	r6, r2
 80164e4:	6266      	str	r6, [r4, #36]	; 0x24
}
 80164e6:	e7d2      	b.n	801648e <gpio_stm32_configure_raw.isra.0+0xb8>
    return 32U;
 80164e8:	462a      	mov	r2, r5
 80164ea:	e7ee      	b.n	80164ca <gpio_stm32_configure_raw.isra.0+0xf4>

080164ec <gpio_stm32_config>:
{
 80164ec:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80164ee:	039a      	lsls	r2, r3, #14
{
 80164f0:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 80164f2:	d518      	bpl.n	8016526 <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80164f4:	079c      	lsls	r4, r3, #30
 80164f6:	d50f      	bpl.n	8016518 <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80164f8:	075a      	lsls	r2, r3, #29
 80164fa:	d52d      	bpl.n	8016558 <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80164fc:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80164fe:	06dc      	lsls	r4, r3, #27
 8016500:	d50c      	bpl.n	801651c <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8016502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8016506:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 801650a:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 801650c:	d018      	beq.n	8016540 <gpio_stm32_config+0x54>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801650e:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8016510:	2301      	movs	r3, #1
 8016512:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8016514:	61a3      	str	r3, [r4, #24]
	return 0;
 8016516:	e00d      	b.n	8016534 <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8016518:	2210      	movs	r2, #16
 801651a:	e7f0      	b.n	80164fe <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801651c:	069c      	lsls	r4, r3, #26
 801651e:	d5f2      	bpl.n	8016506 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8016520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8016524:	e7ef      	b.n	8016506 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8016526:	03dc      	lsls	r4, r3, #15
 8016528:	d511      	bpl.n	801654e <gpio_stm32_config+0x62>
		if ((flags & GPIO_PULL_UP) != 0) {
 801652a:	06da      	lsls	r2, r3, #27
 801652c:	d411      	bmi.n	8016552 <gpio_stm32_config+0x66>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801652e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016532:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8016534:	6840      	ldr	r0, [r0, #4]
 8016536:	2300      	movs	r3, #0
 8016538:	f7ff ff4d 	bl	80163d6 <gpio_stm32_configure_raw.isra.0>
	return 0;
 801653c:	2000      	movs	r0, #0
}
 801653e:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8016540:	035b      	lsls	r3, r3, #13
 8016542:	d5f7      	bpl.n	8016534 <gpio_stm32_config+0x48>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016544:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8016546:	2301      	movs	r3, #1
 8016548:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 801654a:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 801654c:	e7f2      	b.n	8016534 <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 801654e:	2230      	movs	r2, #48	; 0x30
 8016550:	e7f0      	b.n	8016534 <gpio_stm32_config+0x48>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8016552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016556:	e7ed      	b.n	8016534 <gpio_stm32_config+0x48>
				return -ENOTSUP;
 8016558:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801655c:	e7ef      	b.n	801653e <gpio_stm32_config+0x52>

0801655e <gpio_stm32_isr>:
{
 801655e:	b570      	push	{r4, r5, r6, lr}
 8016560:	460b      	mov	r3, r1
 8016562:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8016564:	b121      	cbz	r1, 8016570 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8016566:	2501      	movs	r5, #1
 8016568:	685e      	ldr	r6, [r3, #4]
	return node->next;
 801656a:	680c      	ldr	r4, [r1, #0]
 801656c:	4085      	lsls	r5, r0
 801656e:	b901      	cbnz	r1, 8016572 <gpio_stm32_isr+0x14>
}
 8016570:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8016572:	688a      	ldr	r2, [r1, #8]
 8016574:	402a      	ands	r2, r5
 8016576:	d002      	beq.n	801657e <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8016578:	684b      	ldr	r3, [r1, #4]
 801657a:	4630      	mov	r0, r6
 801657c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801657e:	b11c      	cbz	r4, 8016588 <gpio_stm32_isr+0x2a>
 8016580:	6823      	ldr	r3, [r4, #0]
 8016582:	4621      	mov	r1, r4
 8016584:	461c      	mov	r4, r3
 8016586:	e7f2      	b.n	801656e <gpio_stm32_isr+0x10>
 8016588:	4623      	mov	r3, r4
 801658a:	e7fa      	b.n	8016582 <gpio_stm32_isr+0x24>

0801658c <gpio_stm32_configure>:
{
 801658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801658e:	461f      	mov	r7, r3
 8016590:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8016592:	6840      	ldr	r0, [r0, #4]
{
 8016594:	460e      	mov	r6, r1
 8016596:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8016598:	f7ff ff1d 	bl	80163d6 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 801659c:	2f11      	cmp	r7, #17
 801659e:	d108      	bne.n	80165b2 <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80165a0:	2301      	movs	r3, #1
 80165a2:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80165a6:	6863      	ldr	r3, [r4, #4]
 80165a8:	685b      	ldr	r3, [r3, #4]
		if (gpio_out == STM32_ODR_1) {
 80165aa:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 80165ac:	bf4c      	ite	mi
 80165ae:	619e      	strmi	r6, [r3, #24]
 80165b0:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 80165b2:	2000      	movs	r0, #0
 80165b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165b6 <i2c_transfer>:
{
 80165b6:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80165b8:	6884      	ldr	r4, [r0, #8]
 80165ba:	68a4      	ldr	r4, [r4, #8]
 80165bc:	46a4      	mov	ip, r4
}
 80165be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165c2:	4760      	bx	ip

080165c4 <device_name_get>:

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
 80165c4:	b510      	push	{r4, lr}
 80165c6:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
 80165c8:	2100      	movs	r1, #0
 80165ca:	f7ff f904 	bl	80157d6 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
 80165ce:	b100      	cbz	r0, 80165d2 <device_name_get+0xe>
 80165d0:	6800      	ldr	r0, [r0, #0]
 80165d2:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
 80165d4:	2300      	movs	r3, #0
	entry->help = NULL;
	entry->subcmd = NULL;
 80165d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	entry->handler = NULL;
 80165da:	60e3      	str	r3, [r4, #12]
}
 80165dc:	bd10      	pop	{r4, pc}

080165de <get_bytes_count_for_hex>:
{
 80165de:	b510      	push	{r4, lr}
 80165e0:	4604      	mov	r4, r0
	int length = (strlen(arg) + 1) / 2;
 80165e2:	f7e9 fded 	bl	80001c0 <strlen>
 80165e6:	1c43      	adds	r3, r0, #1
	if (length > 1 && arg[0] == '0' && (arg[1] == 'x' || arg[1] == 'X')) {
 80165e8:	2b03      	cmp	r3, #3
	int length = (strlen(arg) + 1) / 2;
 80165ea:	ea4f 0053 	mov.w	r0, r3, lsr #1
	if (length > 1 && arg[0] == '0' && (arg[1] == 'x' || arg[1] == 'X')) {
 80165ee:	d909      	bls.n	8016604 <get_bytes_count_for_hex+0x26>
 80165f0:	7823      	ldrb	r3, [r4, #0]
 80165f2:	2b30      	cmp	r3, #48	; 0x30
 80165f4:	d106      	bne.n	8016604 <get_bytes_count_for_hex+0x26>
 80165f6:	7863      	ldrb	r3, [r4, #1]
 80165f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80165fc:	2b58      	cmp	r3, #88	; 0x58
		length -= 1;
 80165fe:	bf08      	it	eq
 8016600:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
}
 8016604:	2804      	cmp	r0, #4
 8016606:	bfa8      	it	ge
 8016608:	2004      	movge	r0, #4
 801660a:	bd10      	pop	{r4, pc}

0801660c <cmd_i2c_read>:
{
 801660c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (argc > 4) {
 801660e:	2904      	cmp	r1, #4
{
 8016610:	b087      	sub	sp, #28
 8016612:	4606      	mov	r6, r0
 8016614:	4614      	mov	r4, r2
	if (argc > 4) {
 8016616:	d91c      	bls.n	8016652 <cmd_i2c_read+0x46>
		num_bytes = strtol(argv[4], NULL, 16);
 8016618:	6920      	ldr	r0, [r4, #16]
 801661a:	2210      	movs	r2, #16
 801661c:	2100      	movs	r1, #0
 801661e:	f7fb fafb 	bl	8011c18 <strtol>
		if (num_bytes > MAX_I2C_BYTES) {
 8016622:	2810      	cmp	r0, #16
 8016624:	bfa8      	it	ge
 8016626:	2010      	movge	r0, #16
 8016628:	4605      	mov	r5, r0
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
 801662a:	b2eb      	uxtb	r3, r5
 801662c:	af02      	add	r7, sp, #8
 801662e:	9301      	str	r3, [sp, #4]
 8016630:	9700      	str	r7, [sp, #0]
 8016632:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8016636:	6861      	ldr	r1, [r4, #4]
 8016638:	4630      	mov	r0, r6
 801663a:	f7f5 fdfb 	bl	800c234 <i2c_read_to_buffer>
	if (ret == 0) {
 801663e:	4604      	mov	r4, r0
 8016640:	b920      	cbnz	r0, 801664c <cmd_i2c_read+0x40>
		shell_hexdump(shell_ctx, buf, num_bytes);
 8016642:	462a      	mov	r2, r5
 8016644:	4639      	mov	r1, r7
 8016646:	4630      	mov	r0, r6
 8016648:	f7fe ffb5 	bl	80155b6 <shell_hexdump>
}
 801664c:	4620      	mov	r0, r4
 801664e:	b007      	add	sp, #28
 8016650:	bdf0      	pop	{r4, r5, r6, r7, pc}
			num_bytes = MAX_I2C_BYTES;
 8016652:	2510      	movs	r5, #16
 8016654:	e7e9      	b.n	801662a <cmd_i2c_read+0x1e>

08016656 <cmd_i2c_write_byte>:
{
 8016656:	b507      	push	{r0, r1, r2, lr}
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
 8016658:	2301      	movs	r3, #1
 801665a:	9301      	str	r3, [sp, #4]
{
 801665c:	4611      	mov	r1, r2
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
 801665e:	f102 0310 	add.w	r3, r2, #16
 8016662:	9300      	str	r3, [sp, #0]
 8016664:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8016668:	6849      	ldr	r1, [r1, #4]
 801666a:	f7f5 fe4f 	bl	800c30c <i2c_write_from_buffer>
}
 801666e:	b003      	add	sp, #12
 8016670:	f85d fb04 	ldr.w	pc, [sp], #4

08016674 <cmd_i2c_write>:
{
 8016674:	b513      	push	{r0, r1, r4, lr}
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
 8016676:	3904      	subs	r1, #4
{
 8016678:	4614      	mov	r4, r2
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
 801667a:	b2c9      	uxtb	r1, r1
 801667c:	f102 0310 	add.w	r3, r2, #16
 8016680:	9101      	str	r1, [sp, #4]
 8016682:	9300      	str	r3, [sp, #0]
 8016684:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8016688:	6861      	ldr	r1, [r4, #4]
 801668a:	f7f5 fe3f 	bl	800c30c <i2c_write_from_buffer>
}
 801668e:	b002      	add	sp, #8
 8016690:	bd10      	pop	{r4, pc}

08016692 <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8016692:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8016694:	681a      	ldr	r2, [r3, #0]
 8016696:	f042 0220 	orr.w	r2, r2, #32
 801669a:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	f042 0210 	orr.w	r2, r2, #16
 80166a2:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 80166a4:	681a      	ldr	r2, [r3, #0]
 80166a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80166aa:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 80166ac:	681a      	ldr	r2, [r3, #0]
 80166ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80166b2:	601a      	str	r2, [r3, #0]
}
 80166b4:	4770      	bx	lr

080166b6 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 80166b6:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	f022 0202 	bic.w	r2, r2, #2
 80166be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	f022 0204 	bic.w	r2, r2, #4
 80166c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	f022 0220 	bic.w	r2, r2, #32
 80166ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	f022 0210 	bic.w	r2, r2, #16
 80166d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 80166d8:	681a      	ldr	r2, [r3, #0]
 80166da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80166de:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 80166e0:	681a      	ldr	r2, [r3, #0]
 80166e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80166e6:	601a      	str	r2, [r3, #0]
}
 80166e8:	4770      	bx	lr

080166ea <stm32_i2c_master_mode_end>:
{
 80166ea:	b510      	push	{r4, lr}
 80166ec:	4603      	mov	r3, r0
	const struct i2c_stm32_config *cfg = dev->config;
 80166ee:	6840      	ldr	r0, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 80166f0:	691c      	ldr	r4, [r3, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 80166f2:	68c1      	ldr	r1, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 80166f4:	f7ff ffdf 	bl	80166b6 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80166f8:	680b      	ldr	r3, [r1, #0]
 80166fa:	f023 0301 	bic.w	r3, r3, #1
 80166fe:	600b      	str	r3, [r1, #0]
	z_impl_k_sem_give(sem);
 8016700:	4620      	mov	r0, r4
}
 8016702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016706:	f7f9 ba37 	b.w	800fb78 <z_impl_k_sem_give>

0801670a <stm32_i2c_event_isr>:
{
 801670a:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = dev->data;
 801670c:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 801670e:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 8016710:	6c8a      	ldr	r2, [r1, #72]	; 0x48
	I2C_TypeDef *i2c = cfg->i2c;
 8016712:	68db      	ldr	r3, [r3, #12]
	if (data->current.len) {
 8016714:	b18a      	cbz	r2, 801673a <stm32_i2c_event_isr+0x30>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8016716:	699a      	ldr	r2, [r3, #24]
 8016718:	0792      	lsls	r2, r2, #30
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 801671a:	bf42      	ittt	mi
 801671c:	6cca      	ldrmi	r2, [r1, #76]	; 0x4c
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 801671e:	7812      	ldrbmi	r2, [r2, #0]
 8016720:	629a      	strmi	r2, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8016722:	699a      	ldr	r2, [r3, #24]
 8016724:	0754      	lsls	r4, r2, #29
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 8016726:	bf42      	ittt	mi
 8016728:	6cca      	ldrmi	r2, [r1, #76]	; 0x4c
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 801672a:	6a5c      	ldrmi	r4, [r3, #36]	; 0x24
 801672c:	7014      	strbmi	r4, [r2, #0]
		data->current.buf++;
 801672e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8016730:	3201      	adds	r2, #1
 8016732:	64ca      	str	r2, [r1, #76]	; 0x4c
		data->current.len--;
 8016734:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8016736:	3a01      	subs	r2, #1
 8016738:	648a      	str	r2, [r1, #72]	; 0x48
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 801673a:	699a      	ldr	r2, [r3, #24]
 801673c:	06d2      	lsls	r2, r2, #27
 801673e:	d414      	bmi.n	801676a <stm32_i2c_event_isr+0x60>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8016740:	699a      	ldr	r2, [r3, #24]
 8016742:	0694      	lsls	r4, r2, #26
 8016744:	d41c      	bmi.n	8016780 <stm32_i2c_event_isr+0x76>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8016746:	699a      	ldr	r2, [r3, #24]
 8016748:	0652      	lsls	r2, r2, #25
 801674a:	d402      	bmi.n	8016752 <stm32_i2c_event_isr+0x48>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 801674c:	699a      	ldr	r2, [r3, #24]
 801674e:	0614      	lsls	r4, r2, #24
 8016750:	d515      	bpl.n	801677e <stm32_i2c_event_isr+0x74>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 8016752:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8016754:	7a12      	ldrb	r2, [r2, #8]
 8016756:	0792      	lsls	r2, r2, #30
 8016758:	d40d      	bmi.n	8016776 <stm32_i2c_event_isr+0x6c>
			stm32_i2c_disable_transfer_interrupts(dev);
 801675a:	6840      	ldr	r0, [r0, #4]
 801675c:	f7ff ffab 	bl	80166b6 <stm32_i2c_disable_transfer_interrupts.isra.0>
}
 8016760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016764:	4608      	mov	r0, r1
 8016766:	f7f9 ba07 	b.w	800fb78 <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 801676a:	69da      	ldr	r2, [r3, #28]
 801676c:	f042 0210 	orr.w	r2, r2, #16
 8016770:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 8016772:	2201      	movs	r2, #1
 8016774:	63ca      	str	r2, [r1, #60]	; 0x3c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8016776:	685a      	ldr	r2, [r3, #4]
 8016778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801677c:	605a      	str	r2, [r3, #4]
}
 801677e:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8016780:	69da      	ldr	r2, [r3, #28]
 8016782:	f042 0220 	orr.w	r2, r2, #32
 8016786:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8016788:	685a      	ldr	r2, [r3, #4]
 801678a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801678e:	605a      	str	r2, [r3, #4]
 8016790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stm32_i2c_master_mode_end(dev);
 8016794:	f7ff bfa9 	b.w	80166ea <stm32_i2c_master_mode_end>

08016798 <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 8016798:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 801679a:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 801679c:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 801679e:	699a      	ldr	r2, [r3, #24]
 80167a0:	0592      	lsls	r2, r2, #22
 80167a2:	d507      	bpl.n	80167b4 <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 80167a4:	69da      	ldr	r2, [r3, #28]
 80167a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80167aa:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 80167ac:	2301      	movs	r3, #1
 80167ae:	638b      	str	r3, [r1, #56]	; 0x38
	stm32_i2c_master_mode_end(dev);
 80167b0:	f7ff bf9b 	b.w	80166ea <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 80167b4:	699a      	ldr	r2, [r3, #24]
 80167b6:	05d2      	lsls	r2, r2, #23
 80167b8:	d506      	bpl.n	80167c8 <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 80167ba:	69da      	ldr	r2, [r3, #28]
 80167bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80167c0:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 80167c2:	2301      	movs	r3, #1
 80167c4:	640b      	str	r3, [r1, #64]	; 0x40
		goto end;
 80167c6:	e7f3      	b.n	80167b0 <stm32_i2c_error_isr+0x18>
}
 80167c8:	4770      	bx	lr

080167ca <stm32_i2c_msg_write>:
{
 80167ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 80167ce:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 80167d0:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 80167d2:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 80167d6:	684f      	ldr	r7, [r1, #4]
 80167d8:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 80167da:	680f      	ldr	r7, [r1, #0]
 80167dc:	64e7      	str	r7, [r4, #76]	; 0x4c
	data->current.is_nack = 0U;
 80167de:	f04f 0c00 	mov.w	ip, #0
{
 80167e2:	4605      	mov	r5, r0
	data->current.is_write = 1U;
 80167e4:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 80167e6:	e9c4 cc0f 	strd	ip, ip, [r4, #60]	; 0x3c
	data->current.is_write = 1U;
 80167ea:	6367      	str	r7, [r4, #52]	; 0x34
	data->current.msg = msg;
 80167ec:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 80167ee:	f8cd c000 	str.w	ip, [sp]
 80167f2:	f7f5 fe8f 	bl	800c514 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 80167f6:	6868      	ldr	r0, [r5, #4]
 80167f8:	f7ff ff4b 	bl	8016692 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 80167fc:	f8d8 3000 	ldr.w	r3, [r8]
 8016800:	f043 0302 	orr.w	r3, r3, #2
 8016804:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 8016808:	f241 3288 	movw	r2, #5000	; 0x1388
 801680c:	2300      	movs	r3, #0
 801680e:	4620      	mov	r0, r4
 8016810:	f7f9 f9d8 	bl	800fbc4 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8016814:	b150      	cbz	r0, 801682c <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 8016816:	4628      	mov	r0, r5
 8016818:	f7ff ff67 	bl	80166ea <stm32_i2c_master_mode_end>
 801681c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016824:	4620      	mov	r0, r4
 8016826:	f7f9 f9cd 	bl	800fbc4 <z_impl_k_sem_take>
		is_timeout = true;
 801682a:	4638      	mov	r0, r7
	if (data->current.is_nack || data->current.is_err ||
 801682c:	e9d4 210e 	ldrd	r2, r1, [r4, #56]	; 0x38
 8016830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016832:	b129      	cbz	r1, 8016840 <stm32_i2c_msg_write+0x76>
	if (data->current.is_arlo) {
 8016834:	2100      	movs	r1, #0
 8016836:	b102      	cbz	r2, 801683a <stm32_i2c_msg_write+0x70>
		data->current.is_arlo = 0U;
 8016838:	63a1      	str	r1, [r4, #56]	; 0x38
		data->current.is_nack = 0U;
 801683a:	63e1      	str	r1, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 801683c:	b963      	cbnz	r3, 8016858 <stm32_i2c_msg_write+0x8e>
 801683e:	e002      	b.n	8016846 <stm32_i2c_msg_write+0x7c>
	if (data->current.is_nack || data->current.is_err ||
 8016840:	b943      	cbnz	r3, 8016854 <stm32_i2c_msg_write+0x8a>
 8016842:	b92a      	cbnz	r2, 8016850 <stm32_i2c_msg_write+0x86>
	    data->current.is_arlo || is_timeout) {
 8016844:	b108      	cbz	r0, 801684a <stm32_i2c_msg_write+0x80>
	return -EIO;
 8016846:	f06f 0004 	mvn.w	r0, #4
}
 801684a:	b002      	add	sp, #8
 801684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->current.is_arlo = 0U;
 8016850:	63a3      	str	r3, [r4, #56]	; 0x38
	if (data->current.is_err) {
 8016852:	e7f8      	b.n	8016846 <stm32_i2c_msg_write+0x7c>
	if (data->current.is_arlo) {
 8016854:	b102      	cbz	r2, 8016858 <stm32_i2c_msg_write+0x8e>
		data->current.is_arlo = 0U;
 8016856:	63a1      	str	r1, [r4, #56]	; 0x38
		data->current.is_err = 0U;
 8016858:	2300      	movs	r3, #0
 801685a:	6423      	str	r3, [r4, #64]	; 0x40
 801685c:	e7f3      	b.n	8016846 <stm32_i2c_msg_write+0x7c>

0801685e <stm32_i2c_msg_read>:
{
 801685e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8016862:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8016864:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8016866:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 801686a:	684f      	ldr	r7, [r1, #4]
 801686c:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 801686e:	680f      	ldr	r7, [r1, #0]
 8016870:	64e7      	str	r7, [r4, #76]	; 0x4c
{
 8016872:	4605      	mov	r5, r0
	data->current.is_write = 0U;
 8016874:	2700      	movs	r7, #0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8016876:	f44f 6680 	mov.w	r6, #1024	; 0x400
	data->current.is_arlo = 0U;
 801687a:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
	data->current.is_nack = 0U;
 801687e:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
	data->current.msg = msg;
 8016882:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8016884:	9600      	str	r6, [sp, #0]
 8016886:	f7f5 fe45 	bl	800c514 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 801688a:	6868      	ldr	r0, [r5, #4]
 801688c:	f7ff ff01 	bl	8016692 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8016890:	f8d8 3000 	ldr.w	r3, [r8]
 8016894:	f043 0304 	orr.w	r3, r3, #4
 8016898:	f8c8 3000 	str.w	r3, [r8]
 801689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80168a0:	2300      	movs	r3, #0
 80168a2:	4620      	mov	r0, r4
 80168a4:	f7f9 f98e 	bl	800fbc4 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 80168a8:	b150      	cbz	r0, 80168c0 <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 80168aa:	4628      	mov	r0, r5
 80168ac:	f7ff ff1d 	bl	80166ea <stm32_i2c_master_mode_end>
 80168b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80168b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168b8:	4620      	mov	r0, r4
 80168ba:	f7f9 f983 	bl	800fbc4 <z_impl_k_sem_take>
		is_timeout = true;
 80168be:	2001      	movs	r0, #1
	if (data->current.is_nack || data->current.is_err ||
 80168c0:	e9d4 210e 	ldrd	r2, r1, [r4, #56]	; 0x38
 80168c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168c6:	b129      	cbz	r1, 80168d4 <stm32_i2c_msg_read+0x76>
	if (data->current.is_arlo) {
 80168c8:	2100      	movs	r1, #0
 80168ca:	b102      	cbz	r2, 80168ce <stm32_i2c_msg_read+0x70>
		data->current.is_arlo = 0U;
 80168cc:	63a1      	str	r1, [r4, #56]	; 0x38
		data->current.is_nack = 0U;
 80168ce:	63e1      	str	r1, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 80168d0:	b963      	cbnz	r3, 80168ec <stm32_i2c_msg_read+0x8e>
 80168d2:	e002      	b.n	80168da <stm32_i2c_msg_read+0x7c>
	if (data->current.is_nack || data->current.is_err ||
 80168d4:	b943      	cbnz	r3, 80168e8 <stm32_i2c_msg_read+0x8a>
 80168d6:	b92a      	cbnz	r2, 80168e4 <stm32_i2c_msg_read+0x86>
	    data->current.is_arlo || is_timeout) {
 80168d8:	b108      	cbz	r0, 80168de <stm32_i2c_msg_read+0x80>
	return -EIO;
 80168da:	f06f 0004 	mvn.w	r0, #4
}
 80168de:	b002      	add	sp, #8
 80168e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->current.is_arlo = 0U;
 80168e4:	63a3      	str	r3, [r4, #56]	; 0x38
	if (data->current.is_err) {
 80168e6:	e7f8      	b.n	80168da <stm32_i2c_msg_read+0x7c>
	if (data->current.is_arlo) {
 80168e8:	b102      	cbz	r2, 80168ec <stm32_i2c_msg_read+0x8e>
		data->current.is_arlo = 0U;
 80168ea:	63a1      	str	r1, [r4, #56]	; 0x38
		data->current.is_err = 0U;
 80168ec:	2300      	movs	r3, #0
 80168ee:	6423      	str	r3, [r4, #64]	; 0x40
 80168f0:	e7f3      	b.n	80168da <stm32_i2c_msg_read+0x7c>

080168f2 <i2c_stm32_irq_config_func_i2c1>:
STM32_I2C_IRQ_HANDLER(name)

/* I2C instances declaration */

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
 80168f2:	b508      	push	{r3, lr}
 80168f4:	2200      	movs	r2, #0
 80168f6:	4611      	mov	r1, r2
 80168f8:	201f      	movs	r0, #31
 80168fa:	f7f4 fb77 	bl	800afec <z_arm_irq_priority_set>
 80168fe:	201f      	movs	r0, #31
 8016900:	f7f4 fb66 	bl	800afd0 <arch_irq_enable>
 8016904:	2200      	movs	r2, #0
 8016906:	2020      	movs	r0, #32
 8016908:	4611      	mov	r1, r2
 801690a:	f7f4 fb6f 	bl	800afec <z_arm_irq_priority_set>
 801690e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016912:	2020      	movs	r0, #32
 8016914:	f7f4 bb5c 	b.w	800afd0 <arch_irq_enable>

08016918 <i2c_stm32_irq_config_func_i2c2>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 8016918:	b508      	push	{r3, lr}
 801691a:	2200      	movs	r2, #0
 801691c:	4611      	mov	r1, r2
 801691e:	2021      	movs	r0, #33	; 0x21
 8016920:	f7f4 fb64 	bl	800afec <z_arm_irq_priority_set>
 8016924:	2021      	movs	r0, #33	; 0x21
 8016926:	f7f4 fb53 	bl	800afd0 <arch_irq_enable>
 801692a:	2200      	movs	r2, #0
 801692c:	2022      	movs	r0, #34	; 0x22
 801692e:	4611      	mov	r1, r2
 8016930:	f7f4 fb5c 	bl	800afec <z_arm_irq_priority_set>
 8016934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016938:	2022      	movs	r0, #34	; 0x22
 801693a:	f7f4 bb49 	b.w	800afd0 <arch_irq_enable>

0801693e <i2c_stm32_irq_config_func_i2c3>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
 801693e:	b508      	push	{r3, lr}
 8016940:	2200      	movs	r2, #0
 8016942:	4611      	mov	r1, r2
 8016944:	2048      	movs	r0, #72	; 0x48
 8016946:	f7f4 fb51 	bl	800afec <z_arm_irq_priority_set>
 801694a:	2048      	movs	r0, #72	; 0x48
 801694c:	f7f4 fb40 	bl	800afd0 <arch_irq_enable>
 8016950:	2200      	movs	r2, #0
 8016952:	2049      	movs	r0, #73	; 0x49
 8016954:	4611      	mov	r1, r2
 8016956:	f7f4 fb49 	bl	800afec <z_arm_irq_priority_set>
 801695a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801695e:	2049      	movs	r0, #73	; 0x49
 8016960:	f7f4 bb36 	b.w	800afd0 <arch_irq_enable>

08016964 <i2c_stm32_transfer>:
{
 8016964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016968:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 801696a:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 801696c:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 801696e:	f043 0304 	orr.w	r3, r3, #4
{
 8016972:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 8016974:	720b      	strb	r3, [r1, #8]
{
 8016976:	b087      	sub	sp, #28
 8016978:	4607      	mov	r7, r0
 801697a:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 801697c:	460a      	mov	r2, r1
 801697e:	2301      	movs	r3, #1
 8016980:	42ab      	cmp	r3, r5
 8016982:	d90c      	bls.n	801699e <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8016984:	f106 0818 	add.w	r8, r6, #24
 8016988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801698c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016990:	4640      	mov	r0, r8
 8016992:	f7f9 f917 	bl	800fbc4 <z_impl_k_sem_take>
	while (num_msgs > 0) {
 8016996:	3414      	adds	r4, #20
 8016998:	2300      	movs	r3, #0
 801699a:	ae03      	add	r6, sp, #12
 801699c:	e050      	b.n	8016a40 <i2c_stm32_transfer+0xdc>
			if (OPERATION(current) != OPERATION(next)) {
 801699e:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 80169a0:	d20c      	bcs.n	80169bc <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 80169a2:	7d10      	ldrb	r0, [r2, #20]
 80169a4:	ea80 0c01 	eor.w	ip, r0, r1
 80169a8:	f01c 0f01 	tst.w	ip, #1
 80169ac:	d001      	beq.n	80169b2 <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 80169ae:	0740      	lsls	r0, r0, #29
 80169b0:	d501      	bpl.n	80169b6 <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 80169b2:	0789      	lsls	r1, r1, #30
 80169b4:	d505      	bpl.n	80169c2 <i2c_stm32_transfer+0x5e>
		return ret;
 80169b6:	f06f 0315 	mvn.w	r3, #21
 80169ba:	e048      	b.n	8016a4e <i2c_stm32_transfer+0xea>
			current->flags |= I2C_MSG_STOP;
 80169bc:	f041 0102 	orr.w	r1, r1, #2
 80169c0:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 80169c2:	3301      	adds	r3, #1
		current++;
 80169c4:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 80169c6:	b2db      	uxtb	r3, r3
 80169c8:	e7da      	b.n	8016980 <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 80169ca:	2d01      	cmp	r5, #1
 80169cc:	bf14      	ite	ne
 80169ce:	4623      	movne	r3, r4
 80169d0:	2300      	moveq	r3, #0
 80169d2:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 80169d4:	f1a4 0314 	sub.w	r3, r4, #20
 80169d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80169dc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 80169e0:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 80169e4:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 80169e8:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 80169ec:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 80169f0:	9b04      	ldr	r3, [sp, #16]
 80169f2:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 80169f4:	bf83      	ittte	hi
 80169f6:	23ff      	movhi	r3, #255	; 0xff
 80169f8:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 80169fa:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 80169fe:	9a01      	ldrls	r2, [sp, #4]
			msg.flags &= ~I2C_MSG_STOP;
 8016a00:	bf8a      	itet	hi
 8016a02:	f003 03fd 	andhi.w	r3, r3, #253	; 0xfd
			flagsp = &combine_flags;
 8016a06:	465b      	movls	r3, fp
 8016a08:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8016a0c:	f013 0f01 	tst.w	r3, #1
			msg.flags &= ~I2C_MSG_STOP;
 8016a10:	f88d 3014 	strb.w	r3, [sp, #20]
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 8016a14:	4631      	mov	r1, r6
 8016a16:	464b      	mov	r3, r9
 8016a18:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8016a1a:	d11c      	bne.n	8016a56 <i2c_stm32_transfer+0xf2>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 8016a1c:	f7ff fed5 	bl	80167ca <stm32_i2c_msg_write>
		if (ret < 0) {
 8016a20:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 8016a22:	4603      	mov	r3, r0
		if (ret < 0) {
 8016a24:	db0e      	blt.n	8016a44 <i2c_stm32_transfer+0xe0>
		rest -= msg.len;
 8016a26:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 8016a28:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 8016a2a:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 8016a2e:	440a      	add	r2, r1
		msg.len = rest;
 8016a30:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 8016a34:	f1ba 0f00 	cmp.w	sl, #0
 8016a38:	d1da      	bne.n	80169f0 <i2c_stm32_transfer+0x8c>
		num_msgs--;
 8016a3a:	3d01      	subs	r5, #1
 8016a3c:	b2ed      	uxtb	r5, r5
 8016a3e:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 8016a40:	2d00      	cmp	r5, #0
 8016a42:	d1c2      	bne.n	80169ca <i2c_stm32_transfer+0x66>
 8016a44:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 8016a46:	4640      	mov	r0, r8
 8016a48:	f7f9 f896 	bl	800fb78 <z_impl_k_sem_give>
}
 8016a4c:	9b01      	ldr	r3, [sp, #4]
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	b007      	add	sp, #28
 8016a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 8016a56:	f7ff ff02 	bl	801685e <stm32_i2c_msg_read>
 8016a5a:	e7e1      	b.n	8016a20 <i2c_stm32_transfer+0xbc>

08016a5c <led_gpio_set_brightness>:
{
 8016a5c:	b410      	push	{r4}
	const struct led_gpio_config *config = dev->config;
 8016a5e:	6843      	ldr	r3, [r0, #4]
	if ((led >= config->num_leds) || (value > 100)) {
 8016a60:	6818      	ldr	r0, [r3, #0]
 8016a62:	4288      	cmp	r0, r1
 8016a64:	d918      	bls.n	8016a98 <led_gpio_set_brightness+0x3c>
 8016a66:	2a64      	cmp	r2, #100	; 0x64
 8016a68:	d816      	bhi.n	8016a98 <led_gpio_set_brightness+0x3c>
	led_gpio = &config->led[led];
 8016a6a:	685b      	ldr	r3, [r3, #4]
 8016a6c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	return gpio_pin_set(spec->port, spec->pin, value);
 8016a70:	f853 0031 	ldr.w	r0, [r3, r1, lsl #3]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8016a74:	7923      	ldrb	r3, [r4, #4]
 8016a76:	2101      	movs	r1, #1
 8016a78:	4099      	lsls	r1, r3
 8016a7a:	6903      	ldr	r3, [r0, #16]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4219      	tst	r1, r3
 8016a80:	d103      	bne.n	8016a8a <led_gpio_set_brightness+0x2e>
	if (value != 0)	{
 8016a82:	b922      	cbnz	r2, 8016a8e <led_gpio_set_brightness+0x32>
	return api->port_clear_bits_raw(port, pins);
 8016a84:	6883      	ldr	r3, [r0, #8]
 8016a86:	691b      	ldr	r3, [r3, #16]
 8016a88:	e003      	b.n	8016a92 <led_gpio_set_brightness+0x36>
	if (value != 0)	{
 8016a8a:	2a00      	cmp	r2, #0
 8016a8c:	d1fa      	bne.n	8016a84 <led_gpio_set_brightness+0x28>
	return api->port_set_bits_raw(port, pins);
 8016a8e:	6883      	ldr	r3, [r0, #8]
 8016a90:	68db      	ldr	r3, [r3, #12]
}
 8016a92:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->port_clear_bits_raw(port, pins);
 8016a96:	4718      	bx	r3
 8016a98:	f06f 0015 	mvn.w	r0, #21
 8016a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016aa0:	4770      	bx	lr

08016aa2 <led_gpio_on>:
	return led_gpio_set_brightness(dev, led, 100);
 8016aa2:	2264      	movs	r2, #100	; 0x64
 8016aa4:	f7ff bfda 	b.w	8016a5c <led_gpio_set_brightness>

08016aa8 <led_gpio_off>:
	return led_gpio_set_brightness(dev, led, 0);
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	f7ff bfd7 	b.w	8016a5c <led_gpio_set_brightness>

08016aae <z_log_msg_static_create.constprop.0>:
 8016aae:	2300      	movs	r3, #0
 8016ab0:	f7f1 bb4e 	b.w	8008150 <z_impl_z_log_msg_static_create>

08016ab4 <z_impl_i2c_transfer>:
{
 8016ab4:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8016ab6:	6884      	ldr	r4, [r0, #8]
 8016ab8:	68a4      	ldr	r4, [r4, #8]
 8016aba:	46a4      	mov	ip, r4
}
 8016abc:	f85d 4b04 	ldr.w	r4, [sp], #4
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8016ac0:	4760      	bx	ip

08016ac2 <lis3mdl_sample_fetch>:
{
 8016ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ac6:	b08b      	sub	sp, #44	; 0x2c
	const struct lis3mdl_config *config = dev->config;
 8016ac8:	6846      	ldr	r6, [r0, #4]
	struct lis3mdl_data *drv_data = dev->data;
 8016aca:	6905      	ldr	r5, [r0, #16]
	return i2c_burst_read(spec->bus, spec->addr,
 8016acc:	88b3      	ldrh	r3, [r6, #4]
 8016ace:	6830      	ldr	r0, [r6, #0]
 8016ad0:	2228      	movs	r2, #40	; 0x28
 8016ad2:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[1].buf = (uint8_t *)read_buf;
 8016ad6:	aa02      	add	r2, sp, #8
	msg[0].buf = (uint8_t *)write_buf;
 8016ad8:	f10d 0707 	add.w	r7, sp, #7
	msg[0].len = num_write;
 8016adc:	f04f 0901 	mov.w	r9, #1
	msg[0].flags = I2C_MSG_WRITE;
 8016ae0:	2400      	movs	r4, #0
	msg[1].buf = (uint8_t *)read_buf;
 8016ae2:	9207      	str	r2, [sp, #28]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016ae4:	f04f 0807 	mov.w	r8, #7
	msg[1].len = num_read;
 8016ae8:	2208      	movs	r2, #8
	msg[0].buf = (uint8_t *)write_buf;
 8016aea:	9704      	str	r7, [sp, #16]
	msg[0].len = num_write;
 8016aec:	f8cd 9014 	str.w	r9, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8016af0:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].len = num_read;
 8016af4:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016af6:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
 8016afa:	2202      	movs	r2, #2
 8016afc:	a904      	add	r1, sp, #16
 8016afe:	f7ff ffd9 	bl	8016ab4 <z_impl_i2c_transfer>
	if (i2c_burst_read_dt(&config->i2c, LIS3MDL_REG_SAMPLE_START,
 8016b02:	42a0      	cmp	r0, r4
 8016b04:	da04      	bge.n	8016b10 <lis3mdl_sample_fetch+0x4e>
		return -EIO;
 8016b06:	f06f 0004 	mvn.w	r0, #4
}
 8016b0a:	b00b      	add	sp, #44	; 0x2c
 8016b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return i2c_burst_read(spec->bus, spec->addr,
 8016b10:	222e      	movs	r2, #46	; 0x2e
 8016b12:	6830      	ldr	r0, [r6, #0]
 8016b14:	88b3      	ldrh	r3, [r6, #4]
 8016b16:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[1].buf = (uint8_t *)read_buf;
 8016b1a:	f10d 020e 	add.w	r2, sp, #14
 8016b1e:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
 8016b20:	2202      	movs	r2, #2
	msg[0].len = num_write;
 8016b22:	e9cd 7904 	strd	r7, r9, [sp, #16]
	msg[0].flags = I2C_MSG_WRITE;
 8016b26:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].len = num_read;
 8016b2a:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016b2c:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 8016b30:	a904      	add	r1, sp, #16
 8016b32:	f7ff ffbf 	bl	8016ab4 <z_impl_i2c_transfer>
	if (i2c_burst_read_dt(&config->i2c, LIS3MDL_REG_SAMPLE_START + 6,
 8016b36:	2800      	cmp	r0, #0
 8016b38:	dbe5      	blt.n	8016b06 <lis3mdl_sample_fetch+0x44>
	drv_data->x_sample = sys_le16_to_cpu(buf[0]);
 8016b3a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016b3e:	802b      	strh	r3, [r5, #0]
	drv_data->y_sample = sys_le16_to_cpu(buf[1]);
 8016b40:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016b44:	806b      	strh	r3, [r5, #2]
	drv_data->z_sample = sys_le16_to_cpu(buf[2]);
 8016b46:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016b4a:	80ab      	strh	r3, [r5, #4]
	drv_data->temp_sample = sys_le16_to_cpu(buf[3]);
 8016b4c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016b50:	80eb      	strh	r3, [r5, #6]
	return 0;
 8016b52:	4620      	mov	r0, r4
 8016b54:	e7d9      	b.n	8016b0a <lis3mdl_sample_fetch+0x48>

08016b56 <z_impl_i2c_transfer>:
{
 8016b56:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8016b58:	6884      	ldr	r4, [r0, #8]
 8016b5a:	68a4      	ldr	r4, [r4, #8]
 8016b5c:	46a4      	mov	ip, r4
}
 8016b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8016b62:	4760      	bx	ip

08016b64 <lps22hb_sample_fetch>:
{
 8016b64:	b530      	push	{r4, r5, lr}
 8016b66:	b08b      	sub	sp, #44	; 0x2c
	const struct lps22hb_config *config = dev->config;
 8016b68:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
 8016b6a:	6905      	ldr	r5, [r0, #16]
	return i2c_burst_read(spec->bus, spec->addr,
 8016b6c:	6818      	ldr	r0, [r3, #0]
 8016b6e:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
 8016b70:	2228      	movs	r2, #40	; 0x28
 8016b72:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8016b76:	f10d 0207 	add.w	r2, sp, #7
 8016b7a:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
 8016b7c:	2201      	movs	r2, #1
 8016b7e:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
 8016b80:	aa02      	add	r2, sp, #8
 8016b82:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
 8016b84:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
 8016b86:	2400      	movs	r4, #0
	msg[1].len = num_read;
 8016b88:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016b8a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8016b8c:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016b90:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8016b94:	2202      	movs	r2, #2
 8016b96:	a904      	add	r1, sp, #16
 8016b98:	f7ff ffdd 	bl	8016b56 <z_impl_i2c_transfer>
	if (i2c_burst_read_dt(&config->i2c, LPS22HB_REG_PRESS_OUT_XL,
 8016b9c:	42a0      	cmp	r0, r4
 8016b9e:	db10      	blt.n	8016bc2 <lps22hb_sample_fetch+0x5e>
				     ((uint32_t)(out[2]) << 16));
 8016ba0:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
 8016ba4:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
 8016ba8:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
 8016baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
 8016bae:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
 8016bb2:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
 8016bb4:	602b      	str	r3, [r5, #0]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
 8016bb6:	f8bd 300b 	ldrh.w	r3, [sp, #11]
 8016bba:	80ab      	strh	r3, [r5, #4]
	return 0;
 8016bbc:	4620      	mov	r0, r4
}
 8016bbe:	b00b      	add	sp, #44	; 0x2c
 8016bc0:	bd30      	pop	{r4, r5, pc}
		return -EIO;
 8016bc2:	f06f 0004 	mvn.w	r0, #4
 8016bc6:	e7fa      	b.n	8016bbe <lps22hb_sample_fetch+0x5a>

08016bc8 <i2c_reg_update_byte.constprop.0>:
 * @param value Value for updating internal register.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_update_byte(const struct device *dev,
 8016bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bcc:	b088      	sub	sp, #32
 8016bce:	4699      	mov	r9, r3
	msg[0].flags = I2C_MSG_WRITE;
 8016bd0:	2300      	movs	r3, #0
	msg[0].len = num_write;
 8016bd2:	f04f 0801 	mov.w	r8, #1
	msg[0].flags = I2C_MSG_WRITE;
 8016bd6:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
 8016bda:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
 8016bde:	e9cd 3805 	strd	r3, r8, [sp, #20]
 8016be2:	f04f 0a10 	mov.w	sl, #16
	msg[0].buf = (uint8_t *)write_buf;
 8016be6:	ae01      	add	r6, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016be8:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
 8016bea:	4607      	mov	r7, r0
 8016bec:	460d      	mov	r5, r1
 8016bee:	4614      	mov	r4, r2
 8016bf0:	f88d a004 	strb.w	sl, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
 8016bf4:	9602      	str	r6, [sp, #8]
	msg[0].len = num_write;
 8016bf6:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016bfa:	f88d 301c 	strb.w	r3, [sp, #28]
 8016bfe:	2202      	movs	r2, #2
 8016c00:	460b      	mov	r3, r1
 8016c02:	a902      	add	r1, sp, #8
 8016c04:	f7ff ffa7 	bl	8016b56 <z_impl_i2c_transfer>
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
 8016c08:	b9b8      	cbnz	r0, 8016c3a <i2c_reg_update_byte.constprop.0+0x72>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
 8016c0a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8016c0e:	ea22 0304 	bic.w	r3, r2, r4
 8016c12:	ea04 0409 	and.w	r4, r4, r9
 8016c16:	431c      	orrs	r4, r3
	if (new_value == old_value) {
 8016c18:	42a2      	cmp	r2, r4
 8016c1a:	d00e      	beq.n	8016c3a <i2c_reg_update_byte.constprop.0+0x72>
	msg.len = num_bytes;
 8016c1c:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
 8016c1e:	f88d a004 	strb.w	sl, [sp, #4]
 8016c22:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
 8016c26:	9602      	str	r6, [sp, #8]
	msg.len = num_bytes;
 8016c28:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8016c2a:	f88d 3010 	strb.w	r3, [sp, #16]
 8016c2e:	462b      	mov	r3, r5
 8016c30:	4642      	mov	r2, r8
 8016c32:	a902      	add	r1, sp, #8
 8016c34:	4638      	mov	r0, r7
 8016c36:	f7ff ff8e 	bl	8016b56 <z_impl_i2c_transfer>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
 8016c3a:	b008      	add	sp, #32
 8016c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016c40 <lps22hb_init>:
{
 8016c40:	b570      	push	{r4, r5, r6, lr}
	if (!device_is_ready(config->i2c.bus)) {
 8016c42:	6843      	ldr	r3, [r0, #4]
{
 8016c44:	b088      	sub	sp, #32
 8016c46:	4605      	mov	r5, r0
	if (!device_is_ready(config->i2c.bus)) {
 8016c48:	6818      	ldr	r0, [r3, #0]
 8016c4a:	f002 fce3 	bl	8019614 <z_device_is_ready>
 8016c4e:	b920      	cbnz	r0, 8016c5a <lps22hb_init+0x1a>
}
 8016c50:	b008      	add	sp, #32
 8016c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c56:	f7f6 bc71 	b.w	800d53c <lps22hb_init.part.0>
	const struct lps22hb_config *config = dev->config;
 8016c5a:	686e      	ldr	r6, [r5, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8016c5c:	220f      	movs	r2, #15
 8016c5e:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8016c62:	f10d 0207 	add.w	r2, sp, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8016c66:	6830      	ldr	r0, [r6, #0]
	msg[0].buf = (uint8_t *)write_buf;
 8016c68:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
 8016c6a:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
 8016c6e:	2201      	movs	r2, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8016c70:	88b3      	ldrh	r3, [r6, #4]
	msg[0].len = num_write;
 8016c72:	9203      	str	r2, [sp, #12]
	msg[1].len = num_read;
 8016c74:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8016c78:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016c7a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8016c7c:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016c80:	f88d 201c 	strb.w	r2, [sp, #28]
 8016c84:	2202      	movs	r2, #2
 8016c86:	a902      	add	r1, sp, #8
 8016c88:	f7ff ff65 	bl	8016b56 <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&config->i2c, LPS22HB_REG_WHO_AM_I,
 8016c8c:	42a0      	cmp	r0, r4
 8016c8e:	db03      	blt.n	8016c98 <lps22hb_init+0x58>
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
 8016c90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016c94:	2bb1      	cmp	r3, #177	; 0xb1
 8016c96:	d003      	beq.n	8016ca0 <lps22hb_init+0x60>
		return -EIO;
 8016c98:	f06f 0004 	mvn.w	r0, #4
}
 8016c9c:	b008      	add	sp, #32
 8016c9e:	bd70      	pop	{r4, r5, r6, pc}
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
 8016ca0:	6868      	ldr	r0, [r5, #4]
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
 8016ca2:	2330      	movs	r3, #48	; 0x30
 8016ca4:	7901      	ldrb	r1, [r0, #4]
 8016ca6:	6800      	ldr	r0, [r0, #0]
 8016ca8:	2270      	movs	r2, #112	; 0x70
 8016caa:	f7ff ff8d 	bl	8016bc8 <i2c_reg_update_byte.constprop.0>
 8016cae:	2800      	cmp	r0, #0
 8016cb0:	dbf2      	blt.n	8016c98 <lps22hb_init+0x58>
 8016cb2:	2302      	movs	r3, #2
 8016cb4:	7931      	ldrb	r1, [r6, #4]
 8016cb6:	6830      	ldr	r0, [r6, #0]
 8016cb8:	461a      	mov	r2, r3
 8016cba:	f7ff ff85 	bl	8016bc8 <i2c_reg_update_byte.constprop.0>
	if (i2c_reg_update_byte_dt(&config->i2c, LPS22HB_REG_CTRL_REG1,
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	dbea      	blt.n	8016c98 <lps22hb_init+0x58>
	return 0;
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	e7ea      	b.n	8016c9c <lps22hb_init+0x5c>

08016cc6 <lsm6dsl_accel_set_fs_raw>:
{
 8016cc6:	b570      	push	{r4, r5, r6, lr}
	struct lsm6dsl_data *data = dev->data;
 8016cc8:	6905      	ldr	r5, [r0, #16]
	if (data->hw_tf->update_reg(dev,
 8016cca:	6a2a      	ldr	r2, [r5, #32]
 8016ccc:	008b      	lsls	r3, r1, #2
 8016cce:	68d6      	ldr	r6, [r2, #12]
{
 8016cd0:	460c      	mov	r4, r1
	if (data->hw_tf->update_reg(dev,
 8016cd2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8016cd6:	220c      	movs	r2, #12
 8016cd8:	2110      	movs	r1, #16
 8016cda:	47b0      	blx	r6
 8016cdc:	2800      	cmp	r0, #0
	data->accel_fs = fs;
 8016cde:	bfa6      	itte	ge
 8016ce0:	f885 4026 	strbge.w	r4, [r5, #38]	; 0x26
	return 0;
 8016ce4:	2000      	movge	r0, #0
		return -EIO;
 8016ce6:	f06f 0004 	mvnlt.w	r0, #4
}
 8016cea:	bd70      	pop	{r4, r5, r6, pc}

08016cec <lsm6dsl_gyro_set_fs_raw>:
{
 8016cec:	b510      	push	{r4, lr}
		if (data->hw_tf->update_reg(dev,
 8016cee:	6903      	ldr	r3, [r0, #16]
 8016cf0:	6a1b      	ldr	r3, [r3, #32]
	if (fs == GYRO_FULLSCALE_125) {
 8016cf2:	2904      	cmp	r1, #4
		if (data->hw_tf->update_reg(dev,
 8016cf4:	68dc      	ldr	r4, [r3, #12]
	if (fs == GYRO_FULLSCALE_125) {
 8016cf6:	d109      	bne.n	8016d0c <lsm6dsl_gyro_set_fs_raw+0x20>
		if (data->hw_tf->update_reg(dev,
 8016cf8:	2302      	movs	r3, #2
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	2111      	movs	r1, #17
 8016cfe:	47a0      	blx	r4
 8016d00:	2800      	cmp	r0, #0
			return -EIO;
 8016d02:	bfb4      	ite	lt
 8016d04:	f06f 0004 	mvnlt.w	r0, #4
	return 0;
 8016d08:	2000      	movge	r0, #0
}
 8016d0a:	bd10      	pop	{r4, pc}
		if (data->hw_tf->update_reg(dev,
 8016d0c:	0089      	lsls	r1, r1, #2
 8016d0e:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8016d12:	220c      	movs	r2, #12
 8016d14:	e7f2      	b.n	8016cfc <lsm6dsl_gyro_set_fs_raw+0x10>

08016d16 <lsm6dsl_gyro_set_odr_raw>:
{
 8016d16:	b510      	push	{r4, lr}
	if (data->hw_tf->update_reg(dev,
 8016d18:	6902      	ldr	r2, [r0, #16]
 8016d1a:	6a12      	ldr	r2, [r2, #32]
 8016d1c:	010b      	lsls	r3, r1, #4
 8016d1e:	68d4      	ldr	r4, [r2, #12]
 8016d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d24:	22f0      	movs	r2, #240	; 0xf0
 8016d26:	2111      	movs	r1, #17
 8016d28:	47a0      	blx	r4
	return 0;
 8016d2a:	2800      	cmp	r0, #0
}
 8016d2c:	bfb4      	ite	lt
 8016d2e:	f06f 0004 	mvnlt.w	r0, #4
 8016d32:	2000      	movge	r0, #0
 8016d34:	bd10      	pop	{r4, pc}

08016d36 <lsm6dsl_channel_get>:
{
 8016d36:	b538      	push	{r3, r4, r5, lr}
 8016d38:	ed2d 8b02 	vpush	{d8}
	switch (chan) {
 8016d3c:	2903      	cmp	r1, #3
	struct lsm6dsl_data *data = dev->data;
 8016d3e:	6905      	ldr	r5, [r0, #16]
{
 8016d40:	4614      	mov	r4, r2
	switch (chan) {
 8016d42:	d905      	bls.n	8016d50 <lsm6dsl_channel_get+0x1a>
 8016d44:	1f0b      	subs	r3, r1, #4
 8016d46:	2b03      	cmp	r3, #3
 8016d48:	d928      	bls.n	8016d9c <lsm6dsl_channel_get+0x66>
 8016d4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8016d4e:	e00f      	b.n	8016d70 <lsm6dsl_channel_get+0x3a>
	return lsm6dsl_accel_get_channel(chan, val, data,
 8016d50:	ed95 8a03 	vldr	s16, [r5, #12]
	switch (chan) {
 8016d54:	2902      	cmp	r1, #2
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
 8016d56:	eeb0 0a48 	vmov.f32	s0, s16
	switch (chan) {
 8016d5a:	d00c      	beq.n	8016d76 <lsm6dsl_channel_get+0x40>
 8016d5c:	2903      	cmp	r1, #3
 8016d5e:	d00c      	beq.n	8016d7a <lsm6dsl_channel_get+0x44>
 8016d60:	2901      	cmp	r1, #1
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
 8016d62:	bf14      	ite	ne
 8016d64:	6829      	ldrne	r1, [r5, #0]
		lsm6dsl_accel_convert(val, data->accel_sample_y, sensitivity);
 8016d66:	6869      	ldreq	r1, [r5, #4]
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f7eb fd05 	bl	8002778 <lsm6dsl_accel_convert>
	return 0;
 8016d6e:	2000      	movs	r0, #0
}
 8016d70:	ecbd 8b02 	vpop	{d8}
 8016d74:	bd38      	pop	{r3, r4, r5, pc}
		lsm6dsl_accel_convert(val, data->accel_sample_z, sensitivity);
 8016d76:	68a9      	ldr	r1, [r5, #8]
 8016d78:	e7f6      	b.n	8016d68 <lsm6dsl_channel_get+0x32>
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
 8016d7a:	4610      	mov	r0, r2
 8016d7c:	6829      	ldr	r1, [r5, #0]
 8016d7e:	f7eb fcfb 	bl	8002778 <lsm6dsl_accel_convert>
		lsm6dsl_accel_convert(val + 1, data->accel_sample_y,
 8016d82:	6869      	ldr	r1, [r5, #4]
 8016d84:	eeb0 0a48 	vmov.f32	s0, s16
 8016d88:	f104 0008 	add.w	r0, r4, #8
 8016d8c:	f7eb fcf4 	bl	8002778 <lsm6dsl_accel_convert>
		lsm6dsl_accel_convert(val + 2, data->accel_sample_z,
 8016d90:	68a9      	ldr	r1, [r5, #8]
 8016d92:	eeb0 0a48 	vmov.f32	s0, s16
 8016d96:	f104 0010 	add.w	r0, r4, #16
 8016d9a:	e7e6      	b.n	8016d6a <lsm6dsl_channel_get+0x34>
	switch (chan) {
 8016d9c:	2906      	cmp	r1, #6
 8016d9e:	d009      	beq.n	8016db4 <lsm6dsl_channel_get+0x7e>
 8016da0:	2907      	cmp	r1, #7
 8016da2:	d009      	beq.n	8016db8 <lsm6dsl_channel_get+0x82>
 8016da4:	2905      	cmp	r1, #5
		lsm6dsl_gyro_convert(val, data->gyro_sample_x, sensitivity);
 8016da6:	bf14      	ite	ne
 8016da8:	6929      	ldrne	r1, [r5, #16]
		lsm6dsl_gyro_convert(val, data->gyro_sample_y, sensitivity);
 8016daa:	6969      	ldreq	r1, [r5, #20]
		lsm6dsl_gyro_convert(val, data->gyro_sample_z, sensitivity);
 8016dac:	4620      	mov	r0, r4
 8016dae:	f7eb fd1f 	bl	80027f0 <lsm6dsl_gyro_convert.constprop.0>
		break;
 8016db2:	e7dc      	b.n	8016d6e <lsm6dsl_channel_get+0x38>
		lsm6dsl_gyro_convert(val, data->gyro_sample_z, sensitivity);
 8016db4:	69a9      	ldr	r1, [r5, #24]
 8016db6:	e7f9      	b.n	8016dac <lsm6dsl_channel_get+0x76>
		lsm6dsl_gyro_convert(val, data->gyro_sample_x, sensitivity);
 8016db8:	4610      	mov	r0, r2
 8016dba:	6929      	ldr	r1, [r5, #16]
 8016dbc:	f7eb fd18 	bl	80027f0 <lsm6dsl_gyro_convert.constprop.0>
		lsm6dsl_gyro_convert(val + 1, data->gyro_sample_y, sensitivity);
 8016dc0:	6969      	ldr	r1, [r5, #20]
 8016dc2:	f104 0008 	add.w	r0, r4, #8
 8016dc6:	f7eb fd13 	bl	80027f0 <lsm6dsl_gyro_convert.constprop.0>
		lsm6dsl_gyro_convert(val + 2, data->gyro_sample_z, sensitivity);
 8016dca:	69a9      	ldr	r1, [r5, #24]
 8016dcc:	f104 0010 	add.w	r0, r4, #16
 8016dd0:	e7ed      	b.n	8016dae <lsm6dsl_channel_get+0x78>

08016dd2 <lsm6dsl_sample_fetch_gyro.isra.0>:
static int lsm6dsl_sample_fetch_gyro(const struct device *dev)
 8016dd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lsm6dsl_data *data = dev->data;
 8016dd4:	6904      	ldr	r4, [r0, #16]
	if (data->hw_tf->read_data(dev, LSM6DSL_REG_OUTX_L_G,
 8016dd6:	6a23      	ldr	r3, [r4, #32]
 8016dd8:	466a      	mov	r2, sp
 8016dda:	681d      	ldr	r5, [r3, #0]
 8016ddc:	2122      	movs	r1, #34	; 0x22
 8016dde:	2306      	movs	r3, #6
 8016de0:	47a8      	blx	r5
 8016de2:	2800      	cmp	r0, #0
 8016de4:	db08      	blt.n	8016df8 <lsm6dsl_sample_fetch_gyro.isra.0+0x26>
	data->gyro_sample_x = (int16_t)((uint16_t)(buf[0]) |
 8016de6:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016dea:	6123      	str	r3, [r4, #16]
	data->gyro_sample_y = (int16_t)((uint16_t)(buf[2]) |
 8016dec:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016df0:	6163      	str	r3, [r4, #20]
	data->gyro_sample_z = (int16_t)((uint16_t)(buf[4]) |
 8016df2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016df6:	61a3      	str	r3, [r4, #24]
}
 8016df8:	b003      	add	sp, #12
 8016dfa:	bd30      	pop	{r4, r5, pc}

08016dfc <lsm6dsl_sample_fetch_accel.isra.0>:
static int lsm6dsl_sample_fetch_accel(const struct device *dev)
 8016dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lsm6dsl_data *data = dev->data;
 8016dfe:	6904      	ldr	r4, [r0, #16]
	if (data->hw_tf->read_data(dev, LSM6DSL_REG_OUTX_L_XL,
 8016e00:	6a23      	ldr	r3, [r4, #32]
 8016e02:	466a      	mov	r2, sp
 8016e04:	681d      	ldr	r5, [r3, #0]
 8016e06:	2128      	movs	r1, #40	; 0x28
 8016e08:	2306      	movs	r3, #6
 8016e0a:	47a8      	blx	r5
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	db08      	blt.n	8016e22 <lsm6dsl_sample_fetch_accel.isra.0+0x26>
	data->accel_sample_x = (int16_t)((uint16_t)(buf[0]) |
 8016e10:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016e14:	6023      	str	r3, [r4, #0]
	data->accel_sample_y = (int16_t)((uint16_t)(buf[2]) |
 8016e16:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016e1a:	6063      	str	r3, [r4, #4]
	data->accel_sample_z = (int16_t)((uint16_t)(buf[4]) |
 8016e1c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016e20:	60a3      	str	r3, [r4, #8]
}
 8016e22:	b003      	add	sp, #12
 8016e24:	bd30      	pop	{r4, r5, pc}

08016e26 <lsm6dsl_sample_fetch>:
	switch (chan) {
 8016e26:	2907      	cmp	r1, #7
{
 8016e28:	b510      	push	{r4, lr}
 8016e2a:	4604      	mov	r4, r0
	switch (chan) {
 8016e2c:	d00a      	beq.n	8016e44 <lsm6dsl_sample_fetch+0x1e>
 8016e2e:	2939      	cmp	r1, #57	; 0x39
 8016e30:	d005      	beq.n	8016e3e <lsm6dsl_sample_fetch+0x18>
 8016e32:	2903      	cmp	r1, #3
 8016e34:	d109      	bne.n	8016e4a <lsm6dsl_sample_fetch+0x24>
		lsm6dsl_sample_fetch_accel(dev);
 8016e36:	f7ff ffe1 	bl	8016dfc <lsm6dsl_sample_fetch_accel.isra.0>
	return 0;
 8016e3a:	2000      	movs	r0, #0
}
 8016e3c:	bd10      	pop	{r4, pc}
		lsm6dsl_sample_fetch_accel(dev);
 8016e3e:	f7ff ffdd 	bl	8016dfc <lsm6dsl_sample_fetch_accel.isra.0>
		lsm6dsl_sample_fetch_gyro(dev);
 8016e42:	4620      	mov	r0, r4
 8016e44:	f7ff ffc5 	bl	8016dd2 <lsm6dsl_sample_fetch_gyro.isra.0>
		break;
 8016e48:	e7f7      	b.n	8016e3a <lsm6dsl_sample_fetch+0x14>
	switch (chan) {
 8016e4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8016e4e:	e7f5      	b.n	8016e3c <lsm6dsl_sample_fetch+0x16>

08016e50 <i2c_transfer>:
{
 8016e50:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8016e52:	6884      	ldr	r4, [r0, #8]
 8016e54:	68a4      	ldr	r4, [r4, #8]
 8016e56:	46a4      	mov	ip, r4
}
 8016e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e5c:	4760      	bx	ip

08016e5e <lsm6dsl_i2c_write_data>:
{
 8016e5e:	b530      	push	{r4, r5, lr}
 8016e60:	b089      	sub	sp, #36	; 0x24
	const struct lsm6dsl_config *cfg = dev->config;
 8016e62:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8016e64:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
 8016e68:	f10d 0107 	add.w	r1, sp, #7
 8016e6c:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
 8016e6e:	2101      	movs	r1, #1
	return i2c_burst_write(spec->bus, spec->addr,
 8016e70:	6860      	ldr	r0, [r4, #4]
	msg[0].len = 1U;
 8016e72:	9103      	str	r1, [sp, #12]
{
 8016e74:	461d      	mov	r5, r3
	msg[0].flags = I2C_MSG_WRITE;
 8016e76:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
 8016e78:	8923      	ldrh	r3, [r4, #8]
	msg[0].flags = I2C_MSG_WRITE;
 8016e7a:	f88d 1010 	strb.w	r1, [sp, #16]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8016e7e:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
 8016e82:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8016e84:	2202      	movs	r2, #2
 8016e86:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
 8016e8a:	f7ff ffe1 	bl	8016e50 <i2c_transfer>
}
 8016e8e:	b009      	add	sp, #36	; 0x24
 8016e90:	bd30      	pop	{r4, r5, pc}

08016e92 <lsm6dsl_i2c_read_data>:
{
 8016e92:	b530      	push	{r4, r5, lr}
 8016e94:	b089      	sub	sp, #36	; 0x24
	const struct lsm6dsl_config *cfg = dev->config;
 8016e96:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8016e98:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8016e9c:	f10d 0107 	add.w	r1, sp, #7
{
 8016ea0:	461d      	mov	r5, r3
 8016ea2:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8016ea4:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
 8016ea6:	6860      	ldr	r0, [r4, #4]
 8016ea8:	8923      	ldrh	r3, [r4, #8]
	msg[0].len = num_write;
 8016eaa:	9103      	str	r1, [sp, #12]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8016eac:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8016eb0:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016eb2:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8016eb4:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016eb8:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 8016ebc:	a902      	add	r1, sp, #8
 8016ebe:	2202      	movs	r2, #2
 8016ec0:	f7ff ffc6 	bl	8016e50 <i2c_transfer>
}
 8016ec4:	b009      	add	sp, #36	; 0x24
 8016ec6:	bd30      	pop	{r4, r5, pc}

08016ec8 <lsm6dsl_i2c_read_reg>:
{
 8016ec8:	b510      	push	{r4, lr}
 8016eca:	b088      	sub	sp, #32
	const struct lsm6dsl_config *cfg = dev->config;
 8016ecc:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8016ece:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8016ed2:	f10d 0107 	add.w	r1, sp, #7
 8016ed6:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8016ed8:	2101      	movs	r1, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8016eda:	6858      	ldr	r0, [r3, #4]
 8016edc:	891b      	ldrh	r3, [r3, #8]
	msg[0].len = num_write;
 8016ede:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
 8016ee0:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016ee4:	2207      	movs	r2, #7
 8016ee6:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
 8016eea:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
 8016eec:	2202      	movs	r2, #2
 8016eee:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
 8016ef0:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
 8016ef4:	f7ff ffac 	bl	8016e50 <i2c_transfer>
}
 8016ef8:	b008      	add	sp, #32
 8016efa:	bd10      	pop	{r4, pc}

08016efc <lsm6dsl_i2c_update_reg>:
{
 8016efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f00:	4698      	mov	r8, r3
	const struct lsm6dsl_config *cfg = dev->config;
 8016f02:	6843      	ldr	r3, [r0, #4]
{
 8016f04:	b088      	sub	sp, #32
	return i2c_reg_update_byte(spec->bus, spec->addr,
 8016f06:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8016f0a:	f893 a008 	ldrb.w	sl, [r3, #8]
 8016f0e:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8016f12:	2300      	movs	r3, #0
	msg[0].len = num_write;
 8016f14:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
 8016f16:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
 8016f1a:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
 8016f1e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016f22:	2307      	movs	r3, #7
 8016f24:	460e      	mov	r6, r1
 8016f26:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
 8016f28:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016f2a:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 8016f2e:	2202      	movs	r2, #2
 8016f30:	4653      	mov	r3, sl
 8016f32:	a902      	add	r1, sp, #8
 8016f34:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
 8016f36:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
 8016f38:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
 8016f3a:	f7ff ff89 	bl	8016e50 <i2c_transfer>
	if (rc != 0) {
 8016f3e:	b9b8      	cbnz	r0, 8016f70 <lsm6dsl_i2c_update_reg+0x74>
	new_value = (old_value & ~mask) | (value & mask);
 8016f40:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8016f44:	ea22 0304 	bic.w	r3, r2, r4
 8016f48:	ea04 0408 	and.w	r4, r4, r8
 8016f4c:	431c      	orrs	r4, r3
	if (new_value == old_value) {
 8016f4e:	42a2      	cmp	r2, r4
 8016f50:	d00e      	beq.n	8016f70 <lsm6dsl_i2c_update_reg+0x74>
	msg.len = num_bytes;
 8016f52:	2302      	movs	r3, #2
 8016f54:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8016f56:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
 8016f5a:	463a      	mov	r2, r7
 8016f5c:	4653      	mov	r3, sl
 8016f5e:	a902      	add	r1, sp, #8
 8016f60:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
 8016f62:	f88d 6004 	strb.w	r6, [sp, #4]
 8016f66:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
 8016f6a:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
 8016f6c:	f7ff ff70 	bl	8016e50 <i2c_transfer>
}
 8016f70:	b008      	add	sp, #32
 8016f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016f76 <setup_irq.isra.0>:
static inline void setup_irq(const struct device *dev, bool enable)
 8016f76:	b410      	push	{r4}
 8016f78:	4603      	mov	r3, r0
 8016f7a:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 8016f7c:	68c0      	ldr	r0, [r0, #12]
 8016f7e:	7c19      	ldrb	r1, [r3, #16]
		: GPIO_INT_DISABLE;
 8016f80:	b19a      	cbz	r2, 8016faa <setup_irq.isra.0+0x34>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8016f82:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 8016f84:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8016f86:	6812      	ldr	r2, [r2, #0]
 8016f88:	2301      	movs	r3, #1
 8016f8a:	408b      	lsls	r3, r1
 8016f8c:	4213      	tst	r3, r2
 8016f8e:	bf14      	ite	ne
 8016f90:	f04f 7270 	movne.w	r2, #62914560	; 0x3c00000
 8016f94:	f04f 62b8 	moveq.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8016f98:	69a4      	ldr	r4, [r4, #24]
 8016f9a:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
 8016f9e:	46a4      	mov	ip, r4
 8016fa0:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
 8016fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fa8:	4760      	bx	ip
		: GPIO_INT_DISABLE;
 8016faa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	const struct gpio_driver_api *api =
 8016fae:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8016fb0:	e7f2      	b.n	8016f98 <setup_irq.isra.0+0x22>

08016fb2 <lsm6dsl_gpio_callback>:
{
 8016fb2:	b510      	push	{r4, lr}
	handle_irq(drv_data->dev);
 8016fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
	struct lsm6dsl_data *drv_data = dev->data;
 8016fb8:	691c      	ldr	r4, [r3, #16]
	setup_irq(dev, false);
 8016fba:	6858      	ldr	r0, [r3, #4]
 8016fbc:	2100      	movs	r1, #0
 8016fbe:	f7ff ffda 	bl	8016f76 <setup_irq.isra.0>
	k_work_submit(&drv_data->work);
 8016fc2:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
 8016fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&drv_data->work);
 8016fca:	f7f8 be7d 	b.w	800fcc8 <k_work_submit>

08016fce <lsm6dsl_work_cb>:
{
 8016fce:	b510      	push	{r4, lr}
	lsm6dsl_thread_cb(drv_data->dev);
 8016fd0:	f850 4c18 	ldr.w	r4, [r0, #-24]
	struct lsm6dsl_data *drv_data = dev->data;
 8016fd4:	6921      	ldr	r1, [r4, #16]
	if (drv_data->data_ready_handler != NULL) {
 8016fd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016fd8:	b113      	cbz	r3, 8016fe0 <lsm6dsl_work_cb+0x12>
		drv_data->data_ready_handler(dev,
 8016fda:	313c      	adds	r1, #60	; 0x3c
 8016fdc:	4620      	mov	r0, r4
 8016fde:	4798      	blx	r3
	setup_irq(dev, true);
 8016fe0:	6860      	ldr	r0, [r4, #4]
 8016fe2:	2101      	movs	r1, #1
}
 8016fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	setup_irq(dev, true);
 8016fe8:	f7ff bfc5 	b.w	8016f76 <setup_irq.isra.0>

08016fec <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
 8016fec:	b530      	push	{r4, r5, lr}
 8016fee:	b089      	sub	sp, #36	; 0x24
 8016ff0:	4604      	mov	r4, r0
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
 8016ff2:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8016ff6:	f10d 0107 	add.w	r1, sp, #7
{
 8016ffa:	461d      	mov	r5, r3
 8016ffc:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8016ffe:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
 8017000:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017004:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8017006:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8017008:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
 801700a:	6800      	ldr	r0, [r0, #0]
 801700c:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 801700e:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8017012:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8017016:	6882      	ldr	r2, [r0, #8]
 8017018:	a902      	add	r1, sp, #8
 801701a:	6894      	ldr	r4, [r2, #8]
 801701c:	2202      	movs	r2, #2
 801701e:	47a0      	blx	r4
}
 8017020:	b009      	add	sp, #36	; 0x24
 8017022:	bd30      	pop	{r4, r5, pc}

08017024 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
 8017024:	b530      	push	{r4, r5, lr}
 8017026:	b089      	sub	sp, #36	; 0x24
 8017028:	4604      	mov	r4, r0
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
 801702a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
 801702e:	f10d 0107 	add.w	r1, sp, #7
{
 8017032:	461d      	mov	r5, r3
 8017034:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
 8017036:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
 8017038:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801703c:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 801703e:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
 8017040:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
 8017042:	6800      	ldr	r0, [r0, #0]
 8017044:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8017046:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 801704a:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 801704e:	6881      	ldr	r1, [r0, #8]
 8017050:	688c      	ldr	r4, [r1, #8]
 8017052:	a902      	add	r1, sp, #8
 8017054:	47a0      	blx	r4
}
 8017056:	b009      	add	sp, #36	; 0x24
 8017058:	bd30      	pop	{r4, r5, pc}

0801705a <vl53l0x_channel_get>:
	if (chan == SENSOR_CHAN_PROX) {
 801705a:	290f      	cmp	r1, #15
	struct vl53l0x_data *drv_data = dev->data;
 801705c:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PROX) {
 801705e:	d10a      	bne.n	8017076 <vl53l0x_channel_get+0x1c>
		if (drv_data->RangingMeasurementData.RangeMilliMeter <=
 8017060:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8017064:	2b64      	cmp	r3, #100	; 0x64
 8017066:	bf8c      	ite	hi
 8017068:	2300      	movhi	r3, #0
 801706a:	2301      	movls	r3, #1
 801706c:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
 801706e:	2300      	movs	r3, #0
 8017070:	6053      	str	r3, [r2, #4]
	return 0;
 8017072:	2000      	movs	r0, #0
 8017074:	4770      	bx	lr
	} else if (chan == SENSOR_CHAN_DISTANCE) {
 8017076:	291a      	cmp	r1, #26
 8017078:	d10f      	bne.n	801709a <vl53l0x_channel_get+0x40>
		val->val1 = drv_data->RangingMeasurementData.RangeMilliMeter / 1000;
 801707a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801707e:	f8b3 0170 	ldrh.w	r0, [r3, #368]	; 0x170
 8017082:	fbb0 f0f1 	udiv	r0, r0, r1
 8017086:	6010      	str	r0, [r2, #0]
		val->val2 = (drv_data->RangingMeasurementData.RangeMilliMeter % 1000) * 1000;
 8017088:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 801708c:	fbb3 f0f1 	udiv	r0, r3, r1
 8017090:	fb01 3310 	mls	r3, r1, r0, r3
 8017094:	b29b      	uxth	r3, r3
 8017096:	434b      	muls	r3, r1
 8017098:	e7ea      	b.n	8017070 <vl53l0x_channel_get+0x16>
		return -ENOTSUP;
 801709a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801709e:	4770      	bx	lr

080170a0 <z_log_msg_static_create.constprop.0>:
 80170a0:	2300      	movs	r3, #0
 80170a2:	f7f1 b855 	b.w	8008150 <z_impl_z_log_msg_static_create>

080170a6 <i2c_burst_read>:
{
 80170a6:	b510      	push	{r4, lr}
 80170a8:	b088      	sub	sp, #32
 80170aa:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 80170ae:	f10d 0207 	add.w	r2, sp, #7
 80170b2:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
 80170b4:	9305      	str	r3, [sp, #20]
	msg[0].len = num_write;
 80170b6:	2201      	movs	r2, #1
	msg[1].len = num_read;
 80170b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	msg[0].len = num_write;
 80170ba:	9203      	str	r2, [sp, #12]
	msg[1].len = num_read;
 80170bc:	9306      	str	r3, [sp, #24]
	msg[0].flags = I2C_MSG_WRITE;
 80170be:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80170c0:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
 80170c2:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80170c6:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80170ca:	6883      	ldr	r3, [r0, #8]
 80170cc:	2202      	movs	r2, #2
 80170ce:	689c      	ldr	r4, [r3, #8]
 80170d0:	460b      	mov	r3, r1
 80170d2:	a902      	add	r1, sp, #8
 80170d4:	47a0      	blx	r4
}
 80170d6:	b008      	add	sp, #32
 80170d8:	bd10      	pop	{r4, pc}

080170da <i2c_write>:
{
 80170da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
 80170dc:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80170e0:	2202      	movs	r2, #2
 80170e2:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80170e6:	6882      	ldr	r2, [r0, #8]
 80170e8:	a901      	add	r1, sp, #4
 80170ea:	6894      	ldr	r4, [r2, #8]
 80170ec:	2201      	movs	r2, #1
 80170ee:	47a0      	blx	r4
}
 80170f0:	b004      	add	sp, #16
 80170f2:	bd10      	pop	{r4, pc}

080170f4 <VL53L0X_WrByte>:
{
 80170f4:	b507      	push	{r0, r1, r2, lr}
	return i2c_write(dev, tx_buf, 2, dev_addr);
 80170f6:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
	uint8_t tx_buf[2] = {reg_addr, value};
 80170fa:	f88d 1004 	strb.w	r1, [sp, #4]
 80170fe:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
 8017102:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
 8017106:	2202      	movs	r2, #2
 8017108:	a901      	add	r1, sp, #4
 801710a:	f7ff ffe6 	bl	80170da <i2c_write>
	if (status_int < 0) {
 801710e:	2800      	cmp	r0, #0
 8017110:	da04      	bge.n	801711c <VL53L0X_WrByte+0x28>
}
 8017112:	b003      	add	sp, #12
 8017114:	f85d eb04 	ldr.w	lr, [sp], #4
 8017118:	f7f6 be24 	b.w	800dd64 <VL53L0X_WrByte.part.0>
 801711c:	2000      	movs	r0, #0
 801711e:	b003      	add	sp, #12
 8017120:	f85d fb04 	ldr.w	pc, [sp], #4

08017124 <VL53L0X_RdByte>:
{
 8017124:	b530      	push	{r4, r5, lr}
 8017126:	b089      	sub	sp, #36	; 0x24
 8017128:	4603      	mov	r3, r0
	status_int = i2c_reg_read_byte(Dev->i2c, Dev->I2cDevAddr, index, data);
 801712a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 801712e:	f10d 0107 	add.w	r1, sp, #7
 8017132:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8017134:	2101      	movs	r1, #1
	msg[1].len = num_read;
 8017136:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 801713a:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 801713c:	2207      	movs	r2, #7
 801713e:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
 8017142:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
	msg[0].len = num_write;
 8017146:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
 8017148:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 801714c:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8017150:	6882      	ldr	r2, [r0, #8]
 8017152:	a902      	add	r1, sp, #8
 8017154:	6895      	ldr	r5, [r2, #8]
 8017156:	2202      	movs	r2, #2
 8017158:	47a8      	blx	r5
	if (status_int < 0) {
 801715a:	42a0      	cmp	r0, r4
 801715c:	da04      	bge.n	8017168 <VL53L0X_RdByte+0x44>
}
 801715e:	b009      	add	sp, #36	; 0x24
 8017160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017164:	f7f6 be1e 	b.w	800dda4 <VL53L0X_RdByte.part.0>
 8017168:	4620      	mov	r0, r4
 801716a:	b009      	add	sp, #36	; 0x24
 801716c:	bd30      	pop	{r4, r5, pc}

0801716e <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 801716e:	b508      	push	{r3, lr}
	return z_impl_k_sleep(timeout);
 8017170:	2100      	movs	r1, #0
 8017172:	2014      	movs	r0, #20
 8017174:	f7f9 f8a2 	bl	80102bc <z_impl_k_sleep>
	k_sleep(K_MSEC(2));
	return VL53L0X_ERROR_NONE;
}
 8017178:	2000      	movs	r0, #0
 801717a:	bd08      	pop	{r3, pc}

0801717c <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 801717c:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801717e:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8017180:	69d0      	ldr	r0, [r2, #28]
 8017182:	0700      	lsls	r0, r0, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8017184:	bf44      	itt	mi
 8017186:	2008      	movmi	r0, #8
 8017188:	6210      	strmi	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 801718a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 801718c:	69da      	ldr	r2, [r3, #28]
 801718e:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8017190:	bf43      	ittte	mi
 8017192:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 8017194:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8017196:	2000      	movmi	r0, #0
		return -1;
 8017198:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 801719c:	4770      	bx	lr

0801719e <uart_stm32_irq_tx_enable>:
	LL_USART_EnableIT_TC(config->usart);
 801719e:	6843      	ldr	r3, [r0, #4]
 80171a0:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171a2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80171a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171aa:	e842 3100 	strex	r1, r3, [r2]
 80171ae:	2900      	cmp	r1, #0
 80171b0:	d1f7      	bne.n	80171a2 <uart_stm32_irq_tx_enable+0x4>
}
 80171b2:	4770      	bx	lr

080171b4 <uart_stm32_irq_tx_disable>:
	LL_USART_DisableIT_TC(config->usart);
 80171b4:	6843      	ldr	r3, [r0, #4]
 80171b6:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171b8:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80171bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171c0:	e842 3100 	strex	r1, r3, [r2]
 80171c4:	2900      	cmp	r1, #0
 80171c6:	d1f7      	bne.n	80171b8 <uart_stm32_irq_tx_disable+0x4>
}
 80171c8:	4770      	bx	lr

080171ca <uart_stm32_irq_rx_enable>:
	LL_USART_EnableIT_RXNE(config->usart);
 80171ca:	6843      	ldr	r3, [r0, #4]
 80171cc:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171ce:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80171d2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171d6:	e842 3100 	strex	r1, r3, [r2]
 80171da:	2900      	cmp	r1, #0
 80171dc:	d1f7      	bne.n	80171ce <uart_stm32_irq_rx_enable+0x4>
}
 80171de:	4770      	bx	lr

080171e0 <uart_stm32_irq_rx_disable>:
	LL_USART_DisableIT_RXNE(config->usart);
 80171e0:	6843      	ldr	r3, [r0, #4]
 80171e2:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171e4:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80171e8:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171ec:	e842 3100 	strex	r1, r3, [r2]
 80171f0:	2900      	cmp	r1, #0
 80171f2:	d1f7      	bne.n	80171e4 <uart_stm32_irq_rx_disable+0x4>
}
 80171f4:	4770      	bx	lr

080171f6 <uart_stm32_irq_update>:
}
 80171f6:	2001      	movs	r0, #1
 80171f8:	4770      	bx	lr

080171fa <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = dev->data;
 80171fa:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 80171fc:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 8017200:	4770      	bx	lr

08017202 <uart_stm32_isr>:
	struct uart_stm32_data *data = dev->data;
 8017202:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 8017204:	6893      	ldr	r3, [r2, #8]
 8017206:	b10b      	cbz	r3, 801720c <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8017208:	68d1      	ldr	r1, [r2, #12]
 801720a:	4718      	bx	r3
}
 801720c:	4770      	bx	lr

0801720e <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 801720e:	b508      	push	{r3, lr}
 8017210:	2200      	movs	r2, #0
 8017212:	2025      	movs	r0, #37	; 0x25
 8017214:	4611      	mov	r1, r2
 8017216:	f7f3 fee9 	bl	800afec <z_arm_irq_priority_set>
 801721a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801721e:	2025      	movs	r0, #37	; 0x25
 8017220:	f7f3 bed6 	b.w	800afd0 <arch_irq_enable>

08017224 <uart_stm32_irq_config_func_1>:
 8017224:	b508      	push	{r3, lr}
 8017226:	2200      	movs	r2, #0
 8017228:	2034      	movs	r0, #52	; 0x34
 801722a:	4611      	mov	r1, r2
 801722c:	f7f3 fede 	bl	800afec <z_arm_irq_priority_set>
 8017230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017234:	2034      	movs	r0, #52	; 0x34
 8017236:	f7f3 becb 	b.w	800afd0 <arch_irq_enable>

0801723a <uart_stm32_irq_tx_complete>:
	return LL_USART_IsActiveFlag_TC(config->usart);
 801723a:	6843      	ldr	r3, [r0, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 801723e:	69d8      	ldr	r0, [r3, #28]
}
 8017240:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8017244:	4770      	bx	lr

08017246 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8017246:	6903      	ldr	r3, [r0, #16]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 801724c:	6843      	ldr	r3, [r0, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8017256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801725a:	d035      	beq.n	80172c8 <uart_stm32_config_get+0x82>
 801725c:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8017260:	f1dc 0300 	rsbs	r3, ip, #0
 8017264:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8017268:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 801726a:	6843      	ldr	r3, [r0, #4]
 801726c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8017274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017278:	d028      	beq.n	80172cc <uart_stm32_config_get+0x86>
 801727a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801727e:	d027      	beq.n	80172d0 <uart_stm32_config_get+0x8a>
		return UART_CFG_STOP_BITS_2;
 8017280:	2b00      	cmp	r3, #0
 8017282:	bf0c      	ite	eq
 8017284:	2301      	moveq	r3, #1
 8017286:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8017288:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 801728a:	6843      	ldr	r3, [r0, #4]
 801728c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801728e:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8017290:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8017292:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	switch (db) {
 8017296:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801729a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801729e:	d019      	beq.n	80172d4 <uart_stm32_config_get+0x8e>
 80172a0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80172a4:	d11b      	bne.n	80172de <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_7;
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	bf14      	ite	ne
 80172aa:	2301      	movne	r3, #1
 80172ac:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80172ae:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80172b0:	6843      	ldr	r3, [r0, #4]
 80172b2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80172b4:	689b      	ldr	r3, [r3, #8]
 80172b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80172ba:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80172be:	4253      	negs	r3, r2
 80172c0:	4153      	adcs	r3, r2
 80172c2:	71cb      	strb	r3, [r1, #7]
}
 80172c4:	2000      	movs	r0, #0
 80172c6:	4770      	bx	lr
	switch (parity) {
 80172c8:	2302      	movs	r3, #2
 80172ca:	e7cd      	b.n	8017268 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80172cc:	2300      	movs	r3, #0
 80172ce:	e7db      	b.n	8017288 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 80172d0:	2302      	movs	r3, #2
 80172d2:	e7d9      	b.n	8017288 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	bf14      	ite	ne
 80172d8:	2303      	movne	r3, #3
 80172da:	2304      	moveq	r3, #4
 80172dc:	e7e7      	b.n	80172ae <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 80172de:	2b00      	cmp	r3, #0
 80172e0:	bf14      	ite	ne
 80172e2:	2302      	movne	r3, #2
 80172e4:	2303      	moveq	r3, #3
 80172e6:	e7e2      	b.n	80172ae <uart_stm32_config_get+0x68>

080172e8 <uart_stm32_set_baudrate>:
{
 80172e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 80172ea:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 80172ec:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 80172ee:	6858      	ldr	r0, [r3, #4]
	if (api->get_rate == NULL) {
 80172f0:	6883      	ldr	r3, [r0, #8]
 80172f2:	68db      	ldr	r3, [r3, #12]
{
 80172f4:	460c      	mov	r4, r1
					   (clock_control_subsys_t)&config->pclken[0],
 80172f6:	6869      	ldr	r1, [r5, #4]
 80172f8:	b91b      	cbnz	r3, 8017302 <uart_stm32_set_baudrate+0x1a>
 80172fa:	f7f6 ff73 	bl	800e1e4 <uart_stm32_set_baudrate.part.0>
}
 80172fe:	b003      	add	sp, #12
 8017300:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
 8017302:	aa01      	add	r2, sp, #4
 8017304:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8017306:	2800      	cmp	r0, #0
 8017308:	dbf7      	blt.n	80172fa <uart_stm32_set_baudrate+0x12>
		LL_USART_SetOverSampling(config->usart,
 801730a:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 801730c:	6813      	ldr	r3, [r2, #0]
 801730e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8017312:	6013      	str	r3, [r2, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8017314:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 8017316:	682a      	ldr	r2, [r5, #0]
 8017318:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 801731c:	fbb3 f3f4 	udiv	r3, r3, r4
 8017320:	b29b      	uxth	r3, r3
 8017322:	60d3      	str	r3, [r2, #12]
			 "BaudRateReg >= 16");
 8017324:	e7eb      	b.n	80172fe <uart_stm32_set_baudrate+0x16>

08017326 <uart_stm32_irq_tx_ready>:
	return LL_USART_IsActiveFlag_TXE(config->usart) &&
 8017326:	6843      	ldr	r3, [r0, #4]
 8017328:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 801732a:	69d8      	ldr	r0, [r3, #28]
 801732c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8017330:	bf1c      	itt	ne
 8017332:	6818      	ldrne	r0, [r3, #0]
 8017334:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 8017338:	4770      	bx	lr

0801733a <uart_stm32_fifo_fill>:
{
 801733a:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 801733c:	6846      	ldr	r6, [r0, #4]
	if (!LL_USART_IsActiveFlag_TXE(config->usart)) {
 801733e:	6833      	ldr	r3, [r6, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8017340:	69d8      	ldr	r0, [r3, #28]
 8017342:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017346:	d01b      	beq.n	8017380 <uart_stm32_fifo_fill+0x46>
	__asm__ volatile(
 8017348:	f04f 0310 	mov.w	r3, #16
 801734c:	f3ef 8711 	mrs	r7, BASEPRI
 8017350:	f383 8812 	msr	BASEPRI_MAX, r3
 8017354:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 8017358:	2400      	movs	r4, #0
 801735a:	b2e3      	uxtb	r3, r4
 801735c:	429a      	cmp	r2, r3
 801735e:	4618      	mov	r0, r3
 8017360:	dd0a      	ble.n	8017378 <uart_stm32_fifo_fill+0x3e>
	       LL_USART_IsActiveFlag_TXE(config->usart)) {
 8017362:	6835      	ldr	r5, [r6, #0]
 8017364:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8017368:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801736c:	f104 0401 	add.w	r4, r4, #1
 8017370:	d002      	beq.n	8017378 <uart_stm32_fifo_fill+0x3e>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8017372:	5ccb      	ldrb	r3, [r1, r3]
 8017374:	852b      	strh	r3, [r5, #40]	; 0x28
}
 8017376:	e7f0      	b.n	801735a <uart_stm32_fifo_fill+0x20>
	__asm__ volatile(
 8017378:	f387 8811 	msr	BASEPRI, r7
 801737c:	f3bf 8f6f 	isb	sy
}
 8017380:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017382 <uart_stm32_poll_out>:
{
 8017382:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8017384:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8017386:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8017388:	69d3      	ldr	r3, [r2, #28]
 801738a:	061b      	lsls	r3, r3, #24
 801738c:	d5fc      	bpl.n	8017388 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 801738e:	f04f 0210 	mov.w	r2, #16
 8017392:	f3ef 8311 	mrs	r3, BASEPRI
 8017396:	f382 8812 	msr	BASEPRI_MAX, r2
 801739a:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801739e:	6802      	ldr	r2, [r0, #0]
 80173a0:	69d4      	ldr	r4, [r2, #28]
 80173a2:	0624      	lsls	r4, r4, #24
 80173a4:	d404      	bmi.n	80173b0 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80173a6:	f383 8811 	msr	BASEPRI, r3
 80173aa:	f3bf 8f6f 	isb	sy
}
 80173ae:	e7ea      	b.n	8017386 <uart_stm32_poll_out+0x4>
  USARTx->TDR = Value;
 80173b0:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 80173b2:	f383 8811 	msr	BASEPRI, r3
 80173b6:	f3bf 8f6f 	isb	sy
}
 80173ba:	bd10      	pop	{r4, pc}

080173bc <uart_stm32_irq_is_pending>:
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 80173bc:	6843      	ldr	r3, [r0, #4]
 80173be:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80173c0:	69da      	ldr	r2, [r3, #28]
 80173c2:	0691      	lsls	r1, r2, #26
 80173c4:	d502      	bpl.n	80173cc <uart_stm32_irq_is_pending+0x10>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 80173c6:	681a      	ldr	r2, [r3, #0]
 80173c8:	0692      	lsls	r2, r2, #26
 80173ca:	d407      	bmi.n	80173dc <uart_stm32_irq_is_pending+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80173cc:	69d8      	ldr	r0, [r3, #28]
 80173ce:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80173d2:	d004      	beq.n	80173de <uart_stm32_irq_is_pending+0x22>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80173d4:	6818      	ldr	r0, [r3, #0]
 80173d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80173da:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 80173dc:	2001      	movs	r0, #1
}
 80173de:	4770      	bx	lr

080173e0 <uart_stm32_irq_rx_ready>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
 80173e0:	6843      	ldr	r3, [r0, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80173e4:	69d8      	ldr	r0, [r3, #28]
}
 80173e6:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80173ea:	4770      	bx	lr

080173ec <uart_stm32_fifo_read>:
{
 80173ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 80173ee:	6844      	ldr	r4, [r0, #4]
	while ((size - num_rx > 0) &&
 80173f0:	2300      	movs	r3, #0
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80173f2:	2608      	movs	r6, #8
 80173f4:	b2d8      	uxtb	r0, r3
 80173f6:	4282      	cmp	r2, r0
 80173f8:	dd0c      	ble.n	8017414 <uart_stm32_fifo_read+0x28>
	       LL_USART_IsActiveFlag_RXNE(config->usart)) {
 80173fa:	6825      	ldr	r5, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80173fc:	69ef      	ldr	r7, [r5, #28]
 80173fe:	06bf      	lsls	r7, r7, #26
 8017400:	d508      	bpl.n	8017414 <uart_stm32_fifo_read+0x28>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8017402:	8cad      	ldrh	r5, [r5, #36]	; 0x24
 8017404:	540d      	strb	r5, [r1, r0]
		if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8017406:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8017408:	69c5      	ldr	r5, [r0, #28]
 801740a:	072d      	lsls	r5, r5, #28
 801740c:	d500      	bpl.n	8017410 <uart_stm32_fifo_read+0x24>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801740e:	6206      	str	r6, [r0, #32]
 8017410:	3301      	adds	r3, #1
 8017412:	e7ef      	b.n	80173f4 <uart_stm32_fifo_read+0x8>
}
 8017414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017416 <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 8017416:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8017418:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801741a:	69d0      	ldr	r0, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 801741c:	69d1      	ldr	r1, [r2, #28]
 801741e:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8017420:	69d1      	ldr	r1, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8017422:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8017426:	bf48      	it	mi
 8017428:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 801742c:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 801742e:	69d1      	ldr	r1, [r2, #28]
		err |= UART_ERROR_FRAMING;
 8017430:	bf48      	it	mi
 8017432:	f040 0004 	orrmi.w	r0, r0, #4
 8017436:	05c9      	lsls	r1, r1, #23
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8017438:	bf42      	ittt	mi
 801743a:	f44f 7180 	movmi.w	r1, #256	; 0x100
		err |= UART_BREAK;
 801743e:	f040 0008 	orrmi.w	r0, r0, #8
 8017442:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_OVERRUN) {
 8017444:	07c2      	lsls	r2, r0, #31
		LL_USART_ClearFlag_ORE(config->usart);
 8017446:	bf42      	ittt	mi
 8017448:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801744a:	2108      	movmi	r1, #8
 801744c:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_PARITY) {
 801744e:	0781      	lsls	r1, r0, #30
		LL_USART_ClearFlag_PE(config->usart);
 8017450:	bf42      	ittt	mi
 8017452:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8017454:	2101      	movmi	r1, #1
 8017456:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_FRAMING) {
 8017458:	0742      	lsls	r2, r0, #29
		LL_USART_ClearFlag_FE(config->usart);
 801745a:	bf42      	ittt	mi
 801745c:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 801745e:	2102      	movmi	r1, #2
 8017460:	6211      	strmi	r1, [r2, #32]
	LL_USART_ClearFlag_NE(config->usart);
 8017462:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8017464:	2204      	movs	r2, #4
 8017466:	621a      	str	r2, [r3, #32]
}
 8017468:	4770      	bx	lr

0801746a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 801746a:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
 801746c:	6803      	ldr	r3, [r0, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 801746e:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
 8017472:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8017474:	7905      	ldrb	r5, [r0, #4]
 8017476:	6804      	ldr	r4, [r0, #0]
 8017478:	4435      	add	r5, r6
 801747a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801747e:	42a3      	cmp	r3, r4
 8017480:	d902      	bls.n	8017488 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
 8017482:	f06f 0001 	mvn.w	r0, #1
}
 8017486:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
 8017488:	795c      	ldrb	r4, [r3, #5]
 801748a:	428c      	cmp	r4, r1
 801748c:	d001      	beq.n	8017492 <pinctrl_lookup_state+0x28>
		(*state)++;
 801748e:	3308      	adds	r3, #8
 8017490:	e7ef      	b.n	8017472 <pinctrl_lookup_state+0x8>
			return 0;
 8017492:	2000      	movs	r0, #0
 8017494:	e7f7      	b.n	8017486 <pinctrl_lookup_state+0x1c>

08017496 <VL53L0X_GetDeviceInfo>:
	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8017496:	f7f7 bd67 	b.w	800ef68 <VL53L0X_get_device_info>

0801749a <VL53L0X_GetFractionEnable>:
{
 801749a:	b510      	push	{r4, lr}
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 801749c:	460a      	mov	r2, r1
{
 801749e:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80174a0:	2109      	movs	r1, #9
 80174a2:	f7ff fe3f 	bl	8017124 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 80174a6:	b918      	cbnz	r0, 80174b0 <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 80174a8:	7823      	ldrb	r3, [r4, #0]
 80174aa:	f003 0301 	and.w	r3, r3, #1
 80174ae:	7023      	strb	r3, [r4, #0]
}
 80174b0:	bd10      	pop	{r4, pc}

080174b2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80174b2:	f001 bcb8 	b.w	8018e26 <VL53L0X_set_measurement_timing_budget_micro_seconds>

080174b6 <VL53L0X_SetVcselPulsePeriod>:
	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80174b6:	f001 bb1d 	b.w	8018af4 <VL53L0X_set_vcsel_pulse_period>

080174ba <VL53L0X_GetVcselPulsePeriod>:
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80174ba:	f001 bc9a 	b.w	8018df2 <VL53L0X_get_vcsel_pulse_period>

080174be <VL53L0X_SetSequenceStepEnable>:
{
 80174be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t SequenceConfig = 0;
 80174c0:	2300      	movs	r3, #0
{
 80174c2:	460f      	mov	r7, r1
 80174c4:	4614      	mov	r4, r2
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80174c6:	2101      	movs	r1, #1
 80174c8:	f10d 0207 	add.w	r2, sp, #7
{
 80174cc:	4606      	mov	r6, r0
	uint8_t SequenceConfig = 0;
 80174ce:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80174d2:	f7ff fe27 	bl	8017124 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 80174d6:	4605      	mov	r5, r0
 80174d8:	b970      	cbnz	r0, 80174f8 <VL53L0X_SetSequenceStepEnable+0x3a>
		if (SequenceStepEnabled == 1) {
 80174da:	2c01      	cmp	r4, #1
	SequenceConfigNew = SequenceConfig;
 80174dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 80174e0:	d119      	bne.n	8017516 <VL53L0X_SetSequenceStepEnable+0x58>
			switch (SequenceStepId) {
 80174e2:	2f04      	cmp	r7, #4
 80174e4:	d844      	bhi.n	8017570 <VL53L0X_SetSequenceStepEnable+0xb2>
 80174e6:	e8df f007 	tbb	[pc, r7]
 80174ea:	0a03      	.short	0x0a03
 80174ec:	100d      	.short	0x100d
 80174ee:	13          	.byte	0x13
 80174ef:	00          	.byte	0x00
				SequenceConfigNew |= 0x10;
 80174f0:	f043 0410 	orr.w	r4, r3, #16
	if (SequenceConfigNew != SequenceConfig) {
 80174f4:	42a3      	cmp	r3, r4
 80174f6:	d11a      	bne.n	801752e <VL53L0X_SetSequenceStepEnable+0x70>
}
 80174f8:	4628      	mov	r0, r5
 80174fa:	b003      	add	sp, #12
 80174fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 80174fe:	f043 0428 	orr.w	r4, r3, #40	; 0x28
	if (SequenceConfigNew != SequenceConfig) {
 8017502:	e7f7      	b.n	80174f4 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x04;
 8017504:	f043 0404 	orr.w	r4, r3, #4
	if (SequenceConfigNew != SequenceConfig) {
 8017508:	e7f4      	b.n	80174f4 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x40;
 801750a:	f043 0440 	orr.w	r4, r3, #64	; 0x40
 801750e:	e7f1      	b.n	80174f4 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x80;
 8017510:	f043 0480 	orr.w	r4, r3, #128	; 0x80
	if (SequenceConfigNew != SequenceConfig) {
 8017514:	e7ee      	b.n	80174f4 <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
 8017516:	2f04      	cmp	r7, #4
 8017518:	d82a      	bhi.n	8017570 <VL53L0X_SetSequenceStepEnable+0xb2>
 801751a:	e8df f007 	tbb	[pc, r7]
 801751e:	1503      	.short	0x1503
 8017520:	1f1a      	.short	0x1f1a
 8017522:	24          	.byte	0x24
 8017523:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8017524:	f003 04ef 	and.w	r4, r3, #239	; 0xef
	if (SequenceConfigNew != SequenceConfig) {
 8017528:	f013 0f10 	tst.w	r3, #16
 801752c:	d0e4      	beq.n	80174f8 <VL53L0X_SetSequenceStepEnable+0x3a>
			Status = VL53L0X_WrByte(Dev,
 801752e:	4622      	mov	r2, r4
 8017530:	2101      	movs	r1, #1
 8017532:	4630      	mov	r0, r6
 8017534:	f7ff fdde 	bl	80170f4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8017538:	b9e8      	cbnz	r0, 8017576 <VL53L0X_SetSequenceStepEnable+0xb8>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 801753a:	6971      	ldr	r1, [r6, #20]
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 801753c:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8017540:	4630      	mov	r0, r6
 8017542:	f7ff ffb6 	bl	80174b2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8017546:	e7d7      	b.n	80174f8 <VL53L0X_SetSequenceStepEnable+0x3a>
				SequenceConfigNew &= 0xd7;
 8017548:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
	if (SequenceConfigNew != SequenceConfig) {
 801754c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8017550:	e7ec      	b.n	801752c <VL53L0X_SetSequenceStepEnable+0x6e>
				SequenceConfigNew &= 0xfb;
 8017552:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
	if (SequenceConfigNew != SequenceConfig) {
 8017556:	f013 0f04 	tst.w	r3, #4
 801755a:	e7e7      	b.n	801752c <VL53L0X_SetSequenceStepEnable+0x6e>
				SequenceConfigNew &= 0xbf;
 801755c:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
	if (SequenceConfigNew != SequenceConfig) {
 8017560:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017564:	e7e2      	b.n	801752c <VL53L0X_SetSequenceStepEnable+0x6e>
				SequenceConfigNew &= 0x7f;
 8017566:	f003 047f 	and.w	r4, r3, #127	; 0x7f
	if (SequenceConfigNew != SequenceConfig) {
 801756a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801756e:	e7dd      	b.n	801752c <VL53L0X_SetSequenceStepEnable+0x6e>
			switch (SequenceStepId) {
 8017570:	f06f 0503 	mvn.w	r5, #3
 8017574:	e7c0      	b.n	80174f8 <VL53L0X_SetSequenceStepEnable+0x3a>
 8017576:	4605      	mov	r5, r0
 8017578:	e7be      	b.n	80174f8 <VL53L0X_SetSequenceStepEnable+0x3a>

0801757a <VL53L0X_GetSequenceStepEnables>:
{
 801757a:	b513      	push	{r0, r1, r4, lr}
	uint8_t SequenceConfig = 0;
 801757c:	2300      	movs	r3, #0
{
 801757e:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8017580:	f10d 0207 	add.w	r2, sp, #7
 8017584:	2101      	movs	r1, #1
	uint8_t SequenceConfig = 0;
 8017586:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 801758a:	f7ff fdcb 	bl	8017124 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 801758e:	b978      	cbnz	r0, 80175b0 <VL53L0X_GetSequenceStepEnables+0x36>
		Status = sequence_step_enabled(Dev,
 8017590:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8017594:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8017598:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 801759a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801759e:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80175a0:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80175a4:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80175a6:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80175aa:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80175ac:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80175ae:	7123      	strb	r3, [r4, #4]
}
 80175b0:	b002      	add	sp, #8
 80175b2:	bd10      	pop	{r4, pc}

080175b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
{
 80175b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175b6:	460d      	mov	r5, r1
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80175b8:	f10d 0202 	add.w	r2, sp, #2
 80175bc:	21f8      	movs	r1, #248	; 0xf8
{
 80175be:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80175c0:	f7f6 fcda 	bl	800df78 <VL53L0X_RdWord>
	if (Status == VL53L0X_ERROR_NONE) {
 80175c4:	b970      	cbnz	r0, 80175e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 80175c6:	aa01      	add	r2, sp, #4
 80175c8:	2104      	movs	r1, #4
 80175ca:	4620      	mov	r0, r4
 80175cc:	f7f6 fd00 	bl	800dfd0 <VL53L0X_RdDWord>
	if (Status == VL53L0X_ERROR_NONE) {
 80175d0:	b940      	cbnz	r0, 80175e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 80175d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80175d6:	b11a      	cbz	r2, 80175e0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
				IMPeriodMilliSeconds / osc_calibrate_val;
 80175d8:	9b01      	ldr	r3, [sp, #4]
 80175da:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80175de:	602b      	str	r3, [r5, #0]
		VL53L0X_SETPARAMETERFIELD(Dev,
 80175e0:	682b      	ldr	r3, [r5, #0]
 80175e2:	61a3      	str	r3, [r4, #24]
}
 80175e4:	b003      	add	sp, #12
 80175e6:	bd30      	pop	{r4, r5, pc}

080175e8 <VL53L0X_GetXTalkCompensationEnable>:
	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80175e8:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 80175ea:	700b      	strb	r3, [r1, #0]
}
 80175ec:	2000      	movs	r0, #0
 80175ee:	4770      	bx	lr

080175f0 <VL53L0X_GetXTalkCompensationRateMegaCps>:
{
 80175f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175f2:	460d      	mov	r5, r1
	Status = VL53L0X_RdWord(Dev,
 80175f4:	f10d 0206 	add.w	r2, sp, #6
 80175f8:	2120      	movs	r1, #32
{
 80175fa:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 80175fc:	f7f6 fcbc 	bl	800df78 <VL53L0X_RdWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8017600:	b928      	cbnz	r0, 801760e <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8017602:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017606:	b923      	cbnz	r3, 8017612 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8017608:	6a23      	ldr	r3, [r4, #32]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 801760a:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 801760c:	7720      	strb	r0, [r4, #28]
}
 801760e:	b003      	add	sp, #12
 8017610:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8017612:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8017614:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8017616:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8017618:	2301      	movs	r3, #1
 801761a:	7723      	strb	r3, [r4, #28]
 801761c:	e7f7      	b.n	801760e <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

0801761e <VL53L0X_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 801761e:	2905      	cmp	r1, #5
{
 8017620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017622:	4604      	mov	r4, r0
 8017624:	460e      	mov	r6, r1
 8017626:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8017628:	d833      	bhi.n	8017692 <VL53L0X_SetLimitCheckEnable+0x74>
		if (LimitCheckEnable == 0) {
 801762a:	b162      	cbz	r2, 8017646 <VL53L0X_SetLimitCheckEnable+0x28>
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 801762c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
			LimitCheckEnableInt = 1;
 8017630:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8017632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 8017634:	2300      	movs	r3, #0
		switch (LimitCheckId) {
 8017636:	1e70      	subs	r0, r6, #1
 8017638:	2804      	cmp	r0, #4
 801763a:	d807      	bhi.n	801764c <VL53L0X_SetLimitCheckEnable+0x2e>
 801763c:	e8df f000 	tbb	[pc, r0]
 8017640:	1f1c1910 	.word	0x1f1c1910
 8017644:	26          	.byte	0x26
 8017645:	00          	.byte	0x00
			LimitCheckEnableInt = 0;
 8017646:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8017648:	2301      	movs	r3, #1
 801764a:	e7f4      	b.n	8017636 <VL53L0X_SetLimitCheckEnable+0x18>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 801764c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
		if (LimitCheckEnable == 0) {
 8017650:	3d00      	subs	r5, #0
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8017652:	4434      	add	r4, r6
		if (LimitCheckEnable == 0) {
 8017654:	bf18      	it	ne
 8017656:	2501      	movne	r5, #1
 8017658:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 801765c:	2000      	movs	r0, #0
 801765e:	e007      	b.n	8017670 <VL53L0X_SetLimitCheckEnable+0x52>
			Status = VL53L0X_WrWord(Dev,
 8017660:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8017664:	2144      	movs	r1, #68	; 0x44
 8017666:	4620      	mov	r0, r4
 8017668:	f7f6 fc1c 	bl	800dea4 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 801766c:	2800      	cmp	r0, #0
 801766e:	d0ef      	beq.n	8017650 <VL53L0X_SetLimitCheckEnable+0x32>
}
 8017670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8017672:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	if (Status == VL53L0X_ERROR_NONE) {
 8017676:	e7eb      	b.n	8017650 <VL53L0X_SetLimitCheckEnable+0x32>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8017678:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	if (Status == VL53L0X_ERROR_NONE) {
 801767c:	e7e8      	b.n	8017650 <VL53L0X_SetLimitCheckEnable+0x32>
			Status = VL53L0X_UpdateByte(Dev,
 801767e:	005b      	lsls	r3, r3, #1
 8017680:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 8017682:	2160      	movs	r1, #96	; 0x60
 8017684:	4620      	mov	r0, r4
 8017686:	f7f6 fc3f 	bl	800df08 <VL53L0X_UpdateByte>
			break;
 801768a:	e7ef      	b.n	801766c <VL53L0X_SetLimitCheckEnable+0x4e>
			Status = VL53L0X_UpdateByte(Dev,
 801768c:	011b      	lsls	r3, r3, #4
 801768e:	22ef      	movs	r2, #239	; 0xef
 8017690:	e7f7      	b.n	8017682 <VL53L0X_SetLimitCheckEnable+0x64>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8017692:	f06f 0003 	mvn.w	r0, #3
 8017696:	e7eb      	b.n	8017670 <VL53L0X_SetLimitCheckEnable+0x52>

08017698 <VL53L0X_GetLimitCheckEnable>:
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8017698:	2905      	cmp	r1, #5
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 801769a:	bf96      	itet	ls
 801769c:	1840      	addls	r0, r0, r1
		*pLimitCheckEnable = 0;
 801769e:	2300      	movhi	r3, #0
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80176a0:	f890 3028 	ldrbls.w	r3, [r0, #40]	; 0x28
		*pLimitCheckEnable = Temp8;
 80176a4:	7013      	strb	r3, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80176a6:	bf94      	ite	ls
 80176a8:	2000      	movls	r0, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80176aa:	f06f 0003 	mvnhi.w	r0, #3
}
 80176ae:	4770      	bx	lr

080176b0 <VL53L0X_SetLimitCheckValue>:
{
 80176b0:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80176b2:	1843      	adds	r3, r0, r1
{
 80176b4:	4604      	mov	r4, r0
	if (Temp8 == 0) { /* disabled write only internal value */
 80176b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
{
 80176ba:	460e      	mov	r6, r1
 80176bc:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 80176be:	b13b      	cbz	r3, 80176d0 <VL53L0X_SetLimitCheckValue+0x20>
		switch (LimitCheckId) {
 80176c0:	2905      	cmp	r1, #5
 80176c2:	d81b      	bhi.n	80176fc <VL53L0X_SetLimitCheckValue+0x4c>
 80176c4:	e8df f001 	tbb	[pc, r1]
 80176c8:	14120903 	.word	0x14120903
 80176cc:	1616      	.short	0x1616
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80176ce:	6342      	str	r2, [r0, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80176d0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80176d4:	2000      	movs	r0, #0
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80176d6:	6365      	str	r5, [r4, #52]	; 0x34
 80176d8:	e007      	b.n	80176ea <VL53L0X_SetLimitCheckValue+0x3a>
			Status = VL53L0X_WrWord(Dev,
 80176da:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80176de:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 80176e0:	4620      	mov	r0, r4
 80176e2:	f7f6 fbdf 	bl	800dea4 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 80176e6:	2800      	cmp	r0, #0
 80176e8:	d0f2      	beq.n	80176d0 <VL53L0X_SetLimitCheckValue+0x20>
}
 80176ea:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80176ec:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
 80176ee:	e7ef      	b.n	80176d0 <VL53L0X_SetLimitCheckValue+0x20>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80176f0:	6402      	str	r2, [r0, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
 80176f2:	e7ed      	b.n	80176d0 <VL53L0X_SetLimitCheckValue+0x20>
			Status = VL53L0X_WrWord(Dev,
 80176f4:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80176f8:	2164      	movs	r1, #100	; 0x64
 80176fa:	e7f1      	b.n	80176e0 <VL53L0X_SetLimitCheckValue+0x30>
		switch (LimitCheckId) {
 80176fc:	f06f 0003 	mvn.w	r0, #3
 8017700:	e7f3      	b.n	80176ea <VL53L0X_SetLimitCheckValue+0x3a>

08017702 <VL53L0X_GetLimitCheckValue>:
{
 8017702:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017704:	4604      	mov	r4, r0
 8017706:	4615      	mov	r5, r2
	switch (LimitCheckId) {
 8017708:	2905      	cmp	r1, #5
 801770a:	d82b      	bhi.n	8017764 <VL53L0X_GetLimitCheckValue+0x62>
 801770c:	e8df f001 	tbb	[pc, r1]
 8017710:	19170603 	.word	0x19170603
 8017714:	1b1b      	.short	0x1b1b
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8017716:	6b43      	ldr	r3, [r0, #52]	; 0x34
			*pLimitCheckValue = TempFix1616;
 8017718:	602b      	str	r3, [r5, #0]
 801771a:	e00d      	b.n	8017738 <VL53L0X_GetLimitCheckValue+0x36>
		Status = VL53L0X_RdWord(Dev,
 801771c:	f10d 0206 	add.w	r2, sp, #6
 8017720:	2144      	movs	r1, #68	; 0x44
 8017722:	f7f6 fc29 	bl	800df78 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8017726:	b940      	cbnz	r0, 801773a <VL53L0X_GetLimitCheckValue+0x38>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8017728:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 801772c:	0253      	lsls	r3, r2, #9
 801772e:	b9aa      	cbnz	r2, 801775c <VL53L0X_GetLimitCheckValue+0x5a>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8017730:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8017732:	602a      	str	r2, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8017734:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
{
 8017738:	2000      	movs	r0, #0
}
 801773a:	b003      	add	sp, #12
 801773c:	bd30      	pop	{r4, r5, pc}
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 801773e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	if (Status == VL53L0X_ERROR_NONE) {
 8017740:	e7ea      	b.n	8017718 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8017742:	6c03      	ldr	r3, [r0, #64]	; 0x40
	if (Status == VL53L0X_ERROR_NONE) {
 8017744:	e7e8      	b.n	8017718 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8017746:	f10d 0206 	add.w	r2, sp, #6
 801774a:	2164      	movs	r1, #100	; 0x64
 801774c:	f7f6 fc14 	bl	800df78 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8017750:	2800      	cmp	r0, #0
 8017752:	d1f2      	bne.n	801773a <VL53L0X_GetLimitCheckValue+0x38>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8017754:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017758:	025b      	lsls	r3, r3, #9
	if (Status == VL53L0X_ERROR_NONE) {
 801775a:	e7dd      	b.n	8017718 <VL53L0X_GetLimitCheckValue+0x16>
				*pLimitCheckValue = TempFix1616;
 801775c:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 801775e:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8017760:	2301      	movs	r3, #1
 8017762:	e7e7      	b.n	8017734 <VL53L0X_GetLimitCheckValue+0x32>
	switch (LimitCheckId) {
 8017764:	f06f 0003 	mvn.w	r0, #3
 8017768:	e7e7      	b.n	801773a <VL53L0X_GetLimitCheckValue+0x38>

0801776a <VL53L0X_GetWrapAroundCheckEnable>:
{
 801776a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801776c:	460d      	mov	r5, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 801776e:	f10d 0207 	add.w	r2, sp, #7
 8017772:	2101      	movs	r1, #1
{
 8017774:	4604      	mov	r4, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8017776:	f7ff fcd5 	bl	8017124 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 801777a:	b938      	cbnz	r0, 801778c <VL53L0X_GetWrapAroundCheckEnable+0x22>
		PALDevDataSet(Dev, SequenceConfig, data);
 801777c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017780:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (data & (0x01 << 7))
 8017784:	09db      	lsrs	r3, r3, #7
 8017786:	702b      	strb	r3, [r5, #0]
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8017788:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 801778c:	b003      	add	sp, #12
 801778e:	bd30      	pop	{r4, r5, pc}

08017790 <VL53L0X_GetDeviceParameters>:
{
 8017790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8017794:	7c03      	ldrb	r3, [r0, #16]
{
 8017796:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8017798:	f801 3b08 	strb.w	r3, [r1], #8
{
 801779c:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 801779e:	f7ff ff09 	bl	80175b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 80177a2:	bb40      	cbnz	r0, 80177f6 <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80177a4:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80177a6:	f104 0110 	add.w	r1, r4, #16
 80177aa:	4628      	mov	r0, r5
 80177ac:	f7ff ff20 	bl	80175f0 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 80177b0:	bb08      	cbnz	r0, 80177f6 <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80177b2:	f104 0114 	add.w	r1, r4, #20
 80177b6:	4628      	mov	r0, r5
 80177b8:	f000 fa28 	bl	8017c0c <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 80177bc:	b9d8      	cbnz	r0, 80177f6 <VL53L0X_GetDeviceParameters+0x66>
 80177be:	f104 0724 	add.w	r7, r4, #36	; 0x24
 80177c2:	f105 0927 	add.w	r9, r5, #39	; 0x27
 80177c6:	f104 0817 	add.w	r8, r4, #23
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80177ca:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80177cc:	463a      	mov	r2, r7
 80177ce:	b2b1      	uxth	r1, r6
 80177d0:	4628      	mov	r0, r5
 80177d2:	f7ff ff96 	bl	8017702 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 80177d6:	b970      	cbnz	r0, 80177f6 <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80177d8:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80177da:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		*pLimitCheckEnable = Temp8;
 80177de:	f808 3f01 	strb.w	r3, [r8, #1]!
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80177e2:	2e06      	cmp	r6, #6
 80177e4:	f107 0704 	add.w	r7, r7, #4
 80177e8:	d1f0      	bne.n	80177cc <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80177ea:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80177ee:	4628      	mov	r0, r5
 80177f0:	f7ff ffbb 	bl	801776a <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 80177f4:	b108      	cbz	r0, 80177fa <VL53L0X_GetDeviceParameters+0x6a>
}
 80177f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80177fa:	1d21      	adds	r1, r4, #4
 80177fc:	4628      	mov	r0, r5
}
 80177fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8017802:	f001 bb78 	b.w	8018ef6 <VL53L0X_get_measurement_timing_budget_micro_seconds>

08017806 <VL53L0X_PerformRefCalibration>:
	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8017806:	2301      	movs	r3, #1
 8017808:	f000 bc1f 	b.w	801804a <VL53L0X_perform_ref_calibration>

0801780c <VL53L0X_GetRangingMeasurementData>:
{
 801780c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8017810:	b08e      	sub	sp, #56	; 0x38
 8017812:	460c      	mov	r4, r1
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8017814:	230c      	movs	r3, #12
 8017816:	aa04      	add	r2, sp, #16
 8017818:	2114      	movs	r1, #20
{
 801781a:	4605      	mov	r5, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 801781c:	f7f6 fb1a 	bl	800de54 <VL53L0X_ReadMulti>
 8017820:	4684      	mov	ip, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8017822:	2800      	cmp	r0, #0
 8017824:	d160      	bne.n	80178e8 <VL53L0X_GetRangingMeasurementData+0xdc>
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8017826:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 801782a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801782e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8017832:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8017834:	ba52      	rev16	r2, r2
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8017836:	ba5b      	rev16	r3, r3
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8017838:	b292      	uxth	r2, r2
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 801783a:	b29b      	uxth	r3, r3
 801783c:	ba49      	rev16	r1, r1
 801783e:	025b      	lsls	r3, r3, #9
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8017840:	0252      	lsls	r2, r2, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8017842:	6123      	str	r3, [r4, #16]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8017844:	82a1      	strh	r1, [r4, #20]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8017846:	6020      	str	r0, [r4, #0]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8017848:	6060      	str	r0, [r4, #4]
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 801784a:	60e2      	str	r2, [r4, #12]
 801784c:	f8bd 601a 	ldrh.w	r6, [sp, #26]
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8017850:	f8b5 0152 	ldrh.w	r0, [r5, #338]	; 0x152
		RangeFractionalEnable = PALDevDataGet(Dev,
 8017854:	f895 7131 	ldrb.w	r7, [r5, #305]	; 0x131
 8017858:	ba76      	rev16	r6, r6
		if (LinearityCorrectiveGain != 1000) {
 801785a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801785e:	b28b      	uxth	r3, r1
 8017860:	b2b6      	uxth	r6, r6
		DeviceRangeStatus = localBuffer[0];
 8017862:	f89d 1010 	ldrb.w	r1, [sp, #16]
		if (LinearityCorrectiveGain != 1000) {
 8017866:	d00a      	beq.n	801787e <VL53L0X_GetRangingMeasurementData+0x72>
				* tmpuint16 + 500) / 1000);
 8017868:	4370      	muls	r0, r6
 801786a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 801786e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8017872:	fbb0 f0f6 	udiv	r0, r0, r6
			if (XTalkCompensationEnable) {
 8017876:	7f2e      	ldrb	r6, [r5, #28]
 8017878:	2e00      	cmp	r6, #0
 801787a:	d139      	bne.n	80178f0 <VL53L0X_GetRangingMeasurementData+0xe4>
					XtalkRangeMilliMeter =
 801787c:	b286      	uxth	r6, r0
		if (RangeFractionalEnable) {
 801787e:	2f00      	cmp	r7, #0
 8017880:	d040      	beq.n	8017904 <VL53L0X_GetRangingMeasurementData+0xf8>
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8017882:	01b0      	lsls	r0, r6, #6
 8017884:	b2c0      	uxtb	r0, r0
 8017886:	08b6      	lsrs	r6, r6, #2
			pRangingMeasurementData->RangeFractionalPart =
 8017888:	75e0      	strb	r0, [r4, #23]
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 801788a:	f10d 000f 	add.w	r0, sp, #15
			pRangingMeasurementData->RangeMilliMeter =
 801788e:	8126      	strh	r6, [r4, #8]
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8017890:	e9cd 4000 	strd	r4, r0, [sp]
 8017894:	4628      	mov	r0, r5
 8017896:	f001 fc03 	bl	80190a0 <VL53L0X_get_pal_range_status>
		if (Status == VL53L0X_ERROR_NONE)
 801789a:	4684      	mov	ip, r0
 801789c:	bb20      	cbnz	r0, 80178e8 <VL53L0X_GetRangingMeasurementData+0xdc>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 801789e:	f89d e00f 	ldrb.w	lr, [sp, #15]
 80178a2:	f884 e018 	strb.w	lr, [r4, #24]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80178a6:	f105 0650 	add.w	r6, r5, #80	; 0x50
 80178aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80178ac:	af07      	add	r7, sp, #28
 80178ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80178b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
			pRangingMeasurementData->RangeFractionalPart;
 80178b4:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80178b6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80178ba:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80178be:	8aa2      	ldrh	r2, [r4, #20]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80178c0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80178c4:	e9d4 4901 	ldrd	r4, r9, [r4, #4]
 80178c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80178cc:	e9cd 4908 	strd	r4, r9, [sp, #32]
 80178d0:	ac07      	add	r4, sp, #28
 80178d2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80178d6:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 80178da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178dc:	3550      	adds	r5, #80	; 0x50
 80178de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80178e0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80178e4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
}
 80178e8:	4660      	mov	r0, ip
 80178ea:	b00e      	add	sp, #56	; 0x38
 80178ec:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
					* EffectiveSpadRtnCount) >> 8))
 80178f0:	8c2e      	ldrh	r6, [r5, #32]
 80178f2:	435e      	muls	r6, r3
				if ((SignalRate
 80178f4:	ebb2 2f26 	cmp.w	r2, r6, asr #8
					* EffectiveSpadRtnCount) >> 8))
 80178f8:	ea4f 2c26 	mov.w	ip, r6, asr #8
				if ((SignalRate
 80178fc:	d104      	bne.n	8017908 <VL53L0X_GetRangingMeasurementData+0xfc>
					if (RangeFractionalEnable)
 80178fe:	b957      	cbnz	r7, 8017916 <VL53L0X_GetRangingMeasurementData+0x10a>
						XtalkRangeMilliMeter = 8888
 8017900:	f648 26e0 	movw	r6, #35552	; 0x8ae0
			pRangingMeasurementData->RangeFractionalPart = 0;
 8017904:	2000      	movs	r0, #0
 8017906:	e7bf      	b.n	8017888 <VL53L0X_GetRangingMeasurementData+0x7c>
					(tmpuint16 * SignalRate)
 8017908:	b280      	uxth	r0, r0
 801790a:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 801790c:	eba2 060c 	sub.w	r6, r2, ip
						/ (SignalRate
 8017910:	fbb0 f0f6 	udiv	r0, r0, r6
 8017914:	e7b2      	b.n	801787c <VL53L0X_GetRangingMeasurementData+0x70>
						XtalkRangeMilliMeter = 8888;
 8017916:	f242 26b8 	movw	r6, #8888	; 0x22b8
 801791a:	e7b2      	b.n	8017882 <VL53L0X_GetRangingMeasurementData+0x76>

0801791c <VL53L0X_StartMeasurement>:
{
 801791c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801791e:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8017920:	2201      	movs	r2, #1
 8017922:	2180      	movs	r1, #128	; 0x80
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8017924:	7c05      	ldrb	r5, [r0, #16]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8017926:	f7ff fbe5 	bl	80170f4 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801792a:	2201      	movs	r2, #1
 801792c:	21ff      	movs	r1, #255	; 0xff
 801792e:	4620      	mov	r0, r4
 8017930:	f7ff fbe0 	bl	80170f4 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017934:	2200      	movs	r2, #0
 8017936:	4611      	mov	r1, r2
 8017938:	4620      	mov	r0, r4
 801793a:	f7ff fbdb 	bl	80170f4 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 801793e:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
 8017942:	2191      	movs	r1, #145	; 0x91
 8017944:	4620      	mov	r0, r4
 8017946:	f7ff fbd5 	bl	80170f4 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 801794a:	2201      	movs	r2, #1
 801794c:	2100      	movs	r1, #0
 801794e:	4620      	mov	r0, r4
 8017950:	f7ff fbd0 	bl	80170f4 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017954:	2200      	movs	r2, #0
 8017956:	21ff      	movs	r1, #255	; 0xff
 8017958:	4620      	mov	r0, r4
 801795a:	f7ff fbcb 	bl	80170f4 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 801795e:	2200      	movs	r2, #0
 8017960:	2180      	movs	r1, #128	; 0x80
 8017962:	4620      	mov	r0, r4
 8017964:	f7ff fbc6 	bl	80170f4 <VL53L0X_WrByte>
	switch (DeviceMode) {
 8017968:	2d01      	cmp	r5, #1
 801796a:	d023      	beq.n	80179b4 <VL53L0X_StartMeasurement+0x98>
 801796c:	2d03      	cmp	r5, #3
 801796e:	d031      	beq.n	80179d4 <VL53L0X_StartMeasurement+0xb8>
 8017970:	bbbd      	cbnz	r5, 80179e2 <VL53L0X_StartMeasurement+0xc6>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8017972:	4629      	mov	r1, r5
 8017974:	2201      	movs	r2, #1
 8017976:	4620      	mov	r0, r4
 8017978:	f7ff fbbc 	bl	80170f4 <VL53L0X_WrByte>
		Byte = StartStopByte;
 801797c:	2501      	movs	r5, #1
 801797e:	f88d 5007 	strb.w	r5, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8017982:	b128      	cbz	r0, 8017990 <VL53L0X_StartMeasurement+0x74>
}
 8017984:	b003      	add	sp, #12
 8017986:	bd30      	pop	{r4, r5, pc}
				&& (Status == VL53L0X_ERROR_NONE)
 8017988:	b970      	cbnz	r0, 80179a8 <VL53L0X_StartMeasurement+0x8c>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 801798a:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 801798e:	d02b      	beq.n	80179e8 <VL53L0X_StartMeasurement+0xcc>
					Status = VL53L0X_RdByte(Dev,
 8017990:	f10d 0207 	add.w	r2, sp, #7
 8017994:	2100      	movs	r1, #0
 8017996:	4620      	mov	r0, r4
 8017998:	f7ff fbc4 	bl	8017124 <VL53L0X_RdByte>
			} while (((Byte & StartStopByte) == StartStopByte)
 801799c:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80179a0:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 80179a2:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80179a6:	d4ef      	bmi.n	8017988 <VL53L0X_StartMeasurement+0x6c>
				Status = VL53L0X_ERROR_TIME_OUT;
 80179a8:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80179ac:	bf08      	it	eq
 80179ae:	f06f 0006 	mvneq.w	r0, #6
 80179b2:	e7e7      	b.n	8017984 <VL53L0X_StartMeasurement+0x68>
		if (Status == VL53L0X_ERROR_NONE)
 80179b4:	b918      	cbnz	r0, 80179be <VL53L0X_StartMeasurement+0xa2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80179b6:	4629      	mov	r1, r5
 80179b8:	4620      	mov	r0, r4
 80179ba:	f7f7 f811 	bl	800e9e0 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 80179be:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 80179c0:	2100      	movs	r1, #0
 80179c2:	4620      	mov	r0, r4
 80179c4:	f7ff fb96 	bl	80170f4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80179c8:	2800      	cmp	r0, #0
 80179ca:	d1db      	bne.n	8017984 <VL53L0X_StartMeasurement+0x68>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80179cc:	2304      	movs	r3, #4
 80179ce:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 80179d2:	e7d7      	b.n	8017984 <VL53L0X_StartMeasurement+0x68>
		if (Status == VL53L0X_ERROR_NONE)
 80179d4:	b918      	cbnz	r0, 80179de <VL53L0X_StartMeasurement+0xc2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80179d6:	2101      	movs	r1, #1
 80179d8:	4620      	mov	r0, r4
 80179da:	f7f7 f801 	bl	800e9e0 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 80179de:	2204      	movs	r2, #4
 80179e0:	e7ee      	b.n	80179c0 <VL53L0X_StartMeasurement+0xa4>
	switch (DeviceMode) {
 80179e2:	f06f 0007 	mvn.w	r0, #7
 80179e6:	e7cd      	b.n	8017984 <VL53L0X_StartMeasurement+0x68>
				Status = VL53L0X_ERROR_TIME_OUT;
 80179e8:	f06f 0006 	mvn.w	r0, #6
 80179ec:	e7ca      	b.n	8017984 <VL53L0X_StartMeasurement+0x68>

080179ee <VL53L0X_PerformSingleMeasurement>:
{
 80179ee:	b510      	push	{r4, lr}
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80179f0:	7c03      	ldrb	r3, [r0, #16]
{
 80179f2:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80179f4:	b93b      	cbnz	r3, 8017a06 <VL53L0X_PerformSingleMeasurement+0x18>
		Status = VL53L0X_StartMeasurement(Dev);
 80179f6:	f7ff ff91 	bl	801791c <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 80179fa:	b918      	cbnz	r0, 8017a04 <VL53L0X_PerformSingleMeasurement+0x16>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80179fc:	4620      	mov	r0, r4
 80179fe:	f000 fc6c 	bl	80182da <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8017a02:	b120      	cbz	r0, 8017a0e <VL53L0X_PerformSingleMeasurement+0x20>
}
 8017a04:	bd10      	pop	{r4, pc}
 8017a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8017a0a:	f000 bc66 	b.w	80182da <VL53L0X_measurement_poll_for_completion>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8017a0e:	2303      	movs	r3, #3
 8017a10:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8017a14:	e7f6      	b.n	8017a04 <VL53L0X_PerformSingleMeasurement+0x16>

08017a16 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8017a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a18:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8017a1a:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8017a1c:	2201      	movs	r2, #1
 8017a1e:	210b      	movs	r1, #11
 8017a20:	4630      	mov	r0, r6
 8017a22:	f7ff fb67 	bl	80170f4 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8017a26:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8017a28:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8017a2a:	210b      	movs	r1, #11
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	f7ff fb61 	bl	80170f4 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8017a32:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 8017a36:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8017a38:	2113      	movs	r1, #19
 8017a3a:	4630      	mov	r0, r6
 8017a3c:	f7ff fb72 	bl	8017124 <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8017a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 8017a44:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 8017a46:	4304      	orrs	r4, r0
		LoopCount++;
 8017a48:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 8017a4a:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8017a4c:	b260      	sxtb	r0, r4
		LoopCount++;
 8017a4e:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8017a50:	d005      	beq.n	8017a5e <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 8017a52:	2d03      	cmp	r5, #3
 8017a54:	d008      	beq.n	8017a68 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 8017a56:	2800      	cmp	r0, #0
 8017a58:	d0e0      	beq.n	8017a1c <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8017a5a:	b002      	add	sp, #8
 8017a5c:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8017a5e:	2d03      	cmp	r5, #3
 8017a60:	bf08      	it	eq
 8017a62:	f06f 000b 	mvneq.w	r0, #11
 8017a66:	e7f8      	b.n	8017a5a <VL53L0X_ClearInterruptMask+0x44>
 8017a68:	f06f 000b 	mvn.w	r0, #11
 8017a6c:	e7f5      	b.n	8017a5a <VL53L0X_ClearInterruptMask+0x44>

08017a6e <VL53L0X_PerformSingleRangingMeasurement>:
{
 8017a6e:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8017a70:	2300      	movs	r3, #0
 8017a72:	7403      	strb	r3, [r0, #16]
{
 8017a74:	4604      	mov	r4, r0
 8017a76:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8017a78:	f7ff ffb9 	bl	80179ee <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8017a7c:	b950      	cbnz	r0, 8017a94 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8017a7e:	4629      	mov	r1, r5
 8017a80:	4620      	mov	r0, r4
 8017a82:	f7ff fec3 	bl	801780c <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8017a86:	b928      	cbnz	r0, 8017a94 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8017a88:	4601      	mov	r1, r0
 8017a8a:	4620      	mov	r0, r4
}
 8017a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8017a90:	f7ff bfc1 	b.w	8017a16 <VL53L0X_ClearInterruptMask>
}
 8017a94:	bd38      	pop	{r3, r4, r5, pc}

08017a96 <VL53L0X_SetGpioConfig.part.0>:
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8017a96:	2915      	cmp	r1, #21
VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
 8017a98:	b570      	push	{r4, r5, r6, lr}
 8017a9a:	4605      	mov	r5, r0
 8017a9c:	4616      	mov	r6, r2
 8017a9e:	461c      	mov	r4, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8017aa0:	d167      	bne.n	8017b72 <VL53L0X_SetGpioConfig.part.0+0xdc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8017aa2:	2201      	movs	r2, #1
 8017aa4:	21ff      	movs	r1, #255	; 0xff
 8017aa6:	f7ff fb25 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017aaa:	2200      	movs	r2, #0
 8017aac:	4611      	mov	r1, r2
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8017aae:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	f7ff fb1f 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8017ab6:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017ab8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8017aba:	21ff      	movs	r1, #255	; 0xff
 8017abc:	4628      	mov	r0, r5
 8017abe:	f7ff fb19 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017ac2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8017ac4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8017ac6:	2201      	movs	r2, #1
 8017ac8:	2180      	movs	r1, #128	; 0x80
 8017aca:	4628      	mov	r0, r5
 8017acc:	f7ff fb12 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8017ad0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8017ad2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8017ad4:	2202      	movs	r2, #2
 8017ad6:	2185      	movs	r1, #133	; 0x85
 8017ad8:	4628      	mov	r0, r5
 8017ada:	f7ff fb0b 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8017ade:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8017ae0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8017ae2:	2204      	movs	r2, #4
 8017ae4:	21ff      	movs	r1, #255	; 0xff
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	f7ff fb04 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8017aec:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8017aee:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8017af0:	2200      	movs	r2, #0
 8017af2:	21cd      	movs	r1, #205	; 0xcd
 8017af4:	4628      	mov	r0, r5
 8017af6:	f7ff fafd 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8017afa:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8017afc:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8017afe:	2211      	movs	r2, #17
 8017b00:	21cc      	movs	r1, #204	; 0xcc
 8017b02:	4628      	mov	r0, r5
 8017b04:	f7ff faf6 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8017b08:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8017b0a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8017b0c:	2207      	movs	r2, #7
 8017b0e:	21ff      	movs	r1, #255	; 0xff
 8017b10:	4628      	mov	r0, r5
 8017b12:	f7ff faef 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8017b16:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8017b18:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	21be      	movs	r1, #190	; 0xbe
 8017b1e:	4628      	mov	r0, r5
 8017b20:	f7ff fae8 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8017b24:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8017b26:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8017b28:	2206      	movs	r2, #6
 8017b2a:	21ff      	movs	r1, #255	; 0xff
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	f7ff fae1 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8017b32:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8017b34:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8017b36:	2209      	movs	r2, #9
 8017b38:	21cc      	movs	r1, #204	; 0xcc
 8017b3a:	4628      	mov	r0, r5
 8017b3c:	f7ff fada 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8017b40:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8017b42:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8017b44:	2200      	movs	r2, #0
 8017b46:	21ff      	movs	r1, #255	; 0xff
 8017b48:	4628      	mov	r0, r5
 8017b4a:	f7ff fad3 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8017b4e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8017b50:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8017b52:	2201      	movs	r2, #1
 8017b54:	21ff      	movs	r1, #255	; 0xff
 8017b56:	4628      	mov	r0, r5
 8017b58:	f7ff facc 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8017b5c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017b5e:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8017b60:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017b62:	4611      	mov	r1, r2
 8017b64:	4628      	mov	r0, r5
 8017b66:	f7ff fac5 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8017b6a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017b6c:	4320      	orrs	r0, r4
 8017b6e:	b240      	sxtb	r0, r0
}
 8017b70:	bd70      	pop	{r4, r5, r6, pc}
			switch (Functionality) {
 8017b72:	2a04      	cmp	r2, #4
 8017b74:	d817      	bhi.n	8017ba6 <VL53L0X_SetGpioConfig.part.0+0x110>
			Status = VL53L0X_WrByte(Dev,
 8017b76:	210a      	movs	r1, #10
 8017b78:	f7ff fabc 	bl	80170f4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8017b7c:	2800      	cmp	r0, #0
 8017b7e:	d1f7      	bne.n	8017b70 <VL53L0X_SetGpioConfig.part.0+0xda>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8017b80:	1e23      	subs	r3, r4, #0
 8017b82:	bf18      	it	ne
 8017b84:	2301      	movne	r3, #1
			Status = VL53L0X_UpdateByte(Dev,
 8017b86:	011b      	lsls	r3, r3, #4
 8017b88:	22ef      	movs	r2, #239	; 0xef
 8017b8a:	2184      	movs	r1, #132	; 0x84
 8017b8c:	4628      	mov	r0, r5
 8017b8e:	f7f6 f9bb 	bl	800df08 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8017b92:	2800      	cmp	r0, #0
 8017b94:	d1ec      	bne.n	8017b70 <VL53L0X_SetGpioConfig.part.0+0xda>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8017b96:	f885 60da 	strb.w	r6, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8017b9a:	4601      	mov	r1, r0
 8017b9c:	4628      	mov	r0, r5
}
 8017b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8017ba2:	f7ff bf38 	b.w	8017a16 <VL53L0X_ClearInterruptMask>
				Status =
 8017ba6:	f06f 000a 	mvn.w	r0, #10
 8017baa:	e7e1      	b.n	8017b70 <VL53L0X_SetGpioConfig.part.0+0xda>

08017bac <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8017bac:	b513      	push	{r0, r1, r4, lr}
 8017bae:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8017bb0:	f10d 0207 	add.w	r2, sp, #7
 8017bb4:	2113      	movs	r1, #19
 8017bb6:	f7ff fab5 	bl	8017124 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8017bba:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8017bbe:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8017bc2:	f003 0207 	and.w	r2, r3, #7

	LOG_FUNCTION_END(Status);
	return Status;
}
 8017bc6:	bf18      	it	ne
 8017bc8:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8017bcc:	6022      	str	r2, [r4, #0]
}
 8017bce:	b002      	add	sp, #8
 8017bd0:	bd10      	pop	{r4, pc}

08017bd2 <VL53L0X_GetMeasurementDataReady>:
{
 8017bd2:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8017bd4:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8017bd8:	2b04      	cmp	r3, #4
{
 8017bda:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8017bdc:	d109      	bne.n	8017bf2 <VL53L0X_GetMeasurementDataReady+0x20>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8017bde:	a901      	add	r1, sp, #4
 8017be0:	f7ff ffe4 	bl	8017bac <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8017be4:	9b01      	ldr	r3, [sp, #4]
 8017be6:	1f1a      	subs	r2, r3, #4
 8017be8:	4253      	negs	r3, r2
 8017bea:	4153      	adcs	r3, r2
				*pMeasurementDataReady = 0;
 8017bec:	7023      	strb	r3, [r4, #0]
}
 8017bee:	b002      	add	sp, #8
 8017bf0:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8017bf2:	aa01      	add	r2, sp, #4
 8017bf4:	2114      	movs	r1, #20
 8017bf6:	f7ff fa95 	bl	8017124 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	d1f7      	bne.n	8017bee <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 0;
 8017bfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017c02:	f003 0301 	and.w	r3, r3, #1
 8017c06:	e7f1      	b.n	8017bec <VL53L0X_GetMeasurementDataReady+0x1a>

08017c08 <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8017c08:	f000 ba3a 	b.w	8018080 <VL53L0X_perform_ref_spad_management>

08017c0c <VL53L0X_get_offset_calibration_data_micro_meter>:
{
 8017c0c:	b513      	push	{r0, r1, r4, lr}
 8017c0e:	460c      	mov	r4, r1
	Status = VL53L0X_RdWord(Dev,
 8017c10:	f10d 0206 	add.w	r2, sp, #6
 8017c14:	2128      	movs	r1, #40	; 0x28
 8017c16:	f7f6 f9af 	bl	800df78 <VL53L0X_RdWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8017c1a:	b978      	cbnz	r0, 8017c3c <VL53L0X_get_offset_calibration_data_micro_meter+0x30>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8017c1c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017c20:	f3c2 030b 	ubfx	r3, r2, #0, #12
		if (RangeOffsetRegister > cMaxOffset)
 8017c24:	f412 6f00 	tst.w	r2, #2048	; 0x800
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8017c28:	bf18      	it	ne
 8017c2a:	f5a3 5380 	subne.w	r3, r3, #4096	; 0x1000
 8017c2e:	f04f 02fa 	mov.w	r2, #250	; 0xfa
					* 250;
 8017c32:	bf14      	ite	ne
 8017c34:	fb13 f302 	smulbbne	r3, r3, r2
				(int16_t)RangeOffsetRegister * 250;
 8017c38:	4353      	muleq	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8017c3a:	6023      	str	r3, [r4, #0]
}
 8017c3c:	b002      	add	sp, #8
 8017c3e:	bd10      	pop	{r4, pc}

08017c40 <get_next_good_spad>:
{
 8017c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	startIndex = curr / cSpadsPerByte;
 8017c42:	08d7      	lsrs	r7, r2, #3
	*next = -1;
 8017c44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017c48:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 8017c4a:	f002 0207 	and.w	r2, r2, #7
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8017c4e:	463e      	mov	r6, r7
 8017c50:	428e      	cmp	r6, r1
 8017c52:	d20c      	bcs.n	8017c6e <get_next_good_spad+0x2e>
		dataByte = goodSpadArray[coarseIndex];
 8017c54:	5d84      	ldrb	r4, [r0, r6]
		if (coarseIndex == startIndex) {
 8017c56:	42be      	cmp	r6, r7
			dataByte >>= fineOffset;
 8017c58:	bf03      	ittte	eq
 8017c5a:	4114      	asreq	r4, r2
 8017c5c:	b2e4      	uxtbeq	r4, r4
			fineIndex = fineOffset;
 8017c5e:	4615      	moveq	r5, r2
		fineIndex = 0;
 8017c60:	2500      	movne	r5, #0
			if ((dataByte & 0x1) == 1) {
 8017c62:	f014 0f01 	tst.w	r4, #1
 8017c66:	d003      	beq.n	8017c70 <get_next_good_spad+0x30>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8017c68:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8017c6c:	601d      	str	r5, [r3, #0]
}
 8017c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			fineIndex++;
 8017c70:	3501      	adds	r5, #1
		while (fineIndex < cSpadsPerByte) {
 8017c72:	2d08      	cmp	r5, #8
			dataByte >>= 1;
 8017c74:	ea4f 0454 	mov.w	r4, r4, lsr #1
		while (fineIndex < cSpadsPerByte) {
 8017c78:	d1f3      	bne.n	8017c62 <get_next_good_spad+0x22>
				coarseIndex++) {
 8017c7a:	3601      	adds	r6, #1
 8017c7c:	e7e8      	b.n	8017c50 <get_next_good_spad+0x10>

08017c7e <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8017c7e:	b510      	push	{r4, lr}
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 8017c80:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
	coarseIndex = spadIndex / cSpadsPerByte;
 8017c84:	ea4f 04d2 	mov.w	r4, r2, lsr #3
	fineIndex = spadIndex % cSpadsPerByte;
 8017c88:	f002 0307 	and.w	r3, r2, #7
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8017c8c:	bf81      	itttt	hi
 8017c8e:	2201      	movhi	r2, #1
 8017c90:	409a      	lslhi	r2, r3
 8017c92:	5d03      	ldrbhi	r3, [r0, r4]
 8017c94:	4313      	orrhi	r3, r2
 8017c96:	bf8a      	itet	hi
 8017c98:	5503      	strbhi	r3, [r0, r4]
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8017c9a:	f06f 0031 	mvnls.w	r0, #49	; 0x31
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8017c9e:	2000      	movhi	r0, #0

	return status;
}
 8017ca0:	bd10      	pop	{r4, pc}

08017ca2 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8017ca2:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8017ca4:	2306      	movs	r3, #6
 8017ca6:	21b0      	movs	r1, #176	; 0xb0
 8017ca8:	f7f6 b89c 	b.w	800dde4 <VL53L0X_WriteMulti>

08017cac <get_ref_spad_map>:
				refSpadArray, 6);
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8017cac:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8017cae:	2306      	movs	r3, #6
 8017cb0:	21b0      	movs	r1, #176	; 0xb0
 8017cb2:	f7f6 b8cf 	b.w	800de54 <VL53L0X_ReadMulti>

08017cb6 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8017cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cba:	b085      	sub	sp, #20
 8017cbc:	4605      	mov	r5, r0
 8017cbe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8017cc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8017cc2:	9701      	str	r7, [sp, #4]
{
 8017cc4:	468a      	mov	sl, r1
 8017cc6:	4693      	mov	fp, r2
 8017cc8:	461c      	mov	r4, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8017cca:	f04f 0900 	mov.w	r9, #0
 8017cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017cd0:	4599      	cmp	r9, r3
 8017cd2:	d108      	bne.n	8017ce6 <enable_ref_spads+0x30>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8017cd4:	2300      	movs	r3, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 8017cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cd8:	6017      	str	r7, [r2, #0]

	if (status == VL53L0X_ERROR_NONE)
 8017cda:	b313      	cbz	r3, 8017d22 <enable_ref_spads+0x6c>
		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
			if (spadArray[i] != checkSpadArray[i]) {
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8017cdc:	f06f 0031 	mvn.w	r0, #49	; 0x31
			}
			i++;
		}
	}
	return status;
}
 8017ce0:	b005      	add	sp, #20
 8017ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8017ce6:	ab01      	add	r3, sp, #4
 8017ce8:	463a      	mov	r2, r7
 8017cea:	4631      	mov	r1, r6
 8017cec:	4658      	mov	r0, fp
 8017cee:	f7ff ffa7 	bl	8017c40 <get_next_good_spad>
		if (nextGoodSpad == -1) {
 8017cf2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017cf6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8017cfa:	d00f      	beq.n	8017d1c <enable_ref_spads+0x66>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8017cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cfe:	eb08 0003 	add.w	r0, r8, r3
 8017d02:	f7f6 ff83 	bl	800ec0c <is_aperture>
 8017d06:	4550      	cmp	r0, sl
 8017d08:	d108      	bne.n	8017d1c <enable_ref_spads+0x66>
		enable_spad_bit(spadArray, size, currentSpad);
 8017d0a:	4642      	mov	r2, r8
 8017d0c:	4620      	mov	r0, r4
 8017d0e:	f7ff ffb6 	bl	8017c7e <enable_spad_bit>
		currentSpad++;
 8017d12:	f108 0701 	add.w	r7, r8, #1
	for (index = 0; index < spadCount; index++) {
 8017d16:	f109 0901 	add.w	r9, r9, #1
 8017d1a:	e7d8      	b.n	8017cce <enable_ref_spads+0x18>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8017d1c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8017d20:	e7d9      	b.n	8017cd6 <enable_ref_spads+0x20>
		status = set_ref_spad_map(Dev, spadArray);
 8017d22:	4621      	mov	r1, r4
 8017d24:	4628      	mov	r0, r5
 8017d26:	f7ff ffbc 	bl	8017ca2 <set_ref_spad_map>
	if (status == VL53L0X_ERROR_NONE) {
 8017d2a:	2800      	cmp	r0, #0
 8017d2c:	d1d8      	bne.n	8017ce0 <enable_ref_spads+0x2a>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8017d2e:	a902      	add	r1, sp, #8
 8017d30:	4628      	mov	r0, r5
 8017d32:	f7ff ffbb 	bl	8017cac <get_ref_spad_map>
		while (i < size) {
 8017d36:	ab02      	add	r3, sp, #8
 8017d38:	19a2      	adds	r2, r4, r6
 8017d3a:	4294      	cmp	r4, r2
 8017d3c:	d0d0      	beq.n	8017ce0 <enable_ref_spads+0x2a>
			if (spadArray[i] != checkSpadArray[i]) {
 8017d3e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017d42:	f813 1b01 	ldrb.w	r1, [r3], #1
 8017d46:	428d      	cmp	r5, r1
 8017d48:	d0f7      	beq.n	8017d3a <enable_ref_spads+0x84>
 8017d4a:	e7c7      	b.n	8017cdc <enable_ref_spads+0x26>

08017d4c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8017d4c:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 8017d4e:	22c0      	movs	r2, #192	; 0xc0
{
 8017d50:	b088      	sub	sp, #32
 8017d52:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 8017d54:	2101      	movs	r1, #1
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8017d56:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
{
 8017d5a:	4604      	mov	r4, r0
		status = VL53L0X_WrByte(Dev,
 8017d5c:	f7ff f9ca 	bl	80170f4 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8017d60:	b9f0      	cbnz	r0, 8017da0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8017d62:	a901      	add	r1, sp, #4
 8017d64:	4620      	mov	r0, r4
 8017d66:	f7ff fe82 	bl	8017a6e <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8017d6a:	b9c8      	cbnz	r0, 8017da0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	21ff      	movs	r1, #255	; 0xff
 8017d70:	4620      	mov	r0, r4
 8017d72:	f7ff f9bf 	bl	80170f4 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 8017d76:	b998      	cbnz	r0, 8017da0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 8017d78:	4632      	mov	r2, r6
 8017d7a:	21b6      	movs	r1, #182	; 0xb6
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	f7f6 f8fb 	bl	800df78 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8017d82:	b968      	cbnz	r0, 8017da0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017d84:	4602      	mov	r2, r0
 8017d86:	21ff      	movs	r1, #255	; 0xff
 8017d88:	4620      	mov	r0, r4
 8017d8a:	f7ff f9b3 	bl	80170f4 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 8017d8e:	b938      	cbnz	r0, 8017da0 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8017d90:	462a      	mov	r2, r5
 8017d92:	2101      	movs	r1, #1
 8017d94:	4620      	mov	r0, r4
 8017d96:	f7ff f9ad 	bl	80170f4 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8017d9a:	b908      	cbnz	r0, 8017da0 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8017d9c:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 8017da0:	b008      	add	sp, #32
 8017da2:	bd70      	pop	{r4, r5, r6, pc}

08017da4 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8017da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017da6:	460f      	mov	r7, r1
 8017da8:	b089      	sub	sp, #36	; 0x24
 8017daa:	4616      	mov	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017dac:	21ff      	movs	r1, #255	; 0xff
 8017dae:	2201      	movs	r2, #1
{
 8017db0:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017db2:	f7ff f99f 	bl	80170f4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8017db6:	4602      	mov	r2, r0
 8017db8:	b9a8      	cbnz	r0, 8017de6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8017dba:	214f      	movs	r1, #79	; 0x4f
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	f7ff f999 	bl	80170f4 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8017dc2:	b980      	cbnz	r0, 8017de6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8017dc4:	222c      	movs	r2, #44	; 0x2c
 8017dc6:	214e      	movs	r1, #78	; 0x4e
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f7ff f993 	bl	80170f4 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8017dce:	4602      	mov	r2, r0
 8017dd0:	b948      	cbnz	r0, 8017de6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017dd2:	21ff      	movs	r1, #255	; 0xff
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f7ff f98d 	bl	80170f4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8017dda:	b920      	cbnz	r0, 8017de6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8017ddc:	22b4      	movs	r2, #180	; 0xb4
 8017dde:	21b6      	movs	r1, #182	; 0xb6
 8017de0:	4620      	mov	r0, r4
 8017de2:	f7ff f987 	bl	80170f4 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8017de6:	2500      	movs	r5, #0
 8017de8:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8017dec:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128

	if (isApertureSpads) {
 8017df0:	b9de      	cbnz	r6, 8017e2a <VL53L0X_set_reference_spads+0x86>
	uint32_t currentSpadIndex = 0;
 8017df2:	4635      	mov	r5, r6
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8017df4:	ab07      	add	r3, sp, #28
 8017df6:	22b4      	movs	r2, #180	; 0xb4
 8017df8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8017dfc:	2306      	movs	r3, #6
 8017dfe:	e9cd 3200 	strd	r3, r2, [sp]
 8017e02:	9502      	str	r5, [sp, #8]
 8017e04:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8017e08:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8017e0c:	4631      	mov	r1, r6
 8017e0e:	4620      	mov	r0, r4
 8017e10:	f7ff ff51 	bl	8017cb6 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8017e14:	b930      	cbnz	r0, 8017e24 <VL53L0X_set_reference_spads+0x80>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8017e16:	2301      	movs	r3, #1
 8017e18:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8017e1c:	f884 7113 	strb.w	r7, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8017e20:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 8017e24:	b009      	add	sp, #36	; 0x24
 8017e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			currentSpadIndex++;
 8017e28:	3501      	adds	r5, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8017e2a:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 8017e2e:	f7f6 feed 	bl	800ec0c <is_aperture>
 8017e32:	2800      	cmp	r0, #0
 8017e34:	d1de      	bne.n	8017df4 <VL53L0X_set_reference_spads+0x50>
 8017e36:	2d2c      	cmp	r5, #44	; 0x2c
 8017e38:	d1f6      	bne.n	8017e28 <VL53L0X_set_reference_spads+0x84>
 8017e3a:	e7db      	b.n	8017df4 <VL53L0X_set_reference_spads+0x50>

08017e3c <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8017e3c:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8017e3e:	f041 0201 	orr.w	r2, r1, #1
 8017e42:	2100      	movs	r1, #0
{
 8017e44:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8017e46:	f7ff f955 	bl	80170f4 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8017e4a:	b978      	cbnz	r0, 8017e6c <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f000 fa44 	bl	80182da <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 8017e52:	b958      	cbnz	r0, 8017e6c <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8017e54:	4601      	mov	r1, r0
 8017e56:	4620      	mov	r0, r4
 8017e58:	f7ff fddd 	bl	8017a16 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 8017e5c:	b930      	cbnz	r0, 8017e6c <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8017e5e:	4602      	mov	r2, r0
 8017e60:	4601      	mov	r1, r0
 8017e62:	4620      	mov	r0, r4

	return Status;
}
 8017e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8017e68:	f7ff b944 	b.w	80170f4 <VL53L0X_WrByte>
}
 8017e6c:	bd10      	pop	{r4, pc}

08017e6e <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8017e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8017e72:	f04f 0b00 	mov.w	fp, #0
{
 8017e76:	4688      	mov	r8, r1
 8017e78:	4617      	mov	r7, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017e7a:	21ff      	movs	r1, #255	; 0xff
 8017e7c:	2201      	movs	r2, #1
{
 8017e7e:	4605      	mov	r5, r0
 8017e80:	461e      	mov	r6, r3
 8017e82:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8017e86:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 8017e8a:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017e8e:	f7ff f931 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017e92:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017e94:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017e96:	4659      	mov	r1, fp
 8017e98:	4628      	mov	r0, r5
 8017e9a:	f7ff f92b 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017e9e:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017ea0:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017ea2:	21ff      	movs	r1, #255	; 0xff
 8017ea4:	4628      	mov	r0, r5
 8017ea6:	f7ff f925 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8017eaa:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017eac:	4304      	orrs	r4, r0
 8017eae:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8017eb0:	f1b8 0f00 	cmp.w	r8, #0
 8017eb4:	d032      	beq.n	8017f1c <VL53L0X_ref_calibration_io+0xae>
		if (vhv_enable)
 8017eb6:	f1ba 0f00 	cmp.w	sl, #0
 8017eba:	d006      	beq.n	8017eca <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8017ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ebe:	21cb      	movs	r1, #203	; 0xcb
 8017ec0:	4628      	mov	r0, r5
 8017ec2:	f7ff f92f 	bl	8017124 <VL53L0X_RdByte>
 8017ec6:	4320      	orrs	r0, r4
 8017ec8:	b244      	sxtb	r4, r0
		if (phase_enable)
 8017eca:	f1b9 0f00 	cmp.w	r9, #0
 8017ece:	d007      	beq.n	8017ee0 <VL53L0X_ref_calibration_io+0x72>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8017ed0:	f10d 0207 	add.w	r2, sp, #7
 8017ed4:	21ee      	movs	r1, #238	; 0xee
 8017ed6:	4628      	mov	r0, r5
 8017ed8:	f7ff f924 	bl	8017124 <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8017edc:	4320      	orrs	r0, r4
 8017ede:	b244      	sxtb	r4, r0
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017ee0:	2201      	movs	r2, #1
 8017ee2:	21ff      	movs	r1, #255	; 0xff
 8017ee4:	4628      	mov	r0, r5
 8017ee6:	f7ff f905 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8017eea:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017eec:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8017eee:	2100      	movs	r1, #0
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	f7ff f8ff 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8017ef6:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8017ef8:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017efa:	2200      	movs	r2, #0
 8017efc:	21ff      	movs	r1, #255	; 0xff
 8017efe:	4628      	mov	r0, r5
 8017f00:	f7ff f8f8 	bl	80170f4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8017f04:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8017f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017f0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8017f0c:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8017f0e:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 8017f12:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8017f14:	7013      	strb	r3, [r2, #0]
}
 8017f16:	b003      	add	sp, #12
 8017f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 8017f1c:	f1ba 0f00 	cmp.w	sl, #0
 8017f20:	d006      	beq.n	8017f30 <VL53L0X_ref_calibration_io+0xc2>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8017f22:	463a      	mov	r2, r7
 8017f24:	21cb      	movs	r1, #203	; 0xcb
 8017f26:	4628      	mov	r0, r5
 8017f28:	f7ff f8e4 	bl	80170f4 <VL53L0X_WrByte>
 8017f2c:	4320      	orrs	r0, r4
 8017f2e:	b244      	sxtb	r4, r0
		if (phase_enable)
 8017f30:	f1b9 0f00 	cmp.w	r9, #0
 8017f34:	d0d4      	beq.n	8017ee0 <VL53L0X_ref_calibration_io+0x72>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8017f36:	4633      	mov	r3, r6
 8017f38:	2280      	movs	r2, #128	; 0x80
 8017f3a:	21ee      	movs	r1, #238	; 0xee
 8017f3c:	4628      	mov	r0, r5
 8017f3e:	f7f5 ffe3 	bl	800df08 <VL53L0X_UpdateByte>
 8017f42:	e7cb      	b.n	8017edc <VL53L0X_ref_calibration_io+0x6e>

08017f44 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8017f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f48:	b087      	sub	sp, #28
 8017f4a:	4691      	mov	r9, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 8017f4c:	2200      	movs	r2, #0
{
 8017f4e:	4605      	mov	r5, r0
 8017f50:	460e      	mov	r6, r1
	uint8_t PhaseCalInt = 0;
 8017f52:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8017f56:	461f      	mov	r7, r3
 8017f58:	b353      	cbz	r3, 8017fb0 <VL53L0X_perform_vhv_calibration+0x6c>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8017f5a:	f890 8130 	ldrb.w	r8, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8017f5e:	2201      	movs	r2, #1
 8017f60:	4611      	mov	r1, r2
 8017f62:	4628      	mov	r0, r5
 8017f64:	f7ff f8c6 	bl	80170f4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8017f68:	4604      	mov	r4, r0
 8017f6a:	bb48      	cbnz	r0, 8017fc0 <VL53L0X_perform_vhv_calibration+0x7c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8017f6c:	2140      	movs	r1, #64	; 0x40
 8017f6e:	4628      	mov	r0, r5
 8017f70:	f7ff ff64 	bl	8017e3c <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8017f74:	b9f0      	cbnz	r0, 8017fb4 <VL53L0X_perform_vhv_calibration+0x70>
 8017f76:	f1b9 0f01 	cmp.w	r9, #1
 8017f7a:	d124      	bne.n	8017fc6 <VL53L0X_perform_vhv_calibration+0x82>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8017f7c:	f10d 0317 	add.w	r3, sp, #23
 8017f80:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8017f84:	e9cd 6300 	strd	r6, r3, [sp]
 8017f88:	4622      	mov	r2, r4
 8017f8a:	4623      	mov	r3, r4
 8017f8c:	4649      	mov	r1, r9
 8017f8e:	4628      	mov	r0, r5
 8017f90:	f7ff ff6d 	bl	8017e6e <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8017f94:	4604      	mov	r4, r0
 8017f96:	b978      	cbnz	r0, 8017fb8 <VL53L0X_perform_vhv_calibration+0x74>
 8017f98:	b147      	cbz	r7, 8017fac <VL53L0X_perform_vhv_calibration+0x68>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8017f9a:	4642      	mov	r2, r8
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	4628      	mov	r0, r5
 8017fa0:	f7ff f8a8 	bl	80170f4 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	b938      	cbnz	r0, 8017fb8 <VL53L0X_perform_vhv_calibration+0x74>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8017fa8:	f885 8130 	strb.w	r8, [r5, #304]	; 0x130
	uint8_t SequenceConfig = 0;
 8017fac:	2400      	movs	r4, #0
 8017fae:	e003      	b.n	8017fb8 <VL53L0X_perform_vhv_calibration+0x74>
 8017fb0:	4698      	mov	r8, r3
 8017fb2:	e7d4      	b.n	8017f5e <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8017fb4:	7034      	strb	r4, [r6, #0]
 8017fb6:	4604      	mov	r4, r0

	}

	return Status;
}
 8017fb8:	4620      	mov	r0, r4
 8017fba:	b007      	add	sp, #28
 8017fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pVhvSettings = 0;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	7033      	strb	r3, [r6, #0]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8017fc4:	e7f8      	b.n	8017fb8 <VL53L0X_perform_vhv_calibration+0x74>
		*pVhvSettings = 0;
 8017fc6:	7030      	strb	r0, [r6, #0]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8017fc8:	e7e6      	b.n	8017f98 <VL53L0X_perform_vhv_calibration+0x54>

08017fca <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8017fca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fce:	4605      	mov	r5, r0
 8017fd0:	b087      	sub	sp, #28
 8017fd2:	460e      	mov	r6, r1
 8017fd4:	4691      	mov	r9, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8017fd6:	461f      	mov	r7, r3
 8017fd8:	b353      	cbz	r3, 8018030 <VL53L0X_perform_phase_calibration+0x66>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8017fda:	f890 8130 	ldrb.w	r8, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8017fde:	2202      	movs	r2, #2
 8017fe0:	2101      	movs	r1, #1
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	f7ff f886 	bl	80170f4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8017fe8:	4604      	mov	r4, r0
 8017fea:	bb48      	cbnz	r0, 8018040 <VL53L0X_perform_phase_calibration+0x76>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8017fec:	4601      	mov	r1, r0
 8017fee:	4628      	mov	r0, r5
 8017ff0:	f7ff ff24 	bl	8017e3c <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8017ff4:	b9f0      	cbnz	r0, 8018034 <VL53L0X_perform_phase_calibration+0x6a>
 8017ff6:	f1b9 0f01 	cmp.w	r9, #1
 8017ffa:	d124      	bne.n	8018046 <VL53L0X_perform_phase_calibration+0x7c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8017ffc:	f10d 0317 	add.w	r3, sp, #23
 8018000:	e9cd 4902 	strd	r4, r9, [sp, #8]
 8018004:	9300      	str	r3, [sp, #0]
 8018006:	4622      	mov	r2, r4
 8018008:	4623      	mov	r3, r4
 801800a:	9601      	str	r6, [sp, #4]
 801800c:	4649      	mov	r1, r9
 801800e:	4628      	mov	r0, r5
 8018010:	f7ff ff2d 	bl	8017e6e <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8018014:	4604      	mov	r4, r0
 8018016:	b978      	cbnz	r0, 8018038 <VL53L0X_perform_phase_calibration+0x6e>
 8018018:	b147      	cbz	r7, 801802c <VL53L0X_perform_phase_calibration+0x62>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 801801a:	4642      	mov	r2, r8
 801801c:	2101      	movs	r1, #1
 801801e:	4628      	mov	r0, r5
 8018020:	f7ff f868 	bl	80170f4 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8018024:	4604      	mov	r4, r0
 8018026:	b938      	cbnz	r0, 8018038 <VL53L0X_perform_phase_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8018028:	f885 8130 	strb.w	r8, [r5, #304]	; 0x130
	uint8_t SequenceConfig = 0;
 801802c:	2400      	movs	r4, #0
 801802e:	e003      	b.n	8018038 <VL53L0X_perform_phase_calibration+0x6e>
 8018030:	4698      	mov	r8, r3
 8018032:	e7d4      	b.n	8017fde <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 8018034:	7034      	strb	r4, [r6, #0]
 8018036:	4604      	mov	r4, r0

	}

	return Status;
}
 8018038:	4620      	mov	r0, r4
 801803a:	b007      	add	sp, #28
 801803c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pPhaseCal = 0;
 8018040:	2300      	movs	r3, #0
 8018042:	7033      	strb	r3, [r6, #0]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8018044:	e7f8      	b.n	8018038 <VL53L0X_perform_phase_calibration+0x6e>
		*pPhaseCal = 0;
 8018046:	7030      	strb	r0, [r6, #0]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8018048:	e7e6      	b.n	8018018 <VL53L0X_perform_phase_calibration+0x4e>

0801804a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 801804a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801804c:	461d      	mov	r5, r3
 801804e:	4616      	mov	r6, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8018050:	2300      	movs	r3, #0
 8018052:	462a      	mov	r2, r5
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8018054:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130
{
 8018058:	4604      	mov	r4, r0
	Status = VL53L0X_perform_vhv_calibration(
 801805a:	f7ff ff73 	bl	8017f44 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 801805e:	b970      	cbnz	r0, 801807e <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 8018060:	4603      	mov	r3, r0
 8018062:	462a      	mov	r2, r5
 8018064:	4631      	mov	r1, r6
 8018066:	4620      	mov	r0, r4
 8018068:	f7ff ffaf 	bl	8017fca <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 801806c:	b938      	cbnz	r0, 801807e <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 801806e:	463a      	mov	r2, r7
 8018070:	2101      	movs	r1, #1
 8018072:	4620      	mov	r0, r4
 8018074:	f7ff f83e 	bl	80170f4 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8018078:	b908      	cbnz	r0, 801807e <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 801807a:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130

	}

	return Status;
}
 801807e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018080 <VL53L0X_perform_ref_spad_management>:
{
 8018080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSpadIndex = 0;
 8018084:	2300      	movs	r3, #0
{
 8018086:	b093      	sub	sp, #76	; 0x4c
 8018088:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 801808c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8018090:	f8a0 3128 	strh.w	r3, [r0, #296]	; 0x128
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8018094:	2201      	movs	r2, #1
 8018096:	21ff      	movs	r1, #255	; 0xff
	int32_t nextGoodSpad = 0;
 8018098:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 801809c:	f8b0 913c 	ldrh.w	r9, [r0, #316]	; 0x13c
	uint8_t VhvSettings = 0;
 80180a0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
{
 80180a4:	4605      	mov	r5, r0
	uint8_t PhaseCal = 0;
 80180a6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80180aa:	f7ff f823 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80180ae:	4604      	mov	r4, r0
 80180b0:	2800      	cmp	r0, #0
 80180b2:	f040 80e4 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
		Status = VL53L0X_WrByte(Dev,
 80180b6:	4602      	mov	r2, r0
 80180b8:	214f      	movs	r1, #79	; 0x4f
 80180ba:	4628      	mov	r0, r5
 80180bc:	f7ff f81a 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80180c0:	4604      	mov	r4, r0
 80180c2:	2800      	cmp	r0, #0
 80180c4:	f040 80db 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
		Status = VL53L0X_WrByte(Dev,
 80180c8:	222c      	movs	r2, #44	; 0x2c
 80180ca:	214e      	movs	r1, #78	; 0x4e
 80180cc:	4628      	mov	r0, r5
 80180ce:	f7ff f811 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80180d2:	4604      	mov	r4, r0
 80180d4:	2800      	cmp	r0, #0
 80180d6:	f040 80d2 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80180da:	4602      	mov	r2, r0
 80180dc:	21ff      	movs	r1, #255	; 0xff
 80180de:	4628      	mov	r0, r5
 80180e0:	f7ff f808 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80180e4:	4604      	mov	r4, r0
 80180e6:	2800      	cmp	r0, #0
 80180e8:	f040 80c9 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
		Status = VL53L0X_WrByte(Dev,
 80180ec:	22b4      	movs	r2, #180	; 0xb4
 80180ee:	21b6      	movs	r1, #182	; 0xb6
 80180f0:	4628      	mov	r0, r5
 80180f2:	f7fe ffff 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80180f6:	4604      	mov	r4, r0
 80180f8:	2800      	cmp	r0, #0
 80180fa:	f040 80c0 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
		Status = VL53L0X_WrByte(Dev,
 80180fe:	4602      	mov	r2, r0
 8018100:	2180      	movs	r1, #128	; 0x80
 8018102:	4628      	mov	r0, r5
 8018104:	f7fe fff6 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8018108:	4604      	mov	r4, r0
 801810a:	2800      	cmp	r0, #0
 801810c:	f040 80b7 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8018110:	4603      	mov	r3, r0
 8018112:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 8018116:	a90d      	add	r1, sp, #52	; 0x34
 8018118:	4628      	mov	r0, r5
 801811a:	f7ff ff96 	bl	801804a <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 801811e:	4604      	mov	r4, r0
 8018120:	2800      	cmp	r0, #0
 8018122:	f040 80ac 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
					Dev->Data.SpadData.RefGoodSpadMap,
 8018126:	f505 7395 	add.w	r3, r5, #298	; 0x12a
 801812a:	9307      	str	r3, [sp, #28]
		Status = enable_ref_spads(Dev,
 801812c:	2303      	movs	r3, #3
 801812e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8018132:	21b4      	movs	r1, #180	; 0xb4
 8018134:	2306      	movs	r3, #6
					Dev->Data.SpadData.RefSpadEnables,
 8018136:	f505 7a92 	add.w	sl, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 801813a:	ae0e      	add	r6, sp, #56	; 0x38
 801813c:	e9cd 3100 	strd	r3, r1, [sp]
 8018140:	9a07      	ldr	r2, [sp, #28]
 8018142:	9604      	str	r6, [sp, #16]
 8018144:	4601      	mov	r1, r0
 8018146:	4653      	mov	r3, sl
 8018148:	4628      	mov	r0, r5
 801814a:	f7ff fdb4 	bl	8017cb6 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 801814e:	4604      	mov	r4, r0
 8018150:	2800      	cmp	r0, #0
 8018152:	f040 8094 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
		Status = perform_ref_signal_measurement(Dev,
 8018156:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801815a:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 801815c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 801815e:	f7ff fdf5 	bl	8017d4c <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 8018162:	4604      	mov	r4, r0
 8018164:	2800      	cmp	r0, #0
 8018166:	f040 808a 	bne.w	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
 801816a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801816e:	454b      	cmp	r3, r9
 8018170:	f240 8089 	bls.w	8018286 <VL53L0X_perform_ref_spad_management+0x206>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8018174:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
 8018178:	f8a5 0128 	strh.w	r0, [r5, #296]	; 0x128
			while ((is_aperture(startSelect + currentSpadIndex)
 801817c:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8018180:	f7f6 fd44 	bl	800ec0c <is_aperture>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8018184:	b188      	cbz	r0, 80181aa <VL53L0X_perform_ref_spad_management+0x12a>
			Status = enable_ref_spads(Dev,
 8018186:	2306      	movs	r3, #6
 8018188:	22b4      	movs	r2, #180	; 0xb4
 801818a:	f04f 0803 	mov.w	r8, #3
 801818e:	e9cd 3200 	strd	r3, r2, [sp]
 8018192:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8018196:	9a07      	ldr	r2, [sp, #28]
 8018198:	9604      	str	r6, [sp, #16]
 801819a:	4653      	mov	r3, sl
 801819c:	2101      	movs	r1, #1
 801819e:	4628      	mov	r0, r5
 80181a0:	f7ff fd89 	bl	8017cb6 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 80181a4:	b128      	cbz	r0, 80181b2 <VL53L0X_perform_ref_spad_management+0x132>
			Status = enable_ref_spads(Dev,
 80181a6:	4604      	mov	r4, r0
	return Status;
 80181a8:	e069      	b.n	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80181aa:	2f2b      	cmp	r7, #43	; 0x2b
 80181ac:	d8eb      	bhi.n	8018186 <VL53L0X_perform_ref_spad_management+0x106>
				currentSpadIndex++;
 80181ae:	3701      	adds	r7, #1
 80181b0:	e7e4      	b.n	801817c <VL53L0X_perform_ref_spad_management+0xfc>
				Status = perform_ref_signal_measurement(Dev,
 80181b2:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80181b6:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 80181b8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 80181ba:	f7ff fdc7 	bl	8017d4c <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 80181be:	4606      	mov	r6, r0
 80181c0:	2800      	cmp	r0, #0
 80181c2:	f040 8085 	bne.w	80182d0 <VL53L0X_perform_ref_spad_management+0x250>
 80181c6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80181ca:	454b      	cmp	r3, r9
 80181cc:	d85f      	bhi.n	801828e <VL53L0X_perform_ref_spad_management+0x20e>
	uint32_t refSpadCount_int = 0;
 80181ce:	4680      	mov	r8, r0
			needAptSpads = 1;
 80181d0:	f04f 0b01 	mov.w	fp, #1
		(peakSignalRateRef < targetRefRate)) {
 80181d4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 80181d8:	454b      	cmp	r3, r9
 80181da:	d268      	bcs.n	80182ae <VL53L0X_perform_ref_spad_management+0x22e>
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80181dc:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 80181e0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80181e4:	9010      	str	r0, [sp, #64]	; 0x40
		lastSignalRateDiff = abs(peakSignalRateRef -
 80181e6:	eba3 0009 	sub.w	r0, r3, r9
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80181ea:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		lastSignalRateDiff = abs(peakSignalRateRef -
 80181ee:	f7f8 fcd3 	bl	8010b98 <abs>
		isApertureSpads_int = needAptSpads;
 80181f2:	fa5f f68b 	uxtb.w	r6, fp
		lastSignalRateDiff = abs(peakSignalRateRef -
 80181f6:	9009      	str	r0, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 80181f8:	f04f 0803 	mov.w	r8, #3
			get_next_good_spad(
 80181fc:	ab0f      	add	r3, sp, #60	; 0x3c
 80181fe:	463a      	mov	r2, r7
 8018200:	9807      	ldr	r0, [sp, #28]
 8018202:	2106      	movs	r1, #6
 8018204:	f7ff fd1c 	bl	8017c40 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 8018208:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801820a:	1c7b      	adds	r3, r7, #1
 801820c:	d062      	beq.n	80182d4 <VL53L0X_perform_ref_spad_management+0x254>
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 801820e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8018212:	f7f6 fcfb 	bl	800ec0c <is_aperture>
 8018216:	4558      	cmp	r0, fp
 8018218:	d149      	bne.n	80182ae <VL53L0X_perform_ref_spad_management+0x22e>
			(refSpadCount_int)++;
 801821a:	f108 0301 	add.w	r3, r8, #1
			Status = enable_spad_bit(
 801821e:	463a      	mov	r2, r7
 8018220:	4650      	mov	r0, sl
			(refSpadCount_int)++;
 8018222:	9308      	str	r3, [sp, #32]
			Status = enable_spad_bit(
 8018224:	f7ff fd2b 	bl	8017c7e <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8018228:	2800      	cmp	r0, #0
 801822a:	d1bc      	bne.n	80181a6 <VL53L0X_perform_ref_spad_management+0x126>
				Status = set_ref_spad_map(Dev,
 801822c:	4651      	mov	r1, sl
 801822e:	4628      	mov	r0, r5
 8018230:	f7ff fd37 	bl	8017ca2 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8018234:	2800      	cmp	r0, #0
 8018236:	d1b6      	bne.n	80181a6 <VL53L0X_perform_ref_spad_management+0x126>
			Status = perform_ref_signal_measurement(Dev,
 8018238:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801823c:	4628      	mov	r0, r5
 801823e:	f7ff fd85 	bl	8017d4c <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8018242:	2800      	cmp	r0, #0
 8018244:	d1af      	bne.n	80181a6 <VL53L0X_perform_ref_spad_management+0x126>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8018246:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 801824a:	eba0 0009 	sub.w	r0, r0, r9
 801824e:	f7f8 fca3 	bl	8010b98 <abs>
			if (peakSignalRateRef > targetRefRate) {
 8018252:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8018256:	454a      	cmp	r2, r9
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8018258:	4603      	mov	r3, r0
			if (peakSignalRateRef > targetRefRate) {
 801825a:	d91a      	bls.n	8018292 <VL53L0X_perform_ref_spad_management+0x212>
				if (signalRateDiff > lastSignalRateDiff) {
 801825c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801825e:	4290      	cmp	r0, r2
 8018260:	d923      	bls.n	80182aa <VL53L0X_perform_ref_spad_management+0x22a>
					Status = set_ref_spad_map(Dev,
 8018262:	a910      	add	r1, sp, #64	; 0x40
 8018264:	4628      	mov	r0, r5
 8018266:	f7ff fd1c 	bl	8017ca2 <set_ref_spad_map>
 801826a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801826e:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
 8018272:	4603      	mov	r3, r0
 8018274:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018276:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 801827a:	b1c3      	cbz	r3, 80182ae <VL53L0X_perform_ref_spad_management+0x22e>
					Status = set_ref_spad_map(Dev,
 801827c:	461c      	mov	r4, r3
}
 801827e:	4620      	mov	r0, r4
 8018280:	b013      	add	sp, #76	; 0x4c
 8018282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t	 isApertureSpads_int = 0;
 8018286:	2600      	movs	r6, #0
	uint32_t refSpadCount_int = 0;
 8018288:	46b0      	mov	r8, r6
			needAptSpads = 1;
 801828a:	46b3      	mov	fp, r6
 801828c:	e7a2      	b.n	80181d4 <VL53L0X_perform_ref_spad_management+0x154>
					isApertureSpads_int = 1;
 801828e:	2601      	movs	r6, #1
 8018290:	e7fb      	b.n	801828a <VL53L0X_perform_ref_spad_management+0x20a>
				memcpy(lastSpadArray,
 8018292:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8018296:	f8b5 2128 	ldrh.w	r2, [r5, #296]	; 0x128
			(refSpadCount_int)++;
 801829a:	f8dd 8020 	ldr.w	r8, [sp, #32]
				memcpy(lastSpadArray,
 801829e:	9010      	str	r0, [sp, #64]	; 0x40
				currentSpadIndex++;
 80182a0:	3701      	adds	r7, #1
				memcpy(lastSpadArray,
 80182a2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80182a6:	9309      	str	r3, [sp, #36]	; 0x24
 80182a8:	e7a8      	b.n	80181fc <VL53L0X_perform_ref_spad_management+0x17c>
			(refSpadCount_int)++;
 80182aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
		*refSpadCount = refSpadCount_int;
 80182ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182b0:	f8c3 8000 	str.w	r8, [r3]
		*isApertureSpads = isApertureSpads_int;
 80182b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182b6:	701e      	strb	r6, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80182b8:	2301      	movs	r3, #1
 80182ba:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80182be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80182c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182c8:	781b      	ldrb	r3, [r3, #0]
 80182ca:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 80182ce:	e7d6      	b.n	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
				Status = perform_ref_signal_measurement(Dev,
 80182d0:	4604      	mov	r4, r0
 80182d2:	e7d4      	b.n	801827e <VL53L0X_perform_ref_spad_management+0x1fe>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80182d4:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80182d8:	e765      	b.n	80181a6 <VL53L0X_perform_ref_spad_management+0x126>

080182da <VL53L0X_measurement_poll_for_completion>:
{
 80182da:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t NewDataReady = 0;
 80182dc:	2300      	movs	r3, #0
{
 80182de:	4604      	mov	r4, r0
	uint8_t NewDataReady = 0;
 80182e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80182e4:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80182e8:	f10d 0107 	add.w	r1, sp, #7
 80182ec:	4620      	mov	r0, r4
 80182ee:	f7ff fc70 	bl	8017bd2 <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 80182f2:	b958      	cbnz	r0, 801830c <VL53L0X_measurement_poll_for_completion+0x32>
		if (NewDataReady == 1)
 80182f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80182f8:	2b01      	cmp	r3, #1
 80182fa:	d007      	beq.n	801830c <VL53L0X_measurement_poll_for_completion+0x32>
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80182fc:	3d01      	subs	r5, #1
 80182fe:	d003      	beq.n	8018308 <VL53L0X_measurement_poll_for_completion+0x2e>
		VL53L0X_PollingDelay(Dev);
 8018300:	4620      	mov	r0, r4
 8018302:	f7fe ff34 	bl	801716e <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8018306:	e7ef      	b.n	80182e8 <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
 8018308:	f06f 0006 	mvn.w	r0, #6
}
 801830c:	b003      	add	sp, #12
 801830e:	bd30      	pop	{r4, r5, pc}

08018310 <VL53L0X_isqrt>:
{
 8018310:	4602      	mov	r2, r0
	uint32_t  bit = 1 << 30;
 8018312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	while (bit > num)
 8018316:	4293      	cmp	r3, r2
 8018318:	d802      	bhi.n	8018320 <VL53L0X_isqrt+0x10>
	uint32_t  res = 0;
 801831a:	2000      	movs	r0, #0
	while (bit != 0) {
 801831c:	b913      	cbnz	r3, 8018324 <VL53L0X_isqrt+0x14>
}
 801831e:	4770      	bx	lr
		bit >>= 2;
 8018320:	089b      	lsrs	r3, r3, #2
 8018322:	e7f8      	b.n	8018316 <VL53L0X_isqrt+0x6>
		if (num >= res + bit) {
 8018324:	18c1      	adds	r1, r0, r3
 8018326:	4291      	cmp	r1, r2
			res = (res >> 1) + bit;
 8018328:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801832c:	bf9c      	itt	ls
 801832e:	18c0      	addls	r0, r0, r3
			num -= res + bit;
 8018330:	1a52      	subls	r2, r2, r1
		bit >>= 2;
 8018332:	089b      	lsrs	r3, r3, #2
 8018334:	e7f2      	b.n	801831c <VL53L0X_isqrt+0xc>

08018336 <VL53L0X_device_read_strobe>:
{
 8018336:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8018338:	2200      	movs	r2, #0
 801833a:	2183      	movs	r1, #131	; 0x83
{
 801833c:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 801833e:	f7fe fed9 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8018342:	4604      	mov	r4, r0
 8018344:	b990      	cbnz	r0, 801836c <VL53L0X_device_read_strobe+0x36>
		LoopNb = 0;
 8018346:	4606      	mov	r6, r0
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8018348:	f10d 0207 	add.w	r2, sp, #7
 801834c:	2183      	movs	r1, #131	; 0x83
 801834e:	4628      	mov	r0, r5
 8018350:	f7fe fee8 	bl	8017124 <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8018354:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018358:	4303      	orrs	r3, r0
 801835a:	b2db      	uxtb	r3, r3
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 801835c:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 801835e:	b92b      	cbnz	r3, 801836c <VL53L0X_device_read_strobe+0x36>
			LoopNb = LoopNb + 1;
 8018360:	3601      	adds	r6, #1
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8018362:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
 8018366:	d1ef      	bne.n	8018348 <VL53L0X_device_read_strobe+0x12>
			Status = VL53L0X_ERROR_TIME_OUT;
 8018368:	f06f 0406 	mvn.w	r4, #6
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 801836c:	2201      	movs	r2, #1
 801836e:	2183      	movs	r1, #131	; 0x83
 8018370:	4628      	mov	r0, r5
 8018372:	f7fe febf 	bl	80170f4 <VL53L0X_WrByte>
 8018376:	4320      	orrs	r0, r4
}
 8018378:	b240      	sxtb	r0, r0
 801837a:	b002      	add	sp, #8
 801837c:	bd70      	pop	{r4, r5, r6, pc}

0801837e <VL53L0X_get_info_from_device>:
{
 801837e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8018382:	f890 70f0 	ldrb.w	r7, [r0, #240]	; 0xf0
{
 8018386:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 8018388:	2600      	movs	r6, #0
	if (ReadDataFromDeviceDone != 7) {
 801838a:	2f07      	cmp	r7, #7
	uint32_t PartUIDLower = 0;
 801838c:	e9cd 6607 	strd	r6, r6, [sp, #28]
{
 8018390:	4605      	mov	r5, r0
 8018392:	4688      	mov	r8, r1
	if (ReadDataFromDeviceDone != 7) {
 8018394:	d103      	bne.n	801839e <VL53L0X_get_info_from_device+0x20>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8018396:	2000      	movs	r0, #0
}
 8018398:	b011      	add	sp, #68	; 0x44
 801839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 801839e:	2201      	movs	r2, #1
 80183a0:	2180      	movs	r1, #128	; 0x80
 80183a2:	f7fe fea7 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80183a6:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80183a8:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80183aa:	21ff      	movs	r1, #255	; 0xff
 80183ac:	4628      	mov	r0, r5
 80183ae:	f7fe fea1 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80183b2:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80183b4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80183b6:	4631      	mov	r1, r6
 80183b8:	4628      	mov	r0, r5
 80183ba:	f7fe fe9b 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80183be:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80183c0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80183c2:	2206      	movs	r2, #6
 80183c4:	21ff      	movs	r1, #255	; 0xff
 80183c6:	4628      	mov	r0, r5
 80183c8:	f7fe fe94 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80183cc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80183ce:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80183d0:	f10d 0215 	add.w	r2, sp, #21
 80183d4:	2183      	movs	r1, #131	; 0x83
 80183d6:	4628      	mov	r0, r5
 80183d8:	f7fe fea4 	bl	8017124 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80183dc:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80183e0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80183e2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80183e4:	f042 0204 	orr.w	r2, r2, #4
 80183e8:	2183      	movs	r1, #131	; 0x83
 80183ea:	4628      	mov	r0, r5
 80183ec:	f7fe fe82 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80183f0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80183f2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80183f4:	2207      	movs	r2, #7
 80183f6:	21ff      	movs	r1, #255	; 0xff
 80183f8:	4628      	mov	r0, r5
 80183fa:	f7fe fe7b 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80183fe:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8018400:	2201      	movs	r2, #1
 8018402:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8018404:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8018406:	4628      	mov	r0, r5
 8018408:	f7fe fe74 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 801840c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 801840e:	4304      	orrs	r4, r0
		Status |= VL53L0X_PollingDelay(Dev);
 8018410:	4628      	mov	r0, r5
 8018412:	f7fe feac 	bl	801716e <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8018416:	b264      	sxtb	r4, r4
		Status |= VL53L0X_PollingDelay(Dev);
 8018418:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 801841a:	2201      	movs	r2, #1
 801841c:	2180      	movs	r1, #128	; 0x80
 801841e:	4628      	mov	r0, r5
 8018420:	f7fe fe68 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 8018424:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8018426:	4304      	orrs	r4, r0
		if (((option & 1) == 1) &&
 8018428:	f018 0b01 	ands.w	fp, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 801842c:	b264      	sxtb	r4, r4
		if (((option & 1) == 1) &&
 801842e:	f000 823e 	beq.w	80188ae <VL53L0X_get_info_from_device+0x530>
 8018432:	07fa      	lsls	r2, r7, #31
 8018434:	f100 823e 	bmi.w	80188b4 <VL53L0X_get_info_from_device+0x536>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8018438:	226b      	movs	r2, #107	; 0x6b
 801843a:	2194      	movs	r1, #148	; 0x94
 801843c:	4628      	mov	r0, r5
 801843e:	f7fe fe59 	bl	80170f4 <VL53L0X_WrByte>
 8018442:	4606      	mov	r6, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018444:	4628      	mov	r0, r5
 8018446:	f7ff ff76 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801844a:	aa06      	add	r2, sp, #24
			Status |= VL53L0X_device_read_strobe(Dev);
 801844c:	4306      	orrs	r6, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801844e:	2190      	movs	r1, #144	; 0x90
 8018450:	4628      	mov	r0, r5
 8018452:	f7f5 fdbd 	bl	800dfd0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8018456:	4334      	orrs	r4, r6
 8018458:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 801845a:	2224      	movs	r2, #36	; 0x24
 801845c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801845e:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8018460:	4628      	mov	r0, r5
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8018462:	9e06      	ldr	r6, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8018464:	f7fe fe46 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018468:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 801846a:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 801846c:	4628      	mov	r0, r5
 801846e:	f7ff ff62 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8018472:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8018474:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018476:	aa06      	add	r2, sp, #24
 8018478:	2190      	movs	r1, #144	; 0x90
 801847a:	4628      	mov	r0, r5
 801847c:	f7f5 fda8 	bl	800dfd0 <VL53L0X_RdDWord>
 8018480:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8018482:	b264      	sxtb	r4, r4
 8018484:	ba1b      	rev	r3, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8018486:	2225      	movs	r2, #37	; 0x25
 8018488:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801848a:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 801848c:	4628      	mov	r0, r5
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 801848e:	9309      	str	r3, [sp, #36]	; 0x24
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8018490:	f7fe fe30 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018494:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8018496:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018498:	4628      	mov	r0, r5
 801849a:	f7ff ff4c 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 801849e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80184a0:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80184a2:	aa06      	add	r2, sp, #24
 80184a4:	2190      	movs	r1, #144	; 0x90
 80184a6:	4628      	mov	r0, r5
 80184a8:	f7f5 fd92 	bl	800dfd0 <VL53L0X_RdDWord>
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80184ac:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 80184ae:	b264      	sxtb	r4, r4
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80184b0:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80184b2:	4304      	orrs	r4, r0
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80184b4:	0c1b      	lsrs	r3, r3, #16
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80184b6:	f3c6 2a06 	ubfx	sl, r6, #8, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80184ba:	b264      	sxtb	r4, r4
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80184bc:	f3c6 36c0 	ubfx	r6, r6, #15, #1
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80184c0:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80184c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
		if (((option & 2) == 2) &&
 80184c8:	f018 0302 	ands.w	r3, r8, #2
 80184cc:	9302      	str	r3, [sp, #8]
 80184ce:	f000 80db 	beq.w	8018688 <VL53L0X_get_info_from_device+0x30a>
 80184d2:	f017 0902 	ands.w	r9, r7, #2
 80184d6:	f040 80d7 	bne.w	8018688 <VL53L0X_get_info_from_device+0x30a>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80184da:	2202      	movs	r2, #2
 80184dc:	2194      	movs	r1, #148	; 0x94
 80184de:	4628      	mov	r0, r5
 80184e0:	f7fe fe08 	bl	80170f4 <VL53L0X_WrByte>
 80184e4:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 80184e6:	4628      	mov	r0, r5
 80184e8:	f7ff ff25 	bl	8018336 <VL53L0X_device_read_strobe>
 80184ec:	9b01      	ldr	r3, [sp, #4]
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80184ee:	f10d 0216 	add.w	r2, sp, #22
			Status |= VL53L0X_device_read_strobe(Dev);
 80184f2:	4303      	orrs	r3, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80184f4:	2190      	movs	r1, #144	; 0x90
 80184f6:	4628      	mov	r0, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80184f8:	431c      	orrs	r4, r3
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80184fa:	f7fe fe13 	bl	8017124 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 80184fe:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8018500:	227b      	movs	r2, #123	; 0x7b
 8018502:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8018504:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8018506:	4628      	mov	r0, r5
 8018508:	f7fe fdf4 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 801850c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 801850e:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018510:	4628      	mov	r0, r5
 8018512:	f7ff ff10 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8018516:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8018518:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 801851a:	f10d 0217 	add.w	r2, sp, #23
 801851e:	2190      	movs	r1, #144	; 0x90
 8018520:	4628      	mov	r0, r5
 8018522:	f7fe fdff 	bl	8017124 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8018526:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8018528:	2277      	movs	r2, #119	; 0x77
 801852a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 801852c:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 801852e:	4628      	mov	r0, r5
 8018530:	f7fe fde0 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8018534:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8018536:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018538:	4628      	mov	r0, r5
 801853a:	f7ff fefc 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 801853e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8018540:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018542:	aa06      	add	r2, sp, #24
 8018544:	2190      	movs	r1, #144	; 0x90
 8018546:	4628      	mov	r0, r5
 8018548:	f7f5 fd42 	bl	800dfd0 <VL53L0X_RdDWord>
			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 801854c:	9b06      	ldr	r3, [sp, #24]
 801854e:	0e5a      	lsrs	r2, r3, #25
 8018550:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8018554:	f3c3 4286 	ubfx	r2, r3, #18, #7
 8018558:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 801855c:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 8018560:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 8018564:	b264      	sxtb	r4, r4
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8018566:	f3c3 1206 	ubfx	r2, r3, #4, #7
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 801856a:	00db      	lsls	r3, r3, #3
 801856c:	f003 0378 	and.w	r3, r3, #120	; 0x78
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8018570:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018572:	4304      	orrs	r4, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8018574:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8018578:	4628      	mov	r0, r5
 801857a:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 801857c:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8018580:	f7fe fdb8 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018584:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8018586:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018588:	4628      	mov	r0, r5
 801858a:	f7ff fed4 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 801858e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8018590:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018592:	aa06      	add	r2, sp, #24
 8018594:	2190      	movs	r1, #144	; 0x90
 8018596:	4628      	mov	r0, r5
 8018598:	f7f5 fd1a 	bl	800dfd0 <VL53L0X_RdDWord>
					((TmpDWord >> 29) & 0x07f));
 801859c:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 801859e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80185a2:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 80185a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80185aa:	f3c3 5286 	ubfx	r2, r3, #22, #7
 80185ae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80185b2:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 80185b6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80185ba:	f3c3 2206 	ubfx	r2, r3, #8, #7
 80185be:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
 80185c2:	b264      	sxtb	r4, r4
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80185c4:	f3c3 0246 	ubfx	r2, r3, #1, #7
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80185c8:	019b      	lsls	r3, r3, #6
 80185ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80185ce:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80185d0:	4304      	orrs	r4, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80185d2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80185d6:	4628      	mov	r0, r5
 80185d8:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80185da:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80185de:	f7fe fd89 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80185e2:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80185e4:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80185e6:	4628      	mov	r0, r5
 80185e8:	f7ff fea5 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80185ec:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80185ee:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80185f0:	aa06      	add	r2, sp, #24
 80185f2:	2190      	movs	r1, #144	; 0x90
 80185f4:	4628      	mov	r0, r5
 80185f6:	f7f5 fceb 	bl	800dfd0 <VL53L0X_RdDWord>
					((TmpDWord >> 26) & 0x07f));
 80185fa:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 80185fc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8018600:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8018604:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8018608:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 801860c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8018610:	f3c3 3206 	ubfx	r2, r3, #12, #7
 8018614:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
 8018618:	b264      	sxtb	r4, r4
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 801861a:	f3c3 1246 	ubfx	r2, r3, #5, #7
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 801861e:	009b      	lsls	r3, r3, #2
 8018620:	f003 037c 	and.w	r3, r3, #124	; 0x7c
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8018624:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018626:	4304      	orrs	r4, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8018628:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 801862c:	4628      	mov	r0, r5
 801862e:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8018630:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8018634:	f7fe fd5e 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018638:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 801863a:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 801863c:	4628      	mov	r0, r5
 801863e:	f7ff fe7a 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8018642:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8018644:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018646:	aa06      	add	r2, sp, #24
 8018648:	2190      	movs	r1, #144	; 0x90
 801864a:	4628      	mov	r0, r5
 801864c:	f7f5 fcc0 	bl	800dfd0 <VL53L0X_RdDWord>
					((TmpDWord >> 30) & 0x07f));
 8018650:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8018652:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[18] = '\0';
 8018656:	f88d 903e 	strb.w	r9, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 801865a:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 801865e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8018662:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 8018666:	b264      	sxtb	r4, r4
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8018668:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 801866c:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018670:	4304      	orrs	r4, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8018672:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8018676:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 801867a:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801867e:	b264      	sxtb	r4, r4
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8018680:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8018684:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
		if (((option & 4) == 4) &&
 8018688:	f018 0304 	ands.w	r3, r8, #4
 801868c:	9301      	str	r3, [sp, #4]
 801868e:	f000 8113 	beq.w	80188b8 <VL53L0X_get_info_from_device+0x53a>
 8018692:	077b      	lsls	r3, r7, #29
 8018694:	f100 8110 	bmi.w	80188b8 <VL53L0X_get_info_from_device+0x53a>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8018698:	227b      	movs	r2, #123	; 0x7b
 801869a:	2194      	movs	r1, #148	; 0x94
 801869c:	4628      	mov	r0, r5
 801869e:	f7fe fd29 	bl	80170f4 <VL53L0X_WrByte>
 80186a2:	4681      	mov	r9, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80186a4:	4628      	mov	r0, r5
 80186a6:	f7ff fe46 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80186aa:	aa07      	add	r2, sp, #28
			Status |= VL53L0X_device_read_strobe(Dev);
 80186ac:	ea49 0900 	orr.w	r9, r9, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80186b0:	2190      	movs	r1, #144	; 0x90
 80186b2:	4628      	mov	r0, r5
 80186b4:	f7f5 fc8c 	bl	800dfd0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80186b8:	ea44 0909 	orr.w	r9, r4, r9
 80186bc:	fa4f f989 	sxtb.w	r9, r9
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80186c0:	ea49 0400 	orr.w	r4, r9, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80186c4:	227c      	movs	r2, #124	; 0x7c
 80186c6:	2194      	movs	r1, #148	; 0x94
 80186c8:	4628      	mov	r0, r5
 80186ca:	f7fe fd13 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80186ce:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80186d0:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80186d2:	4628      	mov	r0, r5
 80186d4:	f7ff fe2f 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80186d8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80186da:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80186dc:	aa08      	add	r2, sp, #32
 80186de:	2190      	movs	r1, #144	; 0x90
 80186e0:	4628      	mov	r0, r5
 80186e2:	f7f5 fc75 	bl	800dfd0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80186e6:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80186e8:	2273      	movs	r2, #115	; 0x73
 80186ea:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80186ec:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80186ee:	4628      	mov	r0, r5
 80186f0:	f7fe fd00 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80186f4:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80186f6:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80186f8:	4628      	mov	r0, r5
 80186fa:	f7ff fe1c 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80186fe:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8018700:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018702:	aa06      	add	r2, sp, #24
 8018704:	2190      	movs	r1, #144	; 0x90
 8018706:	4628      	mov	r0, r5
 8018708:	f7f5 fc62 	bl	800dfd0 <VL53L0X_RdDWord>
				0x0000000ff) << 8;
 801870c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 801870e:	b264      	sxtb	r4, r4
				0x0000000ff) << 8;
 8018710:	021b      	lsls	r3, r3, #8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8018712:	2274      	movs	r2, #116	; 0x74
 8018714:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018716:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8018718:	4628      	mov	r0, r5
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 801871a:	fa1f f983 	uxth.w	r9, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 801871e:	f7fe fce9 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018722:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8018724:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018726:	4628      	mov	r0, r5
 8018728:	f7ff fe05 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 801872c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 801872e:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018730:	aa06      	add	r2, sp, #24
 8018732:	2190      	movs	r1, #144	; 0x90
 8018734:	4628      	mov	r0, r5
 8018736:	f7f5 fc4b 	bl	800dfd0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 801873a:	b264      	sxtb	r4, r4
				0xff000000) >> 24);
 801873c:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8018740:	2275      	movs	r2, #117	; 0x75
 8018742:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018744:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8018746:	4628      	mov	r0, r5
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8018748:	ea43 0909 	orr.w	r9, r3, r9
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 801874c:	f7fe fcd2 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018750:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8018752:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018754:	4628      	mov	r0, r5
 8018756:	f7ff fdee 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 801875a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 801875c:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801875e:	aa06      	add	r2, sp, #24
 8018760:	2190      	movs	r1, #144	; 0x90
 8018762:	4628      	mov	r0, r5
 8018764:	f7f5 fc34 	bl	800dfd0 <VL53L0X_RdDWord>
							<< 8;
 8018768:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 801876a:	b264      	sxtb	r4, r4
							<< 8;
 801876c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 801876e:	b29b      	uxth	r3, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8018770:	2276      	movs	r2, #118	; 0x76
 8018772:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8018774:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8018776:	4628      	mov	r0, r5
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8018778:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 801877a:	f7fe fcbb 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801877e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8018780:	4304      	orrs	r4, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8018782:	4628      	mov	r0, r5
 8018784:	f7ff fdd7 	bl	8018336 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8018788:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 801878a:	4304      	orrs	r4, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801878c:	aa06      	add	r2, sp, #24
 801878e:	2190      	movs	r1, #144	; 0x90
 8018790:	4628      	mov	r0, r5
 8018792:	f7f5 fc1d 	bl	800dfd0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8018796:	b264      	sxtb	r4, r4
							>> 24);
 8018798:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 801879c:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801879e:	4304      	orrs	r4, r0
 80187a0:	b264      	sxtb	r4, r4
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80187a2:	4313      	orrs	r3, r2
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80187a4:	2200      	movs	r2, #0
 80187a6:	2181      	movs	r1, #129	; 0x81
 80187a8:	4628      	mov	r0, r5
 80187aa:	9303      	str	r3, [sp, #12]
 80187ac:	f7fe fca2 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80187b0:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80187b2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80187b4:	21ff      	movs	r1, #255	; 0xff
 80187b6:	4628      	mov	r0, r5
 80187b8:	f7fe fc9c 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80187bc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80187be:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80187c0:	f10d 0215 	add.w	r2, sp, #21
 80187c4:	2183      	movs	r1, #131	; 0x83
 80187c6:	4628      	mov	r0, r5
 80187c8:	f7fe fcac 	bl	8017124 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80187cc:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80187d0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80187d2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80187d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80187d8:	2183      	movs	r1, #131	; 0x83
 80187da:	4628      	mov	r0, r5
 80187dc:	f7fe fc8a 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80187e0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80187e2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80187e4:	2201      	movs	r2, #1
 80187e6:	21ff      	movs	r1, #255	; 0xff
 80187e8:	4628      	mov	r0, r5
 80187ea:	f7fe fc83 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80187ee:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80187f0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80187f2:	2201      	movs	r2, #1
 80187f4:	2100      	movs	r1, #0
 80187f6:	4628      	mov	r0, r5
 80187f8:	f7fe fc7c 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80187fc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80187fe:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8018800:	2200      	movs	r2, #0
 8018802:	21ff      	movs	r1, #255	; 0xff
 8018804:	4628      	mov	r0, r5
 8018806:	f7fe fc75 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 801880a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801880c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 801880e:	2200      	movs	r2, #0
 8018810:	2180      	movs	r1, #128	; 0x80
 8018812:	4628      	mov	r0, r5
 8018814:	f7fe fc6e 	bl	80170f4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8018818:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 801881a:	4320      	orrs	r0, r4
 801881c:	b240      	sxtb	r0, r0
	if ((Status == VL53L0X_ERROR_NONE) &&
 801881e:	9b03      	ldr	r3, [sp, #12]
 8018820:	2800      	cmp	r0, #0
 8018822:	f47f adb9 	bne.w	8018398 <VL53L0X_get_info_from_device+0x1a>
		if (((option & 1) == 1) &&
 8018826:	f1bb 0f00 	cmp.w	fp, #0
 801882a:	d010      	beq.n	801884e <VL53L0X_get_info_from_device+0x4d0>
 801882c:	07f8      	lsls	r0, r7, #31
 801882e:	d40e      	bmi.n	801884e <VL53L0X_get_info_from_device+0x4d0>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8018830:	f885 a113 	strb.w	sl, [r5, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8018834:	f885 6114 	strb.w	r6, [r5, #276]	; 0x114
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8018838:	a909      	add	r1, sp, #36	; 0x24
 801883a:	f205 1229 	addw	r2, r5, #297	; 0x129
 801883e:	f205 102f 	addw	r0, r5, #303	; 0x12f
					NvmRefGoodSpadMap[i];
 8018842:	f811 4b01 	ldrb.w	r4, [r1], #1
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8018846:	f802 4f01 	strb.w	r4, [r2, #1]!
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 801884a:	4282      	cmp	r2, r0
 801884c:	d1f9      	bne.n	8018842 <VL53L0X_get_info_from_device+0x4c4>
		if (((option & 2) == 2) &&
 801884e:	9a02      	ldr	r2, [sp, #8]
 8018850:	b182      	cbz	r2, 8018874 <VL53L0X_get_info_from_device+0x4f6>
 8018852:	07b9      	lsls	r1, r7, #30
 8018854:	d40e      	bmi.n	8018874 <VL53L0X_get_info_from_device+0x4f6>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8018856:	f89d 2016 	ldrb.w	r2, [sp, #22]
 801885a:	f885 20f1 	strb.w	r2, [r5, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801885e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8018862:	f885 20f2 	strb.w	r2, [r5, #242]	; 0xf2
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 8018866:	a90b      	add	r1, sp, #44	; 0x2c
 8018868:	f105 00f3 	add.w	r0, r5, #243	; 0xf3
 801886c:	9302      	str	r3, [sp, #8]
 801886e:	f7f8 fe4b 	bl	8011508 <strcpy>
 8018872:	9b02      	ldr	r3, [sp, #8]
		if (((option & 4) == 4) &&
 8018874:	9a01      	ldr	r2, [sp, #4]
 8018876:	b1aa      	cbz	r2, 80188a4 <VL53L0X_get_info_from_device+0x526>
 8018878:	077a      	lsls	r2, r7, #29
 801887a:	d413      	bmi.n	80188a4 <VL53L0X_get_info_from_device+0x526>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801887c:	9a07      	ldr	r2, [sp, #28]
 801887e:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8018882:	9a08      	ldr	r2, [sp, #32]
 8018884:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
			SignalRateMeasFixed400mmFix =
 8018888:	ea4f 2249 	mov.w	r2, r9, lsl #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801888c:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
			if (DistMeasFixed1104_400_mm != 0) {
 8018890:	b13b      	cbz	r3, 80188a2 <VL53L0X_get_info_from_device+0x524>
					OffsetFixed1104_mm =
 8018892:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
						* 1000) >> 4;
 8018896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801889a:	4353      	muls	r3, r2
 801889c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 801889e:	425b      	negs	r3, r3
 80188a0:	b21b      	sxth	r3, r3
			PALDevDataSet(Dev,
 80188a2:	60eb      	str	r3, [r5, #12]
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80188a4:	ea47 0708 	orr.w	r7, r7, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80188a8:	f885 70f0 	strb.w	r7, [r5, #240]	; 0xf0
 80188ac:	e573      	b.n	8018396 <VL53L0X_get_info_from_device+0x18>
	uint8_t ReferenceSpadType = 0;
 80188ae:	465e      	mov	r6, fp
	uint8_t ReferenceSpadCount = 0;
 80188b0:	46da      	mov	sl, fp
 80188b2:	e609      	b.n	80184c8 <VL53L0X_get_info_from_device+0x14a>
 80188b4:	46b2      	mov	sl, r6
 80188b6:	e607      	b.n	80184c8 <VL53L0X_get_info_from_device+0x14a>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80188b8:	f04f 0900 	mov.w	r9, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 80188bc:	464b      	mov	r3, r9
 80188be:	e771      	b.n	80187a4 <VL53L0X_get_info_from_device+0x426>

080188c0 <VL53L0X_encode_timeout>:
	if (timeout_macro_clks > 0) {
 80188c0:	b140      	cbz	r0, 80188d4 <VL53L0X_encode_timeout+0x14>
		ls_byte = timeout_macro_clks - 1;
 80188c2:	3801      	subs	r0, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80188c4:	2300      	movs	r3, #0
 80188c6:	28ff      	cmp	r0, #255	; 0xff
 80188c8:	f103 0201 	add.w	r2, r3, #1
 80188cc:	d803      	bhi.n	80188d6 <VL53L0X_encode_timeout+0x16>
		encoded_timeout = (ms_byte << 8)
 80188ce:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80188d2:	b280      	uxth	r0, r0
}
 80188d4:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 80188d6:	0840      	lsrs	r0, r0, #1
 80188d8:	4613      	mov	r3, r2
 80188da:	e7f4      	b.n	80188c6 <VL53L0X_encode_timeout+0x6>

080188dc <VL53L0X_decode_timeout>:
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80188dc:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80188de:	0a00      	lsrs	r0, r0, #8
 80188e0:	fa03 f000 	lsl.w	r0, r3, r0
}
 80188e4:	3001      	adds	r0, #1
 80188e6:	4770      	bx	lr

080188e8 <get_sequence_step_timeout>:
{
 80188e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80188ec:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 80188ee:	f04f 0500 	mov.w	r5, #0
{
 80188f2:	4607      	mov	r7, r0
 80188f4:	4616      	mov	r6, r2
	uint8_t EncodedTimeOutByte = 0;
 80188f6:	f88d 5003 	strb.w	r5, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 80188fa:	f8ad 5004 	strh.w	r5, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80188fe:	d81c      	bhi.n	801893a <get_sequence_step_timeout+0x52>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8018900:	f10d 0202 	add.w	r2, sp, #2
 8018904:	4629      	mov	r1, r5
 8018906:	f7fe fdd8 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 801890a:	4604      	mov	r4, r0
 801890c:	b930      	cbnz	r0, 801891c <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 801890e:	f10d 0203 	add.w	r2, sp, #3
 8018912:	2146      	movs	r1, #70	; 0x46
 8018914:	4638      	mov	r0, r7
 8018916:	f7fe fc05 	bl	8017124 <VL53L0X_RdByte>
 801891a:	4604      	mov	r4, r0
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 801891c:	f89d 0003 	ldrb.w	r0, [sp, #3]
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8018920:	f7ff ffdc 	bl	80188dc <VL53L0X_decode_timeout>
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8018924:	b281      	uxth	r1, r0
 8018926:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801892a:	4638      	mov	r0, r7
 801892c:	f7f6 f98c 	bl	800ec48 <VL53L0X_calc_timeout_us>
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8018930:	6030      	str	r0, [r6, #0]
}
 8018932:	4620      	mov	r0, r4
 8018934:	b004      	add	sp, #16
 8018936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 801893a:	2903      	cmp	r1, #3
 801893c:	d118      	bne.n	8018970 <get_sequence_step_timeout+0x88>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 801893e:	f10d 0202 	add.w	r2, sp, #2
 8018942:	4629      	mov	r1, r5
 8018944:	f7fe fdb9 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8018948:	4604      	mov	r4, r0
 801894a:	2800      	cmp	r0, #0
 801894c:	d146      	bne.n	80189dc <get_sequence_step_timeout+0xf4>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 801894e:	4601      	mov	r1, r0
 8018950:	f10d 0202 	add.w	r2, sp, #2
 8018954:	4638      	mov	r0, r7
 8018956:	f7fe fdb0 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 801895a:	4604      	mov	r4, r0
 801895c:	b928      	cbnz	r0, 801896a <get_sequence_step_timeout+0x82>
				Status = VL53L0X_RdWord(Dev,
 801895e:	aa01      	add	r2, sp, #4
 8018960:	2151      	movs	r1, #81	; 0x51
 8018962:	4638      	mov	r0, r7
 8018964:	f7f5 fb08 	bl	800df78 <VL53L0X_RdWord>
 8018968:	4604      	mov	r4, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 801896a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801896e:	e7d7      	b.n	8018920 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8018970:	2904      	cmp	r1, #4
 8018972:	d135      	bne.n	80189e0 <get_sequence_step_timeout+0xf8>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8018974:	a902      	add	r1, sp, #8
 8018976:	f7fe fe00 	bl	801757a <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 801897a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801897e:	b34b      	cbz	r3, 80189d4 <get_sequence_step_timeout+0xec>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8018980:	f10d 0202 	add.w	r2, sp, #2
 8018984:	4629      	mov	r1, r5
 8018986:	4638      	mov	r0, r7
 8018988:	f7fe fd97 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
 801898c:	4604      	mov	r4, r0
			if (Status == VL53L0X_ERROR_NONE) {
 801898e:	bb18      	cbnz	r0, 80189d8 <get_sequence_step_timeout+0xf0>
				Status = VL53L0X_RdWord(Dev,
 8018990:	aa01      	add	r2, sp, #4
 8018992:	2151      	movs	r1, #81	; 0x51
 8018994:	4638      	mov	r0, r7
 8018996:	f7f5 faef 	bl	800df78 <VL53L0X_RdWord>
 801899a:	4604      	mov	r4, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 801899c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80189a0:	f7ff ff9c 	bl	80188dc <VL53L0X_decode_timeout>
 80189a4:	b285      	uxth	r5, r0
		if (Status == VL53L0X_ERROR_NONE) {
 80189a6:	b9bc      	cbnz	r4, 80189d8 <get_sequence_step_timeout+0xf0>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80189a8:	f10d 0202 	add.w	r2, sp, #2
 80189ac:	2101      	movs	r1, #1
 80189ae:	4638      	mov	r0, r7
 80189b0:	f7fe fd83 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80189b4:	4604      	mov	r4, r0
 80189b6:	b978      	cbnz	r0, 80189d8 <get_sequence_step_timeout+0xf0>
			Status = VL53L0X_RdWord(Dev,
 80189b8:	f10d 0206 	add.w	r2, sp, #6
 80189bc:	2171      	movs	r1, #113	; 0x71
 80189be:	4638      	mov	r0, r7
 80189c0:	f7f5 fada 	bl	800df78 <VL53L0X_RdWord>
 80189c4:	4604      	mov	r4, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80189c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80189ca:	f7ff ff87 	bl	80188dc <VL53L0X_decode_timeout>
 80189ce:	b280      	uxth	r0, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80189d0:	1b40      	subs	r0, r0, r5
 80189d2:	e7a7      	b.n	8018924 <get_sequence_step_timeout+0x3c>
		PreRangeTimeOutMClks = 0;
 80189d4:	461d      	mov	r5, r3
 80189d6:	e7e7      	b.n	80189a8 <get_sequence_step_timeout+0xc0>
	uint16_t FinalRangeTimeOutMClks = 0;
 80189d8:	2000      	movs	r0, #0
 80189da:	e7f9      	b.n	80189d0 <get_sequence_step_timeout+0xe8>
	uint32_t TimeoutMicroSeconds = 0;
 80189dc:	4628      	mov	r0, r5
 80189de:	e7a7      	b.n	8018930 <get_sequence_step_timeout+0x48>
 80189e0:	4628      	mov	r0, r5
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80189e2:	462c      	mov	r4, r5
 80189e4:	e7a4      	b.n	8018930 <get_sequence_step_timeout+0x48>

080189e6 <set_sequence_step_timeout>:
{
 80189e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80189e8:	2902      	cmp	r1, #2
{
 80189ea:	b085      	sub	sp, #20
 80189ec:	4605      	mov	r5, r0
 80189ee:	4616      	mov	r6, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80189f0:	d81e      	bhi.n	8018a30 <set_sequence_step_timeout+0x4a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80189f2:	f10d 0205 	add.w	r2, sp, #5
 80189f6:	2100      	movs	r1, #0
 80189f8:	f7fe fd5f 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80189fc:	4604      	mov	r4, r0
 80189fe:	b9a0      	cbnz	r0, 8018a2a <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8018a00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018a04:	4631      	mov	r1, r6
 8018a06:	4628      	mov	r0, r5
 8018a08:	f7f6 f90a 	bl	800ec20 <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
 8018a0c:	b283      	uxth	r3, r0
 8018a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut =
 8018a12:	bf9a      	itte	ls
 8018a14:	f100 32ff 	addls.w	r2, r0, #4294967295	; 0xffffffff
 8018a18:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 8018a1a:	22ff      	movhi	r2, #255	; 0xff
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8018a1c:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			Status = VL53L0X_WrByte(Dev,
 8018a20:	2146      	movs	r1, #70	; 0x46
 8018a22:	4628      	mov	r0, r5
 8018a24:	f7fe fb66 	bl	80170f4 <VL53L0X_WrByte>
 8018a28:	4604      	mov	r4, r0
}
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	b005      	add	sp, #20
 8018a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8018a30:	2903      	cmp	r1, #3
 8018a32:	d120      	bne.n	8018a76 <set_sequence_step_timeout+0x90>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8018a34:	f10d 0205 	add.w	r2, sp, #5
 8018a38:	2100      	movs	r1, #0
 8018a3a:	f7fe fd3e 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 8018a3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8018a42:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8018a44:	4631      	mov	r1, r6
 8018a46:	4628      	mov	r0, r5
 8018a48:	f7f6 f8ea 	bl	800ec20 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8018a4c:	b280      	uxth	r0, r0
 8018a4e:	f7ff ff37 	bl	80188c0 <VL53L0X_encode_timeout>
 8018a52:	4602      	mov	r2, r0
 8018a54:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8018a58:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8018a5c:	2c00      	cmp	r4, #0
 8018a5e:	d1e4      	bne.n	8018a2a <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 8018a60:	2151      	movs	r1, #81	; 0x51
 8018a62:	4628      	mov	r0, r5
 8018a64:	f7f5 fa1e 	bl	800dea4 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8018a68:	4604      	mov	r4, r0
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	d1dd      	bne.n	8018a2a <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8018a6e:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
				Status = VL53L0X_WrWord(Dev,
 8018a72:	2400      	movs	r4, #0
 8018a74:	e7d9      	b.n	8018a2a <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8018a76:	2904      	cmp	r1, #4
 8018a78:	d139      	bne.n	8018aee <set_sequence_step_timeout+0x108>
			VL53L0X_GetSequenceStepEnables(Dev,
 8018a7a:	a902      	add	r1, sp, #8
 8018a7c:	f7fe fd7d 	bl	801757a <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 8018a80:	f89d 700b 	ldrb.w	r7, [sp, #11]
 8018a84:	b1b7      	cbz	r7, 8018ab4 <set_sequence_step_timeout+0xce>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8018a86:	f10d 0205 	add.w	r2, sp, #5
 8018a8a:	2100      	movs	r1, #0
 8018a8c:	4628      	mov	r0, r5
 8018a8e:	f7fe fd14 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 8018a92:	4604      	mov	r4, r0
 8018a94:	2800      	cmp	r0, #0
 8018a96:	d1c8      	bne.n	8018a2a <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8018a98:	f10d 0206 	add.w	r2, sp, #6
 8018a9c:	2151      	movs	r1, #81	; 0x51
 8018a9e:	4628      	mov	r0, r5
 8018aa0:	f7f5 fa6a 	bl	800df78 <VL53L0X_RdWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8018aa4:	4604      	mov	r4, r0
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	d1bf      	bne.n	8018a2a <set_sequence_step_timeout+0x44>
						VL53L0X_decode_timeout(
 8018aaa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018aae:	f7ff ff15 	bl	80188dc <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 8018ab2:	b287      	uxth	r7, r0
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8018ab4:	f10d 0205 	add.w	r2, sp, #5
 8018ab8:	2101      	movs	r1, #1
 8018aba:	4628      	mov	r0, r5
 8018abc:	f7fe fcfd 	bl	80174ba <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8018ac0:	4604      	mov	r4, r0
 8018ac2:	2800      	cmp	r0, #0
 8018ac4:	d1b1      	bne.n	8018a2a <set_sequence_step_timeout+0x44>
					VL53L0X_calc_timeout_mclks(Dev,
 8018ac6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018aca:	4631      	mov	r1, r6
 8018acc:	4628      	mov	r0, r5
 8018ace:	f7f6 f8a7 	bl	800ec20 <VL53L0X_calc_timeout_mclks>
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8018ad2:	4438      	add	r0, r7
 8018ad4:	f7ff fef4 	bl	80188c0 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8018ad8:	2171      	movs	r1, #113	; 0x71
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8018ada:	4602      	mov	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
 8018adc:	4628      	mov	r0, r5
 8018ade:	f7f5 f9e1 	bl	800dea4 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 8018ae2:	4604      	mov	r4, r0
 8018ae4:	2800      	cmp	r0, #0
 8018ae6:	d1a0      	bne.n	8018a2a <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8018ae8:	f8c5 60dc 	str.w	r6, [r5, #220]	; 0xdc
 8018aec:	e7c1      	b.n	8018a72 <set_sequence_step_timeout+0x8c>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8018aee:	f06f 0403 	mvn.w	r4, #3
 8018af2:	e79a      	b.n	8018a2a <set_sequence_step_timeout+0x44>

08018af4 <VL53L0X_set_vcsel_pulse_period>:
{
 8018af4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t PhaseCalInt = 0;
 8018af6:	2300      	movs	r3, #0
 8018af8:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8018afc:	07d3      	lsls	r3, r2, #31
{
 8018afe:	4605      	mov	r5, r0
 8018b00:	4616      	mov	r6, r2
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8018b02:	d405      	bmi.n	8018b10 <VL53L0X_set_vcsel_pulse_period+0x1c>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8018b04:	b939      	cbnz	r1, 8018b16 <VL53L0X_set_vcsel_pulse_period+0x22>
 8018b06:	f1a2 030c 	sub.w	r3, r2, #12
 8018b0a:	b2da      	uxtb	r2, r3
 8018b0c:	2a06      	cmp	r2, #6
 8018b0e:	d915      	bls.n	8018b3c <VL53L0X_set_vcsel_pulse_period+0x48>
 8018b10:	f06f 0003 	mvn.w	r0, #3
 8018b14:	e02a      	b.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8018b16:	2901      	cmp	r1, #1
 8018b18:	d1fa      	bne.n	8018b10 <VL53L0X_set_vcsel_pulse_period+0x1c>
 8018b1a:	f1a2 0308 	sub.w	r3, r2, #8
 8018b1e:	b2da      	uxtb	r2, r3
 8018b20:	2a06      	cmp	r2, #6
 8018b22:	d8f5      	bhi.n	8018b10 <VL53L0X_set_vcsel_pulse_period+0x1c>
		if (VCSELPulsePeriodPCLK == 8) {
 8018b24:	2b06      	cmp	r3, #6
 8018b26:	f200 812f 	bhi.w	8018d88 <VL53L0X_set_vcsel_pulse_period+0x294>
 8018b2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018b2e:	0048      	.short	0x0048
 8018b30:	0079012d 	.word	0x0079012d
 8018b34:	00ab012d 	.word	0x00ab012d
 8018b38:	00dd012d 	.word	0x00dd012d
		if (VCSELPulsePeriodPCLK == 12) {
 8018b3c:	2b06      	cmp	r3, #6
 8018b3e:	f200 8105 	bhi.w	8018d4c <VL53L0X_set_vcsel_pulse_period+0x258>
 8018b42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018b46:	0007      	.short	0x0007
 8018b48:	00150103 	.word	0x00150103
 8018b4c:	00220103 	.word	0x00220103
 8018b50:	002f0103 	.word	0x002f0103
			Status = VL53L0X_WrByte(Dev,
 8018b54:	2218      	movs	r2, #24
 8018b56:	2157      	movs	r1, #87	; 0x57
 8018b58:	f7fe facc 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018b5c:	2208      	movs	r2, #8
 8018b5e:	2156      	movs	r1, #86	; 0x56
 8018b60:	4628      	mov	r0, r5
 8018b62:	f7fe fac7 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8018b66:	2800      	cmp	r0, #0
 8018b68:	f000 8120 	beq.w	8018dac <VL53L0X_set_vcsel_pulse_period+0x2b8>
}
 8018b6c:	b004      	add	sp, #16
 8018b6e:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrByte(Dev,
 8018b70:	2230      	movs	r2, #48	; 0x30
 8018b72:	2157      	movs	r1, #87	; 0x57
 8018b74:	f7fe fabe 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018b78:	2208      	movs	r2, #8
 8018b7a:	2156      	movs	r1, #86	; 0x56
 8018b7c:	4628      	mov	r0, r5
 8018b7e:	f7fe fab9 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8018b82:	2800      	cmp	r0, #0
 8018b84:	d1f2      	bne.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018b86:	2406      	movs	r4, #6
 8018b88:	e0e3      	b.n	8018d52 <VL53L0X_set_vcsel_pulse_period+0x25e>
			Status = VL53L0X_WrByte(Dev,
 8018b8a:	2240      	movs	r2, #64	; 0x40
 8018b8c:	2157      	movs	r1, #87	; 0x57
 8018b8e:	f7fe fab1 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018b92:	2208      	movs	r2, #8
 8018b94:	2156      	movs	r1, #86	; 0x56
 8018b96:	4628      	mov	r0, r5
 8018b98:	f7fe faac 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	d1e5      	bne.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018ba0:	2407      	movs	r4, #7
 8018ba2:	e0d6      	b.n	8018d52 <VL53L0X_set_vcsel_pulse_period+0x25e>
			Status = VL53L0X_WrByte(Dev,
 8018ba4:	2250      	movs	r2, #80	; 0x50
 8018ba6:	2157      	movs	r1, #87	; 0x57
 8018ba8:	f7fe faa4 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018bac:	2208      	movs	r2, #8
 8018bae:	2156      	movs	r1, #86	; 0x56
 8018bb0:	4628      	mov	r0, r5
 8018bb2:	f7fe fa9f 	bl	80170f4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8018bb6:	2800      	cmp	r0, #0
 8018bb8:	d1d8      	bne.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018bba:	2408      	movs	r4, #8
 8018bbc:	e0c9      	b.n	8018d52 <VL53L0X_set_vcsel_pulse_period+0x25e>
			Status = VL53L0X_WrByte(Dev,
 8018bbe:	2210      	movs	r2, #16
 8018bc0:	2148      	movs	r1, #72	; 0x48
 8018bc2:	f7fe fa97 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018bc6:	2208      	movs	r2, #8
 8018bc8:	2147      	movs	r1, #71	; 0x47
 8018bca:	4628      	mov	r0, r5
 8018bcc:	f7fe fa92 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018bd0:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8018bd2:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018bd4:	2132      	movs	r1, #50	; 0x32
 8018bd6:	4628      	mov	r0, r5
 8018bd8:	f7fe fa8c 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018bdc:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
 8018bde:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018be0:	2130      	movs	r1, #48	; 0x30
 8018be2:	4628      	mov	r0, r5
 8018be4:	f7fe fa86 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018be8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018bea:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018bec:	2201      	movs	r2, #1
 8018bee:	21ff      	movs	r1, #255	; 0xff
 8018bf0:	4628      	mov	r0, r5
 8018bf2:	f7fe fa7f 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018bf6:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018bf8:	2230      	movs	r2, #48	; 0x30
 8018bfa:	4611      	mov	r1, r2
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018bfc:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018bfe:	4628      	mov	r0, r5
 8018c00:	f7fe fa78 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018c04:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018c06:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018c08:	2200      	movs	r2, #0
 8018c0a:	21ff      	movs	r1, #255	; 0xff
 8018c0c:	4628      	mov	r0, r5
 8018c0e:	f7fe fa71 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018c12:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018c14:	4320      	orrs	r0, r4
 8018c16:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	d1a7      	bne.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018c1c:	2403      	movs	r4, #3
 8018c1e:	e0b6      	b.n	8018d8e <VL53L0X_set_vcsel_pulse_period+0x29a>
			Status = VL53L0X_WrByte(Dev,
 8018c20:	2228      	movs	r2, #40	; 0x28
 8018c22:	2148      	movs	r1, #72	; 0x48
 8018c24:	f7fe fa66 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018c28:	2208      	movs	r2, #8
 8018c2a:	2147      	movs	r1, #71	; 0x47
 8018c2c:	4628      	mov	r0, r5
 8018c2e:	f7fe fa61 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018c32:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8018c34:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018c36:	2132      	movs	r1, #50	; 0x32
 8018c38:	4628      	mov	r0, r5
 8018c3a:	f7fe fa5b 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018c3e:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8018c40:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018c42:	2130      	movs	r1, #48	; 0x30
 8018c44:	4628      	mov	r0, r5
 8018c46:	f7fe fa55 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018c4a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018c4c:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018c4e:	2201      	movs	r2, #1
 8018c50:	21ff      	movs	r1, #255	; 0xff
 8018c52:	4628      	mov	r0, r5
 8018c54:	f7fe fa4e 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018c58:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018c5a:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018c5c:	2220      	movs	r2, #32
 8018c5e:	2130      	movs	r1, #48	; 0x30
 8018c60:	4628      	mov	r0, r5
 8018c62:	f7fe fa47 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018c66:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018c68:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	21ff      	movs	r1, #255	; 0xff
 8018c6e:	4628      	mov	r0, r5
 8018c70:	f7fe fa40 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018c74:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018c76:	4320      	orrs	r0, r4
 8018c78:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8018c7a:	2800      	cmp	r0, #0
 8018c7c:	f47f af76 	bne.w	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018c80:	2404      	movs	r4, #4
 8018c82:	e084      	b.n	8018d8e <VL53L0X_set_vcsel_pulse_period+0x29a>
			Status = VL53L0X_WrByte(Dev,
 8018c84:	2238      	movs	r2, #56	; 0x38
 8018c86:	2148      	movs	r1, #72	; 0x48
 8018c88:	f7fe fa34 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018c8c:	2208      	movs	r2, #8
 8018c8e:	2147      	movs	r1, #71	; 0x47
 8018c90:	4628      	mov	r0, r5
 8018c92:	f7fe fa2f 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018c96:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8018c98:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018c9a:	2132      	movs	r1, #50	; 0x32
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	f7fe fa29 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018ca2:	2208      	movs	r2, #8
			Status |= VL53L0X_WrByte(Dev,
 8018ca4:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018ca6:	2130      	movs	r1, #48	; 0x30
 8018ca8:	4628      	mov	r0, r5
 8018caa:	f7fe fa23 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018cae:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018cb0:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	21ff      	movs	r1, #255	; 0xff
 8018cb6:	4628      	mov	r0, r5
 8018cb8:	f7fe fa1c 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018cbc:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018cbe:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018cc0:	2220      	movs	r2, #32
 8018cc2:	2130      	movs	r1, #48	; 0x30
 8018cc4:	4628      	mov	r0, r5
 8018cc6:	f7fe fa15 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018cca:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018ccc:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018cce:	2200      	movs	r2, #0
 8018cd0:	21ff      	movs	r1, #255	; 0xff
 8018cd2:	4628      	mov	r0, r5
 8018cd4:	f7fe fa0e 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018cd8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018cda:	4320      	orrs	r0, r4
 8018cdc:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8018cde:	2800      	cmp	r0, #0
 8018ce0:	f47f af44 	bne.w	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018ce4:	2405      	movs	r4, #5
 8018ce6:	e052      	b.n	8018d8e <VL53L0X_set_vcsel_pulse_period+0x29a>
			Status = VL53L0X_WrByte(Dev,
 8018ce8:	2248      	movs	r2, #72	; 0x48
 8018cea:	4611      	mov	r1, r2
 8018cec:	f7fe fa02 	bl	80170f4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8018cf0:	2208      	movs	r2, #8
 8018cf2:	2147      	movs	r1, #71	; 0x47
 8018cf4:	4628      	mov	r0, r5
 8018cf6:	f7fe f9fd 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018cfa:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8018cfc:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018cfe:	2132      	movs	r1, #50	; 0x32
 8018d00:	4628      	mov	r0, r5
 8018d02:	f7fe f9f7 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018d06:	2207      	movs	r2, #7
			Status |= VL53L0X_WrByte(Dev,
 8018d08:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018d0a:	2130      	movs	r1, #48	; 0x30
 8018d0c:	4628      	mov	r0, r5
 8018d0e:	f7fe f9f1 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018d12:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018d14:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018d16:	2201      	movs	r2, #1
 8018d18:	21ff      	movs	r1, #255	; 0xff
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	f7fe f9ea 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018d20:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018d22:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8018d24:	2220      	movs	r2, #32
 8018d26:	2130      	movs	r1, #48	; 0x30
 8018d28:	4628      	mov	r0, r5
 8018d2a:	f7fe f9e3 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8018d2e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8018d30:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018d32:	2200      	movs	r2, #0
 8018d34:	21ff      	movs	r1, #255	; 0xff
 8018d36:	4628      	mov	r0, r5
 8018d38:	f7fe f9dc 	bl	80170f4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8018d3c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8018d3e:	4320      	orrs	r0, r4
 8018d40:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8018d42:	2800      	cmp	r0, #0
 8018d44:	f47f af12 	bne.w	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018d48:	2406      	movs	r4, #6
 8018d4a:	e020      	b.n	8018d8e <VL53L0X_set_vcsel_pulse_period+0x29a>
 8018d4c:	0874      	lsrs	r4, r6, #1
 8018d4e:	3c01      	subs	r4, #1
 8018d50:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 8018d52:	aa02      	add	r2, sp, #8
 8018d54:	2103      	movs	r1, #3
 8018d56:	4628      	mov	r0, r5
 8018d58:	f7ff fdc6 	bl	80188e8 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8018d5c:	b988      	cbnz	r0, 8018d82 <VL53L0X_set_vcsel_pulse_period+0x28e>
				Status = get_sequence_step_timeout(Dev,
 8018d5e:	aa03      	add	r2, sp, #12
 8018d60:	2102      	movs	r1, #2
 8018d62:	4628      	mov	r0, r5
 8018d64:	f7ff fdc0 	bl	80188e8 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8018d68:	b958      	cbnz	r0, 8018d82 <VL53L0X_set_vcsel_pulse_period+0x28e>
				Status = VL53L0X_WrByte(Dev,
 8018d6a:	4622      	mov	r2, r4
 8018d6c:	2150      	movs	r1, #80	; 0x50
 8018d6e:	4628      	mov	r0, r5
 8018d70:	f7fe f9c0 	bl	80170f4 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 8018d74:	b928      	cbnz	r0, 8018d82 <VL53L0X_set_vcsel_pulse_period+0x28e>
				Status = set_sequence_step_timeout(Dev,
 8018d76:	9a02      	ldr	r2, [sp, #8]
 8018d78:	2103      	movs	r1, #3
 8018d7a:	4628      	mov	r0, r5
 8018d7c:	f7ff fe33 	bl	80189e6 <set_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8018d80:	b1b0      	cbz	r0, 8018db0 <VL53L0X_set_vcsel_pulse_period+0x2bc>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8018d82:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
 8018d86:	e6f1      	b.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018d88:	0874      	lsrs	r4, r6, #1
 8018d8a:	3c01      	subs	r4, #1
 8018d8c:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 8018d8e:	aa01      	add	r2, sp, #4
 8018d90:	2104      	movs	r1, #4
 8018d92:	4628      	mov	r0, r5
 8018d94:	f7ff fda8 	bl	80188e8 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8018d98:	b928      	cbnz	r0, 8018da6 <VL53L0X_set_vcsel_pulse_period+0x2b2>
				Status = VL53L0X_WrByte(Dev,
 8018d9a:	4622      	mov	r2, r4
 8018d9c:	2170      	movs	r1, #112	; 0x70
 8018d9e:	4628      	mov	r0, r5
 8018da0:	f7fe f9a8 	bl	80170f4 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 8018da4:	b1e8      	cbz	r0, 8018de2 <VL53L0X_set_vcsel_pulse_period+0x2ee>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8018da6:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
	if (Status == VL53L0X_ERROR_NONE) {
 8018daa:	e6df      	b.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8018dac:	2405      	movs	r4, #5
 8018dae:	e7d0      	b.n	8018d52 <VL53L0X_set_vcsel_pulse_period+0x25e>
				Status = set_sequence_step_timeout(Dev,
 8018db0:	9a03      	ldr	r2, [sp, #12]
 8018db2:	2102      	movs	r1, #2
 8018db4:	4628      	mov	r0, r5
 8018db6:	f7ff fe16 	bl	80189e6 <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8018dba:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	f47f aed4 	bne.w	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8018dc4:	6969      	ldr	r1, [r5, #20]
 8018dc6:	4628      	mov	r0, r5
 8018dc8:	f7fe fb73 	bl	80174b2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8018dcc:	2800      	cmp	r0, #0
 8018dce:	f47f aecd 	bne.w	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
		Status = VL53L0X_perform_phase_calibration(
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	2301      	movs	r3, #1
 8018dd6:	f10d 0103 	add.w	r1, sp, #3
 8018dda:	4628      	mov	r0, r5
 8018ddc:	f7ff f8f5 	bl	8017fca <VL53L0X_perform_phase_calibration>
 8018de0:	e6c4      	b.n	8018b6c <VL53L0X_set_vcsel_pulse_period+0x78>
				Status = set_sequence_step_timeout(Dev,
 8018de2:	9a01      	ldr	r2, [sp, #4]
 8018de4:	2104      	movs	r1, #4
 8018de6:	4628      	mov	r0, r5
 8018de8:	f7ff fdfd 	bl	80189e6 <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8018dec:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
 8018df0:	e7e5      	b.n	8018dbe <VL53L0X_set_vcsel_pulse_period+0x2ca>

08018df2 <VL53L0X_get_vcsel_pulse_period>:
{
 8018df2:	b513      	push	{r0, r1, r4, lr}
 8018df4:	4614      	mov	r4, r2
	switch (VcselPeriodType) {
 8018df6:	b129      	cbz	r1, 8018e04 <VL53L0X_get_vcsel_pulse_period+0x12>
 8018df8:	2901      	cmp	r1, #1
 8018dfa:	d010      	beq.n	8018e1e <VL53L0X_get_vcsel_pulse_period+0x2c>
 8018dfc:	f06f 0003 	mvn.w	r0, #3
}
 8018e00:	b002      	add	sp, #8
 8018e02:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 8018e04:	f10d 0207 	add.w	r2, sp, #7
 8018e08:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 8018e0a:	f7fe f98b 	bl	8017124 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	d1f6      	bne.n	8018e00 <VL53L0X_get_vcsel_pulse_period+0xe>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8018e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018e16:	3301      	adds	r3, #1
 8018e18:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8018e1a:	7023      	strb	r3, [r4, #0]
 8018e1c:	e7f0      	b.n	8018e00 <VL53L0X_get_vcsel_pulse_period+0xe>
		Status = VL53L0X_RdByte(Dev,
 8018e1e:	f10d 0207 	add.w	r2, sp, #7
 8018e22:	2170      	movs	r1, #112	; 0x70
 8018e24:	e7f1      	b.n	8018e0a <VL53L0X_get_vcsel_pulse_period+0x18>

08018e26 <VL53L0X_set_measurement_timing_budget_micro_seconds>:
{
 8018e26:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8018e28:	2300      	movs	r3, #0
{
 8018e2a:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8018e2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8018e30:	e9cd 2300 	strd	r2, r3, [sp]
	if (MeasurementTimingBudgetMicroSeconds
 8018e34:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8018e38:	4299      	cmp	r1, r3
{
 8018e3a:	4606      	mov	r6, r0
 8018e3c:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8018e3e:	d804      	bhi.n	8018e4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
		return Status;
 8018e40:	f06f 0503 	mvn.w	r5, #3
}
 8018e44:	4628      	mov	r0, r5
 8018e46:	b005      	add	sp, #20
 8018e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8018e4a:	a902      	add	r1, sp, #8
 8018e4c:	f7fe fb95 	bl	801757a <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 8018e50:	4605      	mov	r5, r0
 8018e52:	2800      	cmp	r0, #0
 8018e54:	d1f6      	bne.n	8018e44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		SchedulerSequenceSteps.MsrcOn ||
 8018e56:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8018e5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8018e5e:	4313      	orrs	r3, r2
 8018e60:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8018e64:	4313      	orrs	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8018e66:	f6a7 3436 	subw	r4, r7, #2870	; 0xb36
		SchedulerSequenceSteps.MsrcOn ||
 8018e6a:	d01b      	beq.n	8018ea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
		Status = get_sequence_step_timeout(Dev,
 8018e6c:	466a      	mov	r2, sp
 8018e6e:	2102      	movs	r1, #2
 8018e70:	4630      	mov	r0, r6
 8018e72:	f7ff fd39 	bl	80188e8 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8018e76:	2800      	cmp	r0, #0
 8018e78:	d13b      	bne.n	8018ef2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
		if (SchedulerSequenceSteps.TccOn) {
 8018e7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8018e7e:	b12b      	cbz	r3, 8018e8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x66>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8018e80:	9b00      	ldr	r3, [sp, #0]
 8018e82:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8018e86:	429c      	cmp	r4, r3
 8018e88:	d9da      	bls.n	8018e40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 8018e8a:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8018e8c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8018e90:	b323      	cbz	r3, 8018edc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xb6>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8018e92:	9b00      	ldr	r3, [sp, #0]
 8018e94:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8018e98:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8018e9c:	ea4f 0243 	mov.w	r2, r3, lsl #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8018ea0:	d9ce      	bls.n	8018e40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8018ea2:	1aa4      	subs	r4, r4, r2
	if (SchedulerSequenceSteps.PreRangeOn) {
 8018ea4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8018ea8:	b15b      	cbz	r3, 8018ec2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9c>
		Status = get_sequence_step_timeout(Dev,
 8018eaa:	aa01      	add	r2, sp, #4
 8018eac:	2103      	movs	r1, #3
 8018eae:	4630      	mov	r0, r6
 8018eb0:	f7ff fd1a 	bl	80188e8 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 8018eb4:	9b01      	ldr	r3, [sp, #4]
 8018eb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8018eba:	429c      	cmp	r4, r3
 8018ebc:	d9c0      	bls.n	8018e40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 8018ebe:	b9c0      	cbnz	r0, 8018ef2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8018ec0:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 8018ec2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d0bc      	beq.n	8018e44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 8018eca:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 8018ece:	2104      	movs	r1, #4
 8018ed0:	4630      	mov	r0, r6
 8018ed2:	f7ff fd88 	bl	80189e6 <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8018ed6:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 8018ed8:	4605      	mov	r5, r0
		VL53L0X_SETPARAMETERFIELD(Dev,
 8018eda:	e7b3      	b.n	8018e44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8018edc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d0df      	beq.n	8018ea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8018ee4:	9b00      	ldr	r3, [sp, #0]
 8018ee6:	f503 7325 	add.w	r3, r3, #660	; 0x294
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8018eea:	429c      	cmp	r4, r3
 8018eec:	d9a8      	bls.n	8018e40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8018eee:	1ae4      	subs	r4, r4, r3
 8018ef0:	e7d8      	b.n	8018ea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
 8018ef2:	4605      	mov	r5, r0
 8018ef4:	e7a6      	b.n	8018e44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

08018ef6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
{
 8018ef6:	b570      	push	{r4, r5, r6, lr}
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8018ef8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
 8018efc:	b086      	sub	sp, #24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8018efe:	2300      	movs	r3, #0
 8018f00:	e9cd 2302 	strd	r2, r3, [sp, #8]
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8018f04:	f640 3336 	movw	r3, #2870	; 0xb36
 8018f08:	600b      	str	r3, [r1, #0]
{
 8018f0a:	460c      	mov	r4, r1
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8018f0c:	a904      	add	r1, sp, #16
{
 8018f0e:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8018f10:	f7fe fb33 	bl	801757a <VL53L0X_GetSequenceStepEnables>
	if (Status != VL53L0X_ERROR_NONE) {
 8018f14:	4605      	mov	r5, r0
 8018f16:	2800      	cmp	r0, #0
 8018f18:	d136      	bne.n	8018f88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		SchedulerSequenceSteps.MsrcOn ||
 8018f1a:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8018f1e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018f22:	4313      	orrs	r3, r2
 8018f24:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8018f28:	4313      	orrs	r3, r2
 8018f2a:	d019      	beq.n	8018f60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		Status = get_sequence_step_timeout(Dev,
 8018f2c:	aa02      	add	r2, sp, #8
 8018f2e:	2102      	movs	r1, #2
 8018f30:	4630      	mov	r0, r6
 8018f32:	f7ff fcd9 	bl	80188e8 <get_sequence_step_timeout>
		if (Status == VL53L0X_ERROR_NONE) {
 8018f36:	2800      	cmp	r0, #0
 8018f38:	d140      	bne.n	8018fbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8018f3a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018f3e:	b12b      	cbz	r3, 8018f4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
					MsrcDccTccTimeoutMicroSeconds +
 8018f40:	9b02      	ldr	r3, [sp, #8]
 8018f42:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8018f46:	6823      	ldr	r3, [r4, #0]
 8018f48:	4413      	add	r3, r2
 8018f4a:	6023      	str	r3, [r4, #0]
			if (SchedulerSequenceSteps.DssOn) {
 8018f4c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8018f50:	b1eb      	cbz	r3, 8018f8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8018f52:	9b02      	ldr	r3, [sp, #8]
 8018f54:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8018f58:	6823      	ldr	r3, [r4, #0]
 8018f5a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8018f5e:	6023      	str	r3, [r4, #0]
		if (SchedulerSequenceSteps.PreRangeOn) {
 8018f60:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8018f64:	b9eb      	cbnz	r3, 8018fa2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8018f66:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018f6a:	b15b      	cbz	r3, 8018f84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
			Status = get_sequence_step_timeout(Dev,
 8018f6c:	aa01      	add	r2, sp, #4
 8018f6e:	2104      	movs	r1, #4
 8018f70:	4630      	mov	r0, r6
 8018f72:	f7ff fcb9 	bl	80188e8 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 8018f76:	9b01      	ldr	r3, [sp, #4]
 8018f78:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8018f7c:	6823      	ldr	r3, [r4, #0]
 8018f7e:	4413      	add	r3, r2
 8018f80:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8018f82:	b9d8      	cbnz	r0, 8018fbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8018f84:	6823      	ldr	r3, [r4, #0]
 8018f86:	6173      	str	r3, [r6, #20]
}
 8018f88:	4628      	mov	r0, r5
 8018f8a:	b006      	add	sp, #24
 8018f8c:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8018f8e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d0e4      	beq.n	8018f60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8018f96:	9b02      	ldr	r3, [sp, #8]
 8018f98:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8018f9c:	6823      	ldr	r3, [r4, #0]
 8018f9e:	4413      	add	r3, r2
 8018fa0:	e7dd      	b.n	8018f5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 8018fa2:	aa03      	add	r2, sp, #12
 8018fa4:	2103      	movs	r1, #3
 8018fa6:	4630      	mov	r0, r6
 8018fa8:	f7ff fc9e 	bl	80188e8 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 8018fac:	9b03      	ldr	r3, [sp, #12]
 8018fae:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 8018fb2:	6823      	ldr	r3, [r4, #0]
 8018fb4:	4413      	add	r3, r2
 8018fb6:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	d0d4      	beq.n	8018f66 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
		Status = get_sequence_step_timeout(Dev,
 8018fbc:	4605      	mov	r5, r0
 8018fbe:	e7e3      	b.n	8018f88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

08018fc0 <VL53L0X_load_tuning_settings>:
{
 8018fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Index = 0;
 8018fc2:	2400      	movs	r4, #0
{
 8018fc4:	4606      	mov	r6, r0
 8018fc6:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8018fc8:	4620      	mov	r0, r4
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8018fca:	5d2b      	ldrb	r3, [r5, r4]
 8018fcc:	b1a3      	cbz	r3, 8018ff8 <VL53L0X_load_tuning_settings+0x38>
 8018fce:	b998      	cbnz	r0, 8018ff8 <VL53L0X_load_tuning_settings+0x38>
			SelectParam = *(pTuningSettingBuffer + Index);
 8018fd0:	192a      	adds	r2, r5, r4
		if (NumberOfWrites == 0xFF) {
 8018fd2:	2bff      	cmp	r3, #255	; 0xff
			SelectParam = *(pTuningSettingBuffer + Index);
 8018fd4:	7851      	ldrb	r1, [r2, #1]
		if (NumberOfWrites == 0xFF) {
 8018fd6:	d126      	bne.n	8019026 <VL53L0X_load_tuning_settings+0x66>
				msb = *(pTuningSettingBuffer + Index);
 8018fd8:	7893      	ldrb	r3, [r2, #2]
			switch (SelectParam) {
 8018fda:	2903      	cmp	r1, #3
 8018fdc:	d839      	bhi.n	8019052 <VL53L0X_load_tuning_settings+0x92>
 8018fde:	e8df f001 	tbb	[pc, r1]
 8018fe2:	0d02      	.short	0x0d02
 8018fe4:	1b14      	.short	0x1b14
				lsb = *(pTuningSettingBuffer + Index);
 8018fe6:	78d2      	ldrb	r2, [r2, #3]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8018fe8:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				Index++;
 8018fec:	3404      	adds	r4, #4
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8018fee:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8018ff2:	5d2b      	ldrb	r3, [r5, r4]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d1eb      	bne.n	8018fd0 <VL53L0X_load_tuning_settings+0x10>
}
 8018ff8:	b003      	add	sp, #12
 8018ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				lsb = *(pTuningSettingBuffer + Index);
 8018ffc:	78d2      	ldrb	r2, [r2, #3]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8018ffe:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				Index++;
 8019002:	3404      	adds	r4, #4
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8019004:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8019008:	e7f3      	b.n	8018ff2 <VL53L0X_load_tuning_settings+0x32>
				lsb = *(pTuningSettingBuffer + Index);
 801900a:	78d2      	ldrb	r2, [r2, #3]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 801900c:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				Index++;
 8019010:	3404      	adds	r4, #4
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8019012:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8019016:	e7ec      	b.n	8018ff2 <VL53L0X_load_tuning_settings+0x32>
				lsb = *(pTuningSettingBuffer + Index);
 8019018:	78d2      	ldrb	r2, [r2, #3]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 801901a:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				Index++;
 801901e:	3404      	adds	r4, #4
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8019020:	f8a6 313c 	strh.w	r3, [r6, #316]	; 0x13c
 8019024:	e7e5      	b.n	8018ff2 <VL53L0X_load_tuning_settings+0x32>
		} else if (NumberOfWrites <= 4) {
 8019026:	2b04      	cmp	r3, #4
 8019028:	d813      	bhi.n	8019052 <VL53L0X_load_tuning_settings+0x92>
			Index++;
 801902a:	f104 0c02 	add.w	ip, r4, #2
			for (i = 0; i < NumberOfWrites; i++) {
 801902e:	af01      	add	r7, sp, #4
 8019030:	3401      	adds	r4, #1
 8019032:	442c      	add	r4, r5
 8019034:	2000      	movs	r0, #0
 8019036:	463a      	mov	r2, r7
 8019038:	3001      	adds	r0, #1
				localBuffer[i] = *(pTuningSettingBuffer +
 801903a:	f814 ef01 	ldrb.w	lr, [r4, #1]!
 801903e:	f807 eb01 	strb.w	lr, [r7], #1
			for (i = 0; i < NumberOfWrites; i++) {
 8019042:	4298      	cmp	r0, r3
 8019044:	dbf8      	blt.n	8019038 <VL53L0X_load_tuning_settings+0x78>
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8019046:	4630      	mov	r0, r6
 8019048:	eb0c 0403 	add.w	r4, ip, r3
 801904c:	f7f4 feca 	bl	800dde4 <VL53L0X_WriteMulti>
 8019050:	e7bb      	b.n	8018fca <VL53L0X_load_tuning_settings+0xa>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8019052:	f06f 0003 	mvn.w	r0, #3
 8019056:	e7cf      	b.n	8018ff8 <VL53L0X_load_tuning_settings+0x38>

08019058 <VL53L0X_get_total_xtalk_rate>:
{
 8019058:	b573      	push	{r0, r1, r4, r5, r6, lr}
	*ptotal_xtalk_rate_mcps = 0;
 801905a:	2300      	movs	r3, #0
{
 801905c:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 801905e:	6013      	str	r3, [r2, #0]
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8019060:	f10d 0107 	add.w	r1, sp, #7
{
 8019064:	4605      	mov	r5, r0
 8019066:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8019068:	f7fe fabe 	bl	80175e8 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 801906c:	b940      	cbnz	r0, 8019080 <VL53L0X_get_total_xtalk_rate+0x28>
		if (xtalkCompEnable) {
 801906e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019072:	b12b      	cbz	r3, 8019080 <VL53L0X_get_total_xtalk_rate+0x28>
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8019074:	8ab3      	ldrh	r3, [r6, #20]
			totalXtalkMegaCps =
 8019076:	6a2a      	ldr	r2, [r5, #32]
 8019078:	4353      	muls	r3, r2
				(totalXtalkMegaCps + 0x80) >> 8;
 801907a:	3380      	adds	r3, #128	; 0x80
 801907c:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 801907e:	6023      	str	r3, [r4, #0]
}
 8019080:	b002      	add	sp, #8
 8019082:	bd70      	pop	{r4, r5, r6, pc}

08019084 <VL53L0X_get_total_signal_rate>:
{
 8019084:	b513      	push	{r0, r1, r4, lr}
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8019086:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8019088:	6013      	str	r3, [r2, #0]
{
 801908a:	4614      	mov	r4, r2
	Status = VL53L0X_get_total_xtalk_rate(
 801908c:	aa01      	add	r2, sp, #4
 801908e:	f7ff ffe3 	bl	8019058 <VL53L0X_get_total_xtalk_rate>
	if (Status == VL53L0X_ERROR_NONE)
 8019092:	b918      	cbnz	r0, 801909c <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8019094:	6823      	ldr	r3, [r4, #0]
 8019096:	9a01      	ldr	r2, [sp, #4]
 8019098:	4413      	add	r3, r2
 801909a:	6023      	str	r3, [r4, #0]
}
 801909c:	b002      	add	sp, #8
 801909e:	bd10      	pop	{r4, pc}

080190a0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80190a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);

	if (DeviceRangeStatusInternal == 0 ||
 80190a4:	f011 0f78 	tst.w	r1, #120	; 0x78
{
 80190a8:	b08b      	sub	sp, #44	; 0x2c
 80190aa:	bf18      	it	ne
 80190ac:	f24f 09a0 	movwne	r9, #61600	; 0xf0a0
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80190b0:	f3c1 0bc3 	ubfx	fp, r1, #3, #4
{
 80190b4:	9200      	str	r2, [sp, #0]
 80190b6:	bf18      	it	ne
 80190b8:	fa29 f90b 	lsrne.w	r9, r9, fp
 80190bc:	469a      	mov	sl, r3
	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80190be:	f10d 020e 	add.w	r2, sp, #14
	uint8_t SigmaLimitCheckEnable = 0;
 80190c2:	f04f 0300 	mov.w	r3, #0
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80190c6:	f04f 0100 	mov.w	r1, #0
{
 80190ca:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
	uint8_t SigmaLimitCheckEnable = 0;
 80190ce:	f88d 300e 	strb.w	r3, [sp, #14]
{
 80190d2:	4605      	mov	r5, r0
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80190d4:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80190d8:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80190dc:	f88d 3011 	strb.w	r3, [sp, #17]
	uint16_t tmpWord = 0;
 80190e0:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint32_t Dmax_mm = 0;
 80190e4:	9309      	str	r3, [sp, #36]	; 0x24
	if (DeviceRangeStatusInternal == 0 ||
 80190e6:	bf14      	ite	ne
 80190e8:	f009 0901 	andne.w	r9, r9, #1
		NoneFlag = 1;
 80190ec:	f04f 0901 	moveq.w	r9, #1
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80190f0:	f7fe fad2 	bl	8017698 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80190f4:	f89d 600e 	ldrb.w	r6, [sp, #14]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80190f8:	4607      	mov	r7, r0
	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80190fa:	b1de      	cbz	r6, 8019134 <VL53L0X_get_pal_range_status+0x94>
 80190fc:	b110      	cbz	r0, 8019104 <VL53L0X_get_pal_range_status+0x64>
	uint8_t SigmaLimitflag = 0;
 80190fe:	2600      	movs	r6, #0
	uint8_t SignalRefClipflag = 0;
 8019100:	2400      	movs	r4, #0
 8019102:	e01d      	b.n	8019140 <VL53L0X_get_pal_range_status+0xa0>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8019104:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019106:	ab09      	add	r3, sp, #36	; 0x24
 8019108:	aa05      	add	r2, sp, #20
 801910a:	4628      	mov	r0, r5
 801910c:	f7f5 fe1a 	bl	800ed44 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8019110:	2800      	cmp	r0, #0
 8019112:	d1f4      	bne.n	80190fe <VL53L0X_get_pal_range_status+0x5e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8019114:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019118:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 801911a:	4639      	mov	r1, r7
 801911c:	aa06      	add	r2, sp, #24
 801911e:	4628      	mov	r0, r5
 8019120:	f7fe faef 	bl	8017702 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8019124:	9e06      	ldr	r6, [sp, #24]
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8019126:	4607      	mov	r7, r0
			if ((SigmaLimitValue > 0) &&
 8019128:	b126      	cbz	r6, 8019134 <VL53L0X_get_pal_range_status+0x94>
 801912a:	9b05      	ldr	r3, [sp, #20]
 801912c:	429e      	cmp	r6, r3
 801912e:	bf2c      	ite	cs
 8019130:	2600      	movcs	r6, #0
 8019132:	2601      	movcc	r6, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8019134:	2f00      	cmp	r7, #0
 8019136:	d034      	beq.n	80191a2 <VL53L0X_get_pal_range_status+0x102>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8019138:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801913c:	2c00      	cmp	r4, #0
 801913e:	d1df      	bne.n	8019100 <VL53L0X_get_pal_range_status+0x60>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8019140:	2700      	movs	r7, #0
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8019142:	f898 3000 	ldrb.w	r3, [r8]
 8019146:	b90b      	cbnz	r3, 801914c <VL53L0X_get_pal_range_status+0xac>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8019148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801914a:	8153      	strh	r3, [r2, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 801914c:	f10d 020f 	add.w	r2, sp, #15
 8019150:	2101      	movs	r1, #1
 8019152:	4628      	mov	r0, r5
 8019154:	f7fe faa0 	bl	8017698 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8019158:	bb00      	cbnz	r0, 801919c <VL53L0X_get_pal_range_status+0xfc>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 801915a:	f89d 300e 	ldrb.w	r3, [sp, #14]
			Temp8 = 1;
 801915e:	2b00      	cmp	r3, #0
 8019160:	bf08      	it	eq
 8019162:	2601      	moveq	r6, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8019164:	f1bb 0f04 	cmp.w	fp, #4
 8019168:	bf18      	it	ne
 801916a:	f89d 300f 	ldrbne.w	r3, [sp, #15]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 801916e:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
		if ((DeviceRangeStatusInternal == 4) ||
 8019172:	bf1a      	itte	ne
 8019174:	fab3 f383 	clzne	r3, r3
 8019178:	095b      	lsrne	r3, r3, #5
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
 801917a:	2301      	moveq	r3, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 801917c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8019180:	f89d 3010 	ldrb.w	r3, [sp, #16]
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8019184:	2b00      	cmp	r3, #0
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8019186:	f89d 3011 	ldrb.w	r3, [sp, #17]
			Temp8 = 1;
 801918a:	bf08      	it	eq
 801918c:	2401      	moveq	r4, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 801918e:	2b00      	cmp	r3, #0
 8019190:	bf08      	it	eq
 8019192:	2701      	moveq	r7, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8019194:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8019198:	f885 7031 	strb.w	r7, [r5, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 801919c:	b00b      	add	sp, #44	; 0x2c
 801919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80191a2:	aa04      	add	r2, sp, #16
 80191a4:	2102      	movs	r1, #2
 80191a6:	4628      	mov	r0, r5
 80191a8:	f7fe fa76 	bl	8017698 <VL53L0X_GetLimitCheckEnable>
	if ((SignalRefClipLimitCheckEnable != 0) &&
 80191ac:	f89d 4010 	ldrb.w	r4, [sp, #16]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80191b0:	4603      	mov	r3, r0
	if ((SignalRefClipLimitCheckEnable != 0) &&
 80191b2:	2c00      	cmp	r4, #0
 80191b4:	d035      	beq.n	8019222 <VL53L0X_get_pal_range_status+0x182>
 80191b6:	2800      	cmp	r0, #0
 80191b8:	d1a2      	bne.n	8019100 <VL53L0X_get_pal_range_status+0x60>
		Status = VL53L0X_GetLimitCheckValue(Dev,
 80191ba:	aa07      	add	r2, sp, #28
 80191bc:	2102      	movs	r1, #2
 80191be:	4628      	mov	r0, r5
 80191c0:	f7fe fa9f 	bl	8017702 <VL53L0X_GetLimitCheckValue>
		if (Status == VL53L0X_ERROR_NONE)
 80191c4:	b160      	cbz	r0, 80191e0 <VL53L0X_get_pal_range_status+0x140>
		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80191c6:	f8bd 4012 	ldrh.w	r4, [sp, #18]
		if ((SignalRefClipValue > 0) &&
 80191ca:	9b07      	ldr	r3, [sp, #28]
		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80191cc:	0264      	lsls	r4, r4, #9
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80191ce:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
		if ((SignalRefClipValue > 0) &&
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d094      	beq.n	8019100 <VL53L0X_get_pal_range_status+0x60>
 80191d6:	429c      	cmp	r4, r3
 80191d8:	bf94      	ite	ls
 80191da:	2400      	movls	r4, #0
 80191dc:	2401      	movhi	r4, #1
	if (Status == VL53L0X_ERROR_NONE)
 80191de:	e7af      	b.n	8019140 <VL53L0X_get_pal_range_status+0xa0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80191e0:	2201      	movs	r2, #1
 80191e2:	21ff      	movs	r1, #255	; 0xff
 80191e4:	4628      	mov	r0, r5
 80191e6:	f7fd ff85 	bl	80170f4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 80191ea:	2800      	cmp	r0, #0
 80191ec:	d1eb      	bne.n	80191c6 <VL53L0X_get_pal_range_status+0x126>
			Status = VL53L0X_RdWord(Dev,
 80191ee:	f10d 0212 	add.w	r2, sp, #18
 80191f2:	21b6      	movs	r1, #182	; 0xb6
 80191f4:	4628      	mov	r0, r5
 80191f6:	f7f4 febf 	bl	800df78 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 80191fa:	2800      	cmp	r0, #0
 80191fc:	d1e3      	bne.n	80191c6 <VL53L0X_get_pal_range_status+0x126>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80191fe:	463a      	mov	r2, r7
 8019200:	21ff      	movs	r1, #255	; 0xff
 8019202:	4628      	mov	r0, r5
 8019204:	f7fd ff76 	bl	80170f4 <VL53L0X_WrByte>
		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8019208:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		if ((SignalRefClipValue > 0) &&
 801920c:	9c07      	ldr	r4, [sp, #28]
		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 801920e:	0252      	lsls	r2, r2, #9
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8019210:	4603      	mov	r3, r0
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8019212:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
		if ((SignalRefClipValue > 0) &&
 8019216:	2c00      	cmp	r4, #0
 8019218:	d02f      	beq.n	801927a <VL53L0X_get_pal_range_status+0x1da>
 801921a:	4294      	cmp	r4, r2
 801921c:	bf2c      	ite	cs
 801921e:	2400      	movcs	r4, #0
 8019220:	2401      	movcc	r4, #1
	if (Status == VL53L0X_ERROR_NONE)
 8019222:	2b00      	cmp	r3, #0
 8019224:	d18c      	bne.n	8019140 <VL53L0X_get_pal_range_status+0xa0>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8019226:	f10d 0211 	add.w	r2, sp, #17
 801922a:	2103      	movs	r1, #3
 801922c:	4628      	mov	r0, r5
 801922e:	9301      	str	r3, [sp, #4]
 8019230:	f7fe fa32 	bl	8017698 <VL53L0X_GetLimitCheckEnable>
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8019234:	f89d 7011 	ldrb.w	r7, [sp, #17]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8019238:	4602      	mov	r2, r0
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 801923a:	b1a7      	cbz	r7, 8019266 <VL53L0X_get_pal_range_status+0x1c6>
 801923c:	9b01      	ldr	r3, [sp, #4]
 801923e:	2800      	cmp	r0, #0
 8019240:	d143      	bne.n	80192ca <VL53L0X_get_pal_range_status+0x22a>
		if (EffectiveSpadRtnCount == 0) {
 8019242:	f1ba 0f00 	cmp.w	sl, #0
 8019246:	d003      	beq.n	8019250 <VL53L0X_get_pal_range_status+0x1b0>
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8019248:	9b00      	ldr	r3, [sp, #0]
 801924a:	021b      	lsls	r3, r3, #8
 801924c:	fbb3 fafa 	udiv	sl, r3, sl
		Status = VL53L0X_GetLimitCheckValue(Dev,
 8019250:	aa08      	add	r2, sp, #32
 8019252:	2103      	movs	r1, #3
 8019254:	4628      	mov	r0, r5
 8019256:	f7fe fa54 	bl	8017702 <VL53L0X_GetLimitCheckValue>
		if ((RangeIgnoreThresholdValue > 0) &&
 801925a:	9f08      	ldr	r7, [sp, #32]
 801925c:	4557      	cmp	r7, sl
		Status = VL53L0X_GetLimitCheckValue(Dev,
 801925e:	4602      	mov	r2, r0
		if ((RangeIgnoreThresholdValue > 0) &&
 8019260:	bf94      	ite	ls
 8019262:	2700      	movls	r7, #0
 8019264:	2701      	movhi	r7, #1
	if (Status == VL53L0X_ERROR_NONE) {
 8019266:	2a00      	cmp	r2, #0
 8019268:	f47f af6b 	bne.w	8019142 <VL53L0X_get_pal_range_status+0xa2>
		if (NoneFlag == 1) {
 801926c:	f1b9 0f00 	cmp.w	r9, #0
 8019270:	d005      	beq.n	801927e <VL53L0X_get_pal_range_status+0x1de>
			*pPalRangeStatus = 255;	 /* NONE */
 8019272:	23ff      	movs	r3, #255	; 0xff
			*pPalRangeStatus = 2;  /* Signal Fail */
 8019274:	f888 3000 	strb.w	r3, [r8]
 8019278:	e763      	b.n	8019142 <VL53L0X_get_pal_range_status+0xa2>
	uint8_t SignalRefClipflag = 0;
 801927a:	463c      	mov	r4, r7
 801927c:	e7d1      	b.n	8019222 <VL53L0X_get_pal_range_status+0x182>
		} else if (DeviceRangeStatusInternal == 1 ||
 801927e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8019282:	2b09      	cmp	r3, #9
 8019284:	d80a      	bhi.n	801929c <VL53L0X_get_pal_range_status+0x1fc>
 8019286:	e8df f003 	tbb	[pc, r3]
 801928a:	0505      	.short	0x0505
 801928c:	07090905 	.word	0x07090905
 8019290:	0b070b09 	.word	0x0b070b09
		if (NoneFlag == 1) {
 8019294:	2305      	movs	r3, #5
 8019296:	e7ed      	b.n	8019274 <VL53L0X_get_pal_range_status+0x1d4>
			*pPalRangeStatus = 4;  /* Phase fail */
 8019298:	2304      	movs	r3, #4
 801929a:	e7eb      	b.n	8019274 <VL53L0X_get_pal_range_status+0x1d4>
					DeviceRangeStatusInternal == 10 ||
 801929c:	2c01      	cmp	r4, #1
 801929e:	d101      	bne.n	80192a4 <VL53L0X_get_pal_range_status+0x204>
		if (NoneFlag == 1) {
 80192a0:	2303      	movs	r3, #3
 80192a2:	e7e7      	b.n	8019274 <VL53L0X_get_pal_range_status+0x1d4>
		} else if (DeviceRangeStatusInternal == 4 ||
 80192a4:	f1bb 0f04 	cmp.w	fp, #4
 80192a8:	d001      	beq.n	80192ae <VL53L0X_get_pal_range_status+0x20e>
 80192aa:	2f01      	cmp	r7, #1
 80192ac:	d101      	bne.n	80192b2 <VL53L0X_get_pal_range_status+0x212>
			*pPalRangeStatus = 2;  /* Signal Fail */
 80192ae:	2302      	movs	r3, #2
 80192b0:	e7e0      	b.n	8019274 <VL53L0X_get_pal_range_status+0x1d4>
		} else if (SigmaLimitflag == 1) {
 80192b2:	2e01      	cmp	r6, #1
			*pPalRangeStatus = 0; /* Range Valid */
 80192b4:	bf13      	iteet	ne
 80192b6:	2300      	movne	r3, #0
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80192b8:	f888 6000 	strbeq.w	r6, [r8]
 80192bc:	463c      	moveq	r4, r7
			*pPalRangeStatus = 0; /* Range Valid */
 80192be:	f888 3000 	strbne.w	r3, [r8]
 80192c2:	bf1c      	itt	ne
 80192c4:	4634      	movne	r4, r6
 80192c6:	4637      	movne	r7, r6
 80192c8:	e73b      	b.n	8019142 <VL53L0X_get_pal_range_status+0xa2>
 80192ca:	461f      	mov	r7, r3
 80192cc:	e739      	b.n	8019142 <VL53L0X_get_pal_range_status+0xa2>

080192ce <VL53L0X_check_part_used>:
{
 80192ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192d0:	460e      	mov	r6, r1
	Status = VL53L0X_get_info_from_device(Dev, 2);
 80192d2:	2102      	movs	r1, #2
{
 80192d4:	4605      	mov	r5, r0
 80192d6:	4617      	mov	r7, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 80192d8:	f7ff f851 	bl	801837e <VL53L0X_get_info_from_device>
	if (Status == VL53L0X_ERROR_NONE) {
 80192dc:	4604      	mov	r4, r0
 80192de:	b938      	cbnz	r0, 80192f0 <VL53L0X_check_part_used+0x22>
	if (ModuleIdInt == 0) {
 80192e0:	f895 30f1 	ldrb.w	r3, [r5, #241]	; 0xf1
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 80192e4:	f107 0040 	add.w	r0, r7, #64	; 0x40
	if (ModuleIdInt == 0) {
 80192e8:	b923      	cbnz	r3, 80192f4 <VL53L0X_check_part_used+0x26>
		*Revision = 0;
 80192ea:	7034      	strb	r4, [r6, #0]
 80192ec:	f887 4040 	strb.w	r4, [r7, #64]	; 0x40
}
 80192f0:	4620      	mov	r0, r4
 80192f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 80192f4:	f895 30f2 	ldrb.w	r3, [r5, #242]	; 0xf2
 80192f8:	7033      	strb	r3, [r6, #0]
 80192fa:	f105 01f3 	add.w	r1, r5, #243	; 0xf3
 80192fe:	f7f8 f903 	bl	8011508 <strcpy>
 8019302:	e7f5      	b.n	80192f0 <VL53L0X_check_part_used+0x22>

08019304 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8019304:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8019306:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 801930a:	46a4      	mov	ip, r4

  return ret;
}
 801930c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8019310:	4760      	bx	ip

08019312 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8019312:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8019314:	6804      	ldr	r4, [r0, #0]
 8019316:	6880      	ldr	r0, [r0, #8]
 8019318:	46a4      	mov	ip, r4

  return ret;
}
 801931a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 801931e:	4760      	bx	ip

08019320 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8019320:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8019322:	2301      	movs	r3, #1
{
 8019324:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8019326:	aa01      	add	r2, sp, #4
 8019328:	2120      	movs	r1, #32
{
 801932a:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 801932c:	f7ff ffea 	bl	8019304 <hts221_read_reg>

  if (ret == 0)
 8019330:	b958      	cbnz	r0, 801934a <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
 8019332:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019336:	f365 0301 	bfi	r3, r5, #0, #2
 801933a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 801933e:	aa01      	add	r2, sp, #4
 8019340:	2301      	movs	r3, #1
 8019342:	2120      	movs	r1, #32
 8019344:	4620      	mov	r0, r4
 8019346:	f7ff ffe4 	bl	8019312 <hts221_write_reg>
  }

  return ret;
}
 801934a:	b003      	add	sp, #12
 801934c:	bd30      	pop	{r4, r5, pc}

0801934e <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 801934e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8019350:	2301      	movs	r3, #1
{
 8019352:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8019354:	aa01      	add	r2, sp, #4
 8019356:	2120      	movs	r1, #32
{
 8019358:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 801935a:	f7ff ffd3 	bl	8019304 <hts221_read_reg>

  if (ret == 0)
 801935e:	b958      	cbnz	r0, 8019378 <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
 8019360:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019364:	f365 0382 	bfi	r3, r5, #2, #1
 8019368:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 801936c:	aa01      	add	r2, sp, #4
 801936e:	2301      	movs	r3, #1
 8019370:	2120      	movs	r1, #32
 8019372:	4620      	mov	r0, r4
 8019374:	f7ff ffcd 	bl	8019312 <hts221_write_reg>
  }

  return ret;
}
 8019378:	b003      	add	sp, #12
 801937a:	bd30      	pop	{r4, r5, pc}

0801937c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 801937c:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 801937e:	2301      	movs	r3, #1
 8019380:	210f      	movs	r1, #15
 8019382:	f7ff bfbf 	b.w	8019304 <hts221_read_reg>

08019386 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8019386:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8019388:	2301      	movs	r3, #1
{
 801938a:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 801938c:	aa01      	add	r2, sp, #4
 801938e:	2120      	movs	r1, #32
{
 8019390:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8019392:	f7ff ffb7 	bl	8019304 <hts221_read_reg>

  if (ret == 0)
 8019396:	b958      	cbnz	r0, 80193b0 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
 8019398:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801939c:	f365 13c7 	bfi	r3, r5, #7, #1
 80193a0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80193a4:	aa01      	add	r2, sp, #4
 80193a6:	2301      	movs	r3, #1
 80193a8:	2120      	movs	r1, #32
 80193aa:	4620      	mov	r0, r4
 80193ac:	f7ff ffb1 	bl	8019312 <hts221_write_reg>
  }

  return ret;
}
 80193b0:	b003      	add	sp, #12
 80193b2:	bd30      	pop	{r4, r5, pc}

080193b4 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 80193b4:	4603      	mov	r3, r0
 80193b6:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 80193b8:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80193ba:	7919      	ldrb	r1, [r3, #4]
 80193bc:	2301      	movs	r3, #1
 80193be:	fa03 f101 	lsl.w	r1, r3, r1
 80193c2:	6903      	ldr	r3, [r0, #16]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 80193c8:	bf18      	it	ne
 80193ca:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 80193ce:	b112      	cbz	r2, 80193d6 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 80193d0:	6883      	ldr	r3, [r0, #8]
 80193d2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80193d4:	4718      	bx	r3
 80193d6:	6883      	ldr	r3, [r0, #8]
 80193d8:	691b      	ldr	r3, [r3, #16]
 80193da:	e7fb      	b.n	80193d4 <gpio_pin_set_dt.isra.0+0x20>

080193dc <pulse_data.constprop.0>:
static void pulse_data(const struct dm163_config *config, uint8_t data, int bits){
 80193dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193de:	460e      	mov	r6, r1
 80193e0:	2507      	movs	r5, #7
    gpio_pin_set_dt(&config->sin,data>>(bits-i-1)&1);
 80193e2:	f100 0728 	add.w	r7, r0, #40	; 0x28
    gpio_pin_set_dt(&config->gck,1);
 80193e6:	f100 0408 	add.w	r4, r0, #8
    gpio_pin_set_dt(&config->sin,data>>(bits-i-1)&1);
 80193ea:	fa46 f105 	asr.w	r1, r6, r5
 80193ee:	f001 0101 	and.w	r1, r1, #1
 80193f2:	4638      	mov	r0, r7
 80193f4:	f7ff ffde 	bl	80193b4 <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(&config->gck,1);
 80193f8:	2101      	movs	r1, #1
 80193fa:	4620      	mov	r0, r4
 80193fc:	f7ff ffda 	bl	80193b4 <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(&config->gck,0);
 8019400:	2100      	movs	r1, #0
 8019402:	4620      	mov	r0, r4
 8019404:	f7ff ffd6 	bl	80193b4 <gpio_pin_set_dt.isra.0>
  for(int i=0;i<bits;i++){
 8019408:	3d01      	subs	r5, #1
 801940a:	d2ee      	bcs.n	80193ea <pulse_data.constprop.0+0xe>
}
 801940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801940e <flush_brightness>:
static void flush_brightness(const struct device *dev){
 801940e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dm163_data *data = dev->data;
 8019412:	6906      	ldr	r6, [r0, #16]
  const struct dm163_config *config = dev->config;
 8019414:	6844      	ldr	r4, [r0, #4]
  k_mutex_init(&data->my_mutex);
 8019416:	f106 0530 	add.w	r5, r6, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
 801941a:	4628      	mov	r0, r5
 801941c:	f000 f959 	bl	80196d2 <z_impl_k_mutex_init>
	return z_impl_k_mutex_lock(mutex, timeout);
 8019420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019424:	2300      	movs	r3, #0
 8019426:	4628      	mov	r0, r5
  gpio_pin_set_dt(&config->selbk,0);
 8019428:	f104 0820 	add.w	r8, r4, #32
 801942c:	f7f6 faec 	bl	800fa08 <z_impl_k_mutex_lock>
 8019430:	2100      	movs	r1, #0
 8019432:	4640      	mov	r0, r8
 8019434:	f7ff ffbe 	bl	80193b4 <gpio_pin_set_dt.isra.0>
  for (int i = NUM_CHANNELS - 1; i >= 0; i--)
 8019438:	f106 0718 	add.w	r7, r6, #24
    pulse_data(config, data->brightness[i], 8);
 801943c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8019440:	4620      	mov	r0, r4
 8019442:	f7ff ffcb 	bl	80193dc <pulse_data.constprop.0>
  for (int i = NUM_CHANNELS - 1; i >= 0; i--)
 8019446:	42b7      	cmp	r7, r6
 8019448:	d1f8      	bne.n	801943c <flush_brightness+0x2e>
  gpio_pin_set_dt(&config->lat, 1);
 801944a:	3410      	adds	r4, #16
 801944c:	4620      	mov	r0, r4
 801944e:	2101      	movs	r1, #1
 8019450:	f7ff ffb0 	bl	80193b4 <gpio_pin_set_dt.isra.0>
  gpio_pin_set_dt(&config->lat, 0);
 8019454:	4620      	mov	r0, r4
 8019456:	2100      	movs	r1, #0
 8019458:	f7ff ffac 	bl	80193b4 <gpio_pin_set_dt.isra.0>
  gpio_pin_set_dt(&config->selbk,1);
 801945c:	2101      	movs	r1, #1
 801945e:	4640      	mov	r0, r8
 8019460:	f7ff ffa8 	bl	80193b4 <gpio_pin_set_dt.isra.0>
	return z_impl_k_mutex_unlock(mutex);
 8019464:	4628      	mov	r0, r5
}
 8019466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801946a:	f7f6 bb47 	b.w	800fafc <z_impl_k_mutex_unlock>

0801946e <dm163_set_brightness>:
static int dm163_set_brightness(const struct device *dev, uint32_t led, uint8_t value){
 801946e:	b508      	push	{r3, lr}
  if(led>7)
 8019470:	2907      	cmp	r1, #7
  struct dm163_data *data = dev->data;
 8019472:	6903      	ldr	r3, [r0, #16]
  if(led>7)
 8019474:	d80a      	bhi.n	801948c <dm163_set_brightness+0x1e>
  data->brightness[led*3]   =  (value>>2)&0b111111;
 8019476:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801947a:	0892      	lsrs	r2, r2, #2
 801947c:	545a      	strb	r2, [r3, r1]
  data->brightness[led*3+1] =  (value>>2)&0b111111;
 801947e:	440b      	add	r3, r1
 8019480:	705a      	strb	r2, [r3, #1]
  data->brightness[led*3+2] =  (value>>2)&0b111111;
 8019482:	709a      	strb	r2, [r3, #2]
  flush_brightness(dev);
 8019484:	f7ff ffc3 	bl	801940e <flush_brightness>
  return 0;
 8019488:	2000      	movs	r0, #0
}    
 801948a:	bd08      	pop	{r3, pc}
    return -EINVAL;
 801948c:	f06f 0015 	mvn.w	r0, #21
 8019490:	e7fb      	b.n	801948a <dm163_set_brightness+0x1c>

08019492 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 8019492:	b4f0      	push	{r4, r5, r6, r7}
 8019494:	4603      	mov	r3, r0
 8019496:	460a      	mov	r2, r1
				  spec->pin,
 8019498:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
 801949a:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
 801949c:	6800      	ldr	r0, [r0, #0]
 801949e:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80194a0:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 80194a2:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 80194a4:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80194a6:	d506      	bpl.n	80194b6 <gpio_pin_configure_dt.isra.0+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80194a8:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 80194ac:	d003      	beq.n	80194b6 <gpio_pin_configure_dt.isra.0+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80194ae:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80194b0:	bf48      	it	mi
 80194b2:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80194b6:	6834      	ldr	r4, [r6, #0]
 80194b8:	2501      	movs	r5, #1
 80194ba:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80194bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80194c0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80194c2:	bf4c      	ite	mi
 80194c4:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80194c6:	43ac      	bicpl	r4, r5
 80194c8:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80194ca:	683b      	ldr	r3, [r7, #0]
}
 80194cc:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 80194ce:	4718      	bx	r3

080194d0 <flush_channels>:
static void flush_channels(const struct device *dev) {
 80194d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct dm163_data *data = dev->data;
 80194d2:	6906      	ldr	r6, [r0, #16]
  const struct dm163_config *config = dev->config;
 80194d4:	6844      	ldr	r4, [r0, #4]
  k_mutex_init(&data->my_mutex);
 80194d6:	f106 0530 	add.w	r5, r6, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
 80194da:	4628      	mov	r0, r5
 80194dc:	f000 f8f9 	bl	80196d2 <z_impl_k_mutex_init>
	return z_impl_k_mutex_lock(mutex, timeout);
 80194e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80194e4:	2300      	movs	r3, #0
 80194e6:	4628      	mov	r0, r5
 80194e8:	f7f6 fa8e 	bl	800fa08 <z_impl_k_mutex_lock>
  gpio_pin_set_dt(&config->selbk,1);
 80194ec:	2101      	movs	r1, #1
 80194ee:	f104 0020 	add.w	r0, r4, #32
 80194f2:	f7ff ff5f 	bl	80193b4 <gpio_pin_set_dt.isra.0>
  for (int i = NUM_CHANNELS - 1; i >= 0; i--)
 80194f6:	462f      	mov	r7, r5
 80194f8:	3618      	adds	r6, #24
    pulse_data(config, data->channels[i], 8);
 80194fa:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80194fe:	4620      	mov	r0, r4
 8019500:	f7ff ff6c 	bl	80193dc <pulse_data.constprop.0>
  for (int i = NUM_CHANNELS - 1; i >= 0; i--)
 8019504:	42b7      	cmp	r7, r6
 8019506:	d1f8      	bne.n	80194fa <flush_channels+0x2a>
  gpio_pin_set_dt(&config->lat, 1);
 8019508:	3410      	adds	r4, #16
 801950a:	4620      	mov	r0, r4
 801950c:	2101      	movs	r1, #1
 801950e:	f7ff ff51 	bl	80193b4 <gpio_pin_set_dt.isra.0>
  gpio_pin_set_dt(&config->lat, 0);
 8019512:	2100      	movs	r1, #0
 8019514:	4620      	mov	r0, r4
 8019516:	f7ff ff4d 	bl	80193b4 <gpio_pin_set_dt.isra.0>
	return z_impl_k_mutex_unlock(mutex);
 801951a:	4628      	mov	r0, r5
}
 801951c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019520:	f7f6 baec 	b.w	800fafc <z_impl_k_mutex_unlock>

08019524 <dm163_set_color>:
                                                        const uint8_t *color){
 8019524:	b538      	push	{r3, r4, r5, lr}
  if(led>7 || num_colors>3)
 8019526:	2907      	cmp	r1, #7
  struct dm163_data *data = dev->data;
 8019528:	6904      	ldr	r4, [r0, #16]
  if(led>7 || num_colors>3)
 801952a:	d812      	bhi.n	8019552 <dm163_set_color+0x2e>
 801952c:	2a03      	cmp	r2, #3
 801952e:	d810      	bhi.n	8019552 <dm163_set_color+0x2e>
    data->channels[led*3]   =  color[num_colors-3];  //
 8019530:	4413      	add	r3, r2
 8019532:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019536:	1862      	adds	r2, r4, r1
 8019538:	f813 5c03 	ldrb.w	r5, [r3, #-3]
 801953c:	7615      	strb	r5, [r2, #24]
    data->channels[led*3+1] =  color[num_colors-2];
 801953e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8019542:	7651      	strb	r1, [r2, #25]
    data->channels[led*3+2] =  color[num_colors-1];
 8019544:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019548:	7693      	strb	r3, [r2, #26]
    flush_channels(dev);
 801954a:	f7ff ffc1 	bl	80194d0 <flush_channels>
  return 0;
 801954e:	2000      	movs	r0, #0
}
 8019550:	bd38      	pop	{r3, r4, r5, pc}
    return -EINVAL;
 8019552:	f06f 0015 	mvn.w	r0, #21
 8019556:	e7fb      	b.n	8019550 <dm163_set_color+0x2c>

08019558 <dm163_off>:
static int dm163_off(const struct device *dev, uint32_t led){
 8019558:	b510      	push	{r4, lr}
  if(led>7)
 801955a:	2907      	cmp	r1, #7
  struct dm163_data *data = dev->data;
 801955c:	6903      	ldr	r3, [r0, #16]
  if(led>7)
 801955e:	d80a      	bhi.n	8019576 <dm163_off+0x1e>
    data->channels[led*3]   =  0x00;  //
 8019560:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019564:	440b      	add	r3, r1
 8019566:	2400      	movs	r4, #0
 8019568:	761c      	strb	r4, [r3, #24]
    data->channels[led*3+1] =  0x00;
 801956a:	765c      	strb	r4, [r3, #25]
    data->channels[led*3+2] =  0x00;
 801956c:	769c      	strb	r4, [r3, #26]
    flush_channels(dev);
 801956e:	f7ff ffaf 	bl	80194d0 <flush_channels>
  return 0;
 8019572:	4620      	mov	r0, r4
}
 8019574:	bd10      	pop	{r4, pc}
    return -EINVAL;
 8019576:	f06f 0015 	mvn.w	r0, #21
 801957a:	e7fb      	b.n	8019574 <dm163_off+0x1c>

0801957c <dm163_on>:
static int dm163_on(const struct device *dev, uint32_t led){
 801957c:	b508      	push	{r3, lr}
  if(led>7)
 801957e:	2907      	cmp	r1, #7
  struct dm163_data *data = dev->data;
 8019580:	6903      	ldr	r3, [r0, #16]
  if(led>7)
 8019582:	d80a      	bhi.n	801959a <dm163_on+0x1e>
    data->channels[led*3]   =  0xff;  //0xff for white
 8019584:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019588:	440b      	add	r3, r1
 801958a:	22ff      	movs	r2, #255	; 0xff
 801958c:	761a      	strb	r2, [r3, #24]
    data->channels[led*3+1] =  0xff;
 801958e:	765a      	strb	r2, [r3, #25]
    data->channels[led*3+2] =  0xff;
 8019590:	769a      	strb	r2, [r3, #26]
    flush_channels(dev);
 8019592:	f7ff ff9d 	bl	80194d0 <flush_channels>
  return 0;
 8019596:	2000      	movs	r0, #0
}
 8019598:	bd08      	pop	{r3, pc}
    return -EINVAL;
 801959a:	f06f 0015 	mvn.w	r0, #21
 801959e:	e7fb      	b.n	8019598 <dm163_on+0x1c>

080195a0 <dm163_write_channels>:
                         uint32_t num_channels, const uint8_t *buf){
 80195a0:	b570      	push	{r4, r5, r6, lr}
  if(num_channels>NUM_CHANNELS || start_channel>NUM_CHANNELS || start_channel+num_channels>NUM_CHANNELS)
 80195a2:	2a18      	cmp	r2, #24
                         uint32_t num_channels, const uint8_t *buf){
 80195a4:	4606      	mov	r6, r0
 80195a6:	460d      	mov	r5, r1
  struct dm163_data *data = dev->data;
 80195a8:	6900      	ldr	r0, [r0, #16]
                         uint32_t num_channels, const uint8_t *buf){
 80195aa:	4614      	mov	r4, r2
 80195ac:	4619      	mov	r1, r3
  if(num_channels>NUM_CHANNELS || start_channel>NUM_CHANNELS || start_channel+num_channels>NUM_CHANNELS)
 80195ae:	d80d      	bhi.n	80195cc <dm163_write_channels+0x2c>
 80195b0:	2d18      	cmp	r5, #24
 80195b2:	d80b      	bhi.n	80195cc <dm163_write_channels+0x2c>
 80195b4:	442c      	add	r4, r5
 80195b6:	2c18      	cmp	r4, #24
 80195b8:	d808      	bhi.n	80195cc <dm163_write_channels+0x2c>
      memcpy(data->channels+start_channel, buf,num_channels);
 80195ba:	3018      	adds	r0, #24
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80195bc:	4428      	add	r0, r5
 80195be:	f7e7 fd67 	bl	8001090 <memcpy>
      flush_channels(dev);
 80195c2:	4630      	mov	r0, r6
 80195c4:	f7ff ff84 	bl	80194d0 <flush_channels>
  return 0;
 80195c8:	2000      	movs	r0, #0
}
 80195ca:	bd70      	pop	{r4, r5, r6, pc}
    return -EINVAL;
 80195cc:	f06f 0015 	mvn.w	r0, #21
 80195d0:	e7fb      	b.n	80195ca <dm163_write_channels+0x2a>

080195d2 <dm163_turn_off_row>:
void dm163_turn_off_row(const struct device *dev, const struct gpio_dt_spec *rows,int row){
 80195d2:	b570      	push	{r4, r5, r6, lr}
  for(int i=(row*8);i<(row*8+6);i++)
 80195d4:	00d4      	lsls	r4, r2, #3
  struct dm163_data *data = dev->data;
 80195d6:	6906      	ldr	r6, [r0, #16]
  for(int i=(row*8);i<(row*8+6);i++)
 80195d8:	f104 0317 	add.w	r3, r4, #23
 80195dc:	f104 021d 	add.w	r2, r4, #29
void dm163_turn_off_row(const struct device *dev, const struct gpio_dt_spec *rows,int row){
 80195e0:	4605      	mov	r5, r0
 80195e2:	4433      	add	r3, r6
 80195e4:	4432      	add	r2, r6
    data->channels[i]=0x00;
 80195e6:	2100      	movs	r1, #0
 80195e8:	f803 1f01 	strb.w	r1, [r3, #1]!
  for(int i=(row*8);i<(row*8+6);i++)
 80195ec:	4293      	cmp	r3, r2
 80195ee:	d1fb      	bne.n	80195e8 <dm163_turn_off_row+0x16>
  flush_channels(dev);
 80195f0:	4628      	mov	r0, r5
 80195f2:	f7ff ff6d 	bl	80194d0 <flush_channels>
    data->channels[i]=0x00;
 80195f6:	3618      	adds	r6, #24
  for(int i=(row*8+6);i<(row*8+8);i++)
 80195f8:	1da3      	adds	r3, r4, #6
    data->channels[i]=0x00;
 80195fa:	2200      	movs	r2, #0
  for(int i=(row*8+6);i<(row*8+8);i++)
 80195fc:	3408      	adds	r4, #8
 80195fe:	429c      	cmp	r4, r3
 8019600:	dc04      	bgt.n	801960c <dm163_turn_off_row+0x3a>
  flush_channels(dev);
 8019602:	4628      	mov	r0, r5
}
 8019604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  flush_channels(dev);
 8019608:	f7ff bf62 	b.w	80194d0 <flush_channels>
    data->channels[i]=0x00;
 801960c:	54f2      	strb	r2, [r6, r3]
  for(int i=(row*8+6);i<(row*8+8);i++)
 801960e:	3301      	adds	r3, #1
 8019610:	e7f5      	b.n	80195fe <dm163_turn_off_row+0x2c>

08019612 <z_device_state_init>:
}
 8019612:	4770      	bx	lr

08019614 <z_device_is_ready>:
	if (dev == NULL) {
 8019614:	b140      	cbz	r0, 8019628 <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
 8019616:	68c3      	ldr	r3, [r0, #12]
 8019618:	7858      	ldrb	r0, [r3, #1]
 801961a:	f010 0001 	ands.w	r0, r0, #1
 801961e:	bf1e      	ittt	ne
 8019620:	7818      	ldrbne	r0, [r3, #0]
 8019622:	fab0 f080 	clzne	r0, r0
 8019626:	0940      	lsrne	r0, r0, #5
}
 8019628:	4770      	bx	lr

0801962a <device_required_foreach>:

int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
 801962a:	b470      	push	{r4, r5, r6}
 801962c:	6940      	ldr	r0, [r0, #20]
 801962e:	460d      	mov	r5, r1
 8019630:	4613      	mov	r3, r2
	if (rv != NULL) {
 8019632:	b960      	cbnz	r0, 801964e <device_required_foreach+0x24>
	size_t handle_count = 0;
 8019634:	4601      	mov	r1, r0
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);

	return device_visitor(handles, handle_count, visitor_cb, context);
 8019636:	462a      	mov	r2, r5
}
 8019638:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
 801963a:	f7f5 be67 	b.w	800f30c <device_visitor>
			++i;
 801963e:	3101      	adds	r1, #1
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
 8019640:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
 8019644:	4434      	add	r4, r6
 8019646:	b2a4      	uxth	r4, r4
 8019648:	4294      	cmp	r4, r2
 801964a:	d9f8      	bls.n	801963e <device_required_foreach+0x14>
 801964c:	e7f3      	b.n	8019636 <device_required_foreach+0xc>
		size_t i = 0;
 801964e:	2100      	movs	r1, #0
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
 8019650:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8019654:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8019658:	e7f2      	b.n	8019640 <device_required_foreach+0x16>

0801965a <arch_system_halt>:
	__asm__ volatile(
 801965a:	f04f 0210 	mov.w	r2, #16
 801965e:	f3ef 8311 	mrs	r3, BASEPRI
 8019662:	f382 8812 	msr	BASEPRI_MAX, r2
 8019666:	f3bf 8f6f 	isb	sy
	for (;;) {
 801966a:	e7fe      	b.n	801966a <arch_system_halt+0x10>

0801966c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
 801966c:	f7f7 be14 	b.w	8011298 <memset>

08019670 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8019670:	f7e7 bd0e 	b.w	8001090 <memcpy>

08019674 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019674:	f3ef 8005 	mrs	r0, IPSR
}
 8019678:	3800      	subs	r0, #0
 801967a:	bf18      	it	ne
 801967c:	2001      	movne	r0, #1
 801967e:	4770      	bx	lr

08019680 <k_thread_name_get>:
}
 8019680:	3078      	adds	r0, #120	; 0x78
 8019682:	4770      	bx	lr

08019684 <z_impl_k_thread_start>:
	z_sched_start(thread);
 8019684:	f7f6 bd0c 	b.w	80100a0 <z_sched_start>

08019688 <z_stack_space_get>:
#ifdef CONFIG_STACK_GROWS_UP
#error "Unsupported configuration for stack analysis"
#endif

int z_stack_space_get(const uint8_t *stack_start, size_t size, size_t *unused_ptr)
{
 8019688:	b510      	push	{r4, lr}
	size_t unused = 0;
 801968a:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
 801968c:	428b      	cmp	r3, r1
 801968e:	d102      	bne.n	8019696 <z_stack_space_get+0xe>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
 8019690:	6013      	str	r3, [r2, #0]

	return 0;
}
 8019692:	2000      	movs	r0, #0
 8019694:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
 8019696:	5cc4      	ldrb	r4, [r0, r3]
 8019698:	2caa      	cmp	r4, #170	; 0xaa
 801969a:	d1f9      	bne.n	8019690 <z_stack_space_get+0x8>
			unused++;
 801969c:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
 801969e:	e7f5      	b.n	801968c <z_stack_space_get+0x4>

080196a0 <z_impl_k_thread_stack_space_get>:

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
 80196a0:	460a      	mov	r2, r1
	return z_stack_space_get((const uint8_t *)thread->stack_info.start,
 80196a2:	e9d0 0127 	ldrd	r0, r1, [r0, #156]	; 0x9c
 80196a6:	f7ff bfef 	b.w	8019688 <z_stack_space_get>

080196aa <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 80196aa:	b508      	push	{r3, lr}
 80196ac:	f04f 0210 	mov.w	r2, #16
 80196b0:	f3ef 8311 	mrs	r3, BASEPRI
 80196b4:	f382 8812 	msr	BASEPRI_MAX, r2
 80196b8:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80196bc:	f7f1 fbb0 	bl	800ae20 <arch_cpu_idle>
 80196c0:	e7f4      	b.n	80196ac <idle+0x2>

080196c2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 80196c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80196c6:	428b      	cmp	r3, r1
 80196c8:	d001      	beq.n	80196ce <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 80196ca:	f7f6 bc91 	b.w	800fff0 <z_set_prio>
}
 80196ce:	2000      	movs	r0, #0
 80196d0:	4770      	bx	lr

080196d2 <z_impl_k_mutex_init>:
{
 80196d2:	4603      	mov	r3, r0
	mutex->owner = NULL;
 80196d4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 80196d6:	e9c3 0002 	strd	r0, r0, [r3, #8]
 80196da:	e9c3 3300 	strd	r3, r3, [r3]
}
 80196de:	4770      	bx	lr

080196e0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 80196e0:	b15a      	cbz	r2, 80196fa <z_impl_k_sem_init+0x1a>
 80196e2:	428a      	cmp	r2, r1
 80196e4:	d309      	bcc.n	80196fa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 80196e6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 80196ea:	e9c0 1202 	strd	r1, r2, [r0, #8]
 80196ee:	e9c0 0000 	strd	r0, r0, [r0]
 80196f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 80196f6:	2000      	movs	r0, #0
 80196f8:	4770      	bx	lr
		return -EINVAL;
 80196fa:	f06f 0015 	mvn.w	r0, #21
}
 80196fe:	4770      	bx	lr

08019700 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 8019700:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 8019702:	2301      	movs	r3, #1
 8019704:	408b      	lsls	r3, r1
 8019706:	ea22 0303 	bic.w	r3, r2, r3
 801970a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 801970c:	fa22 f001 	lsr.w	r0, r2, r1
}
 8019710:	f000 0001 	and.w	r0, r0, #1
 8019714:	4770      	bx	lr

08019716 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 8019716:	b128      	cbz	r0, 8019724 <notify_queue_locked.isra.0+0xe>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8019718:	2200      	movs	r2, #0
 801971a:	4611      	mov	r1, r2
 801971c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8019720:	f000 b922 	b.w	8019968 <z_sched_wake>
}
 8019724:	4770      	bx	lr

08019726 <k_work_init>:
{
 8019726:	b538      	push	{r3, r4, r5, lr}
 8019728:	4604      	mov	r4, r0
 801972a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 801972c:	2210      	movs	r2, #16
 801972e:	2100      	movs	r1, #0
 8019730:	f7f7 fdb2 	bl	8011298 <memset>
 8019734:	6065      	str	r5, [r4, #4]
}
 8019736:	bd38      	pop	{r3, r4, r5, pc}

08019738 <z_work_submit_to_queue>:
{
 8019738:	b513      	push	{r0, r1, r4, lr}
 801973a:	9001      	str	r0, [sp, #4]
 801973c:	4608      	mov	r0, r1
 801973e:	f04f 0310 	mov.w	r3, #16
 8019742:	f3ef 8411 	mrs	r4, BASEPRI
 8019746:	f383 8812 	msr	BASEPRI_MAX, r3
 801974a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 801974e:	a901      	add	r1, sp, #4
 8019750:	f7f6 fa60 	bl	800fc14 <submit_to_queue_locked>
	__asm__ volatile(
 8019754:	f384 8811 	msr	BASEPRI, r4
 8019758:	f3bf 8f6f 	isb	sy
}
 801975c:	b002      	add	sp, #8
 801975e:	bd10      	pop	{r4, pc}

08019760 <k_work_submit_to_queue>:
{
 8019760:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
 8019762:	f7ff ffe9 	bl	8019738 <z_work_submit_to_queue>
	if (ret > 0) {
 8019766:	1e04      	subs	r4, r0, #0
 8019768:	dd09      	ble.n	801977e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
 801976a:	f04f 0310 	mov.w	r3, #16
 801976e:	f3ef 8011 	mrs	r0, BASEPRI
 8019772:	f383 8812 	msr	BASEPRI_MAX, r3
 8019776:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 801977a:	f000 f8ce 	bl	801991a <z_reschedule_irqlock>
}
 801977e:	4620      	mov	r0, r4
 8019780:	bd10      	pop	{r4, pc}

08019782 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8019782:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8019786:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8019788:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801978a:	2300      	movs	r3, #0
	node->prev = NULL;
 801978c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8019790:	4770      	bx	lr

08019792 <unpend_thread_no_timeout>:
{
 8019792:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8019794:	f7ff fff5 	bl	8019782 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8019798:	7b43      	ldrb	r3, [r0, #13]
 801979a:	f023 0302 	bic.w	r3, r3, #2
 801979e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80197a0:	2300      	movs	r3, #0
 80197a2:	6083      	str	r3, [r0, #8]
}
 80197a4:	bd08      	pop	{r3, pc}

080197a6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 80197a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80197aa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 80197ae:	4283      	cmp	r3, r0
		return b2 - b1;
 80197b0:	bf14      	ite	ne
 80197b2:	1ac0      	subne	r0, r0, r3
	return 0;
 80197b4:	2000      	moveq	r0, #0
}
 80197b6:	4770      	bx	lr

080197b8 <z_thread_timeout>:
{
 80197b8:	b510      	push	{r4, lr}
 80197ba:	4601      	mov	r1, r0
 80197bc:	f04f 0310 	mov.w	r3, #16
 80197c0:	f3ef 8411 	mrs	r4, BASEPRI
 80197c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80197c8:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80197cc:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 80197d0:	f013 0f28 	tst.w	r3, #40	; 0x28
 80197d4:	d10d      	bne.n	80197f2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80197d6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80197da:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80197dc:	b10b      	cbz	r3, 80197e2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80197de:	f7ff ffd8 	bl	8019792 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80197e2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80197e6:	f023 0314 	bic.w	r3, r3, #20
 80197ea:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80197ee:	f7f6 fb15 	bl	800fe1c <ready_thread>
	__asm__ volatile(
 80197f2:	f384 8811 	msr	BASEPRI, r4
 80197f6:	f3bf 8f6f 	isb	sy
}
 80197fa:	bd10      	pop	{r4, pc}

080197fc <add_to_waitq_locked>:
{
 80197fc:	b538      	push	{r3, r4, r5, lr}
 80197fe:	4604      	mov	r4, r0
 8019800:	460d      	mov	r5, r1
	unready_thread(thread);
 8019802:	f7f6 fb3f 	bl	800fe84 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8019806:	7b63      	ldrb	r3, [r4, #13]
 8019808:	f043 0302 	orr.w	r3, r3, #2
 801980c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 801980e:	b1e5      	cbz	r5, 801984a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 8019810:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 8019812:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019814:	429d      	cmp	r5, r3
 8019816:	d109      	bne.n	801982c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 8019818:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 801981a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 801981e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8019820:	606c      	str	r4, [r5, #4]
}
 8019822:	e012      	b.n	801984a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8019824:	686a      	ldr	r2, [r5, #4]
 8019826:	4293      	cmp	r3, r2
 8019828:	d0f6      	beq.n	8019818 <add_to_waitq_locked+0x1c>
 801982a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801982c:	2b00      	cmp	r3, #0
 801982e:	d0f3      	beq.n	8019818 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 8019830:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8019834:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8019838:	428a      	cmp	r2, r1
 801983a:	d0f3      	beq.n	8019824 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 801983c:	4291      	cmp	r1, r2
 801983e:	ddf1      	ble.n	8019824 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8019840:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8019842:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8019846:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8019848:	605c      	str	r4, [r3, #4]
}
 801984a:	bd38      	pop	{r3, r4, r5, pc}

0801984c <z_ready_thread>:
{
 801984c:	b510      	push	{r4, lr}
	__asm__ volatile(
 801984e:	f04f 0310 	mov.w	r3, #16
 8019852:	f3ef 8411 	mrs	r4, BASEPRI
 8019856:	f383 8812 	msr	BASEPRI_MAX, r3
 801985a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 801985e:	f7f6 fadd 	bl	800fe1c <ready_thread>
	__asm__ volatile(
 8019862:	f384 8811 	msr	BASEPRI, r4
 8019866:	f3bf 8f6f 	isb	sy
}
 801986a:	bd10      	pop	{r4, pc}

0801986c <z_unpend_thread_no_timeout>:
{
 801986c:	b508      	push	{r3, lr}
	__asm__ volatile(
 801986e:	f04f 0310 	mov.w	r3, #16
 8019872:	f3ef 8111 	mrs	r1, BASEPRI
 8019876:	f383 8812 	msr	BASEPRI_MAX, r3
 801987a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 801987e:	f7ff ff88 	bl	8019792 <unpend_thread_no_timeout>
	__asm__ volatile(
 8019882:	f381 8811 	msr	BASEPRI, r1
 8019886:	f3bf 8f6f 	isb	sy
}
 801988a:	bd08      	pop	{r3, pc}

0801988c <z_unpend1_no_timeout>:
{
 801988c:	b508      	push	{r3, lr}
 801988e:	4603      	mov	r3, r0
	__asm__ volatile(
 8019890:	f04f 0210 	mov.w	r2, #16
 8019894:	f3ef 8111 	mrs	r1, BASEPRI
 8019898:	f382 8812 	msr	BASEPRI_MAX, r2
 801989c:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80198a0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80198a2:	4283      	cmp	r3, r0
 80198a4:	d007      	beq.n	80198b6 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
 80198a6:	b108      	cbz	r0, 80198ac <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
 80198a8:	f7ff ff73 	bl	8019792 <unpend_thread_no_timeout>
	__asm__ volatile(
 80198ac:	f381 8811 	msr	BASEPRI, r1
 80198b0:	f3bf 8f6f 	isb	sy
}
 80198b4:	bd08      	pop	{r3, pc}
 80198b6:	2000      	movs	r0, #0
 80198b8:	e7f8      	b.n	80198ac <z_unpend1_no_timeout+0x20>

080198ba <z_unpend_first_thread>:
{
 80198ba:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80198bc:	f04f 0310 	mov.w	r3, #16
 80198c0:	f3ef 8511 	mrs	r5, BASEPRI
 80198c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80198c8:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80198cc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80198ce:	42a0      	cmp	r0, r4
 80198d0:	d00d      	beq.n	80198ee <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 80198d2:	b134      	cbz	r4, 80198e2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 80198d4:	4620      	mov	r0, r4
 80198d6:	f7ff ff5c 	bl	8019792 <unpend_thread_no_timeout>
 80198da:	f104 0018 	add.w	r0, r4, #24
 80198de:	f000 f867 	bl	80199b0 <z_abort_timeout>
	__asm__ volatile(
 80198e2:	f385 8811 	msr	BASEPRI, r5
 80198e6:	f3bf 8f6f 	isb	sy
}
 80198ea:	4620      	mov	r0, r4
 80198ec:	bd38      	pop	{r3, r4, r5, pc}
 80198ee:	2400      	movs	r4, #0
 80198f0:	e7f7      	b.n	80198e2 <z_unpend_first_thread+0x28>

080198f2 <z_unpend_thread>:
{
 80198f2:	b510      	push	{r4, lr}
	__asm__ volatile(
 80198f4:	f04f 0310 	mov.w	r3, #16
 80198f8:	f3ef 8411 	mrs	r4, BASEPRI
 80198fc:	f383 8812 	msr	BASEPRI_MAX, r3
 8019900:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8019904:	f7ff ff45 	bl	8019792 <unpend_thread_no_timeout>
	__asm__ volatile(
 8019908:	f384 8811 	msr	BASEPRI, r4
 801990c:	f3bf 8f6f 	isb	sy
}
 8019910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019914:	3018      	adds	r0, #24
 8019916:	f000 b84b 	b.w	80199b0 <z_abort_timeout>

0801991a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801991a:	4603      	mov	r3, r0
 801991c:	b920      	cbnz	r0, 8019928 <z_reschedule_irqlock+0xe>
 801991e:	f3ef 8205 	mrs	r2, IPSR
 8019922:	b90a      	cbnz	r2, 8019928 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8019924:	f7f1 bbac 	b.w	800b080 <arch_swap>
 8019928:	f383 8811 	msr	BASEPRI, r3
 801992c:	f3bf 8f6f 	isb	sy
}
 8019930:	4770      	bx	lr

08019932 <z_reschedule_unlocked>:
	__asm__ volatile(
 8019932:	f04f 0310 	mov.w	r3, #16
 8019936:	f3ef 8011 	mrs	r0, BASEPRI
 801993a:	f383 8812 	msr	BASEPRI_MAX, r3
 801993e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8019942:	f7ff bfea 	b.w	801991a <z_reschedule_irqlock>

08019946 <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 8019946:	17c1      	asrs	r1, r0, #31
		t += off;
 8019948:	3063      	adds	r0, #99	; 0x63
{
 801994a:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 801994c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8019950:	f04f 0300 	mov.w	r3, #0
 8019954:	f141 0100 	adc.w	r1, r1, #0
 8019958:	f7e7 faf8 	bl	8000f4c <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 801995c:	17c1      	asrs	r1, r0, #31
 801995e:	f7f6 fc69 	bl	8010234 <z_tick_sleep>
}
 8019962:	2364      	movs	r3, #100	; 0x64
 8019964:	4358      	muls	r0, r3
 8019966:	bd08      	pop	{r3, pc}

08019968 <z_sched_wake>:
{
 8019968:	b538      	push	{r3, r4, r5, lr}
 801996a:	f04f 0310 	mov.w	r3, #16
 801996e:	f3ef 8511 	mrs	r5, BASEPRI
 8019972:	f383 8812 	msr	BASEPRI_MAX, r3
 8019976:	f3bf 8f6f 	isb	sy
	return list->head == list;
 801997a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801997c:	42a0      	cmp	r0, r4
 801997e:	d013      	beq.n	80199a8 <z_sched_wake+0x40>
		if (thread != NULL) {
 8019980:	b1a4      	cbz	r4, 80199ac <z_sched_wake+0x44>
 8019982:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8019986:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
 8019988:	4620      	mov	r0, r4
 801998a:	f7ff ff02 	bl	8019792 <unpend_thread_no_timeout>
 801998e:	f104 0018 	add.w	r0, r4, #24
 8019992:	f000 f80d 	bl	80199b0 <z_abort_timeout>
			ready_thread(thread);
 8019996:	4620      	mov	r0, r4
 8019998:	f7f6 fa40 	bl	800fe1c <ready_thread>
			ret = true;
 801999c:	2001      	movs	r0, #1
	__asm__ volatile(
 801999e:	f385 8811 	msr	BASEPRI, r5
 80199a2:	f3bf 8f6f 	isb	sy
}
 80199a6:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 80199a8:	2000      	movs	r0, #0
 80199aa:	e7f8      	b.n	801999e <z_sched_wake+0x36>
 80199ac:	4620      	mov	r0, r4
 80199ae:	e7f6      	b.n	801999e <z_sched_wake+0x36>

080199b0 <z_abort_timeout>:
{
 80199b0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80199b2:	f04f 0210 	mov.w	r2, #16
 80199b6:	f3ef 8411 	mrs	r4, BASEPRI
 80199ba:	f382 8812 	msr	BASEPRI_MAX, r2
 80199be:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80199c2:	6803      	ldr	r3, [r0, #0]
 80199c4:	b13b      	cbz	r3, 80199d6 <z_abort_timeout+0x26>
			remove_timeout(to);
 80199c6:	f7f6 fd59 	bl	801047c <remove_timeout>
			ret = 0;
 80199ca:	2000      	movs	r0, #0
	__asm__ volatile(
 80199cc:	f384 8811 	msr	BASEPRI, r4
 80199d0:	f3bf 8f6f 	isb	sy
}
 80199d4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80199d6:	f06f 0015 	mvn.w	r0, #21
 80199da:	e7f7      	b.n	80199cc <z_abort_timeout+0x1c>

080199dc <z_set_timeout_expiry>:
{
 80199dc:	b570      	push	{r4, r5, r6, lr}
 80199de:	4604      	mov	r4, r0
 80199e0:	460d      	mov	r5, r1
	__asm__ volatile(
 80199e2:	f04f 0310 	mov.w	r3, #16
 80199e6:	f3ef 8611 	mrs	r6, BASEPRI
 80199ea:	f383 8812 	msr	BASEPRI_MAX, r3
 80199ee:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 80199f2:	f7f6 fd1b 	bl	801042c <next_timeout>
			      || (ticks <= next_to);
 80199f6:	2801      	cmp	r0, #1
 80199f8:	dd07      	ble.n	8019a0a <z_set_timeout_expiry+0x2e>
 80199fa:	42a0      	cmp	r0, r4
 80199fc:	db05      	blt.n	8019a0a <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80199fe:	42a0      	cmp	r0, r4
 8019a00:	4629      	mov	r1, r5
 8019a02:	bfa8      	it	ge
 8019a04:	4620      	movge	r0, r4
 8019a06:	f7f4 fe19 	bl	800e63c <sys_clock_set_timeout>
	__asm__ volatile(
 8019a0a:	f386 8811 	msr	BASEPRI, r6
 8019a0e:	f3bf 8f6f 	isb	sy
}
 8019a12:	bd70      	pop	{r4, r5, r6, pc}

08019a14 <sys_clock_tick_get_32>:
{
 8019a14:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8019a16:	f7f6 fe25 	bl	8010664 <sys_clock_tick_get>
}
 8019a1a:	bd08      	pop	{r3, pc}

08019a1c <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 8019a1c:	f7f6 be22 	b.w	8010664 <sys_clock_tick_get>

08019a20 <k_timer_init>:
	timer->status = 0U;
 8019a20:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8019a22:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 8019a26:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 8019a2a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8019a2e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 8019a32:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 8019a34:	6343      	str	r3, [r0, #52]	; 0x34
}
 8019a36:	4770      	bx	lr

08019a38 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8019a38:	b510      	push	{r4, lr}
 8019a3a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 8019a3c:	f7ff ffb8 	bl	80199b0 <z_abort_timeout>

	if (inactive) {
 8019a40:	b9b0      	cbnz	r0, 8019a70 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 8019a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a44:	b10b      	cbz	r3, 8019a4a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8019a46:	4620      	mov	r0, r4
 8019a48:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8019a4a:	f104 0018 	add.w	r0, r4, #24
 8019a4e:	f7ff ff1d 	bl	801988c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8019a52:	b168      	cbz	r0, 8019a70 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8019a54:	f7ff fefa 	bl	801984c <z_ready_thread>
	__asm__ volatile(
 8019a58:	f04f 0310 	mov.w	r3, #16
 8019a5c:	f3ef 8011 	mrs	r0, BASEPRI
 8019a60:	f383 8812 	msr	BASEPRI_MAX, r3
 8019a64:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 8019a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a6c:	f7ff bf55 	b.w	801991a <z_reschedule_irqlock>
 8019a70:	bd10      	pop	{r4, pc}

08019a72 <add_event>:
{
 8019a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a74:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8019a76:	e9d0 1300 	ldrd	r1, r3, [r0]
 8019a7a:	4288      	cmp	r0, r1
 8019a7c:	4604      	mov	r4, r0
 8019a7e:	d105      	bne.n	8019a8c <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
 8019a80:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 8019a82:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 8019a86:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8019a88:	6065      	str	r5, [r4, #4]
 8019a8a:	e01d      	b.n	8019ac8 <add_event+0x56>
	if ((pending == NULL) ||
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d0f7      	beq.n	8019a80 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8019a90:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8019a92:	b100      	cbz	r0, 8019a96 <add_event+0x24>
 8019a94:	3860      	subs	r0, #96	; 0x60
 8019a96:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8019a9a:	4639      	mov	r1, r7
 8019a9c:	f7ff fe83 	bl	80197a6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8019aa0:	2800      	cmp	r0, #0
 8019aa2:	dced      	bgt.n	8019a80 <add_event+0xe>
	return list->head == list;
 8019aa4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019aa6:	42b4      	cmp	r4, r6
 8019aa8:	d0ea      	beq.n	8019a80 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019aaa:	2e00      	cmp	r6, #0
 8019aac:	d0e8      	beq.n	8019a80 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
 8019aae:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8019ab0:	b101      	cbz	r1, 8019ab4 <add_event+0x42>
 8019ab2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 8019ab4:	4638      	mov	r0, r7
 8019ab6:	f7ff fe76 	bl	80197a6 <z_sched_prio_cmp>
 8019aba:	2800      	cmp	r0, #0
 8019abc:	dd05      	ble.n	8019aca <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
 8019abe:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 8019ac0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 8019ac4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8019ac6:	6075      	str	r5, [r6, #4]
}
 8019ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8019aca:	6863      	ldr	r3, [r4, #4]
 8019acc:	429e      	cmp	r6, r3
 8019ace:	d0d7      	beq.n	8019a80 <add_event+0xe>
 8019ad0:	6836      	ldr	r6, [r6, #0]
 8019ad2:	e7ea      	b.n	8019aaa <add_event+0x38>

08019ad4 <register_events>:
{
 8019ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 8019ad8:	2500      	movs	r5, #0
{
 8019ada:	468b      	mov	fp, r1
 8019adc:	4614      	mov	r4, r2
 8019ade:	461f      	mov	r7, r3
 8019ae0:	4682      	mov	sl, r0
	int events_registered = 0;
 8019ae2:	462e      	mov	r6, r5
	event->poller = NULL;
 8019ae4:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 8019ae6:	455d      	cmp	r5, fp
 8019ae8:	db02      	blt.n	8019af0 <register_events+0x1c>
}
 8019aea:	4630      	mov	r0, r6
 8019aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019af0:	f04f 0310 	mov.w	r3, #16
 8019af4:	f3ef 8911 	mrs	r9, BASEPRI
 8019af8:	f383 8812 	msr	BASEPRI_MAX, r3
 8019afc:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 8019b00:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8019b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019b08:	3b01      	subs	r3, #1
 8019b0a:	2b07      	cmp	r3, #7
 8019b0c:	d80f      	bhi.n	8019b2e <register_events+0x5a>
 8019b0e:	e8df f003 	tbb	[pc, r3]
 8019b12:	041e      	.short	0x041e
 8019b14:	0e0e0a0e 	.word	0x0e0e0a0e
 8019b18:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
 8019b1a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019b1e:	689b      	ldr	r3, [r3, #8]
 8019b20:	b12b      	cbz	r3, 8019b2e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8019b22:	2302      	movs	r3, #2
 8019b24:	e020      	b.n	8019b68 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 8019b26:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	bb8b      	cbnz	r3, 8019b92 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 8019b2e:	bb47      	cbnz	r7, 8019b82 <register_events+0xae>
 8019b30:	7823      	ldrb	r3, [r4, #0]
 8019b32:	b333      	cbz	r3, 8019b82 <register_events+0xae>
	switch (event->type) {
 8019b34:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8019b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019b3c:	3b01      	subs	r3, #1
 8019b3e:	2b07      	cmp	r3, #7
 8019b40:	d830      	bhi.n	8019ba4 <register_events+0xd0>
 8019b42:	e8df f003 	tbb	[pc, r3]
 8019b46:	2833      	.short	0x2833
 8019b48:	2f2f282f 	.word	0x2f2f282f
 8019b4c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
 8019b4e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019b52:	689b      	ldr	r3, [r3, #8]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d0ea      	beq.n	8019b2e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 8019b58:	2301      	movs	r3, #1
 8019b5a:	e005      	b.n	8019b68 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 8019b5c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019b60:	6a1b      	ldr	r3, [r3, #32]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d0e3      	beq.n	8019b2e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 8019b66:	2310      	movs	r3, #16
	event->state |= state;
 8019b68:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 8019b6c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 8019b70:	f3c2 3186 	ubfx	r1, r2, #14, #7
 8019b74:	430b      	orrs	r3, r1
 8019b76:	f363 3294 	bfi	r2, r3, #14, #7
 8019b7a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 8019b7e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 8019b82:	f389 8811 	msr	BASEPRI, r9
 8019b86:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8019b8a:	3501      	adds	r5, #1
 8019b8c:	f10a 0a14 	add.w	sl, sl, #20
 8019b90:	e7a9      	b.n	8019ae6 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 8019b92:	2304      	movs	r3, #4
 8019b94:	e7e8      	b.n	8019b68 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
 8019b96:	f8da 0010 	ldr.w	r0, [sl, #16]
 8019b9a:	4622      	mov	r2, r4
 8019b9c:	4651      	mov	r1, sl
 8019b9e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 8019ba0:	f7ff ff67 	bl	8019a72 <add_event>
	event->poller = poller;
 8019ba4:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 8019ba8:	3601      	adds	r6, #1
 8019baa:	e7ea      	b.n	8019b82 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
 8019bac:	f8da 0010 	ldr.w	r0, [sl, #16]
 8019bb0:	4622      	mov	r2, r4
 8019bb2:	4651      	mov	r1, sl
 8019bb4:	e7f4      	b.n	8019ba0 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 8019bb6:	f8da 0010 	ldr.w	r0, [sl, #16]
 8019bba:	4622      	mov	r2, r4
 8019bbc:	4651      	mov	r1, sl
 8019bbe:	3024      	adds	r0, #36	; 0x24
 8019bc0:	e7ee      	b.n	8019ba0 <register_events+0xcc>

08019bc2 <signal_poll_event>:
{
 8019bc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
 8019bc6:	6884      	ldr	r4, [r0, #8]
{
 8019bc8:	4605      	mov	r5, r0
 8019bca:	460e      	mov	r6, r1
	if (poller != NULL) {
 8019bcc:	b144      	cbz	r4, 8019be0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 8019bce:	7863      	ldrb	r3, [r4, #1]
 8019bd0:	2b01      	cmp	r3, #1
 8019bd2:	d12e      	bne.n	8019c32 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
 8019bd4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8019bd8:	f013 0302 	ands.w	r3, r3, #2
 8019bdc:	d10a      	bne.n	8019bf4 <signal_poll_event+0x32>
		poller->is_polling = false;
 8019bde:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 8019be0:	68eb      	ldr	r3, [r5, #12]
 8019be2:	f3c3 3286 	ubfx	r2, r3, #14, #7
 8019be6:	4316      	orrs	r6, r2
	event->poller = NULL;
 8019be8:	2000      	movs	r0, #0
	event->state |= state;
 8019bea:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
 8019bee:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 8019bf0:	60eb      	str	r3, [r5, #12]
	return retcode;
 8019bf2:	e03e      	b.n	8019c72 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
 8019bf4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 8019bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019bfc:	bf08      	it	eq
 8019bfe:	f112 0f02 	cmneq.w	r2, #2
 8019c02:	d032      	beq.n	8019c6a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8019c04:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
 8019c08:	4640      	mov	r0, r8
 8019c0a:	f7ff fe72 	bl	80198f2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8019c0e:	2e08      	cmp	r6, #8
 8019c10:	bf0c      	ite	eq
 8019c12:	f06f 0303 	mvneq.w	r3, #3
 8019c16:	2300      	movne	r3, #0
 8019c18:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8019c1a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8019c1e:	06db      	lsls	r3, r3, #27
 8019c20:	d109      	bne.n	8019c36 <signal_poll_event+0x74>
 8019c22:	f854 7c48 	ldr.w	r7, [r4, #-72]
 8019c26:	b937      	cbnz	r7, 8019c36 <signal_poll_event+0x74>
	z_ready_thread(thread);
 8019c28:	4640      	mov	r0, r8
 8019c2a:	f7ff fe0f 	bl	801984c <z_ready_thread>
		poller->is_polling = false;
 8019c2e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 8019c30:	e7d6      	b.n	8019be0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 8019c32:	2b02      	cmp	r3, #2
 8019c34:	d001      	beq.n	8019c3a <signal_poll_event+0x78>
		poller->is_polling = false;
 8019c36:	2300      	movs	r3, #0
 8019c38:	e7d1      	b.n	8019bde <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8019c3a:	7823      	ldrb	r3, [r4, #0]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d0cf      	beq.n	8019be0 <signal_poll_event+0x1e>
 8019c40:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8019c44:	2f00      	cmp	r7, #0
 8019c46:	d0f2      	beq.n	8019c2e <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 8019c48:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 8019c4c:	f1a4 0914 	sub.w	r9, r4, #20
 8019c50:	f104 0014 	add.w	r0, r4, #20
 8019c54:	f7ff feac 	bl	80199b0 <z_abort_timeout>
		twork->poll_result = 0;
 8019c58:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
 8019c5c:	4649      	mov	r1, r9
 8019c5e:	4638      	mov	r0, r7
 8019c60:	f7ff fd6a 	bl	8019738 <z_work_submit_to_queue>
		poller->is_polling = false;
 8019c64:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 8019c68:	e7ba      	b.n	8019be0 <signal_poll_event+0x1e>
		poller->is_polling = false;
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
 8019c6e:	f06f 000a 	mvn.w	r0, #10
}
 8019c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019c76 <clear_event_registrations>:
	while (num_events--) {
 8019c76:	2314      	movs	r3, #20
{
 8019c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c7a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 8019c7e:	2400      	movs	r4, #0
	switch (event->type) {
 8019c80:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
 8019c84:	b901      	cbnz	r1, 8019c88 <clear_event_registrations+0x12>
}
 8019c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 8019c88:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
 8019c8c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 8019c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019c94:	2b08      	cmp	r3, #8
 8019c96:	f1a0 0714 	sub.w	r7, r0, #20
 8019c9a:	d80c      	bhi.n	8019cb6 <clear_event_registrations+0x40>
 8019c9c:	fa26 f303 	lsr.w	r3, r6, r3
 8019ca0:	07db      	lsls	r3, r3, #31
 8019ca2:	d508      	bpl.n	8019cb6 <clear_event_registrations+0x40>
	return node->next != NULL;
 8019ca4:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 8019ca8:	b12b      	cbz	r3, 8019cb6 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 8019caa:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 8019cae:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 8019cb0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 8019cb2:	e940 4405 	strd	r4, r4, [r0, #-20]
 8019cb6:	f382 8811 	msr	BASEPRI, r2
 8019cba:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8019cbe:	f04f 0310 	mov.w	r3, #16
 8019cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8019cc6:	f383 8812 	msr	BASEPRI_MAX, r3
 8019cca:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
 8019cce:	3901      	subs	r1, #1
 8019cd0:	4638      	mov	r0, r7
 8019cd2:	e7d7      	b.n	8019c84 <clear_event_registrations+0xe>

08019cd4 <k_poll_event_init>:
{
 8019cd4:	b510      	push	{r4, lr}
	event->type = type;
 8019cd6:	0552      	lsls	r2, r2, #21
 8019cd8:	0209      	lsls	r1, r1, #8
 8019cda:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
 8019cde:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8019ce2:	430a      	orrs	r2, r1
 8019ce4:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
 8019ce6:	2400      	movs	r4, #0
	event->type = type;
 8019ce8:	430a      	orrs	r2, r1
	event->obj = obj;
 8019cea:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
 8019cee:	6084      	str	r4, [r0, #8]
}
 8019cf0:	bd10      	pop	{r4, pc}

08019cf2 <z_handle_obj_poll_events>:
{
 8019cf2:	4603      	mov	r3, r0
	return list->head == list;
 8019cf4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8019cf6:	4283      	cmp	r3, r0
 8019cf8:	d008      	beq.n	8019d0c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 8019cfa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8019cfe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8019d00:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8019d02:	2300      	movs	r3, #0
	node->prev = NULL;
 8019d04:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 8019d08:	f7ff bf5b 	b.w	8019bc2 <signal_poll_event>
}
 8019d0c:	4770      	bx	lr

08019d0e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
 8019d0e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 8019d10:	e9c0 0000 	strd	r0, r0, [r0]
 8019d14:	6083      	str	r3, [r0, #8]
}
 8019d16:	4770      	bx	lr

08019d18 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
 8019d18:	2300      	movs	r3, #0
 8019d1a:	6083      	str	r3, [r0, #8]
}
 8019d1c:	4770      	bx	lr

08019d1e <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 8019d1e:	6883      	ldr	r3, [r0, #8]
 8019d20:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 8019d22:	68c3      	ldr	r3, [r0, #12]
 8019d24:	6013      	str	r3, [r2, #0]
}
 8019d26:	4770      	bx	lr
